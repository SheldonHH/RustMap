{"type": "source_file", "children": [{"type": "line_comment", "children": [], "start_byte": 0, "end_byte": 39, "start_point": [0, 0], "end_point": [0, 39], "text": "// use crate::bzip2::scc_101_mkCell::*;"}, {"type": "line_comment", "children": [], "start_byte": 40, "end_byte": 84, "start_point": [1, 0], "end_point": [1, 44], "text": "// use crate::global_vars::bzip2_c5::{Cell};"}, {"type": "line_comment", "children": [], "start_byte": 86, "end_byte": 116, "start_point": [3, 0], "end_point": [3, 30], "text": "// \u5047\u8bbeChar\u662fchar\u7684typedef\n// use "}, {"type": "line_comment", "children": [], "start_byte": 117, "end_byte": 156, "start_point": [4, 0], "end_point": [4, 39], "text": "rate::bzip2::scc_101_mkCell::*;\n// use "}, {"type": "line_comment", "children": [], "start_byte": 157, "end_byte": 201, "start_point": [5, 0], "end_point": [5, 44], "text": "rate::global_vars::bzip2_c5::{Cell};\n\n// \u5047\u8bbeC"}, {"type": "line_comment", "children": [], "start_byte": 203, "end_byte": 233, "start_point": [7, 0], "end_point": [7, 30], "text": "r\u662fchar\u7684typedef\npub type Char ="}, {"type": "type_item", "children": [{"type": "visibility_modifier", "children": [{"type": "pub", "children": [], "start_byte": 234, "end_byte": 237, "start_point": [8, 0], "end_point": [8, 3], "text": "cha"}], "start_byte": 234, "end_byte": 237, "start_point": [8, 0], "end_point": [8, 3], "text": "cha"}, {"type": "type", "children": [], "start_byte": 238, "end_byte": 242, "start_point": [8, 4], "end_point": [8, 8], "text": ";\n#["}, {"type": "type_identifier", "children": [], "start_byte": 243, "end_byte": 247, "start_point": [8, 9], "end_point": [8, 13], "text": "eriv"}, {"type": "=", "children": [], "start_byte": 248, "end_byte": 249, "start_point": [8, 14], "end_point": [8, 15], "text": "("}, {"type": "primitive_type", "children": [], "start_byte": 250, "end_byte": 254, "start_point": [8, 16], "end_point": [8, 20], "text": "lone"}, {"type": ";", "children": [], "start_byte": 254, "end_byte": 255, "start_point": [8, 20], "end_point": [8, 21], "text": ")"}], "start_byte": 234, "end_byte": 255, "start_point": [8, 0], "end_point": [8, 21], "text": "char;\n#[derive(Clone)"}, {"type": "attribute_item", "children": [{"type": "#", "children": [], "start_byte": 256, "end_byte": 257, "start_point": [9, 0], "end_point": [9, 1], "text": "\n"}, {"type": "[", "children": [], "start_byte": 257, "end_byte": 258, "start_point": [9, 1], "end_point": [9, 2], "text": "p"}, {"type": "attribute", "children": [{"type": "identifier", "children": [], "start_byte": 258, "end_byte": 264, "start_point": [9, 2], "end_point": [9, 8], "text": "ub str"}, {"type": "token_tree", "children": [{"type": "(", "children": [], "start_byte": 264, "end_byte": 265, "start_point": [9, 8], "end_point": [9, 9], "text": "u"}, {"type": "identifier", "children": [], "start_byte": 265, "end_byte": 270, "start_point": [9, 9], "end_point": [9, 14], "text": "ct Ce"}, {"type": ")", "children": [], "start_byte": 270, "end_byte": 271, "start_point": [9, 14], "end_point": [9, 15], "text": "l"}], "start_byte": 264, "end_byte": 271, "start_point": [9, 8], "end_point": [9, 15], "text": "uct Cel"}], "start_byte": 258, "end_byte": 271, "start_point": [9, 2], "end_point": [9, 15], "text": "ub struct Cel"}, {"type": "]", "children": [], "start_byte": 271, "end_byte": 272, "start_point": [9, 15], "end_point": [9, 16], "text": "l"}], "start_byte": 256, "end_byte": 272, "start_point": [9, 0], "end_point": [9, 16], "text": "\npub struct Cell"}, {"type": "struct_item", "children": [{"type": "visibility_modifier", "children": [{"type": "pub", "children": [], "start_byte": 273, "end_byte": 276, "start_point": [10, 0], "end_point": [10, 3], "text": "{\n "}], "start_byte": 273, "end_byte": 276, "start_point": [10, 0], "end_point": [10, 3], "text": "{\n "}, {"type": "struct", "children": [], "start_byte": 277, "end_byte": 283, "start_point": [10, 4], "end_point": [10, 10], "text": "  pub "}, {"type": "type_identifier", "children": [], "start_byte": 284, "end_byte": 288, "start_point": [10, 11], "end_point": [10, 15], "text": "ame:"}, {"type": "field_declaration_list", "children": [{"type": "{", "children": [], "start_byte": 289, "end_byte": 290, "start_point": [10, 16], "end_point": [10, 17], "text": "O"}, {"type": "field_declaration", "children": [{"type": "visibility_modifier", "children": [{"type": "pub", "children": [], "start_byte": 295, "end_byte": 298, "start_point": [11, 4], "end_point": [11, 7], "text": "<Bo"}], "start_byte": 295, "end_byte": 298, "start_point": [11, 4], "end_point": [11, 7], "text": "<Bo"}, {"type": "field_identifier", "children": [], "start_byte": 299, "end_byte": 303, "start_point": [11, 8], "end_point": [11, 12], "text": "<Str"}, {"type": ":", "children": [], "start_byte": 303, "end_byte": 304, "start_point": [11, 12], "end_point": [11, 13], "text": "i"}, {"type": "generic_type", "children": [{"type": "type_identifier", "children": [], "start_byte": 305, "end_byte": 311, "start_point": [11, 14], "end_point": [11, 20], "text": "g>>,\n "}, {"type": "type_arguments", "children": [{"type": "<", "children": [], "start_byte": 311, "end_byte": 312, "start_point": [11, 20], "end_point": [11, 21], "text": " "}, {"type": "generic_type", "children": [{"type": "type_identifier", "children": [], "start_byte": 312, "end_byte": 315, "start_point": [11, 21], "end_point": [11, 24], "text": "  p"}, {"type": "type_arguments", "children": [{"type": "<", "children": [], "start_byte": 315, "end_byte": 316, "start_point": [11, 24], "end_point": [11, 25], "text": "u"}, {"type": "type_identifier", "children": [], "start_byte": 316, "end_byte": 322, "start_point": [11, 25], "end_point": [11, 31], "text": "b link"}, {"type": ">", "children": [], "start_byte": 322, "end_byte": 323, "start_point": [11, 31], "end_point": [11, 32], "text": ":"}], "start_byte": 315, "end_byte": 323, "start_point": [11, 24], "end_point": [11, 32], "text": "ub link:"}], "start_byte": 312, "end_byte": 323, "start_point": [11, 21], "end_point": [11, 32], "text": "  pub link:"}, {"type": ">", "children": [], "start_byte": 323, "end_byte": 324, "start_point": [11, 32], "end_point": [11, 33], "text": " "}], "start_byte": 311, "end_byte": 324, "start_point": [11, 20], "end_point": [11, 33], "text": "   pub link: "}], "start_byte": 305, "end_byte": 324, "start_point": [11, 14], "end_point": [11, 33], "text": "g>>,\n    pub link: "}], "start_byte": 295, "end_byte": 324, "start_point": [11, 4], "end_point": [11, 33], "text": "<Box<String>>,\n    pub link: "}, {"type": ",", "children": [], "start_byte": 324, "end_byte": 325, "start_point": [11, 33], "end_point": [11, 34], "text": "O"}, {"type": "field_declaration", "children": [{"type": "visibility_modifier", "children": [{"type": "pub", "children": [], "start_byte": 330, "end_byte": 333, "start_point": [12, 4], "end_point": [12, 7], "text": "<Bo"}], "start_byte": 330, "end_byte": 333, "start_point": [12, 4], "end_point": [12, 7], "text": "<Bo"}, {"type": "field_identifier", "children": [], "start_byte": 334, "end_byte": 338, "start_point": [12, 8], "end_point": [12, 12], "text": "<Cel"}, {"type": ":", "children": [], "start_byte": 338, "end_byte": 339, "start_point": [12, 12], "end_point": [12, 13], "text": "l"}, {"type": "generic_type", "children": [{"type": "type_identifier", "children": [], "start_byte": 340, "end_byte": 346, "start_point": [12, 14], "end_point": [12, 20], "text": ">,\n}\n\n"}, {"type": "type_arguments", "children": [{"type": "<", "children": [], "start_byte": 346, "end_byte": 347, "start_point": [12, 20], "end_point": [12, 21], "text": "\n"}, {"type": "generic_type", "children": [{"type": "type_identifier", "children": [], "start_byte": 347, "end_byte": 350, "start_point": [12, 21], "end_point": [12, 24], "text": "imp"}, {"type": "type_arguments", "children": [{"type": "<", "children": [], "start_byte": 350, "end_byte": 351, "start_point": [12, 24], "end_point": [12, 25], "text": "l"}, {"type": "type_identifier", "children": [], "start_byte": 351, "end_byte": 355, "start_point": [12, 25], "end_point": [12, 29], "text": " Cel"}, {"type": ">", "children": [], "start_byte": 355, "end_byte": 356, "start_point": [12, 29], "end_point": [12, 30], "text": "l"}], "start_byte": 350, "end_byte": 356, "start_point": [12, 24], "end_point": [12, 30], "text": "l Cell"}], "start_byte": 347, "end_byte": 356, "start_point": [12, 21], "end_point": [12, 30], "text": "impl Cell"}, {"type": ">", "children": [], "start_byte": 356, "end_byte": 357, "start_point": [12, 30], "end_point": [12, 31], "text": " "}], "start_byte": 346, "end_byte": 357, "start_point": [12, 20], "end_point": [12, 31], "text": "\nimpl Cell "}], "start_byte": 340, "end_byte": 357, "start_point": [12, 14], "end_point": [12, 31], "text": ">,\n}\n\n\nimpl Cell "}], "start_byte": 330, "end_byte": 357, "start_point": [12, 4], "end_point": [12, 31], "text": "<Box<Cell>>,\n}\n\n\nimpl Cell "}, {"type": ",", "children": [], "start_byte": 357, "end_byte": 358, "start_point": [12, 31], "end_point": [12, 32], "text": "{"}, {"type": "}", "children": [], "start_byte": 359, "end_byte": 360, "start_point": [13, 0], "end_point": [13, 1], "text": " "}], "start_byte": 289, "end_byte": 360, "start_point": [10, 16], "end_point": [13, 1], "text": "Option<Box<String>>,\n    pub link: Option<Box<Cell>>,\n}\n\n\nimpl Cell {\n "}], "start_byte": 273, "end_byte": 360, "start_point": [10, 0], "end_point": [13, 1], "text": "{\n    pub name: Option<Box<String>>,\n    pub link: Option<Box<Cell>>,\n}\n\n\nimpl Cell {\n "}, {"type": "impl_item", "children": [{"type": "impl", "children": [], "start_byte": 363, "end_byte": 367, "start_point": [16, 0], "end_point": [16, 4], "text": "pub "}, {"type": "type_identifier", "children": [], "start_byte": 368, "end_byte": 372, "start_point": [16, 5], "end_point": [16, 9], "text": "n mk"}, {"type": "declaration_list", "children": [{"type": "{", "children": [], "start_byte": 373, "end_byte": 374, "start_point": [16, 10], "end_point": [16, 11], "text": "c"}, {"type": "function_item", "children": [{"type": "visibility_modifier", "children": [{"type": "pub", "children": [], "start_byte": 379, "end_byte": 382, "start_point": [17, 4], "end_point": [17, 7], "text": " ->"}], "start_byte": 379, "end_byte": 382, "start_point": [17, 4], "end_point": [17, 7], "text": " ->"}, {"type": "fn", "children": [], "start_byte": 383, "end_byte": 385, "start_point": [17, 8], "end_point": [17, 10], "text": "Se"}, {"type": "identifier", "children": [], "start_byte": 386, "end_byte": 393, "start_point": [17, 11], "end_point": [17, 18], "text": "f {\n   "}, {"type": "parameters", "children": [{"type": "(", "children": [], "start_byte": 393, "end_byte": 394, "start_point": [17, 18], "end_point": [17, 19], "text": " "}, {"type": ")", "children": [], "start_byte": 394, "end_byte": 395, "start_point": [17, 19], "end_point": [17, 20], "text": " "}], "start_byte": 393, "end_byte": 395, "start_point": [17, 18], "end_point": [17, 20], "text": "  "}, {"type": "->", "children": [], "start_byte": 396, "end_byte": 398, "start_point": [17, 21], "end_point": [17, 23], "text": "  "}, {"type": "type_identifier", "children": [], "start_byte": 399, "end_byte": 403, "start_point": [17, 24], "end_point": [17, 28], "text": "ell "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 404, "end_byte": 405, "start_point": [17, 29], "end_point": [17, 30], "text": "\n"}, {"type": "struct_expression", "children": [{"type": "type_identifier", "children": [], "start_byte": 414, "end_byte": 418, "start_point": [18, 8], "end_point": [18, 12], "text": "   n"}, {"type": "field_initializer_list", "children": [{"type": "{", "children": [], "start_byte": 419, "end_byte": 420, "start_point": [18, 13], "end_point": [18, 14], "text": "m"}, {"type": "field_initializer", "children": [{"type": "field_identifier", "children": [], "start_byte": 433, "end_byte": 437, "start_point": [19, 12], "end_point": [19, 16], "text": "    "}, {"type": ":", "children": [], "start_byte": 437, "end_byte": 438, "start_point": [19, 16], "end_point": [19, 17], "text": " "}, {"type": "identifier", "children": [], "start_byte": 439, "end_byte": 443, "start_point": [19, 18], "end_point": [19, 22], "text": "  li"}], "start_byte": 433, "end_byte": 443, "start_point": [19, 12], "end_point": [19, 22], "text": "        li"}, {"type": ",", "children": [], "start_byte": 443, "end_byte": 444, "start_point": [19, 22], "end_point": [19, 23], "text": "n"}, {"type": "field_initializer", "children": [{"type": "field_identifier", "children": [], "start_byte": 457, "end_byte": 461, "start_point": [20, 12], "end_point": [20, 16], "text": "    "}, {"type": ":", "children": [], "start_byte": 461, "end_byte": 462, "start_point": [20, 16], "end_point": [20, 17], "text": "}"}, {"type": "identifier", "children": [], "start_byte": 463, "end_byte": 467, "start_point": [20, 18], "end_point": [20, 22], "text": "    "}], "start_byte": 457, "end_byte": 467, "start_point": [20, 12], "end_point": [20, 22], "text": "    }\n    "}, {"type": ",", "children": [], "start_byte": 467, "end_byte": 468, "start_point": [20, 22], "end_point": [20, 23], "text": "}"}, {"type": "}", "children": [], "start_byte": 477, "end_byte": 478, "start_point": [21, 8], "end_point": [21, 9], "text": "\u9012"}], "start_byte": 419, "end_byte": 478, "start_point": [18, 13], "end_point": [21, 9], "text": "me: None,\n            link: None,\n        }\n    }\n     // \u9012"}], "start_byte": 414, "end_byte": 478, "start_point": [18, 8], "end_point": [21, 9], "text": "   name: None,\n            link: None,\n        }\n    }\n     // \u9012"}, {"type": "}", "children": [], "start_byte": 483, "end_byte": 484, "start_point": [22, 4], "end_point": [22, 5], "text": "\u5370"}], "start_byte": 404, "end_byte": 484, "start_point": [17, 29], "end_point": [22, 5], "text": "\n            name: None,\n            link: None,\n        }\n    }\n     // \u9012\u5f52\u51fd\u6570\u6765\u6253\u5370"}], "start_byte": 379, "end_byte": 484, "start_point": [17, 4], "end_point": [22, 5], "text": " -> Self {\n        Cell {\n            name: None,\n            link: None,\n        }\n    }\n     // \u9012\u5f52\u51fd\u6570\u6765\u6253\u5370"}, {"type": "line_comment", "children": [], "start_byte": 490, "end_byte": 520, "start_point": [23, 5], "end_point": [23, 35], "text": " // \u9012\u5f52\u904d\u5386 \ud83d\udd25\n     pub fn printLi"}, {"type": "line_comment", "children": [], "start_byte": 525, "end_byte": 545, "start_point": [24, 4], "end_point": [24, 24], "text": "ts(&self) {\n        "}, {"type": "function_item", "children": [{"type": "visibility_modifier", "children": [{"type": "pub", "children": [], "start_byte": 551, "end_byte": 554, "start_point": [25, 5], "end_point": [25, 8], "text": " So"}], "start_byte": 551, "end_byte": 554, "start_point": [25, 5], "end_point": [25, 8], "text": " So"}, {"type": "fn", "children": [], "start_byte": 555, "end_byte": 557, "start_point": [25, 9], "end_point": [25, 11], "text": "e("}, {"type": "identifier", "children": [], "start_byte": 558, "end_byte": 572, "start_point": [25, 12], "end_point": [25, 26], "text": "ef name) = sel"}, {"type": "parameters", "children": [{"type": "(", "children": [], "start_byte": 572, "end_byte": 573, "start_point": [25, 26], "end_point": [25, 27], "text": "f"}, {"type": "self_parameter", "children": [{"type": "&", "children": [], "start_byte": 573, "end_byte": 574, "start_point": [25, 27], "end_point": [25, 28], "text": "."}, {"type": "self", "children": [], "start_byte": 574, "end_byte": 578, "start_point": [25, 28], "end_point": [25, 32], "text": "name"}], "start_byte": 573, "end_byte": 578, "start_point": [25, 27], "end_point": [25, 32], "text": ".name"}, {"type": ")", "children": [], "start_byte": 578, "end_byte": 579, "start_point": [25, 32], "end_point": [25, 33], "text": " "}], "start_byte": 572, "end_byte": 579, "start_point": [25, 26], "end_point": [25, 33], "text": "f.name "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 580, "end_byte": 581, "start_point": [25, 34], "end_point": [25, 35], "text": "\n"}, {"type": "expression_statement", "children": [{"type": "if_expression", "children": [{"type": "if", "children": [], "start_byte": 590, "end_byte": 592, "start_point": [26, 8], "end_point": [26, 10], "text": "  "}, {"type": "let_condition", "children": [{"type": "let", "children": [], "start_byte": 593, "end_byte": 596, "start_point": [26, 11], "end_point": [26, 14], "text": "// "}, {"type": "tuple_struct_pattern", "children": [{"type": "identifier", "children": [], "start_byte": 597, "end_byte": 601, "start_point": [26, 15], "end_point": [26, 19], "text": "rint"}, {"type": "(", "children": [], "start_byte": 601, "end_byte": 602, "start_point": [26, 19], "end_point": [26, 20], "text": "l"}, {"type": "ref_pattern", "children": [{"type": "ref", "children": [], "start_byte": 602, "end_byte": 605, "start_point": [26, 20], "end_point": [26, 23], "text": "n!("}, {"type": "identifier", "children": [], "start_byte": 606, "end_byte": 610, "start_point": [26, 24], "end_point": [26, 28], "text": "Cell"}], "start_byte": 602, "end_byte": 610, "start_point": [26, 20], "end_point": [26, 28], "text": "n!(\"Cell"}, {"type": ")", "children": [], "start_byte": 610, "end_byte": 611, "start_point": [26, 28], "end_point": [26, 29], "text": " "}], "start_byte": 597, "end_byte": 611, "start_point": [26, 15], "end_point": [26, 29], "text": "rintln!(\"Cell "}, {"type": "=", "children": [], "start_byte": 612, "end_byte": 613, "start_point": [26, 30], "end_point": [26, 31], "text": "a"}, {"type": "field_expression", "children": [{"type": "self", "children": [], "start_byte": 614, "end_byte": 618, "start_point": [26, 32], "end_point": [26, 36], "text": "e: {"}, {"type": ".", "children": [], "start_byte": 618, "end_byte": 619, "start_point": [26, 36], "end_point": [26, 37], "text": "}"}, {"type": "field_identifier", "children": [], "start_byte": 619, "end_byte": 623, "start_point": [26, 37], "end_point": [26, 41], "text": "\", n"}], "start_byte": 614, "end_byte": 623, "start_point": [26, 32], "end_point": [26, 41], "text": "e: {}\", n"}], "start_byte": 593, "end_byte": 623, "start_point": [26, 11], "end_point": [26, 41], "text": "// println!(\"Cell name: {}\", n"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 624, "end_byte": 625, "start_point": [26, 42], "end_point": [26, 43], "text": "m"}, {"type": "line_comment", "children": [], "start_byte": 638, "end_byte": 673, "start_point": [27, 12], "end_point": [27, 47], "text": " else {\n            // println!(\"Ce"}, {"type": "}", "children": [], "start_byte": 682, "end_byte": 683, "start_point": [28, 8], "end_point": [28, 9], "text": "("}], "start_byte": 624, "end_byte": 683, "start_point": [26, 42], "end_point": [28, 9], "text": "me);\n        } else {\n            // println!(\"Cell name: ("}, {"type": "else_clause", "children": [{"type": "else", "children": [], "start_byte": 684, "end_byte": 688, "start_point": [28, 10], "end_point": [28, 14], "text": "one)"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 689, "end_byte": 690, "start_point": [28, 15], "end_point": [28, 16], "text": ")"}, {"type": "line_comment", "children": [], "start_byte": 703, "end_byte": 736, "start_point": [29, 12], "end_point": [29, 45], "text": "        if let Some(ref link) = s"}, {"type": "}", "children": [], "start_byte": 745, "end_byte": 746, "start_point": [30, 8], "end_point": [30, 9], "text": "{"}], "start_byte": 689, "end_byte": 746, "start_point": [28, 15], "end_point": [30, 9], "text": ");\n        }\n\n        if let Some(ref link) = self.link {"}], "start_byte": 684, "end_byte": 746, "start_point": [28, 10], "end_point": [30, 9], "text": "one)\");\n        }\n\n        if let Some(ref link) = self.link {"}], "start_byte": 590, "end_byte": 746, "start_point": [26, 8], "end_point": [30, 9], "text": "   // println!(\"Cell name: {}\", name);\n        } else {\n            // println!(\"Cell name: (none)\");\n        }\n\n        if let Some(ref link) = self.link {"}], "start_byte": 590, "end_byte": 746, "start_point": [26, 8], "end_point": [30, 9], "text": "   // println!(\"Cell name: {}\", name);\n        } else {\n            // println!(\"Cell name: (none)\");\n        }\n\n        if let Some(ref link) = self.link {"}, {"type": "expression_statement", "children": [{"type": "if_expression", "children": [{"type": "if", "children": [], "start_byte": 756, "end_byte": 758, "start_point": [32, 8], "end_point": [32, 10], "text": "  "}, {"type": "let_condition", "children": [{"type": "let", "children": [], "start_byte": 759, "end_byte": 762, "start_point": [32, 11], "end_point": [32, 14], "text": "lin"}, {"type": "tuple_struct_pattern", "children": [{"type": "identifier", "children": [], "start_byte": 763, "end_byte": 767, "start_point": [32, 15], "end_point": [32, 19], "text": ".pri"}, {"type": "(", "children": [], "start_byte": 767, "end_byte": 768, "start_point": [32, 19], "end_point": [32, 20], "text": "n"}, {"type": "ref_pattern", "children": [{"type": "ref", "children": [], "start_byte": 768, "end_byte": 771, "start_point": [32, 20], "end_point": [32, 23], "text": "tLi"}, {"type": "identifier", "children": [], "start_byte": 772, "end_byte": 776, "start_point": [32, 24], "end_point": [32, 28], "text": "kLis"}], "start_byte": 768, "end_byte": 776, "start_point": [32, 20], "end_point": [32, 28], "text": "tLinkLis"}, {"type": ")", "children": [], "start_byte": 776, "end_byte": 777, "start_point": [32, 28], "end_point": [32, 29], "text": "t"}], "start_byte": 763, "end_byte": 777, "start_point": [32, 15], "end_point": [32, 29], "text": ".printLinkList"}, {"type": "=", "children": [], "start_byte": 778, "end_byte": 779, "start_point": [32, 30], "end_point": [32, 31], "text": "("}, {"type": "field_expression", "children": [{"type": "self", "children": [], "start_byte": 780, "end_byte": 784, "start_point": [32, 32], "end_point": [32, 36], "text": "; //"}, {"type": ".", "children": [], "start_byte": 784, "end_byte": 785, "start_point": [32, 36], "end_point": [32, 37], "text": " "}, {"type": "field_identifier", "children": [], "start_byte": 785, "end_byte": 789, "start_point": [32, 37], "end_point": [32, 41], "text": "\u9012\u5f52\u8c03\u7528"}], "start_byte": 780, "end_byte": 789, "start_point": [32, 32], "end_point": [32, 41], "text": "; // \u9012\u5f52\u8c03\u7528"}], "start_byte": 759, "end_byte": 789, "start_point": [32, 11], "end_point": [32, 41], "text": "link.printLinkLists(); // \u9012\u5f52\u8c03\u7528"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 790, "end_byte": 791, "start_point": [32, 42], "end_point": [32, 43], "text": " "}, {"type": "expression_statement", "children": [{"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 804, "end_byte": 808, "start_point": [33, 12], "end_point": [33, 16], "text": "}\n  "}, {"type": ".", "children": [], "start_byte": 808, "end_byte": 809, "start_point": [33, 16], "end_point": [33, 17], "text": " "}, {"type": "field_identifier", "children": [], "start_byte": 809, "end_byte": 823, "start_point": [33, 17], "end_point": [33, 31], "text": " pub fn snoc_s"}], "start_byte": 804, "end_byte": 823, "start_point": [33, 12], "end_point": [33, 31], "text": "}\n    pub fn snoc_s"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 823, "end_byte": 824, "start_point": [33, 31], "end_point": [33, 32], "text": "t"}, {"type": ")", "children": [], "start_byte": 824, "end_byte": 825, "start_point": [33, 32], "end_point": [33, 33], "text": "r"}], "start_byte": 823, "end_byte": 825, "start_point": [33, 31], "end_point": [33, 33], "text": "tr"}], "start_byte": 804, "end_byte": 825, "start_point": [33, 12], "end_point": [33, 33], "text": "}\n    pub fn snoc_str"}, {"type": ";", "children": [], "start_byte": 825, "end_byte": 826, "start_point": [33, 33], "end_point": [33, 34], "text": "i"}], "start_byte": 804, "end_byte": 826, "start_point": [33, 12], "end_point": [33, 34], "text": "}\n    pub fn snoc_stri"}, {"type": "line_comment", "children": [], "start_byte": 827, "end_byte": 842, "start_point": [33, 35], "end_point": [33, 50], "text": "g(mut self, nam"}, {"type": "}", "children": [], "start_byte": 851, "end_byte": 852, "start_point": [34, 8], "end_point": [34, 9], "text": "-"}], "start_byte": 790, "end_byte": 852, "start_point": [32, 42], "end_point": [34, 9], "text": "        }\n    }\n    pub fn snoc_string(mut self, name: &str) -"}], "start_byte": 756, "end_byte": 852, "start_point": [32, 8], "end_point": [34, 9], "text": "   link.printLinkLists(); // \u9012\u5f52\u8c03\u7528\n        }\n    }\n    pub fn snoc_string(mut self, name: &str) -"}], "start_byte": 756, "end_byte": 852, "start_point": [32, 8], "end_point": [34, 9], "text": "   link.printLinkLists(); // \u9012\u5f52\u8c03\u7528\n        }\n    }\n    pub fn snoc_string(mut self, name: &str) -"}, {"type": "}", "children": [], "start_byte": 857, "end_byte": 858, "start_point": [35, 4], "end_point": [35, 5], "text": "f"}], "start_byte": 580, "end_byte": 858, "start_point": [25, 34], "end_point": [35, 5], "text": "\n            // println!(\"Cell name: {}\", name);\n        } else {\n            // println!(\"Cell name: (none)\");\n        }\n\n        if let Some(ref link) = self.link {\n            link.printLinkLists(); // \u9012\u5f52\u8c03\u7528\n        }\n    }\n    pub fn snoc_string(mut self, name: &str) -> Self"}], "start_byte": 551, "end_byte": 858, "start_point": [25, 5], "end_point": [35, 5], "text": " Some(ref name) = self.name {\n            // println!(\"Cell name: {}\", name);\n        } else {\n            // println!(\"Cell name: (none)\");\n        }\n\n        if let Some(ref link) = self.link {\n            link.printLinkLists(); // \u9012\u5f52\u8c03\u7528\n        }\n    }\n    pub fn snoc_string(mut self, name: &str) -> Self"}, {"type": "function_item", "children": [{"type": "visibility_modifier", "children": [{"type": "pub", "children": [], "start_byte": 863, "end_byte": 866, "start_point": [36, 4], "end_point": [36, 7], "text": "   "}], "start_byte": 863, "end_byte": 866, "start_point": [36, 4], "end_point": [36, 7], "text": "   "}, {"type": "fn", "children": [], "start_byte": 867, "end_byte": 869, "start_point": [36, 8], "end_point": [36, 10], "text": "  "}, {"type": "identifier", "children": [], "start_byte": 870, "end_byte": 881, "start_point": [36, 11], "end_point": [36, 22], "text": "f self.name"}, {"type": "parameters", "children": [{"type": "(", "children": [], "start_byte": 881, "end_byte": 882, "start_point": [36, 22], "end_point": [36, 23], "text": "."}, {"type": "self_parameter", "children": [{"type": "mutable_specifier", "children": [], "start_byte": 882, "end_byte": 885, "start_point": [36, 23], "end_point": [36, 26], "text": "is_"}, {"type": "self", "children": [], "start_byte": 886, "end_byte": 890, "start_point": [36, 27], "end_point": [36, 31], "text": "one("}], "start_byte": 882, "end_byte": 890, "start_point": [36, 23], "end_point": [36, 31], "text": "is_none("}, {"type": ",", "children": [], "start_byte": 890, "end_byte": 891, "start_point": [36, 31], "end_point": [36, 32], "text": ")"}, {"type": "parameter", "children": [{"type": "identifier", "children": [], "start_byte": 892, "end_byte": 896, "start_point": [36, 33], "end_point": [36, 37], "text": "{\n  "}, {"type": ":", "children": [], "start_byte": 896, "end_byte": 897, "start_point": [36, 37], "end_point": [36, 38], "text": " "}, {"type": "reference_type", "children": [{"type": "&", "children": [], "start_byte": 898, "end_byte": 899, "start_point": [36, 39], "end_point": [36, 40], "text": " "}, {"type": "primitive_type", "children": [], "start_byte": 899, "end_byte": 902, "start_point": [36, 40], "end_point": [36, 43], "text": "   "}], "start_byte": 898, "end_byte": 902, "start_point": [36, 39], "end_point": [36, 43], "text": "    "}], "start_byte": 892, "end_byte": 902, "start_point": [36, 33], "end_point": [36, 43], "text": "{\n        "}, {"type": ")", "children": [], "start_byte": 902, "end_byte": 903, "start_point": [36, 43], "end_point": [36, 44], "text": " "}], "start_byte": 881, "end_byte": 903, "start_point": [36, 22], "end_point": [36, 44], "text": ".is_none() {\n         "}, {"type": "->", "children": [], "start_byte": 904, "end_byte": 906, "start_point": [36, 45], "end_point": [36, 47], "text": "  "}, {"type": "type_identifier", "children": [], "start_byte": 907, "end_byte": 911, "start_point": [36, 48], "end_point": [36, 52], "text": "et m"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 912, "end_byte": 913, "start_point": [36, 53], "end_point": [36, 54], "text": "t"}, {"type": "expression_statement", "children": [{"type": "if_expression", "children": [{"type": "if", "children": [], "start_byte": 922, "end_byte": 924, "start_point": [37, 8], "end_point": [37, 10], "text": " ="}, {"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "field_expression", "children": [{"type": "self", "children": [], "start_byte": 925, "end_byte": 929, "start_point": [37, 11], "end_point": [37, 15], "text": "Cell"}, {"type": ".", "children": [], "start_byte": 929, "end_byte": 930, "start_point": [37, 15], "end_point": [37, 16], "text": ":"}, {"type": "field_identifier", "children": [], "start_byte": 930, "end_byte": 934, "start_point": [37, 16], "end_point": [37, 20], "text": ":mk_"}], "start_byte": 925, "end_byte": 934, "start_point": [37, 11], "end_point": [37, 20], "text": "Cell::mk_"}, {"type": ".", "children": [], "start_byte": 934, "end_byte": 935, "start_point": [37, 20], "end_point": [37, 21], "text": "c"}, {"type": "field_identifier", "children": [], "start_byte": 935, "end_byte": 942, "start_point": [37, 21], "end_point": [37, 28], "text": "ell();\n"}], "start_byte": 925, "end_byte": 942, "start_point": [37, 11], "end_point": [37, 28], "text": "Cell::mk_cell();\n"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 942, "end_byte": 943, "start_point": [37, 28], "end_point": [37, 29], "text": " "}, {"type": ")", "children": [], "start_byte": 943, "end_byte": 944, "start_point": [37, 29], "end_point": [37, 30], "text": " "}], "start_byte": 942, "end_byte": 944, "start_point": [37, 28], "end_point": [37, 30], "text": "  "}], "start_byte": 925, "end_byte": 944, "start_point": [37, 11], "end_point": [37, 30], "text": "Cell::mk_cell();\n  "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 945, "end_byte": 946, "start_point": [37, 31], "end_point": [37, 32], "text": " "}, {"type": "let_declaration", "children": [{"type": "let", "children": [], "start_byte": 959, "end_byte": 962, "start_point": [38, 12], "end_point": [38, 15], "text": "ell"}, {"type": "mutable_specifier", "children": [], "start_byte": 963, "end_byte": 966, "start_point": [38, 16], "end_point": [38, 19], "text": "nam"}, {"type": "identifier", "children": [], "start_byte": 967, "end_byte": 975, "start_point": [38, 20], "end_point": [38, 28], "text": " = Some("}, {"type": "=", "children": [], "start_byte": 976, "end_byte": 977, "start_point": [38, 29], "end_point": [38, 30], "text": "o"}, {"type": "call_expression", "children": [{"type": "scoped_identifier", "children": [{"type": "identifier", "children": [], "start_byte": 978, "end_byte": 982, "start_point": [38, 31], "end_point": [38, 35], "text": "::ne"}, {"type": "::", "children": [], "start_byte": 982, "end_byte": 984, "start_point": [38, 35], "end_point": [38, 37], "text": "w("}, {"type": "identifier", "children": [], "start_byte": 984, "end_byte": 991, "start_point": [38, 37], "end_point": [38, 44], "text": "name.to"}], "start_byte": 978, "end_byte": 991, "start_point": [38, 31], "end_point": [38, 44], "text": "::new(name.to"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 991, "end_byte": 992, "start_point": [38, 44], "end_point": [38, 45], "text": "_"}, {"type": ")", "children": [], "start_byte": 992, "end_byte": 993, "start_point": [38, 45], "end_point": [38, 46], "text": "o"}], "start_byte": 991, "end_byte": 993, "start_point": [38, 44], "end_point": [38, 46], "text": "_o"}], "start_byte": 978, "end_byte": 993, "start_point": [38, 31], "end_point": [38, 46], "text": "::new(name.to_o"}, {"type": ";", "children": [], "start_byte": 993, "end_byte": 994, "start_point": [38, 46], "end_point": [38, 47], "text": "w"}], "start_byte": 959, "end_byte": 994, "start_point": [38, 12], "end_point": [38, 47], "text": "ell.name = Some(Box::new(name.to_ow"}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 1007, "end_byte": 1015, "start_point": [39, 12], "end_point": [39, 20], "text": "        "}, {"type": ".", "children": [], "start_byte": 1015, "end_byte": 1016, "start_point": [39, 20], "end_point": [39, 21], "text": "n"}, {"type": "field_identifier", "children": [], "start_byte": 1016, "end_byte": 1020, "start_point": [39, 21], "end_point": [39, 25], "text": "ew_c"}], "start_byte": 1007, "end_byte": 1020, "start_point": [39, 12], "end_point": [39, 25], "text": "        new_c"}, {"type": "=", "children": [], "start_byte": 1021, "end_byte": 1022, "start_point": [39, 26], "end_point": [39, 27], "text": "l"}, {"type": "call_expression", "children": [{"type": "identifier", "children": [], "start_byte": 1023, "end_byte": 1027, "start_point": [39, 28], "end_point": [39, 32], "text": "\n   "}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 1027, "end_byte": 1028, "start_point": [39, 32], "end_point": [39, 33], "text": " "}, {"type": "call_expression", "children": [{"type": "scoped_identifier", "children": [{"type": "identifier", "children": [], "start_byte": 1028, "end_byte": 1031, "start_point": [39, 33], "end_point": [39, 36], "text": "   "}, {"type": "::", "children": [], "start_byte": 1031, "end_byte": 1033, "start_point": [39, 36], "end_point": [39, 38], "text": " }"}, {"type": "identifier", "children": [], "start_byte": 1033, "end_byte": 1036, "start_point": [39, 38], "end_point": [39, 41], "text": " el"}], "start_byte": 1028, "end_byte": 1036, "start_point": [39, 33], "end_point": [39, 41], "text": "    } el"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 1036, "end_byte": 1037, "start_point": [39, 41], "end_point": [39, 42], "text": "s"}, {"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 1037, "end_byte": 1041, "start_point": [39, 42], "end_point": [39, 46], "text": "e {\n"}, {"type": ".", "children": [], "start_byte": 1041, "end_byte": 1042, "start_point": [39, 46], "end_point": [39, 47], "text": " "}, {"type": "field_identifier", "children": [], "start_byte": 1042, "end_byte": 1050, "start_point": [39, 47], "end_point": [39, 55], "text": "        "}], "start_byte": 1037, "end_byte": 1050, "start_point": [39, 42], "end_point": [39, 55], "text": "e {\n         "}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 1050, "end_byte": 1051, "start_point": [39, 55], "end_point": [39, 56], "text": " "}, {"type": ")", "children": [], "start_byte": 1051, "end_byte": 1052, "start_point": [39, 56], "end_point": [39, 57], "text": " "}], "start_byte": 1050, "end_byte": 1052, "start_point": [39, 55], "end_point": [39, 57], "text": "  "}], "start_byte": 1037, "end_byte": 1052, "start_point": [39, 42], "end_point": [39, 57], "text": "e {\n           "}, {"type": ")", "children": [], "start_byte": 1052, "end_byte": 1053, "start_point": [39, 57], "end_point": [39, 58], "text": " "}], "start_byte": 1036, "end_byte": 1053, "start_point": [39, 41], "end_point": [39, 58], "text": "se {\n            "}], "start_byte": 1028, "end_byte": 1053, "start_point": [39, 33], "end_point": [39, 58], "text": "    } else {\n            "}, {"type": ")", "children": [], "start_byte": 1053, "end_byte": 1054, "start_point": [39, 58], "end_point": [39, 59], "text": "l"}], "start_byte": 1027, "end_byte": 1054, "start_point": [39, 32], "end_point": [39, 59], "text": "     } else {\n            l"}], "start_byte": 1023, "end_byte": 1054, "start_point": [39, 28], "end_point": [39, 59], "text": "\n        } else {\n            l"}], "start_byte": 1007, "end_byte": 1054, "start_point": [39, 12], "end_point": [39, 59], "text": "        new_cell\n        } else {\n            l"}, {"type": ";", "children": [], "start_byte": 1054, "end_byte": 1055, "start_point": [39, 59], "end_point": [39, 60], "text": "e"}], "start_byte": 1007, "end_byte": 1055, "start_point": [39, 12], "end_point": [39, 60], "text": "        new_cell\n        } else {\n            le"}, {"type": "identifier", "children": [], "start_byte": 1068, "end_byte": 1076, "start_point": [40, 12], "end_point": [40, 20], "text": "mut self"}, {"type": "}", "children": [], "start_byte": 1085, "end_byte": 1086, "start_point": [41, 8], "end_point": [41, 9], "text": " "}], "start_byte": 945, "end_byte": 1086, "start_point": [37, 31], "end_point": [41, 9], "text": "         new_cell.name = Some(Box::new(name.to_owned()));\n            new_cell\n        } else {\n            let mut tmp = &mut self;\n        "}, {"type": "else_clause", "children": [{"type": "else", "children": [], "start_byte": 1087, "end_byte": 1091, "start_point": [41, 10], "end_point": [41, 14], "text": "   w"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 1092, "end_byte": 1093, "start_point": [41, 15], "end_point": [41, 16], "text": "i"}, {"type": "let_declaration", "children": [{"type": "let", "children": [], "start_byte": 1106, "end_byte": 1109, "start_point": [42, 12], "end_point": [42, 15], "text": "s_s"}, {"type": "mutable_specifier", "children": [], "start_byte": 1110, "end_byte": 1113, "start_point": [42, 16], "end_point": [42, 19], "text": "me("}, {"type": "identifier", "children": [], "start_byte": 1114, "end_byte": 1117, "start_point": [42, 20], "end_point": [42, 23], "text": " {\n"}, {"type": "=", "children": [], "start_byte": 1118, "end_byte": 1119, "start_point": [42, 24], "end_point": [42, 25], "text": " "}, {"type": "reference_expression", "children": [{"type": "&", "children": [], "start_byte": 1120, "end_byte": 1121, "start_point": [42, 26], "end_point": [42, 27], "text": " "}, {"type": "mutable_specifier", "children": [], "start_byte": 1121, "end_byte": 1124, "start_point": [42, 27], "end_point": [42, 30], "text": "   "}, {"type": "self", "children": [], "start_byte": 1125, "end_byte": 1129, "start_point": [42, 31], "end_point": [42, 35], "text": "    "}], "start_byte": 1120, "end_byte": 1129, "start_point": [42, 26], "end_point": [42, 35], "text": "         "}, {"type": ";", "children": [], "start_byte": 1129, "end_byte": 1130, "start_point": [42, 35], "end_point": [42, 36], "text": " "}], "start_byte": 1106, "end_byte": 1130, "start_point": [42, 12], "end_point": [42, 36], "text": "s_some() {\n             "}, {"type": "expression_statement", "children": [{"type": "while_expression", "children": [{"type": "while", "children": [], "start_byte": 1143, "end_byte": 1148, "start_point": [43, 12], "end_point": [43, 17], "text": "link."}, {"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 1149, "end_byte": 1152, "start_point": [43, 18], "end_point": [43, 21], "text": "s_m"}, {"type": ".", "children": [], "start_byte": 1152, "end_byte": 1153, "start_point": [43, 21], "end_point": [43, 22], "text": "u"}, {"type": "field_identifier", "children": [], "start_byte": 1153, "end_byte": 1157, "start_point": [43, 22], "end_point": [43, 26], "text": "t()."}], "start_byte": 1149, "end_byte": 1157, "start_point": [43, 18], "end_point": [43, 26], "text": "s_mut()."}, {"type": ".", "children": [], "start_byte": 1157, "end_byte": 1158, "start_point": [43, 26], "end_point": [43, 27], "text": "u"}, {"type": "field_identifier", "children": [], "start_byte": 1158, "end_byte": 1165, "start_point": [43, 27], "end_point": [43, 34], "text": "nwrap()"}], "start_byte": 1149, "end_byte": 1165, "start_point": [43, 18], "end_point": [43, 34], "text": "s_mut().unwrap()"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 1165, "end_byte": 1166, "start_point": [43, 34], "end_point": [43, 35], "text": ";"}, {"type": ")", "children": [], "start_byte": 1166, "end_byte": 1167, "start_point": [43, 35], "end_point": [43, 36], "text": "\n"}], "start_byte": 1165, "end_byte": 1167, "start_point": [43, 34], "end_point": [43, 36], "text": ";\n"}], "start_byte": 1149, "end_byte": 1167, "start_point": [43, 18], "end_point": [43, 36], "text": "s_mut().unwrap();\n"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 1168, "end_byte": 1169, "start_point": [43, 37], "end_point": [43, 38], "text": " "}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 1186, "end_byte": 1189, "start_point": [44, 16], "end_point": [44, 19], "text": "   "}, {"type": "=", "children": [], "start_byte": 1190, "end_byte": 1191, "start_point": [44, 20], "end_point": [44, 21], "text": " "}, {"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 1192, "end_byte": 1195, "start_point": [44, 22], "end_point": [44, 25], "text": " tm"}, {"type": ".", "children": [], "start_byte": 1195, "end_byte": 1196, "start_point": [44, 25], "end_point": [44, 26], "text": "p"}, {"type": "field_identifier", "children": [], "start_byte": 1196, "end_byte": 1200, "start_point": [44, 26], "end_point": [44, 30], "text": ".lin"}], "start_byte": 1192, "end_byte": 1200, "start_point": [44, 22], "end_point": [44, 30], "text": " tmp.lin"}, {"type": ".", "children": [], "start_byte": 1200, "end_byte": 1201, "start_point": [44, 30], "end_point": [44, 31], "text": "k"}, {"type": "field_identifier", "children": [], "start_byte": 1201, "end_byte": 1207, "start_point": [44, 31], "end_point": [44, 37], "text": " = Som"}], "start_byte": 1192, "end_byte": 1207, "start_point": [44, 22], "end_point": [44, 37], "text": " tmp.link = Som"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 1207, "end_byte": 1208, "start_point": [44, 37], "end_point": [44, 38], "text": "e"}, {"type": ")", "children": [], "start_byte": 1208, "end_byte": 1209, "start_point": [44, 38], "end_point": [44, 39], "text": "("}], "start_byte": 1207, "end_byte": 1209, "start_point": [44, 37], "end_point": [44, 39], "text": "e("}], "start_byte": 1192, "end_byte": 1209, "start_point": [44, 22], "end_point": [44, 39], "text": " tmp.link = Some("}, {"type": ".", "children": [], "start_byte": 1209, "end_byte": 1210, "start_point": [44, 39], "end_point": [44, 40], "text": "B"}, {"type": "field_identifier", "children": [], "start_byte": 1210, "end_byte": 1216, "start_point": [44, 40], "end_point": [44, 46], "text": "ox::ne"}], "start_byte": 1192, "end_byte": 1216, "start_point": [44, 22], "end_point": [44, 46], "text": " tmp.link = Some(Box::ne"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 1216, "end_byte": 1217, "start_point": [44, 46], "end_point": [44, 47], "text": "w"}, {"type": ")", "children": [], "start_byte": 1217, "end_byte": 1218, "start_point": [44, 47], "end_point": [44, 48], "text": "("}], "start_byte": 1216, "end_byte": 1218, "start_point": [44, 46], "end_point": [44, 48], "text": "w("}], "start_byte": 1192, "end_byte": 1218, "start_point": [44, 22], "end_point": [44, 48], "text": " tmp.link = Some(Box::new("}], "start_byte": 1186, "end_byte": 1218, "start_point": [44, 16], "end_point": [44, 48], "text": "       tmp.link = Some(Box::new("}, {"type": ";", "children": [], "start_byte": 1218, "end_byte": 1219, "start_point": [44, 48], "end_point": [44, 49], "text": "C"}], "start_byte": 1186, "end_byte": 1219, "start_point": [44, 16], "end_point": [44, 49], "text": "       tmp.link = Some(Box::new(C"}, {"type": "}", "children": [], "start_byte": 1232, "end_byte": 1233, "start_point": [45, 12], "end_point": [45, 13], "text": ")"}], "start_byte": 1168, "end_byte": 1233, "start_point": [43, 37], "end_point": [45, 13], "text": "           }\n            tmp.link = Some(Box::new(Cell::mk_cell()"}], "start_byte": 1143, "end_byte": 1233, "start_point": [43, 12], "end_point": [45, 13], "text": "link.as_mut().unwrap();\n            }\n            tmp.link = Some(Box::new(Cell::mk_cell()"}], "start_byte": 1143, "end_byte": 1233, "start_point": [43, 12], "end_point": [45, 13], "text": "link.as_mut().unwrap();\n            }\n            tmp.link = Some(Box::new(Cell::mk_cell()"}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 1246, "end_byte": 1249, "start_point": [46, 12], "end_point": [46, 15], "text": "nam"}, {"type": ".", "children": [], "start_byte": 1249, "end_byte": 1250, "start_point": [46, 15], "end_point": [46, 16], "text": "e"}, {"type": "field_identifier", "children": [], "start_byte": 1250, "end_byte": 1254, "start_point": [46, 16], "end_point": [46, 20], "text": ")));"}], "start_byte": 1246, "end_byte": 1254, "start_point": [46, 12], "end_point": [46, 20], "text": "name)));"}, {"type": "=", "children": [], "start_byte": 1255, "end_byte": 1256, "start_point": [46, 21], "end_point": [46, 22], "text": " "}, {"type": "call_expression", "children": [{"type": "identifier", "children": [], "start_byte": 1257, "end_byte": 1261, "start_point": [46, 23], "end_point": [46, 27], "text": "    "}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 1261, "end_byte": 1262, "start_point": [46, 27], "end_point": [46, 28], "text": " "}, {"type": "call_expression", "children": [{"type": "scoped_identifier", "children": [{"type": "identifier", "children": [], "start_byte": 1262, "end_byte": 1265, "start_point": [46, 28], "end_point": [46, 31], "text": "   "}, {"type": "::", "children": [], "start_byte": 1265, "end_byte": 1267, "start_point": [46, 31], "end_point": [46, 33], "text": "  "}, {"type": "identifier", "children": [], "start_byte": 1267, "end_byte": 1270, "start_point": [46, 33], "end_point": [46, 36], "text": "sel"}], "start_byte": 1262, "end_byte": 1270, "start_point": [46, 28], "end_point": [46, 36], "text": "     sel"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 1270, "end_byte": 1271, "start_point": [46, 36], "end_point": [46, 37], "text": "f"}, {"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "call_expression", "children": [{"type": "scoped_identifier", "children": [{"type": "identifier", "children": [], "start_byte": 1271, "end_byte": 1275, "start_point": [46, 37], "end_point": [46, 41], "text": "\n   "}, {"type": "::", "children": [], "start_byte": 1275, "end_byte": 1277, "start_point": [46, 41], "end_point": [46, 43], "text": "  "}, {"type": "identifier", "children": [], "start_byte": 1277, "end_byte": 1284, "start_point": [46, 43], "end_point": [46, 50], "text": "   }\n  "}], "start_byte": 1271, "end_byte": 1284, "start_point": [46, 37], "end_point": [46, 50], "text": "\n        }\n  "}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 1284, "end_byte": 1285, "start_point": [46, 50], "end_point": [46, 51], "text": " "}, {"type": ")", "children": [], "start_byte": 1285, "end_byte": 1286, "start_point": [46, 51], "end_point": [46, 52], "text": " "}], "start_byte": 1284, "end_byte": 1286, "start_point": [46, 50], "end_point": [46, 52], "text": "  "}], "start_byte": 1271, "end_byte": 1286, "start_point": [46, 37], "end_point": [46, 52], "text": "\n        }\n    "}, {"type": ".", "children": [], "start_byte": 1286, "end_byte": 1287, "start_point": [46, 52], "end_point": [46, 53], "text": "}"}, {"type": "field_identifier", "children": [], "start_byte": 1287, "end_byte": 1298, "start_point": [46, 53], "end_point": [46, 64], "text": "\n    // \u4e3a\u4e86\u4fee"}], "start_byte": 1271, "end_byte": 1298, "start_point": [46, 37], "end_point": [46, 64], "text": "\n        }\n    }\n    // \u4e3a\u4e86\u4fee"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 1298, "end_byte": 1299, "start_point": [46, 64], "end_point": [46, 65], "text": "\u590d"}, {"type": "identifier", "children": [], "start_byte": 1299, "end_byte": 1303, "start_point": [46, 65], "end_point": [46, 69], "text": "\u8fd9\u4e2a\u95ee\u9898"}, {"type": ")", "children": [], "start_byte": 1303, "end_byte": 1304, "start_point": [46, 69], "end_point": [46, 70], "text": "\uff0c"}], "start_byte": 1298, "end_byte": 1304, "start_point": [46, 64], "end_point": [46, 70], "text": "\u590d\u8fd9\u4e2a\u95ee\u9898\uff0c"}], "start_byte": 1271, "end_byte": 1304, "start_point": [46, 37], "end_point": [46, 70], "text": "\n        }\n    }\n    // \u4e3a\u4e86\u4fee\u590d\u8fd9\u4e2a\u95ee\u9898\uff0c"}, {"type": ")", "children": [], "start_byte": 1304, "end_byte": 1305, "start_point": [46, 70], "end_point": [46, 71], "text": "\u6211"}], "start_byte": 1270, "end_byte": 1305, "start_point": [46, 36], "end_point": [46, 71], "text": "f\n        }\n    }\n    // \u4e3a\u4e86\u4fee\u590d\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211"}], "start_byte": 1262, "end_byte": 1305, "start_point": [46, 28], "end_point": [46, 71], "text": "     self\n        }\n    }\n    // \u4e3a\u4e86\u4fee\u590d\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211"}, {"type": ")", "children": [], "start_byte": 1305, "end_byte": 1306, "start_point": [46, 71], "end_point": [46, 72], "text": "\u4eec"}], "start_byte": 1261, "end_byte": 1306, "start_point": [46, 27], "end_point": [46, 72], "text": "      self\n        }\n    }\n    // \u4e3a\u4e86\u4fee\u590d\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec"}], "start_byte": 1257, "end_byte": 1306, "start_point": [46, 23], "end_point": [46, 72], "text": "          self\n        }\n    }\n    // \u4e3a\u4e86\u4fee\u590d\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec"}], "start_byte": 1246, "end_byte": 1306, "start_point": [46, 12], "end_point": [46, 72], "text": "name)));\n            self\n        }\n    }\n    // \u4e3a\u4e86\u4fee\u590d\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec"}, {"type": ";", "children": [], "start_byte": 1306, "end_byte": 1307, "start_point": [46, 72], "end_point": [46, 73], "text": "\u9700"}], "start_byte": 1246, "end_byte": 1307, "start_point": [46, 12], "end_point": [46, 73], "text": "name)));\n            self\n        }\n    }\n    // \u4e3a\u4e86\u4fee\u590d\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u9700"}, {"type": "self", "children": [], "start_byte": 1320, "end_byte": 1324, "start_point": [47, 12], "end_point": [47, 16], "text": "\u5fd7\u65f6\uff0c\u53bb"}, {"type": "}", "children": [], "start_byte": 1333, "end_byte": 1334, "start_point": [48, 8], "end_point": [48, 9], "text": "\u3002"}], "start_byte": 1092, "end_byte": 1334, "start_point": [41, 15], "end_point": [48, 9], "text": "ile tmp.link.is_some() {\n                tmp = tmp.link.as_mut().unwrap();\n            }\n            tmp.link = Some(Box::new(Cell::mk_cell().snoc_string(name)));\n            self\n        }\n    }\n    // \u4e3a\u4e86\u4fee\u590d\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u9700\u8981\u786e\u4fdd\u5728\u4ece\u73af\u5883\u53d8\u91cf\u4e2d\u63d0\u53d6\u6807\u5fd7\u65f6\uff0c\u53bb\u9664\u524d\u5bfc\u548c\u5c3e\u90e8\u7684\u7a7a\u683c\u3002"}], "start_byte": 1087, "end_byte": 1334, "start_point": [41, 10], "end_point": [48, 9], "text": "   while tmp.link.is_some() {\n                tmp = tmp.link.as_mut().unwrap();\n            }\n            tmp.link = Some(Box::new(Cell::mk_cell().snoc_string(name)));\n            self\n        }\n    }\n    // \u4e3a\u4e86\u4fee\u590d\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u9700\u8981\u786e\u4fdd\u5728\u4ece\u73af\u5883\u53d8\u91cf\u4e2d\u63d0\u53d6\u6807\u5fd7\u65f6\uff0c\u53bb\u9664\u524d\u5bfc\u548c\u5c3e\u90e8\u7684\u7a7a\u683c\u3002"}], "start_byte": 922, "end_byte": 1334, "start_point": [37, 8], "end_point": [48, 9], "text": " = Cell::mk_cell();\n            new_cell.name = Some(Box::new(name.to_owned()));\n            new_cell\n        } else {\n            let mut tmp = &mut self;\n            while tmp.link.is_some() {\n                tmp = tmp.link.as_mut().unwrap();\n            }\n            tmp.link = Some(Box::new(Cell::mk_cell().snoc_string(name)));\n            self\n        }\n    }\n    // \u4e3a\u4e86\u4fee\u590d\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u9700\u8981\u786e\u4fdd\u5728\u4ece\u73af\u5883\u53d8\u91cf\u4e2d\u63d0\u53d6\u6807\u5fd7\u65f6\uff0c\u53bb\u9664\u524d\u5bfc\u548c\u5c3e\u90e8\u7684\u7a7a\u683c\u3002"}], "start_byte": 922, "end_byte": 1334, "start_point": [37, 8], "end_point": [48, 9], "text": " = Cell::mk_cell();\n            new_cell.name = Some(Box::new(name.to_owned()));\n            new_cell\n        } else {\n            let mut tmp = &mut self;\n            while tmp.link.is_some() {\n                tmp = tmp.link.as_mut().unwrap();\n            }\n            tmp.link = Some(Box::new(Cell::mk_cell().snoc_string(name)));\n            self\n        }\n    }\n    // \u4e3a\u4e86\u4fee\u590d\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u9700\u8981\u786e\u4fdd\u5728\u4ece\u73af\u5883\u53d8\u91cf\u4e2d\u63d0\u53d6\u6807\u5fd7\u65f6\uff0c\u53bb\u9664\u524d\u5bfc\u548c\u5c3e\u90e8\u7684\u7a7a\u683c\u3002"}, {"type": "}", "children": [], "start_byte": 1339, "end_byte": 1340, "start_point": [49, 4], "end_point": [49, 5], "text": "/"}], "start_byte": 912, "end_byte": 1340, "start_point": [36, 53], "end_point": [49, 5], "text": "t new_cell = Cell::mk_cell();\n            new_cell.name = Some(Box::new(name.to_owned()));\n            new_cell\n        } else {\n            let mut tmp = &mut self;\n            while tmp.link.is_some() {\n                tmp = tmp.link.as_mut().unwrap();\n            }\n            tmp.link = Some(Box::new(Cell::mk_cell().snoc_string(name)));\n            self\n        }\n    }\n    // \u4e3a\u4e86\u4fee\u590d\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u9700\u8981\u786e\u4fdd\u5728\u4ece\u73af\u5883\u53d8\u91cf\u4e2d\u63d0\u53d6\u6807\u5fd7\u65f6\uff0c\u53bb\u9664\u524d\u5bfc\u548c\u5c3e\u90e8\u7684\u7a7a\u683c\u3002\n    /"}], "start_byte": 863, "end_byte": 1340, "start_point": [36, 4], "end_point": [49, 5], "text": "      if self.name.is_none() {\n            let mut new_cell = Cell::mk_cell();\n            new_cell.name = Some(Box::new(name.to_owned()));\n            new_cell\n        } else {\n            let mut tmp = &mut self;\n            while tmp.link.is_some() {\n                tmp = tmp.link.as_mut().unwrap();\n            }\n            tmp.link = Some(Box::new(Cell::mk_cell().snoc_string(name)));\n            self\n        }\n    }\n    // \u4e3a\u4e86\u4fee\u590d\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u9700\u8981\u786e\u4fdd\u5728\u4ece\u73af\u5883\u53d8\u91cf\u4e2d\u63d0\u53d6\u6807\u5fd7\u65f6\uff0c\u53bb\u9664\u524d\u5bfc\u548c\u5c3e\u90e8\u7684\u7a7a\u683c\u3002\n    /"}, {"type": "line_comment", "children": [], "start_byte": 1345, "end_byte": 1465, "start_point": [50, 4], "end_point": [50, 124], "text": " test_add_flags_from_env_var \u6d4b\u8bd5\u4e2d\uff0c\u65ad\u8a00\u5931\u8d25\u4e86\u3002\n    \u5177\u4f53\u5730\uff0c\u9884\u671f\u7684\u5b57\u7b26\u4e32 \"flag2\" \u524d\u9762\u6709\u4e00\u4e2a\u591a\u4f59\u7684\u7a7a\u683c\uff0c\u6240\u4ee5\u5b83\u4e0e\u5b9e\u9645\u7684\u503c \" flag2\" \u4e0d\u5339\u914d\u3002\n    \u8fd9\u662f\u7531\u4e8e\u5728 add_flags_fro"}, {"type": "block_comment", "children": [], "start_byte": 1470, "end_byte": 1932, "start_point": [51, 4], "end_point": [57, 7], "text": "_var \u51fd\u6570\u4e2d\u5904\u7406\u73af\u5883\u53d8\u91cf\u503c\u65f6\uff0c\u5f53\u5206\u5272\u5b57\u7b26\u4e32\u65f6\uff0c\u524d\u5bfc\u7a7a\u683c\u6ca1\u6709\u88ab\u6b63\u786e\u5730\u53bb\u9664\u3002\n\n    \u4e3a\u4e86\u4fee\u590d\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u9700\u8981\u786e\u4fdd\u5728\u4ece\u73af\u5883\u53d8\u91cf\u4e2d\u63d0\u53d6\u6807\u5fd7\u65f6\uff0c\u53bb\u9664\u524d\u5bfc\u548c\u5c3e\u90e8\u7684\u7a7a\u683c\u3002\n     */\n    pub fn add_flags_from_env_var(arg_list: &mut Option<Box<Cell>>, var_name: &str) {\n        let envbase = getenv(var_name);\n        if let Some(mut base) = envbase {\n            let mut i = 0;\n            while let Some(c) = base.chars().nth(i) {\n                if c == '\\0' {\n                    break;\n                }\n                base = &base[i..];\n          "}, {"type": "function_item", "children": [{"type": "visibility_modifier", "children": [{"type": "pub", "children": [], "start_byte": 1937, "end_byte": 1940, "start_point": [58, 4], "end_point": [58, 7], "text": " i "}], "start_byte": 1937, "end_byte": 1940, "start_point": [58, 4], "end_point": [58, 7], "text": " i "}, {"type": "fn", "children": [], "start_byte": 1941, "end_byte": 1943, "start_point": [58, 8], "end_point": [58, 10], "text": " 0"}, {"type": "identifier", "children": [], "start_byte": 1944, "end_byte": 1966, "start_point": [58, 11], "end_point": [58, 33], "text": "\n                while"}, {"type": "parameters", "children": [{"type": "(", "children": [], "start_byte": 1966, "end_byte": 1967, "start_point": [58, 33], "end_point": [58, 34], "text": " "}, {"type": "parameter", "children": [{"type": "identifier", "children": [], "start_byte": 1967, "end_byte": 1975, "start_point": [58, 34], "end_point": [58, 42], "text": "let Some"}, {"type": ":", "children": [], "start_byte": 1975, "end_byte": 1976, "start_point": [58, 42], "end_point": [58, 43], "text": "("}, {"type": "reference_type", "children": [{"type": "&", "children": [], "start_byte": 1977, "end_byte": 1978, "start_point": [58, 44], "end_point": [58, 45], "text": ")"}, {"type": "mutable_specifier", "children": [], "start_byte": 1978, "end_byte": 1981, "start_point": [58, 45], "end_point": [58, 48], "text": " = "}, {"type": "generic_type", "children": [{"type": "type_identifier", "children": [], "start_byte": 1982, "end_byte": 1988, "start_point": [58, 49], "end_point": [58, 55], "text": "ase.ch"}, {"type": "type_arguments", "children": [{"type": "<", "children": [], "start_byte": 1988, "end_byte": 1989, "start_point": [58, 55], "end_point": [58, 56], "text": "a"}, {"type": "generic_type", "children": [{"type": "type_identifier", "children": [], "start_byte": 1989, "end_byte": 1992, "start_point": [58, 56], "end_point": [58, 59], "text": "rs("}, {"type": "type_arguments", "children": [{"type": "<", "children": [], "start_byte": 1992, "end_byte": 1993, "start_point": [58, 59], "end_point": [58, 60], "text": ")"}, {"type": "type_identifier", "children": [], "start_byte": 1993, "end_byte": 1997, "start_point": [58, 60], "end_point": [58, 64], "text": ".nth"}, {"type": ">", "children": [], "start_byte": 1997, "end_byte": 1998, "start_point": [58, 64], "end_point": [58, 65], "text": "("}], "start_byte": 1992, "end_byte": 1998, "start_point": [58, 59], "end_point": [58, 65], "text": ").nth("}], "start_byte": 1989, "end_byte": 1998, "start_point": [58, 56], "end_point": [58, 65], "text": "rs().nth("}, {"type": ">", "children": [], "start_byte": 1998, "end_byte": 1999, "start_point": [58, 65], "end_point": [58, 66], "text": "i"}], "start_byte": 1988, "end_byte": 1999, "start_point": [58, 55], "end_point": [58, 66], "text": "ars().nth(i"}], "start_byte": 1982, "end_byte": 1999, "start_point": [58, 49], "end_point": [58, 66], "text": "ase.chars().nth(i"}], "start_byte": 1977, "end_byte": 1999, "start_point": [58, 44], "end_point": [58, 66], "text": ") = base.chars().nth(i"}], "start_byte": 1967, "end_byte": 1999, "start_point": [58, 34], "end_point": [58, 66], "text": "let Some(c) = base.chars().nth(i"}, {"type": ",", "children": [], "start_byte": 1999, "end_byte": 2000, "start_point": [58, 66], "end_point": [58, 67], "text": ")"}, {"type": "parameter", "children": [{"type": "identifier", "children": [], "start_byte": 2001, "end_byte": 2009, "start_point": [58, 68], "end_point": [58, 76], "text": "{\n      "}, {"type": ":", "children": [], "start_byte": 2009, "end_byte": 2010, "start_point": [58, 76], "end_point": [58, 77], "text": " "}, {"type": "reference_type", "children": [{"type": "&", "children": [], "start_byte": 2011, "end_byte": 2012, "start_point": [58, 78], "end_point": [58, 79], "text": " "}, {"type": "primitive_type", "children": [], "start_byte": 2012, "end_byte": 2015, "start_point": [58, 79], "end_point": [58, 82], "text": "   "}], "start_byte": 2011, "end_byte": 2015, "start_point": [58, 78], "end_point": [58, 82], "text": "    "}], "start_byte": 2001, "end_byte": 2015, "start_point": [58, 68], "end_point": [58, 82], "text": "{\n            "}, {"type": ")", "children": [], "start_byte": 2015, "end_byte": 2016, "start_point": [58, 82], "end_point": [58, 83], "text": " "}], "start_byte": 1966, "end_byte": 2016, "start_point": [58, 33], "end_point": [58, 83], "text": " let Some(c) = base.chars().nth(i) {\n             "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 2017, "end_byte": 2018, "start_point": [58, 84], "end_point": [58, 85], "text": " "}, {"type": "let_declaration", "children": [{"type": "let", "children": [], "start_byte": 2027, "end_byte": 2030, "start_point": [59, 8], "end_point": [59, 11], "text": "c.i"}, {"type": "identifier", "children": [], "start_byte": 2031, "end_byte": 2038, "start_point": [59, 12], "end_point": [59, 19], "text": "_whites"}, {"type": "=", "children": [], "start_byte": 2039, "end_byte": 2040, "start_point": [59, 20], "end_point": [59, 21], "text": "a"}, {"type": "call_expression", "children": [{"type": "identifier", "children": [], "start_byte": 2041, "end_byte": 2047, "start_point": [59, 22], "end_point": [59, 28], "text": "e() {\n"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 2047, "end_byte": 2048, "start_point": [59, 28], "end_point": [59, 29], "text": " "}, {"type": "identifier", "children": [], "start_byte": 2048, "end_byte": 2056, "start_point": [59, 29], "end_point": [59, 37], "text": "        "}, {"type": ")", "children": [], "start_byte": 2056, "end_byte": 2057, "start_point": [59, 37], "end_point": [59, 38], "text": " "}], "start_byte": 2047, "end_byte": 2057, "start_point": [59, 28], "end_point": [59, 38], "text": "          "}], "start_byte": 2041, "end_byte": 2057, "start_point": [59, 22], "end_point": [59, 38], "text": "e() {\n          "}, {"type": ";", "children": [], "start_byte": 2057, "end_byte": 2058, "start_point": [59, 38], "end_point": [59, 39], "text": " "}], "start_byte": 2027, "end_byte": 2058, "start_point": [59, 8], "end_point": [59, 39], "text": "c.is_whitespace() {\n           "}, {"type": "expression_statement", "children": [{"type": "if_expression", "children": [{"type": "if", "children": [], "start_byte": 2067, "end_byte": 2069, "start_point": [60, 8], "end_point": [60, 10], "text": "  "}, {"type": "let_condition", "children": [{"type": "let", "children": [], "start_byte": 2070, "end_byte": 2073, "start_point": [60, 11], "end_point": [60, 14], "text": " br"}, {"type": "tuple_struct_pattern", "children": [{"type": "identifier", "children": [], "start_byte": 2074, "end_byte": 2078, "start_point": [60, 15], "end_point": [60, 19], "text": "ak;\n"}, {"type": "(", "children": [], "start_byte": 2078, "end_byte": 2079, "start_point": [60, 19], "end_point": [60, 20], "text": " "}, {"type": "mut_pattern", "children": [{"type": "mutable_specifier", "children": [], "start_byte": 2079, "end_byte": 2082, "start_point": [60, 20], "end_point": [60, 23], "text": "   "}, {"type": "identifier", "children": [], "start_byte": 2083, "end_byte": 2087, "start_point": [60, 24], "end_point": [60, 28], "text": "    "}], "start_byte": 2079, "end_byte": 2087, "start_point": [60, 20], "end_point": [60, 28], "text": "        "}, {"type": ")", "children": [], "start_byte": 2087, "end_byte": 2088, "start_point": [60, 28], "end_point": [60, 29], "text": " "}], "start_byte": 2074, "end_byte": 2088, "start_point": [60, 15], "end_point": [60, 29], "text": "ak;\n          "}, {"type": "=", "children": [], "start_byte": 2089, "end_byte": 2090, "start_point": [60, 30], "end_point": [60, 31], "text": " "}, {"type": "identifier", "children": [], "start_byte": 2091, "end_byte": 2098, "start_point": [60, 32], "end_point": [60, 39], "text": "       "}], "start_byte": 2070, "end_byte": 2098, "start_point": [60, 11], "end_point": [60, 39], "text": " break;\n                    "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 2099, "end_byte": 2100, "start_point": [60, 40], "end_point": [60, 41], "text": "\n"}, {"type": "let_declaration", "children": [{"type": "let", "children": [], "start_byte": 2113, "end_byte": 2116, "start_point": [61, 12], "end_point": [61, 15], "text": "   "}, {"type": "mutable_specifier", "children": [], "start_byte": 2117, "end_byte": 2120, "start_point": [61, 16], "end_point": [61, 19], "text": "   "}, {"type": "identifier", "children": [], "start_byte": 2121, "end_byte": 2122, "start_point": [61, 20], "end_point": [61, 21], "text": " "}, {"type": "=", "children": [], "start_byte": 2123, "end_byte": 2124, "start_point": [61, 22], "end_point": [61, 23], "text": "="}, {"type": "integer_literal", "children": [], "start_byte": 2125, "end_byte": 2126, "start_point": [61, 24], "end_point": [61, 25], "text": "1"}, {"type": ";", "children": [], "start_byte": 2126, "end_byte": 2127, "start_point": [61, 25], "end_point": [61, 26], "text": ";"}], "start_byte": 2113, "end_byte": 2127, "start_point": [61, 12], "end_point": [61, 26], "text": "       i += 1;"}, {"type": "expression_statement", "children": [{"type": "while_expression", "children": [{"type": "while", "children": [], "start_byte": 2140, "end_byte": 2145, "start_point": [62, 12], "end_point": [62, 17], "text": "    }"}, {"type": "let_condition", "children": [{"type": "let", "children": [], "start_byte": 2146, "end_byte": 2149, "start_point": [62, 18], "end_point": [62, 21], "text": "   "}, {"type": "tuple_struct_pattern", "children": [{"type": "identifier", "children": [], "start_byte": 2150, "end_byte": 2154, "start_point": [62, 22], "end_point": [62, 26], "text": "    "}, {"type": "(", "children": [], "start_byte": 2154, "end_byte": 2155, "start_point": [62, 26], "end_point": [62, 27], "text": " "}, {"type": "identifier", "children": [], "start_byte": 2155, "end_byte": 2156, "start_point": [62, 27], "end_point": [62, 28], "text": " "}, {"type": ")", "children": [], "start_byte": 2156, "end_byte": 2157, "start_point": [62, 28], "end_point": [62, 29], "text": " "}], "start_byte": 2150, "end_byte": 2157, "start_point": [62, 22], "end_point": [62, 29], "text": "       "}, {"type": "=", "children": [], "start_byte": 2158, "end_byte": 2159, "start_point": [62, 30], "end_point": [62, 31], "text": " "}, {"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 2160, "end_byte": 2164, "start_point": [62, 32], "end_point": [62, 36], "text": "  le"}, {"type": ".", "children": [], "start_byte": 2164, "end_byte": 2165, "start_point": [62, 36], "end_point": [62, 37], "text": "t"}, {"type": "field_identifier", "children": [], "start_byte": 2165, "end_byte": 2170, "start_point": [62, 37], "end_point": [62, 42], "text": " star"}], "start_byte": 2160, "end_byte": 2170, "start_point": [62, 32], "end_point": [62, 42], "text": "  let star"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 2170, "end_byte": 2171, "start_point": [62, 42], "end_point": [62, 43], "text": "t"}, {"type": ")", "children": [], "start_byte": 2171, "end_byte": 2172, "start_point": [62, 43], "end_point": [62, 44], "text": " "}], "start_byte": 2170, "end_byte": 2172, "start_point": [62, 42], "end_point": [62, 44], "text": "t "}], "start_byte": 2160, "end_byte": 2172, "start_point": [62, 32], "end_point": [62, 44], "text": "  let start "}, {"type": ".", "children": [], "start_byte": 2172, "end_byte": 2173, "start_point": [62, 44], "end_point": [62, 45], "text": "="}, {"type": "field_identifier", "children": [], "start_byte": 2173, "end_byte": 2176, "start_point": [62, 45], "end_point": [62, 48], "text": " i;"}], "start_byte": 2160, "end_byte": 2176, "start_point": [62, 32], "end_point": [62, 48], "text": "  let start = i;"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 2176, "end_byte": 2177, "start_point": [62, 48], "end_point": [62, 49], "text": "\n"}, {"type": "identifier", "children": [], "start_byte": 2177, "end_byte": 2178, "start_point": [62, 49], "end_point": [62, 50], "text": " "}, {"type": ")", "children": [], "start_byte": 2178, "end_byte": 2179, "start_point": [62, 50], "end_point": [62, 51], "text": " "}], "start_byte": 2176, "end_byte": 2179, "start_point": [62, 48], "end_point": [62, 51], "text": "\n  "}], "start_byte": 2160, "end_byte": 2179, "start_point": [62, 32], "end_point": [62, 51], "text": "  let start = i;\n  "}], "start_byte": 2146, "end_byte": 2179, "start_point": [62, 18], "end_point": [62, 51], "text": "                let start = i;\n  "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 2180, "end_byte": 2181, "start_point": [62, 52], "end_point": [62, 53], "text": " "}, {"type": "expression_statement", "children": [{"type": "if_expression", "children": [{"type": "if", "children": [], "start_byte": 2198, "end_byte": 2200, "start_point": [63, 16], "end_point": [63, 18], "text": " l"}, {"type": "binary_expression", "children": [{"type": "identifier", "children": [], "start_byte": 2201, "end_byte": 2202, "start_point": [63, 19], "end_point": [63, 20], "text": "t"}, {"type": "==", "children": [], "start_byte": 2203, "end_byte": 2205, "start_point": [63, 21], "end_point": [63, 23], "text": "So"}, {"type": "char_literal", "children": [], "start_byte": 2206, "end_byte": 2210, "start_point": [63, 24], "end_point": [63, 28], "text": "e(c)"}], "start_byte": 2201, "end_byte": 2210, "start_point": [63, 19], "end_point": [63, 28], "text": "t Some(c)"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 2211, "end_byte": 2212, "start_point": [63, 29], "end_point": [63, 30], "text": "="}, {"type": "expression_statement", "children": [{"type": "break_expression", "children": [{"type": "break", "children": [], "start_byte": 2233, "end_byte": 2238, "start_point": [64, 20], "end_point": [64, 25], "text": "{\n   "}], "start_byte": 2233, "end_byte": 2238, "start_point": [64, 20], "end_point": [64, 25], "text": "{\n   "}, {"type": ";", "children": [], "start_byte": 2238, "end_byte": 2239, "start_point": [64, 25], "end_point": [64, 26], "text": " "}], "start_byte": 2233, "end_byte": 2239, "start_point": [64, 20], "end_point": [64, 26], "text": "{\n    "}, {"type": "}", "children": [], "start_byte": 2256, "end_byte": 2257, "start_point": [65, 16], "end_point": [65, 17], "text": "f"}], "start_byte": 2211, "end_byte": 2257, "start_point": [63, 29], "end_point": [65, 17], "text": "= base.chars().nth(i) {\n                    if"}], "start_byte": 2198, "end_byte": 2257, "start_point": [63, 16], "end_point": [65, 17], "text": " let Some(c) = base.chars().nth(i) {\n                    if"}], "start_byte": 2198, "end_byte": 2257, "start_point": [63, 16], "end_point": [65, 17], "text": " let Some(c) = base.chars().nth(i) {\n                    if"}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 2274, "end_byte": 2278, "start_point": [66, 16], "end_point": [66, 20], "text": ") {\n"}, {"type": "=", "children": [], "start_byte": 2279, "end_byte": 2280, "start_point": [66, 21], "end_point": [66, 22], "text": " "}, {"type": "reference_expression", "children": [{"type": "&", "children": [], "start_byte": 2281, "end_byte": 2282, "start_point": [66, 23], "end_point": [66, 24], "text": " "}, {"type": "index_expression", "children": [{"type": "identifier", "children": [], "start_byte": 2282, "end_byte": 2286, "start_point": [66, 24], "end_point": [66, 28], "text": "    "}, {"type": "[", "children": [], "start_byte": 2286, "end_byte": 2287, "start_point": [66, 28], "end_point": [66, 29], "text": " "}, {"type": "range_expression", "children": [{"type": "identifier", "children": [], "start_byte": 2287, "end_byte": 2288, "start_point": [66, 29], "end_point": [66, 30], "text": " "}, {"type": "..", "children": [], "start_byte": 2288, "end_byte": 2290, "start_point": [66, 30], "end_point": [66, 32], "text": "  "}], "start_byte": 2287, "end_byte": 2290, "start_point": [66, 29], "end_point": [66, 32], "text": "   "}, {"type": "]", "children": [], "start_byte": 2290, "end_byte": 2291, "start_point": [66, 32], "end_point": [66, 33], "text": " "}], "start_byte": 2282, "end_byte": 2291, "start_point": [66, 24], "end_point": [66, 33], "text": "         "}], "start_byte": 2281, "end_byte": 2291, "start_point": [66, 23], "end_point": [66, 33], "text": "          "}], "start_byte": 2274, "end_byte": 2291, "start_point": [66, 16], "end_point": [66, 33], "text": ") {\n             "}, {"type": ";", "children": [], "start_byte": 2291, "end_byte": 2292, "start_point": [66, 33], "end_point": [66, 34], "text": " "}], "start_byte": 2274, "end_byte": 2292, "start_point": [66, 16], "end_point": [66, 34], "text": ") {\n              "}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 2309, "end_byte": 2310, "start_point": [67, 16], "end_point": [67, 17], "text": " "}, {"type": "=", "children": [], "start_byte": 2311, "end_byte": 2312, "start_point": [67, 18], "end_point": [67, 19], "text": " "}, {"type": "integer_literal", "children": [], "start_byte": 2313, "end_byte": 2314, "start_point": [67, 20], "end_point": [67, 21], "text": " "}], "start_byte": 2309, "end_byte": 2314, "start_point": [67, 16], "end_point": [67, 21], "text": "     "}, {"type": ";", "children": [], "start_byte": 2314, "end_byte": 2315, "start_point": [67, 21], "end_point": [67, 22], "text": " "}], "start_byte": 2309, "end_byte": 2315, "start_point": [67, 16], "end_point": [67, 22], "text": "      "}, {"type": "expression_statement", "children": [{"type": "while_expression", "children": [{"type": "while", "children": [], "start_byte": 2332, "end_byte": 2337, "start_point": [68, 16], "end_point": [68, 21], "text": "     "}, {"type": "let_condition", "children": [{"type": "let", "children": [], "start_byte": 2338, "end_byte": 2341, "start_point": [68, 22], "end_point": [68, 25], "text": "   "}, {"type": "tuple_struct_pattern", "children": [{"type": "identifier", "children": [], "start_byte": 2342, "end_byte": 2346, "start_point": [68, 26], "end_point": [68, 30], "text": "    "}, {"type": "(", "children": [], "start_byte": 2346, "end_byte": 2347, "start_point": [68, 30], "end_point": [68, 31], "text": " "}, {"type": "identifier", "children": [], "start_byte": 2347, "end_byte": 2348, "start_point": [68, 31], "end_point": [68, 32], "text": " "}, {"type": ")", "children": [], "start_byte": 2348, "end_byte": 2349, "start_point": [68, 32], "end_point": [68, 33], "text": " "}], "start_byte": 2342, "end_byte": 2349, "start_point": [68, 26], "end_point": [68, 33], "text": "       "}, {"type": "=", "children": [], "start_byte": 2350, "end_byte": 2351, "start_point": [68, 34], "end_point": [68, 35], "text": " "}, {"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 2352, "end_byte": 2356, "start_point": [68, 36], "end_point": [68, 40], "text": " += "}, {"type": ".", "children": [], "start_byte": 2356, "end_byte": 2357, "start_point": [68, 40], "end_point": [68, 41], "text": "1"}, {"type": "field_identifier", "children": [], "start_byte": 2357, "end_byte": 2362, "start_point": [68, 41], "end_point": [68, 46], "text": ";\n   "}], "start_byte": 2352, "end_byte": 2362, "start_point": [68, 36], "end_point": [68, 46], "text": " += 1;\n   "}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 2362, "end_byte": 2363, "start_point": [68, 46], "end_point": [68, 47], "text": " "}, {"type": ")", "children": [], "start_byte": 2363, "end_byte": 2364, "start_point": [68, 47], "end_point": [68, 48], "text": " "}], "start_byte": 2362, "end_byte": 2364, "start_point": [68, 46], "end_point": [68, 48], "text": "  "}], "start_byte": 2352, "end_byte": 2364, "start_point": [68, 36], "end_point": [68, 48], "text": " += 1;\n     "}, {"type": ".", "children": [], "start_byte": 2364, "end_byte": 2365, "start_point": [68, 48], "end_point": [68, 49], "text": " "}, {"type": "field_identifier", "children": [], "start_byte": 2365, "end_byte": 2368, "start_point": [68, 49], "end_point": [68, 52], "text": "   "}], "start_byte": 2352, "end_byte": 2368, "start_point": [68, 36], "end_point": [68, 52], "text": " += 1;\n         "}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 2368, "end_byte": 2369, "start_point": [68, 52], "end_point": [68, 53], "text": " "}, {"type": "identifier", "children": [], "start_byte": 2369, "end_byte": 2370, "start_point": [68, 53], "end_point": [68, 54], "text": " "}, {"type": ")", "children": [], "start_byte": 2370, "end_byte": 2371, "start_point": [68, 54], "end_point": [68, 55], "text": " "}], "start_byte": 2368, "end_byte": 2371, "start_point": [68, 52], "end_point": [68, 55], "text": "   "}], "start_byte": 2352, "end_byte": 2371, "start_point": [68, 36], "end_point": [68, 55], "text": " += 1;\n            "}], "start_byte": 2338, "end_byte": 2371, "start_point": [68, 22], "end_point": [68, 55], "text": "             i += 1;\n            "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 2372, "end_byte": 2373, "start_point": [68, 56], "end_point": [68, 57], "text": " "}, {"type": "expression_statement", "children": [{"type": "if_expression", "children": [{"type": "if", "children": [], "start_byte": 2394, "end_byte": 2396, "start_point": [69, 20], "end_point": [69, 22], "text": "f "}, {"type": "unary_expression", "children": [{"type": "!", "children": [], "start_byte": 2397, "end_byte": 2398, "start_point": [69, 23], "end_point": [69, 24], "text": " "}, {"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 2398, "end_byte": 2399, "start_point": [69, 24], "end_point": [69, 25], "text": ">"}, {"type": ".", "children": [], "start_byte": 2399, "end_byte": 2400, "start_point": [69, 25], "end_point": [69, 26], "text": " "}, {"type": "field_identifier", "children": [], "start_byte": 2400, "end_byte": 2413, "start_point": [69, 26], "end_point": [69, 39], "text": "start {\n     "}], "start_byte": 2398, "end_byte": 2413, "start_point": [69, 24], "end_point": [69, 39], "text": "> start {\n     "}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 2413, "end_byte": 2414, "start_point": [69, 39], "end_point": [69, 40], "text": " "}, {"type": ")", "children": [], "start_byte": 2414, "end_byte": 2415, "start_point": [69, 40], "end_point": [69, 41], "text": " "}], "start_byte": 2413, "end_byte": 2415, "start_point": [69, 39], "end_point": [69, 41], "text": "  "}], "start_byte": 2398, "end_byte": 2415, "start_point": [69, 24], "end_point": [69, 41], "text": "> start {\n       "}], "start_byte": 2397, "end_byte": 2415, "start_point": [69, 23], "end_point": [69, 41], "text": " > start {\n       "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 2416, "end_byte": 2417, "start_point": [69, 42], "end_point": [69, 43], "text": " "}, {"type": "expression_statement", "children": [{"type": "break_expression", "children": [{"type": "break", "children": [], "start_byte": 2442, "end_byte": 2447, "start_point": [70, 24], "end_point": [70, 29], "text": "1024 "}], "start_byte": 2442, "end_byte": 2447, "start_point": [70, 24], "end_point": [70, 29], "text": "1024 "}, {"type": ";", "children": [], "start_byte": 2447, "end_byte": 2448, "start_point": [70, 29], "end_point": [70, 30], "text": "-"}], "start_byte": 2442, "end_byte": 2448, "start_point": [70, 24], "end_point": [70, 30], "text": "1024 -"}, {"type": "}", "children": [], "start_byte": 2469, "end_byte": 2470, "start_point": [71, 20], "end_point": [71, 21], "text": " "}], "start_byte": 2416, "end_byte": 2470, "start_point": [69, 42], "end_point": [71, 21], "text": "            let k = i.min(1024 - 10); \n               "}], "start_byte": 2394, "end_byte": 2470, "start_point": [69, 20], "end_point": [71, 21], "text": "f i > start {\n                    let k = i.min(1024 - 10); \n               "}], "start_byte": 2394, "end_byte": 2470, "start_point": [69, 20], "end_point": [71, 21], "text": "f i > start {\n                    let k = i.min(1024 - 10); \n               "}, {"type": "expression_statement", "children": [{"type": "compound_assignment_expr", "children": [{"type": "identifier", "children": [], "start_byte": 2491, "end_byte": 2492, "start_point": [72, 20], "end_point": [72, 21], "text": "r"}, {"type": "+=", "children": [], "start_byte": 2493, "end_byte": 2495, "start_point": [72, 22], "end_point": [72, 24], "text": "ng"}, {"type": "integer_literal", "children": [], "start_byte": 2496, "end_byte": 2497, "start_point": [72, 25], "end_point": [72, 26], "text": "="}], "start_byte": 2491, "end_byte": 2497, "start_point": [72, 20], "end_point": [72, 26], "text": "ring ="}, {"type": ";", "children": [], "start_byte": 2497, "end_byte": 2498, "start_point": [72, 26], "end_point": [72, 27], "text": " "}], "start_byte": 2491, "end_byte": 2498, "start_point": [72, 20], "end_point": [72, 27], "text": "ring = "}, {"type": "}", "children": [], "start_byte": 2515, "end_byte": 2516, "start_point": [73, 16], "end_point": [73, 17], "text": "("}], "start_byte": 2372, "end_byte": 2516, "start_point": [68, 56], "end_point": [73, 17], "text": "   }\n                if i > start {\n                    let k = i.min(1024 - 10); \n                    let tmp_name: String = base.chars().skip("}], "start_byte": 2332, "end_byte": 2516, "start_point": [68, 16], "end_point": [73, 17], "text": "                   i += 1;\n                }\n                if i > start {\n                    let k = i.min(1024 - 10); \n                    let tmp_name: String = base.chars().skip("}], "start_byte": 2332, "end_byte": 2516, "start_point": [68, 16], "end_point": [73, 17], "text": "                   i += 1;\n                }\n                if i > start {\n                    let k = i.min(1024 - 10); \n                    let tmp_name: String = base.chars().skip("}, {"type": "let_declaration", "children": [{"type": "let", "children": [], "start_byte": 2533, "end_byte": 2536, "start_point": [74, 16], "end_point": [74, 19], "text": "tar"}, {"type": "identifier", "children": [], "start_byte": 2537, "end_byte": 2542, "start_point": [74, 20], "end_point": [74, 25], "text": ").col"}, {"type": "=", "children": [], "start_byte": 2543, "end_byte": 2544, "start_point": [74, 26], "end_point": [74, 27], "text": "e"}, {"type": "identifier", "children": [], "start_byte": 2545, "end_byte": 2546, "start_point": [74, 28], "end_point": [74, 29], "text": "t"}, {"type": ";", "children": [], "start_byte": 2546, "end_byte": 2547, "start_point": [74, 29], "end_point": [74, 30], "text": "("}], "start_byte": 2533, "end_byte": 2547, "start_point": [74, 16], "end_point": [74, 30], "text": "tart).collect("}, {"type": "expression_statement", "children": [{"type": "while_expression", "children": [{"type": "while", "children": [], "start_byte": 2564, "end_byte": 2569, "start_point": [75, 16], "end_point": [75, 21], "text": "\u4fdd\u4ece\u6b63\u786e\u7684"}, {"type": "let_condition", "children": [{"type": "let", "children": [], "start_byte": 2570, "end_byte": 2573, "start_point": [75, 22], "end_point": [75, 25], "text": "\u7f6e\u5f00\u59cb"}, {"type": "tuple_struct_pattern", "children": [{"type": "identifier", "children": [], "start_byte": 2574, "end_byte": 2578, "start_point": [75, 26], "end_point": [75, 30], "text": "\u5e76\u4e14\u53ea\u63d0"}, {"type": "(", "children": [], "start_byte": 2578, "end_byte": 2579, "start_point": [75, 30], "end_point": [75, 31], "text": "\u53d6"}, {"type": "identifier", "children": [], "start_byte": 2579, "end_byte": 2580, "start_point": [75, 31], "end_point": [75, 32], "text": "\u6240"}, {"type": ")", "children": [], "start_byte": 2580, "end_byte": 2581, "start_point": [75, 32], "end_point": [75, 33], "text": "\u9700"}], "start_byte": 2574, "end_byte": 2581, "start_point": [75, 26], "end_point": [75, 33], "text": "\u5e76\u4e14\u53ea\u63d0\u53d6\u6240\u9700"}, {"type": "=", "children": [], "start_byte": 2582, "end_byte": 2583, "start_point": [75, 34], "end_point": [75, 35], "text": "\u957f"}, {"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 2584, "end_byte": 2588, "start_point": [75, 36], "end_point": [75, 40], "text": "\u3002\n  "}, {"type": ".", "children": [], "start_byte": 2588, "end_byte": 2589, "start_point": [75, 40], "end_point": [75, 41], "text": " "}, {"type": "field_identifier", "children": [], "start_byte": 2589, "end_byte": 2594, "start_point": [75, 41], "end_point": [75, 46], "text": "     "}], "start_byte": 2584, "end_byte": 2594, "start_point": [75, 36], "end_point": [75, 46], "text": "\u3002\n        "}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 2594, "end_byte": 2595, "start_point": [75, 46], "end_point": [75, 47], "text": " "}, {"type": ")", "children": [], "start_byte": 2595, "end_byte": 2596, "start_point": [75, 47], "end_point": [75, 48], "text": " "}], "start_byte": 2594, "end_byte": 2596, "start_point": [75, 46], "end_point": [75, 48], "text": "  "}], "start_byte": 2584, "end_byte": 2596, "start_point": [75, 36], "end_point": [75, 48], "text": "\u3002\n          "}, {"type": ".", "children": [], "start_byte": 2596, "end_byte": 2597, "start_point": [75, 48], "end_point": [75, 49], "text": " "}, {"type": "field_identifier", "children": [], "start_byte": 2597, "end_byte": 2600, "start_point": [75, 49], "end_point": [75, 52], "text": "   "}], "start_byte": 2584, "end_byte": 2600, "start_point": [75, 36], "end_point": [75, 52], "text": "\u3002\n              "}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 2600, "end_byte": 2601, "start_point": [75, 52], "end_point": [75, 53], "text": " "}, {"type": "identifier", "children": [], "start_byte": 2601, "end_byte": 2602, "start_point": [75, 53], "end_point": [75, 54], "text": " "}, {"type": ")", "children": [], "start_byte": 2602, "end_byte": 2603, "start_point": [75, 54], "end_point": [75, 55], "text": " "}], "start_byte": 2600, "end_byte": 2603, "start_point": [75, 52], "end_point": [75, 55], "text": "   "}], "start_byte": 2584, "end_byte": 2603, "start_point": [75, 36], "end_point": [75, 55], "text": "\u3002\n                 "}], "start_byte": 2570, "end_byte": 2603, "start_point": [75, 22], "end_point": [75, 55], "text": "\u7f6e\u5f00\u59cb\uff0c\u5e76\u4e14\u53ea\u63d0\u53d6\u6240\u9700\u7684\u957f\u5ea6\u3002\n                 "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 2604, "end_byte": 2605, "start_point": [75, 56], "end_point": [75, 57], "text": " "}, {"type": "expression_statement", "children": [{"type": "if_expression", "children": [{"type": "if", "children": [], "start_byte": 2626, "end_byte": 2628, "start_point": [76, 20], "end_point": [76, 22], "text": "ar"}, {"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 2629, "end_byte": 2630, "start_point": [76, 23], "end_point": [76, 24], "text": "_"}, {"type": ".", "children": [], "start_byte": 2630, "end_byte": 2631, "start_point": [76, 24], "end_point": [76, 25], "text": "l"}, {"type": "field_identifier", "children": [], "start_byte": 2631, "end_byte": 2644, "start_point": [76, 25], "end_point": [76, 38], "text": "ist.as_ref() "}], "start_byte": 2629, "end_byte": 2644, "start_point": [76, 23], "end_point": [76, 38], "text": "_list.as_ref() "}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 2644, "end_byte": 2645, "start_point": [76, 38], "end_point": [76, 39], "text": "{"}, {"type": ")", "children": [], "start_byte": 2645, "end_byte": 2646, "start_point": [76, 39], "end_point": [76, 40], "text": "\n"}], "start_byte": 2644, "end_byte": 2646, "start_point": [76, 38], "end_point": [76, 40], "text": "{\n"}], "start_byte": 2629, "end_byte": 2646, "start_point": [76, 23], "end_point": [76, 40], "text": "_list.as_ref() {\n"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 2647, "end_byte": 2648, "start_point": [76, 41], "end_point": [76, 42], "text": " "}, {"type": "expression_statement", "children": [{"type": "break_expression", "children": [{"type": "break", "children": [], "start_byte": 2673, "end_byte": 2678, "start_point": [77, 24], "end_point": [77, 29], "text": " clon"}], "start_byte": 2673, "end_byte": 2678, "start_point": [77, 24], "end_point": [77, 29], "text": " clon"}, {"type": ";", "children": [], "start_byte": 2678, "end_byte": 2679, "start_point": [77, 29], "end_point": [77, 30], "text": "e"}], "start_byte": 2673, "end_byte": 2679, "start_point": [77, 24], "end_point": [77, 30], "text": " clone"}, {"type": "}", "children": [], "start_byte": 2700, "end_byte": 2701, "start_point": [78, 20], "end_point": [78, 21], "text": ";"}], "start_byte": 2647, "end_byte": 2701, "start_point": [76, 41], "end_point": [78, 21], "text": "                       let cloned_cell = cell.clone();"}], "start_byte": 2626, "end_byte": 2701, "start_point": [76, 20], "end_point": [78, 21], "text": "arg_list.as_ref() {\n                        let cloned_cell = cell.clone();"}], "start_byte": 2626, "end_byte": 2701, "start_point": [76, 20], "end_point": [78, 21], "text": "arg_list.as_ref() {\n                        let cloned_cell = cell.clone();"}, {"type": "expression_statement", "children": [{"type": "compound_assignment_expr", "children": [{"type": "identifier", "children": [], "start_byte": 2722, "end_byte": 2723, "start_point": [79, 20], "end_point": [79, 21], "text": " "}, {"type": "+=", "children": [], "start_byte": 2724, "end_byte": 2726, "start_point": [79, 22], "end_point": [79, 24], "text": "  "}, {"type": "integer_literal", "children": [], "start_byte": 2727, "end_byte": 2728, "start_point": [79, 25], "end_point": [79, 26], "text": "a"}], "start_byte": 2722, "end_byte": 2728, "start_point": [79, 20], "end_point": [79, 26], "text": "    *a"}, {"type": ";", "children": [], "start_byte": 2728, "end_byte": 2729, "start_point": [79, 26], "end_point": [79, 27], "text": "r"}], "start_byte": 2722, "end_byte": 2729, "start_point": [79, 20], "end_point": [79, 27], "text": "    *ar"}, {"type": "}", "children": [], "start_byte": 2746, "end_byte": 2747, "start_point": [80, 16], "end_point": [80, 17], "text": ":"}], "start_byte": 2604, "end_byte": 2747, "start_point": [75, 56], "end_point": [80, 17], "text": "  if let Some(cell) = arg_list.as_ref() {\n                        let cloned_cell = cell.clone();\n                        *arg_list = Some(Box:"}], "start_byte": 2564, "end_byte": 2747, "start_point": [75, 16], "end_point": [80, 17], "text": "\u4fdd\u4ece\u6b63\u786e\u7684\u4f4d\u7f6e\u5f00\u59cb\uff0c\u5e76\u4e14\u53ea\u63d0\u53d6\u6240\u9700\u7684\u957f\u5ea6\u3002\n                    if let Some(cell) = arg_list.as_ref() {\n                        let cloned_cell = cell.clone();\n                        *arg_list = Some(Box:"}], "start_byte": 2564, "end_byte": 2747, "start_point": [75, 16], "end_point": [80, 17], "text": "\u4fdd\u4ece\u6b63\u786e\u7684\u4f4d\u7f6e\u5f00\u59cb\uff0c\u5e76\u4e14\u53ea\u63d0\u53d6\u6240\u9700\u7684\u957f\u5ea6\u3002\n                    if let Some(cell) = arg_list.as_ref() {\n                        let cloned_cell = cell.clone();\n                        *arg_list = Some(Box:"}, {"type": "expression_statement", "children": [{"type": "if_expression", "children": [{"type": "if", "children": [], "start_byte": 2764, "end_byte": 2766, "start_point": [81, 16], "end_point": [81, 18], "text": "sn"}, {"type": "binary_expression", "children": [{"type": "identifier", "children": [], "start_byte": 2767, "end_byte": 2768, "start_point": [81, 19], "end_point": [81, 20], "text": "c"}, {"type": ">", "children": [], "start_byte": 2769, "end_byte": 2770, "start_point": [81, 21], "end_point": [81, 22], "text": "s"}, {"type": "identifier", "children": [], "start_byte": 2771, "end_byte": 2776, "start_point": [81, 23], "end_point": [81, 28], "text": "ring("}], "start_byte": 2767, "end_byte": 2776, "start_point": [81, 19], "end_point": [81, 28], "text": "c_string("}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 2777, "end_byte": 2778, "start_point": [81, 29], "end_point": [81, 30], "text": "t"}, {"type": "let_declaration", "children": [{"type": "let", "children": [], "start_byte": 2799, "end_byte": 2802, "start_point": [82, 20], "end_point": [82, 23], "text": "   "}, {"type": "identifier", "children": [], "start_byte": 2803, "end_byte": 2804, "start_point": [82, 24], "end_point": [82, 25], "text": " "}, {"type": "=", "children": [], "start_byte": 2805, "end_byte": 2806, "start_point": [82, 26], "end_point": [82, 27], "text": " "}, {"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 2807, "end_byte": 2808, "start_point": [82, 28], "end_point": [82, 29], "text": " "}, {"type": ".", "children": [], "start_byte": 2808, "end_byte": 2809, "start_point": [82, 29], "end_point": [82, 30], "text": " "}, {"type": "field_identifier", "children": [], "start_byte": 2809, "end_byte": 2812, "start_point": [82, 30], "end_point": [82, 33], "text": "   "}], "start_byte": 2807, "end_byte": 2812, "start_point": [82, 28], "end_point": [82, 33], "text": "     "}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 2812, "end_byte": 2813, "start_point": [82, 33], "end_point": [82, 34], "text": " "}, {"type": "binary_expression", "children": [{"type": "integer_literal", "children": [], "start_byte": 2813, "end_byte": 2817, "start_point": [82, 34], "end_point": [82, 38], "text": "    "}, {"type": "-", "children": [], "start_byte": 2818, "end_byte": 2819, "start_point": [82, 39], "end_point": [82, 40], "text": "\n"}, {"type": "integer_literal", "children": [], "start_byte": 2820, "end_byte": 2822, "start_point": [82, 41], "end_point": [82, 43], "text": "  "}], "start_byte": 2813, "end_byte": 2822, "start_point": [82, 34], "end_point": [82, 43], "text": "    }\n   "}, {"type": ")", "children": [], "start_byte": 2822, "end_byte": 2823, "start_point": [82, 43], "end_point": [82, 44], "text": " "}], "start_byte": 2812, "end_byte": 2823, "start_point": [82, 33], "end_point": [82, 44], "text": "     }\n    "}], "start_byte": 2807, "end_byte": 2823, "start_point": [82, 28], "end_point": [82, 44], "text": "          }\n    "}, {"type": ";", "children": [], "start_byte": 2823, "end_byte": 2824, "start_point": [82, 44], "end_point": [82, 45], "text": " "}], "start_byte": 2799, "end_byte": 2824, "start_point": [82, 20], "end_point": [82, 45], "text": "                  }\n     "}, {"type": "let_declaration", "children": [{"type": "let", "children": [], "start_byte": 2846, "end_byte": 2849, "start_point": [83, 20], "end_point": [83, 23], "text": "   "}, {"type": "identifier", "children": [], "start_byte": 2850, "end_byte": 2858, "start_point": [83, 24], "end_point": [83, 32], "text": "        "}, {"type": ":", "children": [], "start_byte": 2858, "end_byte": 2859, "start_point": [83, 32], "end_point": [83, 33], "text": " "}, {"type": "type_identifier", "children": [], "start_byte": 2860, "end_byte": 2866, "start_point": [83, 34], "end_point": [83, 40], "text": "      "}, {"type": "=", "children": [], "start_byte": 2867, "end_byte": 2868, "start_point": [83, 41], "end_point": [83, 42], "text": " "}, {"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 2869, "end_byte": 2873, "start_point": [83, 43], "end_point": [83, 47], "text": " let"}, {"type": ".", "children": [], "start_byte": 2873, "end_byte": 2874, "start_point": [83, 47], "end_point": [83, 48], "text": " "}, {"type": "field_identifier", "children": [], "start_byte": 2874, "end_byte": 2879, "start_point": [83, 48], "end_point": [83, 53], "text": "mut n"}], "start_byte": 2869, "end_byte": 2879, "start_point": [83, 43], "end_point": [83, 53], "text": " let mut n"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 2879, "end_byte": 2880, "start_point": [83, 53], "end_point": [83, 54], "text": "e"}, {"type": ")", "children": [], "start_byte": 2880, "end_byte": 2881, "start_point": [83, 54], "end_point": [83, 55], "text": "w"}], "start_byte": 2879, "end_byte": 2881, "start_point": [83, 53], "end_point": [83, 55], "text": "ew"}], "start_byte": 2869, "end_byte": 2881, "start_point": [83, 43], "end_point": [83, 55], "text": " let mut new"}, {"type": ".", "children": [], "start_byte": 2881, "end_byte": 2882, "start_point": [83, 55], "end_point": [83, 56], "text": "_"}, {"type": "field_identifier", "children": [], "start_byte": 2882, "end_byte": 2886, "start_point": [83, 56], "end_point": [83, 60], "text": "cell"}], "start_byte": 2869, "end_byte": 2886, "start_point": [83, 43], "end_point": [83, 60], "text": " let mut new_cell"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 2886, "end_byte": 2887, "start_point": [83, 60], "end_point": [83, 61], "text": " "}, {"type": "identifier", "children": [], "start_byte": 2887, "end_byte": 2892, "start_point": [83, 61], "end_point": [83, 66], "text": "= Cel"}, {"type": ")", "children": [], "start_byte": 2892, "end_byte": 2893, "start_point": [83, 66], "end_point": [83, 67], "text": "l"}], "start_byte": 2886, "end_byte": 2893, "start_point": [83, 60], "end_point": [83, 67], "text": " = Cell"}], "start_byte": 2869, "end_byte": 2893, "start_point": [83, 43], "end_point": [83, 67], "text": " let mut new_cell = Cell"}, {"type": ".", "children": [], "start_byte": 2893, "end_byte": 2894, "start_point": [83, 67], "end_point": [83, 68], "text": ":"}, {"type": "field_identifier", "children": [], "start_byte": 2894, "end_byte": 2898, "start_point": [83, 68], "end_point": [83, 72], "text": ":mk_"}], "start_byte": 2869, "end_byte": 2898, "start_point": [83, 43], "end_point": [83, 72], "text": " let mut new_cell = Cell::mk_"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 2898, "end_byte": 2899, "start_point": [83, 72], "end_point": [83, 73], "text": "c"}, {"type": "binary_expression", "children": [{"type": "identifier", "children": [], "start_byte": 2899, "end_byte": 2900, "start_point": [83, 73], "end_point": [83, 74], "text": "e"}, {"type": "-", "children": [], "start_byte": 2901, "end_byte": 2902, "start_point": [83, 75], "end_point": [83, 76], "text": "l"}, {"type": "identifier", "children": [], "start_byte": 2903, "end_byte": 2908, "start_point": [83, 77], "end_point": [83, 82], "text": ");\n  "}], "start_byte": 2899, "end_byte": 2908, "start_point": [83, 73], "end_point": [83, 82], "text": "ell();\n  "}, {"type": ")", "children": [], "start_byte": 2908, "end_byte": 2909, "start_point": [83, 82], "end_point": [83, 83], "text": " "}], "start_byte": 2898, "end_byte": 2909, "start_point": [83, 72], "end_point": [83, 83], "text": "cell();\n   "}], "start_byte": 2869, "end_byte": 2909, "start_point": [83, 43], "end_point": [83, 83], "text": " let mut new_cell = Cell::mk_cell();\n   "}, {"type": ".", "children": [], "start_byte": 2909, "end_byte": 2910, "start_point": [83, 83], "end_point": [83, 84], "text": " "}, {"type": "field_identifier", "children": [], "start_byte": 2910, "end_byte": 2917, "start_point": [83, 84], "end_point": [83, 91], "text": "       "}], "start_byte": 2869, "end_byte": 2917, "start_point": [83, 43], "end_point": [83, 91], "text": " let mut new_cell = Cell::mk_cell();\n           "}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 2917, "end_byte": 2918, "start_point": [83, 91], "end_point": [83, 92], "text": " "}, {"type": ")", "children": [], "start_byte": 2918, "end_byte": 2919, "start_point": [83, 92], "end_point": [83, 93], "text": " "}], "start_byte": 2917, "end_byte": 2919, "start_point": [83, 91], "end_point": [83, 93], "text": "  "}], "start_byte": 2869, "end_byte": 2919, "start_point": [83, 43], "end_point": [83, 93], "text": " let mut new_cell = Cell::mk_cell();\n             "}, {"type": ";", "children": [], "start_byte": 2919, "end_byte": 2920, "start_point": [83, 93], "end_point": [83, 94], "text": " "}], "start_byte": 2846, "end_byte": 2920, "start_point": [83, 20], "end_point": [83, 94], "text": "                        let mut new_cell = Cell::mk_cell();\n              "}, {"type": "line_comment", "children": [], "start_byte": 2921, "end_byte": 3016, "start_point": [83, 95], "end_point": [83, 190], "text": "         new_cell.name = Some(Box::new(tmp_name.trim().to_string())); // trim(): \u63d0\u53d6\u7684\u5b57\u7b26\u4e32\u6ca1\u6709\u524d\u5bfc\u6216\u5c3e\u90e8\u7684"}, {"type": "expression_statement", "children": [{"type": "if_expression", "children": [{"type": "if", "children": [], "start_byte": 3037, "end_byte": 3039, "start_point": [84, 20], "end_point": [84, 22], "text": "  "}, {"type": "let_condition", "children": [{"type": "let", "children": [], "start_byte": 3040, "end_byte": 3043, "start_point": [84, 23], "end_point": [84, 26], "text": "   "}, {"type": "tuple_struct_pattern", "children": [{"type": "identifier", "children": [], "start_byte": 3044, "end_byte": 3048, "start_point": [84, 27], "end_point": [84, 31], "text": "arg_"}, {"type": "(", "children": [], "start_byte": 3048, "end_byte": 3049, "start_point": [84, 31], "end_point": [84, 32], "text": "l"}, {"type": "identifier", "children": [], "start_byte": 3049, "end_byte": 3053, "start_point": [84, 32], "end_point": [84, 36], "text": "ist "}, {"type": ")", "children": [], "start_byte": 3053, "end_byte": 3054, "start_point": [84, 36], "end_point": [84, 37], "text": "="}], "start_byte": 3044, "end_byte": 3054, "start_point": [84, 27], "end_point": [84, 37], "text": "arg_list ="}, {"type": "=", "children": [], "start_byte": 3055, "end_byte": 3056, "start_point": [84, 38], "end_point": [84, 39], "text": "S"}, {"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 3057, "end_byte": 3065, "start_point": [84, 40], "end_point": [84, 48], "text": "me(Box::"}, {"type": ".", "children": [], "start_byte": 3065, "end_byte": 3066, "start_point": [84, 48], "end_point": [84, 49], "text": "n"}, {"type": "field_identifier", "children": [], "start_byte": 3066, "end_byte": 3072, "start_point": [84, 49], "end_point": [84, 55], "text": "ew(new"}], "start_byte": 3057, "end_byte": 3072, "start_point": [84, 40], "end_point": [84, 55], "text": "me(Box::new(new"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 3072, "end_byte": 3073, "start_point": [84, 55], "end_point": [84, 56], "text": "_"}, {"type": ")", "children": [], "start_byte": 3073, "end_byte": 3074, "start_point": [84, 56], "end_point": [84, 57], "text": "c"}], "start_byte": 3072, "end_byte": 3074, "start_point": [84, 55], "end_point": [84, 57], "text": "_c"}], "start_byte": 3057, "end_byte": 3074, "start_point": [84, 40], "end_point": [84, 57], "text": "me(Box::new(new_c"}], "start_byte": 3040, "end_byte": 3074, "start_point": [84, 23], "end_point": [84, 57], "text": "   *arg_list = Some(Box::new(new_c"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 3075, "end_byte": 3076, "start_point": [84, 58], "end_point": [84, 59], "text": "l"}, {"type": "let_declaration", "children": [{"type": "let", "children": [], "start_byte": 3101, "end_byte": 3104, "start_point": [85, 24], "end_point": [85, 27], "text": "}\n "}, {"type": "identifier", "children": [], "start_byte": 3105, "end_byte": 3116, "start_point": [85, 28], "end_point": [85, 39], "text": "           "}, {"type": "=", "children": [], "start_byte": 3117, "end_byte": 3118, "start_point": [85, 40], "end_point": [85, 41], "text": " "}, {"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 3119, "end_byte": 3123, "start_point": [85, 42], "end_point": [85, 46], "text": "}\n  "}, {"type": ".", "children": [], "start_byte": 3123, "end_byte": 3124, "start_point": [85, 46], "end_point": [85, 47], "text": " "}, {"type": "field_identifier", "children": [], "start_byte": 3124, "end_byte": 3129, "start_point": [85, 47], "end_point": [85, 52], "text": "     "}], "start_byte": 3119, "end_byte": 3129, "start_point": [85, 42], "end_point": [85, 52], "text": "}\n        "}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 3129, "end_byte": 3130, "start_point": [85, 52], "end_point": [85, 53], "text": " "}, {"type": ")", "children": [], "start_byte": 3130, "end_byte": 3131, "start_point": [85, 53], "end_point": [85, 54], "text": " "}], "start_byte": 3129, "end_byte": 3131, "start_point": [85, 52], "end_point": [85, 54], "text": "  "}], "start_byte": 3119, "end_byte": 3131, "start_point": [85, 42], "end_point": [85, 54], "text": "}\n          "}, {"type": ";", "children": [], "start_byte": 3131, "end_byte": 3132, "start_point": [85, 54], "end_point": [85, 55], "text": " "}], "start_byte": 3101, "end_byte": 3132, "start_point": [85, 24], "end_point": [85, 55], "text": "}\n                }\n           "}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "unary_expression", "children": [{"type": "*", "children": [], "start_byte": 3157, "end_byte": 3158, "start_point": [86, 24], "end_point": [86, 25], "text": "\n"}, {"type": "identifier", "children": [], "start_byte": 3158, "end_byte": 3166, "start_point": [86, 25], "end_point": [86, 33], "text": "\nfn gete"}], "start_byte": 3157, "end_byte": 3166, "start_point": [86, 24], "end_point": [86, 33], "text": "\n\nfn gete"}, {"type": "=", "children": [], "start_byte": 3167, "end_byte": 3168, "start_point": [86, 34], "end_point": [86, 35], "text": "v"}, {"type": "call_expression", "children": [{"type": "identifier", "children": [], "start_byte": 3169, "end_byte": 3173, "start_point": [86, 36], "end_point": [86, 40], "text": "var_"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 3173, "end_byte": 3174, "start_point": [86, 40], "end_point": [86, 41], "text": "n"}, {"type": "call_expression", "children": [{"type": "scoped_identifier", "children": [{"type": "identifier", "children": [], "start_byte": 3174, "end_byte": 3177, "start_point": [86, 41], "end_point": [86, 44], "text": "ame"}, {"type": "::", "children": [], "start_byte": 3177, "end_byte": 3179, "start_point": [86, 44], "end_point": [86, 46], "text": ": "}, {"type": "identifier", "children": [], "start_byte": 3179, "end_byte": 3182, "start_point": [86, 46], "end_point": [86, 49], "text": "&st"}], "start_byte": 3174, "end_byte": 3182, "start_point": [86, 41], "end_point": [86, 49], "text": "ame: &st"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 3182, "end_byte": 3183, "start_point": [86, 49], "end_point": [86, 50], "text": "r"}, {"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 3183, "end_byte": 3194, "start_point": [86, 50], "end_point": [86, 61], "text": ") -> Option"}, {"type": ".", "children": [], "start_byte": 3194, "end_byte": 3195, "start_point": [86, 61], "end_point": [86, 62], "text": "<"}, {"type": "field_identifier", "children": [], "start_byte": 3195, "end_byte": 3206, "start_point": [86, 62], "end_point": [86, 73], "text": "&'static st"}], "start_byte": 3183, "end_byte": 3206, "start_point": [86, 50], "end_point": [86, 73], "text": ") -> Option<&'static st"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 3206, "end_byte": 3207, "start_point": [86, 73], "end_point": [86, 74], "text": "r"}, {"type": "reference_expression", "children": [{"type": "&", "children": [], "start_byte": 3207, "end_byte": 3208, "start_point": [86, 74], "end_point": [86, 75], "text": ">"}, {"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 3208, "end_byte": 3216, "start_point": [86, 75], "end_point": [86, 83], "text": " {\n    i"}, {"type": ".", "children": [], "start_byte": 3216, "end_byte": 3217, "start_point": [86, 83], "end_point": [86, 84], "text": "f"}, {"type": "field_identifier", "children": [], "start_byte": 3217, "end_byte": 3221, "start_point": [86, 84], "end_point": [86, 88], "text": " var"}], "start_byte": 3208, "end_byte": 3221, "start_point": [86, 75], "end_point": [86, 88], "text": " {\n    if var"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 3221, "end_byte": 3222, "start_point": [86, 88], "end_point": [86, 89], "text": "_"}, {"type": ")", "children": [], "start_byte": 3222, "end_byte": 3223, "start_point": [86, 89], "end_point": [86, 90], "text": "n"}], "start_byte": 3221, "end_byte": 3223, "start_point": [86, 88], "end_point": [86, 90], "text": "_n"}], "start_byte": 3208, "end_byte": 3223, "start_point": [86, 75], "end_point": [86, 90], "text": " {\n    if var_n"}], "start_byte": 3207, "end_byte": 3223, "start_point": [86, 74], "end_point": [86, 90], "text": "> {\n    if var_n"}, {"type": ")", "children": [], "start_byte": 3223, "end_byte": 3224, "start_point": [86, 90], "end_point": [86, 91], "text": "a"}], "start_byte": 3206, "end_byte": 3224, "start_point": [86, 73], "end_point": [86, 91], "text": "r> {\n    if var_na"}], "start_byte": 3183, "end_byte": 3224, "start_point": [86, 50], "end_point": [86, 91], "text": ") -> Option<&'static str> {\n    if var_na"}, {"type": ")", "children": [], "start_byte": 3224, "end_byte": 3225, "start_point": [86, 91], "end_point": [86, 92], "text": "m"}], "start_byte": 3182, "end_byte": 3225, "start_point": [86, 49], "end_point": [86, 92], "text": "r) -> Option<&'static str> {\n    if var_nam"}], "start_byte": 3174, "end_byte": 3225, "start_point": [86, 41], "end_point": [86, 92], "text": "ame: &str) -> Option<&'static str> {\n    if var_nam"}, {"type": ")", "children": [], "start_byte": 3225, "end_byte": 3226, "start_point": [86, 92], "end_point": [86, 93], "text": "e"}], "start_byte": 3173, "end_byte": 3226, "start_point": [86, 40], "end_point": [86, 93], "text": "name: &str) -> Option<&'static str> {\n    if var_name"}], "start_byte": 3169, "end_byte": 3226, "start_point": [86, 36], "end_point": [86, 93], "text": "var_name: &str) -> Option<&'static str> {\n    if var_name"}], "start_byte": 3157, "end_byte": 3226, "start_point": [86, 24], "end_point": [86, 93], "text": "\n\nfn getenv(var_name: &str) -> Option<&'static str> {\n    if var_name"}, {"type": ";", "children": [], "start_byte": 3226, "end_byte": 3227, "start_point": [86, 93], "end_point": [86, 94], "text": " "}], "start_byte": 3157, "end_byte": 3227, "start_point": [86, 24], "end_point": [86, 94], "text": "\n\nfn getenv(var_name: &str) -> Option<&'static str> {\n    if var_name "}, {"type": "}", "children": [], "start_byte": 3248, "end_byte": 3249, "start_point": [87, 20], "end_point": [87, 21], "text": " "}], "start_byte": 3075, "end_byte": 3249, "start_point": [84, 58], "end_point": [87, 21], "text": "ll));\n                    }\n                }\n            }\n        }\n    }\n    \n}\n\nfn getenv(var_name: &str) -> Option<&'static str> {\n    if var_name == \"MY_TEST_ENV\" {\n   "}, {"type": "else_clause", "children": [{"type": "else", "children": [], "start_byte": 3270, "end_byte": 3274, "start_point": [88, 20], "end_point": [88, 24], "text": "2 fl"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 3275, "end_byte": 3276, "start_point": [88, 25], "end_point": [88, 26], "text": "g"}, {"type": "let_declaration", "children": [{"type": "let", "children": [], "start_byte": 3301, "end_byte": 3304, "start_point": [89, 24], "end_point": [89, 27], "text": "Non"}, {"type": "mutable_specifier", "children": [], "start_byte": 3305, "end_byte": 3308, "start_point": [89, 28], "end_point": [89, 31], "text": "\n  "}, {"type": "identifier", "children": [], "start_byte": 3309, "end_byte": 3317, "start_point": [89, 32], "end_point": [89, 40], "text": " }\n}\n\n//"}, {"type": "=", "children": [], "start_byte": 3318, "end_byte": 3319, "start_point": [89, 41], "end_point": [89, 42], "text": "#"}, {"type": "call_expression", "children": [{"type": "scoped_identifier", "children": [{"type": "identifier", "children": [], "start_byte": 3320, "end_byte": 3324, "start_point": [89, 43], "end_point": [89, 47], "text": "cfg("}, {"type": "::", "children": [], "start_byte": 3324, "end_byte": 3326, "start_point": [89, 47], "end_point": [89, 49], "text": "te"}, {"type": "identifier", "children": [], "start_byte": 3326, "end_byte": 3333, "start_point": [89, 49], "end_point": [89, 56], "text": "st)]\n//"}], "start_byte": 3320, "end_byte": 3333, "start_point": [89, 43], "end_point": [89, 56], "text": "cfg(test)]\n//"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 3333, "end_byte": 3334, "start_point": [89, 56], "end_point": [89, 57], "text": " "}, {"type": ")", "children": [], "start_byte": 3334, "end_byte": 3335, "start_point": [89, 57], "end_point": [89, 58], "text": "m"}], "start_byte": 3333, "end_byte": 3335, "start_point": [89, 56], "end_point": [89, 58], "text": " m"}], "start_byte": 3320, "end_byte": 3335, "start_point": [89, 43], "end_point": [89, 58], "text": "cfg(test)]\n// m"}, {"type": ";", "children": [], "start_byte": 3335, "end_byte": 3336, "start_point": [89, 58], "end_point": [89, 59], "text": "o"}], "start_byte": 3301, "end_byte": 3336, "start_point": [89, 24], "end_point": [89, 59], "text": "None\n    }\n}\n\n// #[cfg(test)]\n// mo"}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 3361, "end_byte": 3369, "start_point": [90, 24], "end_point": [90, 32], "text": "r::*;\n\n/"}, {"type": ".", "children": [], "start_byte": 3369, "end_byte": 3370, "start_point": [90, 32], "end_point": [90, 33], "text": "/"}, {"type": "field_identifier", "children": [], "start_byte": 3370, "end_byte": 3374, "start_point": [90, 33], "end_point": [90, 37], "text": "    "}], "start_byte": 3361, "end_byte": 3374, "start_point": [90, 24], "end_point": [90, 37], "text": "r::*;\n\n//    "}, {"type": "=", "children": [], "start_byte": 3375, "end_byte": 3376, "start_point": [90, 38], "end_point": [90, 39], "text": "#"}, {"type": "call_expression", "children": [{"type": "identifier", "children": [], "start_byte": 3377, "end_byte": 3381, "start_point": [90, 40], "end_point": [90, 44], "text": "test"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 3381, "end_byte": 3382, "start_point": [90, 44], "end_point": [90, 45], "text": "]"}, {"type": "call_expression", "children": [{"type": "scoped_identifier", "children": [{"type": "identifier", "children": [], "start_byte": 3382, "end_byte": 3385, "start_point": [90, 45], "end_point": [90, 48], "text": "\n//"}, {"type": "::", "children": [], "start_byte": 3385, "end_byte": 3387, "start_point": [90, 48], "end_point": [90, 50], "text": "  "}, {"type": "identifier", "children": [], "start_byte": 3387, "end_byte": 3390, "start_point": [90, 50], "end_point": [90, 53], "text": "   "}], "start_byte": 3382, "end_byte": 3390, "start_point": [90, 45], "end_point": [90, 53], "text": "\n//     "}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 3390, "end_byte": 3391, "start_point": [90, 53], "end_point": [90, 54], "text": "f"}, {"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 3391, "end_byte": 3399, "start_point": [90, 54], "end_point": [90, 62], "text": "n test_s"}, {"type": ".", "children": [], "start_byte": 3399, "end_byte": 3400, "start_point": [90, 62], "end_point": [90, 63], "text": "n"}, {"type": "field_identifier", "children": [], "start_byte": 3400, "end_byte": 3404, "start_point": [90, 63], "end_point": [90, 67], "text": "oc_s"}], "start_byte": 3391, "end_byte": 3404, "start_point": [90, 54], "end_point": [90, 67], "text": "n test_snoc_s"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 3404, "end_byte": 3405, "start_point": [90, 67], "end_point": [90, 68], "text": "t"}, {"type": ")", "children": [], "start_byte": 3405, "end_byte": 3406, "start_point": [90, 68], "end_point": [90, 69], "text": "r"}], "start_byte": 3404, "end_byte": 3406, "start_point": [90, 67], "end_point": [90, 69], "text": "tr"}], "start_byte": 3391, "end_byte": 3406, "start_point": [90, 54], "end_point": [90, 69], "text": "n test_snoc_str"}, {"type": ".", "children": [], "start_byte": 3406, "end_byte": 3407, "start_point": [90, 69], "end_point": [90, 70], "text": "i"}, {"type": "field_identifier", "children": [], "start_byte": 3407, "end_byte": 3416, "start_point": [90, 70], "end_point": [90, 79], "text": "ng() {\n//"}], "start_byte": 3391, "end_byte": 3416, "start_point": [90, 54], "end_point": [90, 79], "text": "n test_snoc_string() {\n//"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 3416, "end_byte": 3417, "start_point": [90, 79], "end_point": [90, 80], "text": " "}, {"type": ")", "children": [], "start_byte": 3417, "end_byte": 3418, "start_point": [90, 80], "end_point": [90, 81], "text": " "}], "start_byte": 3416, "end_byte": 3418, "start_point": [90, 79], "end_point": [90, 81], "text": "  "}], "start_byte": 3391, "end_byte": 3418, "start_point": [90, 54], "end_point": [90, 81], "text": "n test_snoc_string() {\n//  "}, {"type": ")", "children": [], "start_byte": 3418, "end_byte": 3419, "start_point": [90, 81], "end_point": [90, 82], "text": " "}], "start_byte": 3390, "end_byte": 3419, "start_point": [90, 53], "end_point": [90, 82], "text": "fn test_snoc_string() {\n//   "}], "start_byte": 3382, "end_byte": 3419, "start_point": [90, 45], "end_point": [90, 82], "text": "\n//     fn test_snoc_string() {\n//   "}, {"type": ")", "children": [], "start_byte": 3419, "end_byte": 3420, "start_point": [90, 82], "end_point": [90, 83], "text": " "}], "start_byte": 3381, "end_byte": 3420, "start_point": [90, 44], "end_point": [90, 83], "text": "]\n//     fn test_snoc_string() {\n//    "}], "start_byte": 3377, "end_byte": 3420, "start_point": [90, 40], "end_point": [90, 83], "text": "test]\n//     fn test_snoc_string() {\n//    "}], "start_byte": 3361, "end_byte": 3420, "start_point": [90, 24], "end_point": [90, 83], "text": "r::*;\n\n//     #[test]\n//     fn test_snoc_string() {\n//    "}, {"type": ";", "children": [], "start_byte": 3420, "end_byte": 3421, "start_point": [90, 83], "end_point": [90, 84], "text": " "}], "start_byte": 3361, "end_byte": 3421, "start_point": [90, 24], "end_point": [90, 84], "text": "r::*;\n\n//     #[test]\n//     fn test_snoc_string() {\n//     "}, {"type": "line_comment", "children": [], "start_byte": 3422, "end_byte": 3481, "start_point": [90, 85], "end_point": [90, 144], "text": "   let mut root = Cell::mk_cell();\n\n//         root = root."}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "unary_expression", "children": [{"type": "*", "children": [], "start_byte": 3506, "end_byte": 3507, "start_point": [91, 24], "end_point": [91, 25], "text": " "}, {"type": "identifier", "children": [], "start_byte": 3507, "end_byte": 3515, "start_point": [91, 25], "end_point": [91, 33], "text": "       a"}], "start_byte": 3506, "end_byte": 3515, "start_point": [91, 24], "end_point": [91, 33], "text": "        a"}, {"type": "=", "children": [], "start_byte": 3516, "end_byte": 3517, "start_point": [91, 34], "end_point": [91, 35], "text": "s"}, {"type": "call_expression", "children": [{"type": "identifier", "children": [], "start_byte": 3518, "end_byte": 3522, "start_point": [91, 36], "end_point": [91, 40], "text": "rt_e"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 3522, "end_byte": 3523, "start_point": [91, 40], "end_point": [91, 41], "text": "q"}, {"type": "call_expression", "children": [{"type": "scoped_identifier", "children": [{"type": "identifier", "children": [], "start_byte": 3523, "end_byte": 3526, "start_point": [91, 41], "end_point": [91, 44], "text": "!(r"}, {"type": "::", "children": [], "start_byte": 3526, "end_byte": 3528, "start_point": [91, 44], "end_point": [91, 46], "text": "oo"}, {"type": "identifier", "children": [], "start_byte": 3528, "end_byte": 3531, "start_point": [91, 46], "end_point": [91, 49], "text": "t.n"}], "start_byte": 3523, "end_byte": 3531, "start_point": [91, 41], "end_point": [91, 49], "text": "!(root.n"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 3531, "end_byte": 3532, "start_point": [91, 49], "end_point": [91, 50], "text": "a"}, {"type": "identifier", "children": [], "start_byte": 3532, "end_byte": 3540, "start_point": [91, 50], "end_point": [91, 58], "text": "me.as_re"}, {"type": ")", "children": [], "start_byte": 3540, "end_byte": 3541, "start_point": [91, 58], "end_point": [91, 59], "text": "f"}], "start_byte": 3531, "end_byte": 3541, "start_point": [91, 49], "end_point": [91, 59], "text": "ame.as_ref"}], "start_byte": 3523, "end_byte": 3541, "start_point": [91, 41], "end_point": [91, 59], "text": "!(root.name.as_ref"}, {"type": ")", "children": [], "start_byte": 3541, "end_byte": 3542, "start_point": [91, 59], "end_point": [91, 60], "text": "("}], "start_byte": 3522, "end_byte": 3542, "start_point": [91, 40], "end_point": [91, 60], "text": "q!(root.name.as_ref("}], "start_byte": 3518, "end_byte": 3542, "start_point": [91, 36], "end_point": [91, 60], "text": "rt_eq!(root.name.as_ref("}], "start_byte": 3506, "end_byte": 3542, "start_point": [91, 24], "end_point": [91, 60], "text": "        assert_eq!(root.name.as_ref("}, {"type": ";", "children": [], "start_byte": 3542, "end_byte": 3543, "start_point": [91, 60], "end_point": [91, 61], "text": ")"}], "start_byte": 3506, "end_byte": 3543, "start_point": [91, 24], "end_point": [91, 61], "text": "        assert_eq!(root.name.as_ref()"}, {"type": "}", "children": [], "start_byte": 3564, "end_byte": 3565, "start_point": [92, 20], "end_point": [92, 21], "text": "h"}], "start_byte": 3275, "end_byte": 3565, "start_point": [88, 25], "end_point": [92, 21], "text": "g3\")\n    } else {\n        None\n    }\n}\n\n// #[cfg(test)]\n// mod tests {\n//     use super::*;\n\n//     #[test]\n//     fn test_snoc_string() {\n//         let mut root = Cell::mk_cell();\n\n//         root = root.snoc_string(\"hello\");\n//         assert_eq!(root.name.as_ref().unwrap().as_ref(), \"h"}], "start_byte": 3270, "end_byte": 3565, "start_point": [88, 20], "end_point": [92, 21], "text": "2 flag3\")\n    } else {\n        None\n    }\n}\n\n// #[cfg(test)]\n// mod tests {\n//     use super::*;\n\n//     #[test]\n//     fn test_snoc_string() {\n//         let mut root = Cell::mk_cell();\n\n//         root = root.snoc_string(\"hello\");\n//         assert_eq!(root.name.as_ref().unwrap().as_ref(), \"h"}], "start_byte": 3037, "end_byte": 3565, "start_point": [84, 20], "end_point": [92, 21], "text": "      *arg_list = Some(Box::new(new_cell));\n                    }\n                }\n            }\n        }\n    }\n    \n}\n\nfn getenv(var_name: &str) -> Option<&'static str> {\n    if var_name == \"MY_TEST_ENV\" {\n        Some(\"flag1 flag2 flag3\")\n    } else {\n        None\n    }\n}\n\n// #[cfg(test)]\n// mod tests {\n//     use super::*;\n\n//     #[test]\n//     fn test_snoc_string() {\n//         let mut root = Cell::mk_cell();\n\n//         root = root.snoc_string(\"hello\");\n//         assert_eq!(root.name.as_ref().unwrap().as_ref(), \"h"}], "start_byte": 3037, "end_byte": 3565, "start_point": [84, 20], "end_point": [92, 21], "text": "      *arg_list = Some(Box::new(new_cell));\n                    }\n                }\n            }\n        }\n    }\n    \n}\n\nfn getenv(var_name: &str) -> Option<&'static str> {\n    if var_name == \"MY_TEST_ENV\" {\n        Some(\"flag1 flag2 flag3\")\n    } else {\n        None\n    }\n}\n\n// #[cfg(test)]\n// mod tests {\n//     use super::*;\n\n//     #[test]\n//     fn test_snoc_string() {\n//         let mut root = Cell::mk_cell();\n\n//         root = root.snoc_string(\"hello\");\n//         assert_eq!(root.name.as_ref().unwrap().as_ref(), \"h"}, {"type": "}", "children": [], "start_byte": 3582, "end_byte": 3583, "start_point": [93, 16], "end_point": [93, 17], "text": " "}], "start_byte": 2777, "end_byte": 3583, "start_point": [81, 29], "end_point": [93, 17], "text": "tmp_name.trim())));\n                    }\n                    else {\n                        let mut new_cell = Cell::mk_cell();\n                        new_cell.name = Some(Box::new(tmp_name.trim().to_string())); // trim(): \u63d0\u53d6\u7684\u5b57\u7b26\u4e32\u6ca1\u6709\u524d\u5bfc\u6216\u5c3e\u90e8\u7684\u7a7a\u683c\n                        *arg_list = Some(Box::new(new_cell));\n                    }\n                }\n            }\n        }\n    }\n    \n}\n\nfn getenv(var_name: &str) -> Option<&'static str> {\n    if var_name == \"MY_TEST_ENV\" {\n        Some(\"flag1 flag2 flag3\")\n    } else {\n        None\n    }\n}\n\n// #[cfg(test)]\n// mod tests {\n//     use super::*;\n\n//     #[test]\n//     fn test_snoc_string() {\n//         let mut root = Cell::mk_cell();\n\n//         root = root.snoc_string(\"hello\");\n//         assert_eq!(root.name.as_ref().unwrap().as_ref(), \"hello\");\n//        "}], "start_byte": 2764, "end_byte": 3583, "start_point": [81, 16], "end_point": [93, 17], "text": "snoc_string(&tmp_name.trim())));\n                    }\n                    else {\n                        let mut new_cell = Cell::mk_cell();\n                        new_cell.name = Some(Box::new(tmp_name.trim().to_string())); // trim(): \u63d0\u53d6\u7684\u5b57\u7b26\u4e32\u6ca1\u6709\u524d\u5bfc\u6216\u5c3e\u90e8\u7684\u7a7a\u683c\n                        *arg_list = Some(Box::new(new_cell));\n                    }\n                }\n            }\n        }\n    }\n    \n}\n\nfn getenv(var_name: &str) -> Option<&'static str> {\n    if var_name == \"MY_TEST_ENV\" {\n        Some(\"flag1 flag2 flag3\")\n    } else {\n        None\n    }\n}\n\n// #[cfg(test)]\n// mod tests {\n//     use super::*;\n\n//     #[test]\n//     fn test_snoc_string() {\n//         let mut root = Cell::mk_cell();\n\n//         root = root.snoc_string(\"hello\");\n//         assert_eq!(root.name.as_ref().unwrap().as_ref(), \"hello\");\n//        "}], "start_byte": 2764, "end_byte": 3583, "start_point": [81, 16], "end_point": [93, 17], "text": "snoc_string(&tmp_name.trim())));\n                    }\n                    else {\n                        let mut new_cell = Cell::mk_cell();\n                        new_cell.name = Some(Box::new(tmp_name.trim().to_string())); // trim(): \u63d0\u53d6\u7684\u5b57\u7b26\u4e32\u6ca1\u6709\u524d\u5bfc\u6216\u5c3e\u90e8\u7684\u7a7a\u683c\n                        *arg_list = Some(Box::new(new_cell));\n                    }\n                }\n            }\n        }\n    }\n    \n}\n\nfn getenv(var_name: &str) -> Option<&'static str> {\n    if var_name == \"MY_TEST_ENV\" {\n        Some(\"flag1 flag2 flag3\")\n    } else {\n        None\n    }\n}\n\n// #[cfg(test)]\n// mod tests {\n//     use super::*;\n\n//     #[test]\n//     fn test_snoc_string() {\n//         let mut root = Cell::mk_cell();\n\n//         root = root.snoc_string(\"hello\");\n//         assert_eq!(root.name.as_ref().unwrap().as_ref(), \"hello\");\n//        "}, {"type": "}", "children": [], "start_byte": 3596, "end_byte": 3597, "start_point": [94, 12], "end_point": [94, 13], "text": "."}], "start_byte": 2180, "end_byte": 3597, "start_point": [62, 52], "end_point": [94, 13], "text": "             while let Some(c) = base.chars().nth(i) {\n                    if c.is_whitespace() {\n                        break;\n                    }\n                    i += 1;\n                }\n                if i > start {\n                    let k = i.min(1024 - 10); \n                    let tmp_name: String = base.chars().skip(start).take(k - start).collect(); // \u63d0\u53d6\u5b50\u5b57\u7b26\u4e32\u65f6, \u6765\u786e\u4fdd\u4ece\u6b63\u786e\u7684\u4f4d\u7f6e\u5f00\u59cb\uff0c\u5e76\u4e14\u53ea\u63d0\u53d6\u6240\u9700\u7684\u957f\u5ea6\u3002\n                    if let Some(cell) = arg_list.as_ref() {\n                        let cloned_cell = cell.clone();\n                        *arg_list = Some(Box::new(cloned_cell.snoc_string(&tmp_name.trim())));\n                    }\n                    else {\n                        let mut new_cell = Cell::mk_cell();\n                        new_cell.name = Some(Box::new(tmp_name.trim().to_string())); // trim(): \u63d0\u53d6\u7684\u5b57\u7b26\u4e32\u6ca1\u6709\u524d\u5bfc\u6216\u5c3e\u90e8\u7684\u7a7a\u683c\n                        *arg_list = Some(Box::new(new_cell));\n                    }\n                }\n            }\n        }\n    }\n    \n}\n\nfn getenv(var_name: &str) -> Option<&'static str> {\n    if var_name == \"MY_TEST_ENV\" {\n        Some(\"flag1 flag2 flag3\")\n    } else {\n        None\n    }\n}\n\n// #[cfg(test)]\n// mod tests {\n//     use super::*;\n\n//     #[test]\n//     fn test_snoc_string() {\n//         let mut root = Cell::mk_cell();\n\n//         root = root.snoc_string(\"hello\");\n//         assert_eq!(root.name.as_ref().unwrap().as_ref(), \"hello\");\n//         assert!(root."}], "start_byte": 2140, "end_byte": 3597, "start_point": [62, 12], "end_point": [94, 13], "text": "    }\n                let start = i;\n                while let Some(c) = base.chars().nth(i) {\n                    if c.is_whitespace() {\n                        break;\n                    }\n                    i += 1;\n                }\n                if i > start {\n                    let k = i.min(1024 - 10); \n                    let tmp_name: String = base.chars().skip(start).take(k - start).collect(); // \u63d0\u53d6\u5b50\u5b57\u7b26\u4e32\u65f6, \u6765\u786e\u4fdd\u4ece\u6b63\u786e\u7684\u4f4d\u7f6e\u5f00\u59cb\uff0c\u5e76\u4e14\u53ea\u63d0\u53d6\u6240\u9700\u7684\u957f\u5ea6\u3002\n                    if let Some(cell) = arg_list.as_ref() {\n                        let cloned_cell = cell.clone();\n                        *arg_list = Some(Box::new(cloned_cell.snoc_string(&tmp_name.trim())));\n                    }\n                    else {\n                        let mut new_cell = Cell::mk_cell();\n                        new_cell.name = Some(Box::new(tmp_name.trim().to_string())); // trim(): \u63d0\u53d6\u7684\u5b57\u7b26\u4e32\u6ca1\u6709\u524d\u5bfc\u6216\u5c3e\u90e8\u7684\u7a7a\u683c\n                        *arg_list = Some(Box::new(new_cell));\n                    }\n                }\n            }\n        }\n    }\n    \n}\n\nfn getenv(var_name: &str) -> Option<&'static str> {\n    if var_name == \"MY_TEST_ENV\" {\n        Some(\"flag1 flag2 flag3\")\n    } else {\n        None\n    }\n}\n\n// #[cfg(test)]\n// mod tests {\n//     use super::*;\n\n//     #[test]\n//     fn test_snoc_string() {\n//         let mut root = Cell::mk_cell();\n\n//         root = root.snoc_string(\"hello\");\n//         assert_eq!(root.name.as_ref().unwrap().as_ref(), \"hello\");\n//         assert!(root."}], "start_byte": 2140, "end_byte": 3597, "start_point": [62, 12], "end_point": [94, 13], "text": "    }\n                let start = i;\n                while let Some(c) = base.chars().nth(i) {\n                    if c.is_whitespace() {\n                        break;\n                    }\n                    i += 1;\n                }\n                if i > start {\n                    let k = i.min(1024 - 10); \n                    let tmp_name: String = base.chars().skip(start).take(k - start).collect(); // \u63d0\u53d6\u5b50\u5b57\u7b26\u4e32\u65f6, \u6765\u786e\u4fdd\u4ece\u6b63\u786e\u7684\u4f4d\u7f6e\u5f00\u59cb\uff0c\u5e76\u4e14\u53ea\u63d0\u53d6\u6240\u9700\u7684\u957f\u5ea6\u3002\n                    if let Some(cell) = arg_list.as_ref() {\n                        let cloned_cell = cell.clone();\n                        *arg_list = Some(Box::new(cloned_cell.snoc_string(&tmp_name.trim())));\n                    }\n                    else {\n                        let mut new_cell = Cell::mk_cell();\n                        new_cell.name = Some(Box::new(tmp_name.trim().to_string())); // trim(): \u63d0\u53d6\u7684\u5b57\u7b26\u4e32\u6ca1\u6709\u524d\u5bfc\u6216\u5c3e\u90e8\u7684\u7a7a\u683c\n                        *arg_list = Some(Box::new(new_cell));\n                    }\n                }\n            }\n        }\n    }\n    \n}\n\nfn getenv(var_name: &str) -> Option<&'static str> {\n    if var_name == \"MY_TEST_ENV\" {\n        Some(\"flag1 flag2 flag3\")\n    } else {\n        None\n    }\n}\n\n// #[cfg(test)]\n// mod tests {\n//     use super::*;\n\n//     #[test]\n//     fn test_snoc_string() {\n//         let mut root = Cell::mk_cell();\n\n//         root = root.snoc_string(\"hello\");\n//         assert_eq!(root.name.as_ref().unwrap().as_ref(), \"hello\");\n//         assert!(root."}, {"type": "}", "children": [], "start_byte": 3606, "end_byte": 3607, "start_point": [95, 8], "end_point": [95, 9], "text": "o"}], "start_byte": 2099, "end_byte": 3607, "start_point": [60, 40], "end_point": [95, 9], "text": "\n                    i += 1;\n                }\n                let start = i;\n                while let Some(c) = base.chars().nth(i) {\n                    if c.is_whitespace() {\n                        break;\n                    }\n                    i += 1;\n                }\n                if i > start {\n                    let k = i.min(1024 - 10); \n                    let tmp_name: String = base.chars().skip(start).take(k - start).collect(); // \u63d0\u53d6\u5b50\u5b57\u7b26\u4e32\u65f6, \u6765\u786e\u4fdd\u4ece\u6b63\u786e\u7684\u4f4d\u7f6e\u5f00\u59cb\uff0c\u5e76\u4e14\u53ea\u63d0\u53d6\u6240\u9700\u7684\u957f\u5ea6\u3002\n                    if let Some(cell) = arg_list.as_ref() {\n                        let cloned_cell = cell.clone();\n                        *arg_list = Some(Box::new(cloned_cell.snoc_string(&tmp_name.trim())));\n                    }\n                    else {\n                        let mut new_cell = Cell::mk_cell();\n                        new_cell.name = Some(Box::new(tmp_name.trim().to_string())); // trim(): \u63d0\u53d6\u7684\u5b57\u7b26\u4e32\u6ca1\u6709\u524d\u5bfc\u6216\u5c3e\u90e8\u7684\u7a7a\u683c\n                        *arg_list = Some(Box::new(new_cell));\n                    }\n                }\n            }\n        }\n    }\n    \n}\n\nfn getenv(var_name: &str) -> Option<&'static str> {\n    if var_name == \"MY_TEST_ENV\" {\n        Some(\"flag1 flag2 flag3\")\n    } else {\n        None\n    }\n}\n\n// #[cfg(test)]\n// mod tests {\n//     use super::*;\n\n//     #[test]\n//     fn test_snoc_string() {\n//         let mut root = Cell::mk_cell();\n\n//         root = root.snoc_string(\"hello\");\n//         assert_eq!(root.name.as_ref().unwrap().as_ref(), \"hello\");\n//         assert!(root.link.is_no"}], "start_byte": 2067, "end_byte": 3607, "start_point": [60, 8], "end_point": [95, 9], "text": "    break;\n                    }\n                    i += 1;\n                }\n                let start = i;\n                while let Some(c) = base.chars().nth(i) {\n                    if c.is_whitespace() {\n                        break;\n                    }\n                    i += 1;\n                }\n                if i > start {\n                    let k = i.min(1024 - 10); \n                    let tmp_name: String = base.chars().skip(start).take(k - start).collect(); // \u63d0\u53d6\u5b50\u5b57\u7b26\u4e32\u65f6, \u6765\u786e\u4fdd\u4ece\u6b63\u786e\u7684\u4f4d\u7f6e\u5f00\u59cb\uff0c\u5e76\u4e14\u53ea\u63d0\u53d6\u6240\u9700\u7684\u957f\u5ea6\u3002\n                    if let Some(cell) = arg_list.as_ref() {\n                        let cloned_cell = cell.clone();\n                        *arg_list = Some(Box::new(cloned_cell.snoc_string(&tmp_name.trim())));\n                    }\n                    else {\n                        let mut new_cell = Cell::mk_cell();\n                        new_cell.name = Some(Box::new(tmp_name.trim().to_string())); // trim(): \u63d0\u53d6\u7684\u5b57\u7b26\u4e32\u6ca1\u6709\u524d\u5bfc\u6216\u5c3e\u90e8\u7684\u7a7a\u683c\n                        *arg_list = Some(Box::new(new_cell));\n                    }\n                }\n            }\n        }\n    }\n    \n}\n\nfn getenv(var_name: &str) -> Option<&'static str> {\n    if var_name == \"MY_TEST_ENV\" {\n        Some(\"flag1 flag2 flag3\")\n    } else {\n        None\n    }\n}\n\n// #[cfg(test)]\n// mod tests {\n//     use super::*;\n\n//     #[test]\n//     fn test_snoc_string() {\n//         let mut root = Cell::mk_cell();\n\n//         root = root.snoc_string(\"hello\");\n//         assert_eq!(root.name.as_ref().unwrap().as_ref(), \"hello\");\n//         assert!(root.link.is_no"}], "start_byte": 2067, "end_byte": 3607, "start_point": [60, 8], "end_point": [95, 9], "text": "    break;\n                    }\n                    i += 1;\n                }\n                let start = i;\n                while let Some(c) = base.chars().nth(i) {\n                    if c.is_whitespace() {\n                        break;\n                    }\n                    i += 1;\n                }\n                if i > start {\n                    let k = i.min(1024 - 10); \n                    let tmp_name: String = base.chars().skip(start).take(k - start).collect(); // \u63d0\u53d6\u5b50\u5b57\u7b26\u4e32\u65f6, \u6765\u786e\u4fdd\u4ece\u6b63\u786e\u7684\u4f4d\u7f6e\u5f00\u59cb\uff0c\u5e76\u4e14\u53ea\u63d0\u53d6\u6240\u9700\u7684\u957f\u5ea6\u3002\n                    if let Some(cell) = arg_list.as_ref() {\n                        let cloned_cell = cell.clone();\n                        *arg_list = Some(Box::new(cloned_cell.snoc_string(&tmp_name.trim())));\n                    }\n                    else {\n                        let mut new_cell = Cell::mk_cell();\n                        new_cell.name = Some(Box::new(tmp_name.trim().to_string())); // trim(): \u63d0\u53d6\u7684\u5b57\u7b26\u4e32\u6ca1\u6709\u524d\u5bfc\u6216\u5c3e\u90e8\u7684\u7a7a\u683c\n                        *arg_list = Some(Box::new(new_cell));\n                    }\n                }\n            }\n        }\n    }\n    \n}\n\nfn getenv(var_name: &str) -> Option<&'static str> {\n    if var_name == \"MY_TEST_ENV\" {\n        Some(\"flag1 flag2 flag3\")\n    } else {\n        None\n    }\n}\n\n// #[cfg(test)]\n// mod tests {\n//     use super::*;\n\n//     #[test]\n//     fn test_snoc_string() {\n//         let mut root = Cell::mk_cell();\n\n//         root = root.snoc_string(\"hello\");\n//         assert_eq!(root.name.as_ref().unwrap().as_ref(), \"hello\");\n//         assert!(root.link.is_no"}, {"type": "}", "children": [], "start_byte": 3612, "end_byte": 3613, "start_point": [96, 4], "end_point": [96, 5], "text": ";"}], "start_byte": 2017, "end_byte": 3613, "start_point": [58, 84], "end_point": [96, 5], "text": "      if !c.is_whitespace() {\n                        break;\n                    }\n                    i += 1;\n                }\n                let start = i;\n                while let Some(c) = base.chars().nth(i) {\n                    if c.is_whitespace() {\n                        break;\n                    }\n                    i += 1;\n                }\n                if i > start {\n                    let k = i.min(1024 - 10); \n                    let tmp_name: String = base.chars().skip(start).take(k - start).collect(); // \u63d0\u53d6\u5b50\u5b57\u7b26\u4e32\u65f6, \u6765\u786e\u4fdd\u4ece\u6b63\u786e\u7684\u4f4d\u7f6e\u5f00\u59cb\uff0c\u5e76\u4e14\u53ea\u63d0\u53d6\u6240\u9700\u7684\u957f\u5ea6\u3002\n                    if let Some(cell) = arg_list.as_ref() {\n                        let cloned_cell = cell.clone();\n                        *arg_list = Some(Box::new(cloned_cell.snoc_string(&tmp_name.trim())));\n                    }\n                    else {\n                        let mut new_cell = Cell::mk_cell();\n                        new_cell.name = Some(Box::new(tmp_name.trim().to_string())); // trim(): \u63d0\u53d6\u7684\u5b57\u7b26\u4e32\u6ca1\u6709\u524d\u5bfc\u6216\u5c3e\u90e8\u7684\u7a7a\u683c\n                        *arg_list = Some(Box::new(new_cell));\n                    }\n                }\n            }\n        }\n    }\n    \n}\n\nfn getenv(var_name: &str) -> Option<&'static str> {\n    if var_name == \"MY_TEST_ENV\" {\n        Some(\"flag1 flag2 flag3\")\n    } else {\n        None\n    }\n}\n\n// #[cfg(test)]\n// mod tests {\n//     use super::*;\n\n//     #[test]\n//     fn test_snoc_string() {\n//         let mut root = Cell::mk_cell();\n\n//         root = root.snoc_string(\"hello\");\n//         assert_eq!(root.name.as_ref().unwrap().as_ref(), \"hello\");\n//         assert!(root.link.is_none());"}], "start_byte": 1937, "end_byte": 3613, "start_point": [58, 4], "end_point": [96, 5], "text": " i = 0;\n                while let Some(c) = base.chars().nth(i) {\n                    if !c.is_whitespace() {\n                        break;\n                    }\n                    i += 1;\n                }\n                let start = i;\n                while let Some(c) = base.chars().nth(i) {\n                    if c.is_whitespace() {\n                        break;\n                    }\n                    i += 1;\n                }\n                if i > start {\n                    let k = i.min(1024 - 10); \n                    let tmp_name: String = base.chars().skip(start).take(k - start).collect(); // \u63d0\u53d6\u5b50\u5b57\u7b26\u4e32\u65f6, \u6765\u786e\u4fdd\u4ece\u6b63\u786e\u7684\u4f4d\u7f6e\u5f00\u59cb\uff0c\u5e76\u4e14\u53ea\u63d0\u53d6\u6240\u9700\u7684\u957f\u5ea6\u3002\n                    if let Some(cell) = arg_list.as_ref() {\n                        let cloned_cell = cell.clone();\n                        *arg_list = Some(Box::new(cloned_cell.snoc_string(&tmp_name.trim())));\n                    }\n                    else {\n                        let mut new_cell = Cell::mk_cell();\n                        new_cell.name = Some(Box::new(tmp_name.trim().to_string())); // trim(): \u63d0\u53d6\u7684\u5b57\u7b26\u4e32\u6ca1\u6709\u524d\u5bfc\u6216\u5c3e\u90e8\u7684\u7a7a\u683c\n                        *arg_list = Some(Box::new(new_cell));\n                    }\n                }\n            }\n        }\n    }\n    \n}\n\nfn getenv(var_name: &str) -> Option<&'static str> {\n    if var_name == \"MY_TEST_ENV\" {\n        Some(\"flag1 flag2 flag3\")\n    } else {\n        None\n    }\n}\n\n// #[cfg(test)]\n// mod tests {\n//     use super::*;\n\n//     #[test]\n//     fn test_snoc_string() {\n//         let mut root = Cell::mk_cell();\n\n//         root = root.snoc_string(\"hello\");\n//         assert_eq!(root.name.as_ref().unwrap().as_ref(), \"hello\");\n//         assert!(root.link.is_none());"}, {"type": "}", "children": [], "start_byte": 3619, "end_byte": 3620, "start_point": [98, 0], "end_point": [98, 1], "text": " "}], "start_byte": 373, "end_byte": 3620, "start_point": [16, 10], "end_point": [98, 1], "text": "cell() -> Self {\n        Cell {\n            name: None,\n            link: None,\n        }\n    }\n     // \u9012\u5f52\u51fd\u6570\u6765\u6253\u5370\u94fe\u8868\n    // \u9012\u5f52\u904d\u5386 \ud83d\udd25\n     pub fn printLinkLists(&self) {\n        if let Some(ref name) = self.name {\n            // println!(\"Cell name: {}\", name);\n        } else {\n            // println!(\"Cell name: (none)\");\n        }\n\n        if let Some(ref link) = self.link {\n            link.printLinkLists(); // \u9012\u5f52\u8c03\u7528\n        }\n    }\n    pub fn snoc_string(mut self, name: &str) -> Self {\n        if self.name.is_none() {\n            let mut new_cell = Cell::mk_cell();\n            new_cell.name = Some(Box::new(name.to_owned()));\n            new_cell\n        } else {\n            let mut tmp = &mut self;\n            while tmp.link.is_some() {\n                tmp = tmp.link.as_mut().unwrap();\n            }\n            tmp.link = Some(Box::new(Cell::mk_cell().snoc_string(name)));\n            self\n        }\n    }\n    // \u4e3a\u4e86\u4fee\u590d\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u9700\u8981\u786e\u4fdd\u5728\u4ece\u73af\u5883\u53d8\u91cf\u4e2d\u63d0\u53d6\u6807\u5fd7\u65f6\uff0c\u53bb\u9664\u524d\u5bfc\u548c\u5c3e\u90e8\u7684\u7a7a\u683c\u3002\n    /*\n    test_add_flags_from_env_var \u6d4b\u8bd5\u4e2d\uff0c\u65ad\u8a00\u5931\u8d25\u4e86\u3002\n    \u5177\u4f53\u5730\uff0c\u9884\u671f\u7684\u5b57\u7b26\u4e32 \"flag2\" \u524d\u9762\u6709\u4e00\u4e2a\u591a\u4f59\u7684\u7a7a\u683c\uff0c\u6240\u4ee5\u5b83\u4e0e\u5b9e\u9645\u7684\u503c \" flag2\" \u4e0d\u5339\u914d\u3002\n    \u8fd9\u662f\u7531\u4e8e\u5728 add_flags_from_env_var \u51fd\u6570\u4e2d\u5904\u7406\u73af\u5883\u53d8\u91cf\u503c\u65f6\uff0c\u5f53\u5206\u5272\u5b57\u7b26\u4e32\u65f6\uff0c\u524d\u5bfc\u7a7a\u683c\u6ca1\u6709\u88ab\u6b63\u786e\u5730\u53bb\u9664\u3002\n\n    \u4e3a\u4e86\u4fee\u590d\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u9700\u8981\u786e\u4fdd\u5728\u4ece\u73af\u5883\u53d8\u91cf\u4e2d\u63d0\u53d6\u6807\u5fd7\u65f6\uff0c\u53bb\u9664\u524d\u5bfc\u548c\u5c3e\u90e8\u7684\u7a7a\u683c\u3002\n     */\n    pub fn add_flags_from_env_var(arg_list: &mut Option<Box<Cell>>, var_name: &str) {\n        let envbase = getenv(var_name);\n        if let Some(mut base) = envbase {\n            let mut i = 0;\n            while let Some(c) = base.chars().nth(i) {\n                if c == '\\0' {\n                    break;\n                }\n                base = &base[i..];\n                i = 0;\n                while let Some(c) = base.chars().nth(i) {\n                    if !c.is_whitespace() {\n                        break;\n                    }\n                    i += 1;\n                }\n                let start = i;\n                while let Some(c) = base.chars().nth(i) {\n                    if c.is_whitespace() {\n                        break;\n                    }\n                    i += 1;\n                }\n                if i > start {\n                    let k = i.min(1024 - 10); \n                    let tmp_name: String = base.chars().skip(start).take(k - start).collect(); // \u63d0\u53d6\u5b50\u5b57\u7b26\u4e32\u65f6, \u6765\u786e\u4fdd\u4ece\u6b63\u786e\u7684\u4f4d\u7f6e\u5f00\u59cb\uff0c\u5e76\u4e14\u53ea\u63d0\u53d6\u6240\u9700\u7684\u957f\u5ea6\u3002\n                    if let Some(cell) = arg_list.as_ref() {\n                        let cloned_cell = cell.clone();\n                        *arg_list = Some(Box::new(cloned_cell.snoc_string(&tmp_name.trim())));\n                    }\n                    else {\n                        let mut new_cell = Cell::mk_cell();\n                        new_cell.name = Some(Box::new(tmp_name.trim().to_string())); // trim(): \u63d0\u53d6\u7684\u5b57\u7b26\u4e32\u6ca1\u6709\u524d\u5bfc\u6216\u5c3e\u90e8\u7684\u7a7a\u683c\n                        *arg_list = Some(Box::new(new_cell));\n                    }\n                }\n            }\n        }\n    }\n    \n}\n\nfn getenv(var_name: &str) -> Option<&'static str> {\n    if var_name == \"MY_TEST_ENV\" {\n        Some(\"flag1 flag2 flag3\")\n    } else {\n        None\n    }\n}\n\n// #[cfg(test)]\n// mod tests {\n//     use super::*;\n\n//     #[test]\n//     fn test_snoc_string() {\n//         let mut root = Cell::mk_cell();\n\n//         root = root.snoc_string(\"hello\");\n//         assert_eq!(root.name.as_ref().unwrap().as_ref(), \"hello\");\n//         assert!(root.link.is_none());\n\n//   "}], "start_byte": 363, "end_byte": 3620, "start_point": [16, 0], "end_point": [98, 1], "text": "pub fn mk_cell() -> Self {\n        Cell {\n            name: None,\n            link: None,\n        }\n    }\n     // \u9012\u5f52\u51fd\u6570\u6765\u6253\u5370\u94fe\u8868\n    // \u9012\u5f52\u904d\u5386 \ud83d\udd25\n     pub fn printLinkLists(&self) {\n        if let Some(ref name) = self.name {\n            // println!(\"Cell name: {}\", name);\n        } else {\n            // println!(\"Cell name: (none)\");\n        }\n\n        if let Some(ref link) = self.link {\n            link.printLinkLists(); // \u9012\u5f52\u8c03\u7528\n        }\n    }\n    pub fn snoc_string(mut self, name: &str) -> Self {\n        if self.name.is_none() {\n            let mut new_cell = Cell::mk_cell();\n            new_cell.name = Some(Box::new(name.to_owned()));\n            new_cell\n        } else {\n            let mut tmp = &mut self;\n            while tmp.link.is_some() {\n                tmp = tmp.link.as_mut().unwrap();\n            }\n            tmp.link = Some(Box::new(Cell::mk_cell().snoc_string(name)));\n            self\n        }\n    }\n    // \u4e3a\u4e86\u4fee\u590d\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u9700\u8981\u786e\u4fdd\u5728\u4ece\u73af\u5883\u53d8\u91cf\u4e2d\u63d0\u53d6\u6807\u5fd7\u65f6\uff0c\u53bb\u9664\u524d\u5bfc\u548c\u5c3e\u90e8\u7684\u7a7a\u683c\u3002\n    /*\n    test_add_flags_from_env_var \u6d4b\u8bd5\u4e2d\uff0c\u65ad\u8a00\u5931\u8d25\u4e86\u3002\n    \u5177\u4f53\u5730\uff0c\u9884\u671f\u7684\u5b57\u7b26\u4e32 \"flag2\" \u524d\u9762\u6709\u4e00\u4e2a\u591a\u4f59\u7684\u7a7a\u683c\uff0c\u6240\u4ee5\u5b83\u4e0e\u5b9e\u9645\u7684\u503c \" flag2\" \u4e0d\u5339\u914d\u3002\n    \u8fd9\u662f\u7531\u4e8e\u5728 add_flags_from_env_var \u51fd\u6570\u4e2d\u5904\u7406\u73af\u5883\u53d8\u91cf\u503c\u65f6\uff0c\u5f53\u5206\u5272\u5b57\u7b26\u4e32\u65f6\uff0c\u524d\u5bfc\u7a7a\u683c\u6ca1\u6709\u88ab\u6b63\u786e\u5730\u53bb\u9664\u3002\n\n    \u4e3a\u4e86\u4fee\u590d\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u9700\u8981\u786e\u4fdd\u5728\u4ece\u73af\u5883\u53d8\u91cf\u4e2d\u63d0\u53d6\u6807\u5fd7\u65f6\uff0c\u53bb\u9664\u524d\u5bfc\u548c\u5c3e\u90e8\u7684\u7a7a\u683c\u3002\n     */\n    pub fn add_flags_from_env_var(arg_list: &mut Option<Box<Cell>>, var_name: &str) {\n        let envbase = getenv(var_name);\n        if let Some(mut base) = envbase {\n            let mut i = 0;\n            while let Some(c) = base.chars().nth(i) {\n                if c == '\\0' {\n                    break;\n                }\n                base = &base[i..];\n                i = 0;\n                while let Some(c) = base.chars().nth(i) {\n                    if !c.is_whitespace() {\n                        break;\n                    }\n                    i += 1;\n                }\n                let start = i;\n                while let Some(c) = base.chars().nth(i) {\n                    if c.is_whitespace() {\n                        break;\n                    }\n                    i += 1;\n                }\n                if i > start {\n                    let k = i.min(1024 - 10); \n                    let tmp_name: String = base.chars().skip(start).take(k - start).collect(); // \u63d0\u53d6\u5b50\u5b57\u7b26\u4e32\u65f6, \u6765\u786e\u4fdd\u4ece\u6b63\u786e\u7684\u4f4d\u7f6e\u5f00\u59cb\uff0c\u5e76\u4e14\u53ea\u63d0\u53d6\u6240\u9700\u7684\u957f\u5ea6\u3002\n                    if let Some(cell) = arg_list.as_ref() {\n                        let cloned_cell = cell.clone();\n                        *arg_list = Some(Box::new(cloned_cell.snoc_string(&tmp_name.trim())));\n                    }\n                    else {\n                        let mut new_cell = Cell::mk_cell();\n                        new_cell.name = Some(Box::new(tmp_name.trim().to_string())); // trim(): \u63d0\u53d6\u7684\u5b57\u7b26\u4e32\u6ca1\u6709\u524d\u5bfc\u6216\u5c3e\u90e8\u7684\u7a7a\u683c\n                        *arg_list = Some(Box::new(new_cell));\n                    }\n                }\n            }\n        }\n    }\n    \n}\n\nfn getenv(var_name: &str) -> Option<&'static str> {\n    if var_name == \"MY_TEST_ENV\" {\n        Some(\"flag1 flag2 flag3\")\n    } else {\n        None\n    }\n}\n\n// #[cfg(test)]\n// mod tests {\n//     use super::*;\n\n//     #[test]\n//     fn test_snoc_string() {\n//         let mut root = Cell::mk_cell();\n\n//         root = root.snoc_string(\"hello\");\n//         assert_eq!(root.name.as_ref().unwrap().as_ref(), \"hello\");\n//         assert!(root.link.is_none());\n\n//   "}, {"type": "function_item", "children": [{"type": "fn", "children": [], "start_byte": 3622, "end_byte": 3624, "start_point": [100, 0], "end_point": [100, 2], "text": "  "}, {"type": "identifier", "children": [], "start_byte": 3625, "end_byte": 3631, "start_point": [100, 3], "end_point": [100, 9], "text": " root "}, {"type": "parameters", "children": [{"type": "(", "children": [], "start_byte": 3631, "end_byte": 3632, "start_point": [100, 9], "end_point": [100, 10], "text": "="}, {"type": "parameter", "children": [{"type": "identifier", "children": [], "start_byte": 3632, "end_byte": 3640, "start_point": [100, 10], "end_point": [100, 18], "text": " root.sn"}, {"type": ":", "children": [], "start_byte": 3640, "end_byte": 3641, "start_point": [100, 18], "end_point": [100, 19], "text": "o"}, {"type": "reference_type", "children": [{"type": "&", "children": [], "start_byte": 3642, "end_byte": 3643, "start_point": [100, 20], "end_point": [100, 21], "text": "_"}, {"type": "primitive_type", "children": [], "start_byte": 3643, "end_byte": 3646, "start_point": [100, 21], "end_point": [100, 24], "text": "str"}], "start_byte": 3642, "end_byte": 3646, "start_point": [100, 20], "end_point": [100, 24], "text": "_str"}], "start_byte": 3632, "end_byte": 3646, "start_point": [100, 10], "end_point": [100, 24], "text": " root.snoc_str"}, {"type": ")", "children": [], "start_byte": 3646, "end_byte": 3647, "start_point": [100, 24], "end_point": [100, 25], "text": "i"}], "start_byte": 3631, "end_byte": 3647, "start_point": [100, 9], "end_point": [100, 25], "text": "= root.snoc_stri"}, {"type": "->", "children": [], "start_byte": 3648, "end_byte": 3650, "start_point": [100, 26], "end_point": [100, 28], "text": "g("}, {"type": "generic_type", "children": [{"type": "type_identifier", "children": [], "start_byte": 3651, "end_byte": 3657, "start_point": [100, 29], "end_point": [100, 35], "text": "world\""}, {"type": "type_arguments", "children": [{"type": "<", "children": [], "start_byte": 3657, "end_byte": 3658, "start_point": [100, 35], "end_point": [100, 36], "text": ")"}, {"type": "reference_type", "children": [{"type": "&", "children": [], "start_byte": 3658, "end_byte": 3659, "start_point": [100, 36], "end_point": [100, 37], "text": ";"}, {"type": "lifetime", "children": [{"type": "'", "children": [], "start_byte": 3659, "end_byte": 3660, "start_point": [100, 37], "end_point": [100, 38], "text": "\n"}, {"type": "identifier", "children": [], "start_byte": 3660, "end_byte": 3666, "start_point": [100, 38], "end_point": [100, 44], "text": "//    "}], "start_byte": 3659, "end_byte": 3666, "start_point": [100, 37], "end_point": [100, 44], "text": "\n//    "}, {"type": "primitive_type", "children": [], "start_byte": 3667, "end_byte": 3670, "start_point": [100, 45], "end_point": [100, 48], "text": "   "}], "start_byte": 3658, "end_byte": 3670, "start_point": [100, 36], "end_point": [100, 48], "text": ";\n//        "}, {"type": ">", "children": [], "start_byte": 3670, "end_byte": 3671, "start_point": [100, 48], "end_point": [100, 49], "text": " "}], "start_byte": 3657, "end_byte": 3671, "start_point": [100, 35], "end_point": [100, 49], "text": ");\n//         "}], "start_byte": 3651, "end_byte": 3671, "start_point": [100, 29], "end_point": [100, 49], "text": "world\");\n//         "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 3672, "end_byte": 3673, "start_point": [100, 50], "end_point": [100, 51], "text": "s"}, {"type": "expression_statement", "children": [{"type": "if_expression", "children": [{"type": "if", "children": [], "start_byte": 3678, "end_byte": 3680, "start_point": [101, 4], "end_point": [101, 6], "text": "eq"}, {"type": "binary_expression", "children": [{"type": "identifier", "children": [], "start_byte": 3681, "end_byte": 3689, "start_point": [101, 7], "end_point": [101, 15], "text": "(root.na"}, {"type": "==", "children": [], "start_byte": 3690, "end_byte": 3692, "start_point": [101, 16], "end_point": [101, 18], "text": "e."}, {"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 3693, "end_byte": 3694, "start_point": [101, 19], "end_point": [101, 20], "text": "s"}, {"type": "\"", "children": [], "start_byte": 3705, "end_byte": 3706, "start_point": [101, 31], "end_point": [101, 32], "text": "a"}], "start_byte": 3693, "end_byte": 3706, "start_point": [101, 19], "end_point": [101, 32], "text": "s_ref().unwra"}], "start_byte": 3681, "end_byte": 3706, "start_point": [101, 7], "end_point": [101, 32], "text": "(root.name.as_ref().unwra"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 3707, "end_byte": 3708, "start_point": [101, 33], "end_point": [101, 34], "text": "("}, {"type": "call_expression", "children": [{"type": "identifier", "children": [], "start_byte": 3717, "end_byte": 3721, "start_point": [102, 8], "end_point": [102, 12], "text": "), \""}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 3721, "end_byte": 3722, "start_point": [102, 12], "end_point": [102, 13], "text": "h"}, {"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 3722, "end_byte": 3723, "start_point": [102, 13], "end_point": [102, 14], "text": "e"}, {"type": "\"", "children": [], "start_byte": 3740, "end_byte": 3741, "start_point": [102, 31], "end_point": [102, 32], "text": " "}], "start_byte": 3722, "end_byte": 3741, "start_point": [102, 13], "end_point": [102, 32], "text": "ello\");\n//         "}, {"type": ")", "children": [], "start_byte": 3741, "end_byte": 3742, "start_point": [102, 32], "end_point": [102, 33], "text": "a"}], "start_byte": 3721, "end_byte": 3742, "start_point": [102, 12], "end_point": [102, 33], "text": "hello\");\n//         a"}], "start_byte": 3717, "end_byte": 3742, "start_point": [102, 8], "end_point": [102, 33], "text": "), \"hello\");\n//         a"}, {"type": "}", "children": [], "start_byte": 3747, "end_byte": 3748, "start_point": [103, 4], "end_point": [103, 5], "text": "_"}], "start_byte": 3707, "end_byte": 3748, "start_point": [101, 33], "end_point": [103, 5], "text": "().as_ref(), \"hello\");\n//         assert_"}, {"type": "else_clause", "children": [{"type": "else", "children": [], "start_byte": 3749, "end_byte": 3753, "start_point": [103, 6], "end_point": [103, 10], "text": "q!(r"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 3754, "end_byte": 3755, "start_point": [103, 11], "end_point": [103, 12], "text": "o"}, {"type": "identifier", "children": [], "start_byte": 3764, "end_byte": 3768, "start_point": [104, 8], "end_point": [104, 12], "text": "_ref"}, {"type": "}", "children": [], "start_byte": 3773, "end_byte": 3774, "start_point": [105, 4], "end_point": [105, 5], "text": "w"}], "start_byte": 3754, "end_byte": 3774, "start_point": [103, 11], "end_point": [105, 5], "text": "ot.link.as_ref().unw"}], "start_byte": 3749, "end_byte": 3774, "start_point": [103, 6], "end_point": [105, 5], "text": "q!(root.link.as_ref().unw"}], "start_byte": 3678, "end_byte": 3774, "start_point": [101, 4], "end_point": [105, 5], "text": "eq!(root.name.as_ref().unwrap().as_ref(), \"hello\");\n//         assert_eq!(root.link.as_ref().unw"}], "start_byte": 3678, "end_byte": 3774, "start_point": [101, 4], "end_point": [105, 5], "text": "eq!(root.name.as_ref().unwrap().as_ref(), \"hello\");\n//         assert_eq!(root.link.as_ref().unw"}, {"type": "}", "children": [], "start_byte": 3775, "end_byte": 3776, "start_point": [106, 0], "end_point": [106, 1], "text": "a"}], "start_byte": 3672, "end_byte": 3776, "start_point": [100, 50], "end_point": [106, 1], "text": "ssert_eq!(root.name.as_ref().unwrap().as_ref(), \"hello\");\n//         assert_eq!(root.link.as_ref().unwra"}], "start_byte": 3622, "end_byte": 3776, "start_point": [100, 0], "end_point": [106, 1], "text": "    root = root.snoc_string(\"world\");\n//         assert_eq!(root.name.as_ref().unwrap().as_ref(), \"hello\");\n//         assert_eq!(root.link.as_ref().unwra"}, {"type": "line_comment", "children": [], "start_byte": 3778, "end_byte": 3793, "start_point": [108, 0], "end_point": [108, 15], "text": ").name.as_ref()"}, {"type": "line_comment", "children": [], "start_byte": 3794, "end_byte": 3808, "start_point": [109, 0], "end_point": [109, 14], "text": "unwrap().as_re"}, {"type": "line_comment", "children": [], "start_byte": 3809, "end_byte": 3829, "start_point": [110, 0], "end_point": [110, 20], "text": "(), \"world\");\n//    "}, {"type": "line_comment", "children": [], "start_byte": 3831, "end_byte": 3845, "start_point": [112, 0], "end_point": [112, 14], "text": "   assert!(roo"}, {"type": "line_comment", "children": [], "start_byte": 3846, "end_byte": 3876, "start_point": [113, 0], "end_point": [113, 30], "text": ".link.as_ref().unwrap().link.i"}, {"type": "line_comment", "children": [], "start_byte": 3877, "end_byte": 3919, "start_point": [114, 0], "end_point": [114, 42], "text": "_none());\n\n//         root = root.snoc_str"}, {"type": "line_comment", "children": [], "start_byte": 3921, "end_byte": 3965, "start_point": [116, 0], "end_point": [116, 44], "text": "g(\"rust\");\n//         assert_eq!(root.name.a"}, {"type": "line_comment", "children": [], "start_byte": 3966, "end_byte": 4035, "start_point": [117, 0], "end_point": [117, 69], "text": "_ref().unwrap().as_ref(), \"hello\");\n//         assert_eq!(root.link.a"}, {"type": "line_comment", "children": [], "start_byte": 4036, "end_byte": 4076, "start_point": [118, 0], "end_point": [118, 40], "text": "_ref().unwrap().name.as_ref().unwrap().a"}, {"type": "line_comment", "children": [], "start_byte": 4078, "end_byte": 4122, "start_point": [120, 0], "end_point": [120, 44], "text": "ref(), \"world\");\n//         assert_eq!(root."}, {"type": "line_comment", "children": [], "start_byte": 4123, "end_byte": 4192, "start_point": [121, 0], "end_point": [121, 69], "text": "ink.as_ref().unwrap().link.as_ref().unwrap().name.as_ref().unwrap().a"}, {"type": "line_comment", "children": [], "start_byte": 4193, "end_byte": 4285, "start_point": [122, 0], "end_point": [122, 92], "text": "_ref(), \"rust\");\n//         assert!(root.link.as_ref().unwrap().link.as_ref().unwrap().link."}, {"type": "line_comment", "children": [], "start_byte": 4286, "end_byte": 4349, "start_point": [123, 0], "end_point": [123, 63], "text": "s_none());\n//     }\n\n//     #[test]\n//     fn test_add_flags_fr"}, {"type": "line_comment", "children": [], "start_byte": 4351, "end_byte": 4394, "start_point": [125, 0], "end_point": [125, 43], "text": "_env_var() {\n//         let mut root: Optio"}, {"type": "line_comment", "children": [], "start_byte": 4395, "end_byte": 4464, "start_point": [126, 0], "end_point": [126, 69], "text": "<Box<Cell>> = None;\n//         Cell::add_flags_from_env_var(&mut root"}, {"type": "line_comment", "children": [], "start_byte": 4465, "end_byte": 4557, "start_point": [127, 0], "end_point": [127, 92], "text": " \"MY_TEST_ENV\");\n\n//         assert_eq!(root.as_ref().unwrap().name.as_ref().unwrap().as_ref"}, {"type": "line_comment", "children": [], "start_byte": 4558, "end_byte": 4672, "start_point": [128, 0], "end_point": [128, 114], "text": "), \"flag1\");\n//         assert_eq!(root.as_ref().unwrap().link.as_ref().unwrap().name.as_ref().unwrap().as_ref(), "}, {"type": "line_comment", "children": [], "start_byte": 4673, "end_byte": 4759, "start_point": [129, 0], "end_point": [129, 86], "text": "flag2\");\n//         assert_eq!(root.as_ref().unwrap().link.as_ref().unwrap().link.as_r"}, {"type": "line_comment", "children": [], "start_byte": 4760, "end_byte": 4768, "start_point": [130, 0], "end_point": [130, 8], "text": "f().unwr"}, {"type": "line_comment", "children": [], "start_byte": 4770, "end_byte": 4784, "start_point": [132, 0], "end_point": [132, 14], "text": "().name.as_ref"}, {"type": "line_comment", "children": [], "start_byte": 4785, "end_byte": 4826, "start_point": [133, 0], "end_point": [133, 41], "text": ").unwrap().as_ref(), \"flag3\");\n//     }\n/"}, {"type": "line_comment", "children": [], "start_byte": 4827, "end_byte": 4877, "start_point": [134, 0], "end_point": [134, 50], "text": " }\n"}, {"type": "line_comment", "children": [], "start_byte": 4878, "end_byte": 4944, "start_point": [135, 0], "end_point": [135, 66], "text": ""}, {"type": "line_comment", "children": [], "start_byte": 4946, "end_byte": 5033, "start_point": [137, 0], "end_point": [137, 87], "text": ""}, {"type": "line_comment", "children": [], "start_byte": 5034, "end_byte": 5144, "start_point": [138, 0], "end_point": [138, 110], "text": ""}, {"type": "line_comment", "children": [], "start_byte": 5145, "end_byte": 5278, "start_point": [139, 0], "end_point": [139, 133], "text": ""}, {"type": "line_comment", "children": [], "start_byte": 5279, "end_byte": 5287, "start_point": [140, 0], "end_point": [140, 8], "text": ""}, {"type": "line_comment", "children": [], "start_byte": 5288, "end_byte": 5292, "start_point": [141, 0], "end_point": [141, 4], "text": ""}], "start_byte": 0, "end_byte": 5293, "start_point": [0, 0], "end_point": [142, 0], "text": "// use crate::bzip2::scc_101_mkCell::*;\n// use crate::global_vars::bzip2_c5::{Cell};\n\n// \u5047\u8bbeChar\u662fchar\u7684typedef\n// use crate::bzip2::scc_101_mkCell::*;\n// use crate::global_vars::bzip2_c5::{Cell};\n\n// \u5047\u8bbeChar\u662fchar\u7684typedef\npub type Char = char;\n#[derive(Clone)]\npub struct Cell {\n    pub name: Option<Box<String>>,\n    pub link: Option<Box<Cell>>,\n}\n\n\nimpl Cell {\n    pub fn mk_cell() -> Self {\n        Cell {\n            name: None,\n            link: None,\n        }\n    }\n     // \u9012\u5f52\u51fd\u6570\u6765\u6253\u5370\u94fe\u8868\n    // \u9012\u5f52\u904d\u5386 \ud83d\udd25\n     pub fn printLinkLists(&self) {\n        if let Some(ref name) = self.name {\n            // println!(\"Cell name: {}\", name);\n        } else {\n            // println!(\"Cell name: (none)\");\n        }\n\n        if let Some(ref link) = self.link {\n            link.printLinkLists(); // \u9012\u5f52\u8c03\u7528\n        }\n    }\n    pub fn snoc_string(mut self, name: &str) -> Self {\n        if self.name.is_none() {\n            let mut new_cell = Cell::mk_cell();\n            new_cell.name = Some(Box::new(name.to_owned()));\n            new_cell\n        } else {\n            let mut tmp = &mut self;\n            while tmp.link.is_some() {\n                tmp = tmp.link.as_mut().unwrap();\n            }\n            tmp.link = Some(Box::new(Cell::mk_cell().snoc_string(name)));\n            self\n        }\n    }\n    // \u4e3a\u4e86\u4fee\u590d\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u9700\u8981\u786e\u4fdd\u5728\u4ece\u73af\u5883\u53d8\u91cf\u4e2d\u63d0\u53d6\u6807\u5fd7\u65f6\uff0c\u53bb\u9664\u524d\u5bfc\u548c\u5c3e\u90e8\u7684\u7a7a\u683c\u3002\n    /*\n    test_add_flags_from_env_var \u6d4b\u8bd5\u4e2d\uff0c\u65ad\u8a00\u5931\u8d25\u4e86\u3002\n    \u5177\u4f53\u5730\uff0c\u9884\u671f\u7684\u5b57\u7b26\u4e32 \"flag2\" \u524d\u9762\u6709\u4e00\u4e2a\u591a\u4f59\u7684\u7a7a\u683c\uff0c\u6240\u4ee5\u5b83\u4e0e\u5b9e\u9645\u7684\u503c \" flag2\" \u4e0d\u5339\u914d\u3002\n    \u8fd9\u662f\u7531\u4e8e\u5728 add_flags_from_env_var \u51fd\u6570\u4e2d\u5904\u7406\u73af\u5883\u53d8\u91cf\u503c\u65f6\uff0c\u5f53\u5206\u5272\u5b57\u7b26\u4e32\u65f6\uff0c\u524d\u5bfc\u7a7a\u683c\u6ca1\u6709\u88ab\u6b63\u786e\u5730\u53bb\u9664\u3002\n\n    \u4e3a\u4e86\u4fee\u590d\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u9700\u8981\u786e\u4fdd\u5728\u4ece\u73af\u5883\u53d8\u91cf\u4e2d\u63d0\u53d6\u6807\u5fd7\u65f6\uff0c\u53bb\u9664\u524d\u5bfc\u548c\u5c3e\u90e8\u7684\u7a7a\u683c\u3002\n     */\n    pub fn add_flags_from_env_var(arg_list: &mut Option<Box<Cell>>, var_name: &str) {\n        let envbase = getenv(var_name);\n        if let Some(mut base) = envbase {\n            let mut i = 0;\n            while let Some(c) = base.chars().nth(i) {\n                if c == '\\0' {\n                    break;\n                }\n                base = &base[i..];\n                i = 0;\n                while let Some(c) = base.chars().nth(i) {\n                    if !c.is_whitespace() {\n                        break;\n                    }\n                    i += 1;\n                }\n                let start = i;\n                while let Some(c) = base.chars().nth(i) {\n                    if c.is_whitespace() {\n                        break;\n                    }\n                    i += 1;\n                }\n                if i > start {\n                    let k = i.min(1024 - 10); \n                    let tmp_name: String = base.chars().skip(start).take(k - start).collect(); // \u63d0\u53d6\u5b50\u5b57\u7b26\u4e32\u65f6, \u6765\u786e\u4fdd\u4ece\u6b63\u786e\u7684\u4f4d\u7f6e\u5f00\u59cb\uff0c\u5e76\u4e14\u53ea\u63d0\u53d6\u6240\u9700\u7684\u957f\u5ea6\u3002\n                    if let Some(cell) = arg_list.as_ref() {\n                        let cloned_cell = cell.clone();\n                        *arg_list = Some(Box::new(cloned_cell.snoc_string(&tmp_name.trim())));\n                    }\n                    else {\n                        let mut new_cell = Cell::mk_cell();\n                        new_cell.name = Some(Box::new(tmp_name.trim().to_string())); // trim(): \u63d0\u53d6\u7684\u5b57\u7b26\u4e32\u6ca1\u6709\u524d\u5bfc\u6216\u5c3e\u90e8\u7684\u7a7a\u683c\n                        *arg_list = Some(Box::new(new_cell));\n                    }\n                }\n            }\n        }\n    }\n    \n}\n\nfn getenv(var_name: &str) -> Option<&'static str> {\n    if var_name == \"MY_TEST_ENV\" {\n        Some(\"flag1 flag2 flag3\")\n    } else {\n        None\n    }\n}\n\n// #[cfg(test)]\n// mod tests {\n//     use super::*;\n\n//     #[test]\n//     fn test_snoc_string() {\n//         let mut root = Cell::mk_cell();\n\n//         root = root.snoc_string(\"hello\");\n//         assert_eq!(root.name.as_ref().unwrap().as_ref(), \"hello\");\n//         assert!(root.link.is_none());\n\n//         root = root.snoc_string(\"world\");\n//         assert_eq!(root.name.as_ref().unwrap().as_ref(), \"hello\");\n//         assert_eq!(root.link.as_ref().unwrap().name.as_ref().unwrap().as_ref(), \"world\");\n//         assert!(root.link.as_ref().unwrap().link.is_none());\n\n//         root = root.snoc_string(\"rust\");\n//         assert_eq!(root.name.as_ref().unwrap().as_ref(), \"hello\");\n//         assert_eq!(root.link.as_ref().unwrap().name.as_ref().unwrap().as_ref(), \"world\");\n//         assert_eq!(root.link.as_ref().unwrap().link.as_ref().unwrap().name.as_ref().unwrap().as_ref(), \"rust\");\n//         assert!(root.link.as_ref().unwrap().link.as_ref().unwrap().link.is_none());\n//     }\n\n//     #[test]\n//     fn test_add_flags_from_env_var() {\n//         let mut root: Option<Box<Cell>> = None;\n//         Cell::add_flags_from_env_var(&mut root, \"MY_TEST_ENV\");\n\n//         assert_eq!(root.as_ref().unwrap().name.as_ref().unwrap().as_ref(), \"flag1\");\n//         assert_eq!(root.as_ref().unwrap().link.as_ref().unwrap().name.as_ref().unwrap().as_ref(), \"flag2\");\n//         assert_eq!(root.as_ref().unwrap().link.as_ref().unwrap().link.as_ref().unwrap().name.as_ref().unwrap().as_ref(), \"flag3\");\n//     }\n// }\n"}