digraph {
	graph [nodesep=0.5 rankdir=LR ranksep=5]
	"BZ2_decompress()" -> "fprintf()" [color=black style=solid]
	"BZ2_decompress()" -> "void makeMaps_d(DState*s)" [color=black style=solid]
	"BZ2_decompress()" -> "void BZ2_bz__AssertH__fail(interrcode)" [color=black style=solid]
	"BZ2_decompress()" -> "__inline__ Int32BZ2_indexIntoF(Int32indx,Int32*cftab)" [color=black style=solid]
	"BZ2_decompress()" -> "void BZ2_hbCreateDecodeTables(Int32*limit,Int32*base,Int32*perm,UChar*length,Int32minLen,Int32maxLen,Int32alphaSize)" [color=black style=solid]
	"atof (constchar*__nptr)" -> "strtod()" [color=black style=solid]
	"atoi (constchar*__nptr)" -> "strtol()" [color=black style=solid]
	"atol (constchar*__nptr)" -> "strtol()" [color=black style=solid]
	"atoll (constchar*__nptr)" -> "strtoll()" [color=black style=solid]
	"BZ2_hbMakeCodeLengths()" -> "void BZ2_bz__AssertH__fail(interrcode)" [color=black style=solid]
	"BZ2_blockSort()" -> "void fallbackSort(UInt32*fmap,UInt32*eclass,UInt32*bhtab,Int32nblock,Int32verb)" [color=black style=solid]
	"BZ2_blockSort()" -> "void BZ2_bz__AssertH__fail(interrcode)" [color=black style=solid]
	"BZ2_blockSort()" -> "fprintf()" [color=black style=solid]
	"BZ2_blockSort()" -> "void mainSort(UInt32*ptr,UChar*block,UInt16*quadrant,UInt32*ftab,Int32nblock,Int32verb,Int32*budget)" [color=black style=solid]
	"void fallbackSort(UInt32*fmap,UInt32*eclass,UInt32*bhtab,Int32nblock,Int32verb)" -> "void fallbackQSort3(UInt32*fmap,UInt32*eclass,Int32loSt,Int32hiSt)" [color=black style=solid]
	"void fallbackSort(UInt32*fmap,UInt32*eclass,UInt32*bhtab,Int32nblock,Int32verb)" -> "void BZ2_bz__AssertH__fail(interrcode)" [color=black style=solid]
	"void fallbackSort(UInt32*fmap,UInt32*eclass,UInt32*bhtab,Int32nblock,Int32verb)" -> "fprintf()" [color=black style=solid]
	"void fallbackQSort3(UInt32*fmap,UInt32*eclass,Int32loSt,Int32hiSt)" -> "void BZ2_bz__AssertH__fail(interrcode)" [color=black style=solid]
	"void fallbackQSort3(UInt32*fmap,UInt32*eclass,Int32loSt,Int32hiSt)" -> "__inline__ voidfallbackSimpleSort(UInt32*fmap,UInt32*eclass,Int32lo,Int32hi)" [color=black style=solid]
	"void mainSort(UInt32*ptr,UChar*block,UInt16*quadrant,UInt32*ftab,Int32nblock,Int32verb,Int32*budget)" -> "void BZ2_bz__AssertH__fail(interrcode)" [color=black style=solid]
	"void mainSort(UInt32*ptr,UChar*block,UInt16*quadrant,UInt32*ftab,Int32nblock,Int32verb,Int32*budget)" -> "fprintf()" [color=black style=solid]
	"void mainSort(UInt32*ptr,UChar*block,UInt16*quadrant,UInt32*ftab,Int32nblock,Int32verb,Int32*budget)" -> "void mainQSort3(UInt32*ptr,UChar*block,UInt16*quadrant,Int32nblock,Int32loSt,Int32hiSt,Int32dSt,Int32*budget)" [color=black style=solid]
	"void mainQSort3(UInt32*ptr,UChar*block,UInt16*quadrant,Int32nblock,Int32loSt,Int32hiSt,Int32dSt,Int32*budget)" -> "void BZ2_bz__AssertH__fail(interrcode)" [color=black style=solid]
	"void mainQSort3(UInt32*ptr,UChar*block,UInt16*quadrant,Int32nblock,Int32loSt,Int32hiSt,Int32dSt,Int32*budget)" -> "__inline__ UCharmmed3(UChara,UCharb,UCharc)" [color=black style=solid]
	"void mainQSort3(UInt32*ptr,UChar*block,UInt16*quadrant,Int32nblock,Int32loSt,Int32hiSt,Int32dSt,Int32*budget)" -> "void mainSimpleSort(UInt32*ptr,UChar*block,UInt16*quadrant,Int32nblock,Int32lo,Int32hi,Int32d,Int32*budget)" [color=black style=solid]
	"void mainSimpleSort(UInt32*ptr,UChar*block,UInt16*quadrant,Int32nblock,Int32lo,Int32hi,Int32d,Int32*budget)" -> "__inline__ BoolmainGtU(UInt32i1,UInt32i2,UChar*block,UInt16*quadrant,UInt32nblock,Int32*budget)" [color=black style=solid]
	"IntNative main(IntNativeargc,Char*argv[])" -> "void license(void)" [color=black style=solid]
	"IntNative main(IntNativeargc,Char*argv[])" -> "Cell *snocString(Cell*root,Char*name)" [color=black style=solid]
	"IntNative main(IntNativeargc,Char*argv[])" -> "free()" [color=black style=solid]
	"IntNative main(IntNativeargc,Char*argv[])" -> "strlen()" [color=black style=solid]
	"IntNative main(IntNativeargc,Char*argv[])" -> "void usage(Char*fullProgName)" [color=black style=solid]
	"IntNative main(IntNativeargc,Char*argv[])" -> "void mySIGSEGVorSIGBUScatcher(IntNativen)" [color=black style=solid]
	"IntNative main(IntNativeargc,Char*argv[])" -> "void copyFileName(Char*to,Char*from)" [color=black style=solid]
	"IntNative main(IntNativeargc,Char*argv[])" -> "void mySignalCatcher(IntNativen)" [color=black style=solid]
	"IntNative main(IntNativeargc,Char*argv[])" -> "void redundant(Char*flag)" [color=black style=solid]
	"IntNative main(IntNativeargc,Char*argv[])" -> "void uncompress(Char*name)" [color=black style=solid]
	"IntNative main(IntNativeargc,Char*argv[])" -> "int strcmp(constchar*__s1,constchar*__s2)" [color=black style=solid]
	"IntNative main(IntNativeargc,Char*argv[])" -> "int strncmp(constchar*__s1,constchar*__s2,size_t__n)" [color=black style=solid]
	"IntNative main(IntNativeargc,Char*argv[])" -> "fprintf()" [color=black style=solid]
	"IntNative main(IntNativeargc,Char*argv[])" -> "void setExit(Int32v)" [color=black style=solid]
	"IntNative main(IntNativeargc,Char*argv[])" -> "exit()" [color=black style=solid]
	"IntNative main(IntNativeargc,Char*argv[])" -> "__sighandler_t signal(int__sig,__sighandler_t__handler)" [color=black style=solid]
	"IntNative main(IntNativeargc,Char*argv[])" -> "void configError(void)" [color=black style=solid]
	"IntNative main(IntNativeargc,Char*argv[])" -> "void compress(Char*name)" [color=black style=solid]
	"IntNative main(IntNativeargc,Char*argv[])" -> "void addFlagsFromEnvVar(Cell**argList,Char*varName)" [color=black style=solid]
	"IntNative main(IntNativeargc,Char*argv[])" -> "void testf(Char*name)" [color=black style=solid]
	"IntNative main(IntNativeargc,Char*argv[])" -> "char *strstr(constchar*__haystack,constchar*__needle)" [color=black style=solid]
	"void configError(void)" -> "exit()" [color=black style=solid]
	"void configError(void)" -> "fprintf()" [color=black style=solid]
	"void configError(void)" -> "void setExit(Int32v)" [color=black style=solid]
	"void mySIGSEGVorSIGBUScatcher(IntNativen)" -> "strlen()" [color=black style=solid]
	"void mySIGSEGVorSIGBUScatcher(IntNativen)" -> "void setExit(Int32v)" [color=black style=solid]
	"void mySIGSEGVorSIGBUScatcher(IntNativen)" -> "write()" [color=black style=solid]
	"void copyFileName(Char*to,Char*from)" -> "fprintf()" [color=black style=solid]
	"void copyFileName(Char*to,Char*from)" -> "void setExit(Int32v)" [color=black style=solid]
	"void copyFileName(Char*to,Char*from)" -> "strlen()" [color=black style=solid]
	"void copyFileName(Char*to,Char*from)" -> "strncpy (char*__restrict__dest,constchar*__restrict__src,size_t__len)" [color=black style=solid]
	"void copyFileName(Char*to,Char*from)" -> "exit()" [color=black style=solid]
	"void addFlagsFromEnvVar(Cell**argList,Char*varName)" -> "Cell *snocString(Cell*root,Char*name)" [color=black style=solid]
	"void addFlagsFromEnvVar(Cell**argList,Char*varName)" -> "getenv()" [color=black style=solid]
	"Cell *snocString(Cell*root,Char*name)" -> "Cell *snocString(Cell*root,Char*name)" [color=black style=solid]
	"Cell *snocString(Cell*root,Char*name)" -> "strlen()" [color=black style=solid]
	"Cell *snocString(Cell*root,Char*name)" -> "Cell *mkCell(void)" [color=black style=solid]
	"Cell *snocString(Cell*root,Char*name)" -> "strcpy (char*__restrict__dest,constchar*__restrict__src)" [color=black style=solid]
	"Cell *snocString(Cell*root,Char*name)" -> "void *myMalloc(Int32n)" [color=black style=solid]
	"Cell *mkCell(void)" -> "void *myMalloc(Int32n)" [color=black style=solid]
	"void *myMalloc(Int32n)" -> "void outOfMemory(void)" [color=black style=solid]
	"void *myMalloc(Int32n)" -> "malloc()" [color=black style=solid]
	"void outOfMemory(void)" -> "void cleanUpAndFail(Int32ec)" [color=black style=solid]
	"void outOfMemory(void)" -> "fprintf()" [color=black style=solid]
	"void outOfMemory(void)" -> "void showFileNames(void)" [color=black style=solid]
	"void showFileNames(void)" -> "fprintf()" [color=black style=solid]
	"void cleanUpAndFail(Int32ec)" -> "remove()" [color=black style=solid]
	"void cleanUpAndFail(Int32ec)" -> "fprintf()" [color=black style=solid]
	"void cleanUpAndFail(Int32ec)" -> "void setExit(Int32v)" [color=black style=solid]
	"void cleanUpAndFail(Int32ec)" -> "exit()" [color=black style=solid]
	"void cleanUpAndFail(Int32ec)" -> "fclose()" [color=black style=solid]
	"void cleanUpAndFail(Int32ec)" -> "stat()" [color=black style=solid]
	"void license(void)" -> "fprintf()" [color=black style=solid]
	"void license(void)" -> "const char*BZ2_bzlibVersion(void)" [color=black style=solid]
	"void usage(Char*fullProgName)" -> "fprintf()" [color=black style=solid]
	"void usage(Char*fullProgName)" -> "const char*BZ2_bzlibVersion(void)" [color=black style=solid]
	"void redundant(Char*flag)" -> "fprintf()" [color=black style=solid]
	"void mySignalCatcher(IntNativen)" -> "void cleanUpAndFail(Int32ec)" [color=black style=solid]
	"void mySignalCatcher(IntNativen)" -> "fprintf()" [color=black style=solid]
	"void compress(Char*name)" -> "fflush()" [color=black style=solid]
	"void compress(Char*name)" -> "void compressStream(FILE*stream,FILE*zStream)" [color=black style=solid]
	"void compress(Char*name)" -> "Bool notAStandardFile(Char*name)" [color=black style=solid]
	"void compress(Char*name)" -> "Bool fileExists(Char*name)" [color=black style=solid]
	"void compress(Char*name)" -> "fclose()" [color=black style=solid]
	"void compress(Char*name)" -> "void copyFileName(Char*to,Char*from)" [color=black style=solid]
	"void compress(Char*name)" -> "void saveInputFileMetaInfo(Char*srcName)" [color=black style=solid]
	"void compress(Char*name)" -> "remove()" [color=black style=solid]
	"void compress(Char*name)" -> "strcat (char*__restrict__dest,constchar*__restrict__src)" [color=black style=solid]
	"void compress(Char*name)" -> "fileno()" [color=black style=solid]
	"void compress(Char*name)" -> "void panic(constChar*s)" [color=black style=solid]
	"void compress(Char*name)" -> "void applySavedTimeInfoToOutputFile(Char*dstName)" [color=black style=solid]
	"void compress(Char*name)" -> "void pad(Char*s)" [color=black style=solid]
	"void compress(Char*name)" -> "fprintf()" [color=black style=solid]
	"void compress(Char*name)" -> "void setExit(Int32v)" [color=black style=solid]
	"void compress(Char*name)" -> "FILE *fopen_output_safely(Char*name,constchar*mode)" [color=black style=solid]
	"void compress(Char*name)" -> "Bool containsDubiousChars(Char*name)" [color=black style=solid]
	"void compress(Char*name)" -> "strerror()" [color=black style=solid]
	"void compress(Char*name)" -> "FILE *fopen(constchar*__restrict__filename,constchar*__restrict__modes)" [color=black style=solid]
	"void compress(Char*name)" -> "Int32 countHardLinks(Char*name)" [color=black style=solid]
	"void compress(Char*name)" -> "void ioError(void)" [color=black style=solid]
	"void compress(Char*name)" -> "Bool hasSuffix(Char*s,constChar*suffix)" [color=black style=solid]
	"void compress(Char*name)" -> "stat()" [color=black style=solid]
	"void compress(Char*name)" -> "isatty()" [color=black style=solid]
	"void panic(constChar*s)" -> "void cleanUpAndFail(Int32ec)" [color=black style=solid]
	"void panic(constChar*s)" -> "fprintf()" [color=black style=solid]
	"void panic(constChar*s)" -> "void showFileNames(void)" [color=black style=solid]
	"Bool fileExists(Char*name)" -> "FILE *fopen(constchar*__restrict__filename,constchar*__restrict__modes)" [color=black style=solid]
	"Bool fileExists(Char*name)" -> "fclose()" [color=black style=solid]
	"Bool hasSuffix(Char*s,constChar*suffix)" -> "strlen()" [color=black style=solid]
	"Bool hasSuffix(Char*s,constChar*suffix)" -> "int strcmp(constchar*__s1,constchar*__s2)" [color=black style=solid]
	"Bool notAStandardFile(Char*name)" -> "lstat()" [color=black style=solid]
	"Int32 countHardLinks(Char*name)" -> "lstat()" [color=black style=solid]
	"void saveInputFileMetaInfo(Char*srcName)" -> "void ioError(void)" [color=black style=solid]
	"void saveInputFileMetaInfo(Char*srcName)" -> "stat()" [color=black style=solid]
	"void ioError(void)" -> "perror()" [color=black style=solid]
	"void ioError(void)" -> "void cleanUpAndFail(Int32ec)" [color=black style=solid]
	"void ioError(void)" -> "fprintf()" [color=black style=solid]
	"void ioError(void)" -> "void showFileNames(void)" [color=black style=solid]
	"FILE *fopen_output_safely(Char*name,constchar*mode)" -> "FILE *fdopen(int__fd,constchar*__modes)" [color=black style=solid]
	"FILE *fopen_output_safely(Char*name,constchar*mode)" -> "close()" [color=black style=solid]
	"FILE *fopen_output_safely(Char*name,constchar*mode)" -> "int open(constchar*__file,int__oflag,...)" [color=black style=solid]
	"void pad(Char*s)" -> "strlen()" [color=black style=solid]
	"void pad(Char*s)" -> "fprintf()" [color=black style=solid]
	"void compressStream(FILE*stream,FILE*zStream)" -> "void uInt64_from_UInt32s(UInt64*n,UInt32lo32,UInt32hi32)" [color=black style=solid]
	"void compressStream(FILE*stream,FILE*zStream)" -> "void applySavedFileAttrToOutputFile(IntNativefd)" [color=black style=solid]
	"void compressStream(FILE*stream,FILE*zStream)" -> "fprintf()" [color=black style=solid]
	"void compressStream(FILE*stream,FILE*zStream)" -> "fflush()" [color=black style=solid]
	"void compressStream(FILE*stream,FILE*zStream)" -> "void uInt64_toAscii(char*outbuf,UInt64*n)" [color=black style=solid]
	"void compressStream(FILE*stream,FILE*zStream)" -> "size_t fread(void*__restrict__ptr,size_t__size,size_t__n,FILE*__restrict__stream)" [color=black style=solid]
	"void compressStream(FILE*stream,FILE*zStream)" -> "Bool myfeof(FILE*f)" [color=black style=solid]
	"void compressStream(FILE*stream,FILE*zStream)" -> "fileno()" [color=black style=solid]
	"void compressStream(FILE*stream,FILE*zStream)" -> "fclose()" [color=black style=solid]
	"void compressStream(FILE*stream,FILE*zStream)" -> "double uInt64_to_double(UInt64*n)" [color=black style=solid]
	"void compressStream(FILE*stream,FILE*zStream)" -> "ferror()" [color=black style=solid]
	"void compressStream(FILE*stream,FILE*zStream)" -> "void configError(void)" [color=black style=solid]
	"void compressStream(FILE*stream,FILE*zStream)" -> "void BZ2_bzWrite(int*bzerror,BZFILE*b,void*buf,intlen)" [color=black style=solid]
	"void compressStream(FILE*stream,FILE*zStream)" -> "void ioError(void)" [color=black style=solid]
	"void compressStream(FILE*stream,FILE*zStream)" -> "void outOfMemory(void)" [color=black style=solid]
	"void compressStream(FILE*stream,FILE*zStream)" -> "void panic(constChar*s)" [color=black style=solid]
	"void compressStream(FILE*stream,FILE*zStream)" -> "void BZ2_bzWriteClose64(int*bzerror,BZFILE*b,intabandon,unsignedint*nbytes_in_lo32,unsignedint*nbytes_in_hi32,unsignedint*nbytes_out_lo32,unsignedint*nbytes_out_hi32)" [color=black style=solid]
	"void compressStream(FILE*stream,FILE*zStream)" -> "BZFILE *BZ2_bzWriteOpen(int*bzerror,FILE*f,intblockSize100k,intverbosity,intworkFactor)" [color=black style=solid]
	"Bool myfeof(FILE*f)" -> "ungetc()" [color=black style=solid]
	"Bool myfeof(FILE*f)" -> "fgetc()" [color=black style=solid]
	"void applySavedFileAttrToOutputFile(IntNativefd)" -> "void ioError(void)" [color=black style=solid]
	"void applySavedFileAttrToOutputFile(IntNativefd)" -> "int fchown(int__fd,__uid_t__owner,__gid_t__group)" [color=black style=solid]
	"void applySavedFileAttrToOutputFile(IntNativefd)" -> "int fchmod(int__fd,__mode_t__mode)" [color=black style=solid]
	"void uInt64_toAscii(char*outbuf,UInt64*n)" -> "Bool uInt64_isZero(UInt64*n)" [color=black style=solid]
	"void uInt64_toAscii(char*outbuf,UInt64*n)" -> "Int32 uInt64_qrm10(UInt64*n)" [color=black style=solid]
	"void applySavedTimeInfoToOutputFile(Char*dstName)" -> "void ioError(void)" [color=black style=solid]
	"void applySavedTimeInfoToOutputFile(Char*dstName)" -> "int utime(constchar*__file,conststructutimbuf*__file_times)" [color=black style=solid]
	"void uncompress(Char*name)" -> "fflush()" [color=black style=solid]
	"void uncompress(Char*name)" -> "Bool notAStandardFile(Char*name)" [color=black style=solid]
	"void uncompress(Char*name)" -> "Bool fileExists(Char*name)" [color=black style=solid]
	"void uncompress(Char*name)" -> "fclose()" [color=black style=solid]
	"void uncompress(Char*name)" -> "void copyFileName(Char*to,Char*from)" [color=black style=solid]
	"void uncompress(Char*name)" -> "Bool mapSuffix(Char*name,constChar*oldSuffix,constChar*newSuffix)" [color=black style=solid]
	"void uncompress(Char*name)" -> "void saveInputFileMetaInfo(Char*srcName)" [color=black style=solid]
	"void uncompress(Char*name)" -> "Bool uncompressStream(FILE*zStream,FILE*stream)" [color=black style=solid]
	"void uncompress(Char*name)" -> "remove()" [color=black style=solid]
	"void uncompress(Char*name)" -> "strcat (char*__restrict__dest,constchar*__restrict__src)" [color=black style=solid]
	"void uncompress(Char*name)" -> "fileno()" [color=black style=solid]
	"void uncompress(Char*name)" -> "void panic(constChar*s)" [color=black style=solid]
	"void uncompress(Char*name)" -> "void applySavedTimeInfoToOutputFile(Char*dstName)" [color=black style=solid]
	"void uncompress(Char*name)" -> "void pad(Char*s)" [color=black style=solid]
	"void uncompress(Char*name)" -> "fprintf()" [color=black style=solid]
	"void uncompress(Char*name)" -> "void setExit(Int32v)" [color=black style=solid]
	"void uncompress(Char*name)" -> "FILE *fopen_output_safely(Char*name,constchar*mode)" [color=black style=solid]
	"void uncompress(Char*name)" -> "Bool containsDubiousChars(Char*name)" [color=black style=solid]
	"void uncompress(Char*name)" -> "strerror()" [color=black style=solid]
	"void uncompress(Char*name)" -> "FILE *fopen(constchar*__restrict__filename,constchar*__restrict__modes)" [color=black style=solid]
	"void uncompress(Char*name)" -> "Int32 countHardLinks(Char*name)" [color=black style=solid]
	"void uncompress(Char*name)" -> "void ioError(void)" [color=black style=solid]
	"void uncompress(Char*name)" -> "stat()" [color=black style=solid]
	"void uncompress(Char*name)" -> "isatty()" [color=black style=solid]
	"Bool mapSuffix(Char*name,constChar*oldSuffix,constChar*newSuffix)" -> "strlen()" [color=black style=solid]
	"Bool mapSuffix(Char*name,constChar*oldSuffix,constChar*newSuffix)" -> "strcat (char*__restrict__dest,constchar*__restrict__src)" [color=black style=solid]
	"Bool mapSuffix(Char*name,constChar*oldSuffix,constChar*newSuffix)" -> "Bool hasSuffix(Char*s,constChar*suffix)" [color=black style=solid]
	"Bool uncompressStream(FILE*zStream,FILE*stream)" -> "fflush()" [color=black style=solid]
	"Bool uncompressStream(FILE*zStream,FILE*stream)" -> "fclose()" [color=black style=solid]
	"Bool uncompressStream(FILE*zStream,FILE*stream)" -> "void compressedStreamEOF(void)" [color=black style=solid]
	"Bool uncompressStream(FILE*zStream,FILE*stream)" -> "int BZ2_bzRead(int*bzerror,BZFILE*b,void*buf,intlen)" [color=black style=solid]
	"Bool uncompressStream(FILE*zStream,FILE*stream)" -> "void applySavedFileAttrToOutputFile(IntNativefd)" [color=black style=solid]
	"Bool uncompressStream(FILE*zStream,FILE*stream)" -> "size_t fread(void*__restrict__ptr,size_t__size,size_t__n,FILE*__restrict__stream)" [color=black style=solid]
	"Bool uncompressStream(FILE*zStream,FILE*stream)" -> "fileno()" [color=black style=solid]
	"Bool uncompressStream(FILE*zStream,FILE*stream)" -> "void panic(constChar*s)" [color=black style=solid]
	"Bool uncompressStream(FILE*zStream,FILE*stream)" -> "BZFILE *BZ2_bzReadOpen(int*bzerror,FILE*f,intverbosity,intsmall,void*unused,intnUnused)" [color=black style=solid]
	"Bool uncompressStream(FILE*zStream,FILE*stream)" -> "rewind()" [color=black style=solid]
	"Bool uncompressStream(FILE*zStream,FILE*stream)" -> "void BZ2_bzReadClose(int*bzerror,BZFILE*b)" [color=black style=solid]
	"Bool uncompressStream(FILE*zStream,FILE*stream)" -> "ferror()" [color=black style=solid]
	"Bool uncompressStream(FILE*zStream,FILE*stream)" -> "fprintf()" [color=black style=solid]
	"Bool uncompressStream(FILE*zStream,FILE*stream)" -> "fwrite()" [color=black style=solid]
	"Bool uncompressStream(FILE*zStream,FILE*stream)" -> "Bool myfeof(FILE*f)" [color=black style=solid]
	"Bool uncompressStream(FILE*zStream,FILE*stream)" -> "void configError(void)" [color=black style=solid]
	"Bool uncompressStream(FILE*zStream,FILE*stream)" -> "void ioError(void)" [color=black style=solid]
	"Bool uncompressStream(FILE*zStream,FILE*stream)" -> "void outOfMemory(void)" [color=black style=solid]
	"Bool uncompressStream(FILE*zStream,FILE*stream)" -> "void BZ2_bzReadGetUnused(int*bzerror,BZFILE*b,void**unused,int*nUnused)" [color=black style=solid]
	"Bool uncompressStream(FILE*zStream,FILE*stream)" -> "void crcError(void)" [color=black style=solid]
	"void crcError(void)" -> "void cleanUpAndFail(Int32ec)" [color=black style=solid]
	"void crcError(void)" -> "fprintf()" [color=black style=solid]
	"void crcError(void)" -> "void cadvise(void)" [color=black style=solid]
	"void crcError(void)" -> "void showFileNames(void)" [color=black style=solid]
	"void cadvise(void)" -> "fprintf()" [color=black style=solid]
	"void compressedStreamEOF(void)" -> "fprintf()" [color=black style=solid]
	"void compressedStreamEOF(void)" -> "perror()" [color=black style=solid]
	"void compressedStreamEOF(void)" -> "void cleanUpAndFail(Int32ec)" [color=black style=solid]
	"void compressedStreamEOF(void)" -> "void cadvise(void)" [color=black style=solid]
	"void compressedStreamEOF(void)" -> "void showFileNames(void)" [color=black style=solid]
	"void testf(Char*name)" -> "fprintf()" [color=black style=solid]
	"void testf(Char*name)" -> "void setExit(Int32v)" [color=black style=solid]
	"void testf(Char*name)" -> "fflush()" [color=black style=solid]
	"void testf(Char*name)" -> "Bool fileExists(Char*name)" [color=black style=solid]
	"void testf(Char*name)" -> "Bool containsDubiousChars(Char*name)" [color=black style=solid]
	"void testf(Char*name)" -> "fileno()" [color=black style=solid]
	"void testf(Char*name)" -> "strerror()" [color=black style=solid]
	"void testf(Char*name)" -> "void copyFileName(Char*to,Char*from)" [color=black style=solid]
	"void testf(Char*name)" -> "Bool testStream(FILE*zStream)" [color=black style=solid]
	"void testf(Char*name)" -> "FILE *fopen(constchar*__restrict__filename,constchar*__restrict__modes)" [color=black style=solid]
	"void testf(Char*name)" -> "void panic(constChar*s)" [color=black style=solid]
	"void testf(Char*name)" -> "stat()" [color=black style=solid]
	"void testf(Char*name)" -> "isatty()" [color=black style=solid]
	"void testf(Char*name)" -> "void pad(Char*s)" [color=black style=solid]
	"Bool testStream(FILE*zStream)" -> "BZFILE *BZ2_bzReadOpen(int*bzerror,FILE*f,intverbosity,intsmall,void*unused,intnUnused)" [color=black style=solid]
	"Bool testStream(FILE*zStream)" -> "fprintf()" [color=black style=solid]
	"Bool testStream(FILE*zStream)" -> "Bool myfeof(FILE*f)" [color=black style=solid]
	"Bool testStream(FILE*zStream)" -> "fclose()" [color=black style=solid]
	"Bool testStream(FILE*zStream)" -> "void configError(void)" [color=black style=solid]
	"Bool testStream(FILE*zStream)" -> "void ioError(void)" [color=black style=solid]
	"Bool testStream(FILE*zStream)" -> "void outOfMemory(void)" [color=black style=solid]
	"Bool testStream(FILE*zStream)" -> "void panic(constChar*s)" [color=black style=solid]
	"Bool testStream(FILE*zStream)" -> "void BZ2_bzReadClose(int*bzerror,BZFILE*b)" [color=black style=solid]
	"Bool testStream(FILE*zStream)" -> "void BZ2_bzReadGetUnused(int*bzerror,BZFILE*b,void**unused,int*nUnused)" [color=black style=solid]
	"Bool testStream(FILE*zStream)" -> "int BZ2_bzRead(int*bzerror,BZFILE*b,void*buf,intlen)" [color=black style=solid]
	"Bool testStream(FILE*zStream)" -> "ferror()" [color=black style=solid]
	"BZ2_compressBlock()" -> "void bsPutUChar(EState*s,UCharc)" [color=black style=solid]
	"BZ2_compressBlock()" -> "BZ2_blockSort()" [color=black style=solid]
	"BZ2_compressBlock()" -> "fprintf()" [color=black style=solid]
	"BZ2_compressBlock()" -> "void sendMTFValues(EState*s)" [color=black style=solid]
	"BZ2_compressBlock()" -> "void bsPutUInt32(EState*s,UInt32u)" [color=black style=solid]
	"BZ2_compressBlock()" -> "void generateMTFValues(EState*s)" [color=black style=solid]
	"BZ2_compressBlock()" -> "void bsFinishWrite(EState*s)" [color=black style=solid]
	"BZ2_compressBlock()" -> "__inline__ voidbsW(EState*s,Int32n,UInt32v)" [color=black style=solid]
	"BZ2_compressBlock()" -> "void BZ2_bsInitWrite(EState*s)" [color=black style=solid]
	"void bsPutUChar(EState*s,UCharc)" -> "__inline__ voidbsW(EState*s,Int32n,UInt32v)" [color=black style=solid]
	"void bsPutUInt32(EState*s,UInt32u)" -> "__inline__ voidbsW(EState*s,Int32n,UInt32v)" [color=black style=solid]
	"void generateMTFValues(EState*s)" -> "void makeMaps_e(EState*s)" [color=black style=solid]
	"void sendMTFValues(EState*s)" -> "fprintf()" [color=black style=solid]
	"void sendMTFValues(EState*s)" -> "BZ2_hbAssignCodes()" [color=black style=solid]
	"void sendMTFValues(EState*s)" -> "void BZ2_bz__AssertH__fail(interrcode)" [color=black style=solid]
	"void sendMTFValues(EState*s)" -> "BZ2_hbMakeCodeLengths()" [color=black style=solid]
	"void sendMTFValues(EState*s)" -> "__inline__ voidbsW(EState*s,Int32n,UInt32v)" [color=black style=solid]
	"int BZ2_bzBuffToBuffCompress(char*dest,unsignedint*destLen,char*source,unsignedintsourceLen,intblockSize100k,intverbosity,intworkFactor)" -> "int BZ2_bzCompress(bz_stream*strm,intaction)" [color=black style=solid]
	"int BZ2_bzBuffToBuffCompress(char*dest,unsignedint*destLen,char*source,unsignedintsourceLen,intblockSize100k,intverbosity,intworkFactor)" -> "int BZ2_bzCompressEnd(bz_stream*strm)" [color=black style=solid]
	"int BZ2_bzBuffToBuffCompress(char*dest,unsignedint*destLen,char*source,unsignedintsourceLen,intblockSize100k,intverbosity,intworkFactor)" -> "int BZ2_bzCompressInit(bz_stream*strm,intblockSize100k,intverbosity,intworkFactor)" [color=black style=solid]
	"int BZ2_bzCompressInit(bz_stream*strm,intblockSize100k,intverbosity,intworkFactor)" -> "void default_bzfree(void*opaque,void*addr)" [color=black style=solid]
	"int BZ2_bzCompressInit(bz_stream*strm,intblockSize100k,intverbosity,intworkFactor)" -> "void *default_bzalloc(void*opaque,Int32items,Int32size)" [color=black style=solid]
	"int BZ2_bzCompressInit(bz_stream*strm,intblockSize100k,intverbosity,intworkFactor)" -> "void init_RL(EState*s)" [color=black style=solid]
	"int BZ2_bzCompressInit(bz_stream*strm,intblockSize100k,intverbosity,intworkFactor)" -> "int bz_config_ok(void)" [color=black style=solid]
	"int BZ2_bzCompressInit(bz_stream*strm,intblockSize100k,intverbosity,intworkFactor)" -> "void prepare_new_block(EState*s)" [color=black style=solid]
	"void *default_bzalloc(void*opaque,Int32items,Int32size)" -> "malloc()" [color=black style=solid]
	"void default_bzfree(void*opaque,void*addr)" -> "free()" [color=black style=solid]
	"int BZ2_bzCompress(bz_stream*strm,intaction)" -> "Bool handle_compress(bz_stream*strm)" [color=black style=solid]
	"int BZ2_bzCompress(bz_stream*strm,intaction)" -> "Bool isempty_RL(EState*s)" [color=black style=solid]
	"Bool handle_compress(bz_stream*strm)" -> "Bool isempty_RL(EState*s)" [color=black style=solid]
	"Bool handle_compress(bz_stream*strm)" -> "Bool copy_output_until_stop(EState*s)" [color=black style=solid]
	"Bool handle_compress(bz_stream*strm)" -> "Bool copy_input_until_stop(EState*s)" [color=black style=solid]
	"Bool handle_compress(bz_stream*strm)" -> "void flush_RL(EState*s)" [color=black style=solid]
	"Bool handle_compress(bz_stream*strm)" -> "BZ2_compressBlock()" [color=black style=solid]
	"Bool handle_compress(bz_stream*strm)" -> "void prepare_new_block(EState*s)" [color=black style=solid]
	"Bool copy_input_until_stop(EState*s)" -> "void add_pair_to_block(EState*s)" [color=black style=solid]
	"void flush_RL(EState*s)" -> "void add_pair_to_block(EState*s)" [color=black style=solid]
	"void flush_RL(EState*s)" -> "void init_RL(EState*s)" [color=black style=solid]
	"int BZ2_bzBuffToBuffDecompress(char*dest,unsignedint*destLen,char*source,unsignedintsourceLen,intsmall,intverbosity)" -> "int BZ2_bzDecompressEnd(bz_stream*strm)" [color=black style=solid]
	"int BZ2_bzBuffToBuffDecompress(char*dest,unsignedint*destLen,char*source,unsignedintsourceLen,intsmall,intverbosity)" -> "int BZ2_bzDecompress(bz_stream*strm)" [color=black style=solid]
	"int BZ2_bzBuffToBuffDecompress(char*dest,unsignedint*destLen,char*source,unsignedintsourceLen,intsmall,intverbosity)" -> "int BZ2_bzDecompressInit(bz_stream*strm,intverbosity,intsmall)" [color=black style=solid]
	"int BZ2_bzDecompressInit(bz_stream*strm,intverbosity,intsmall)" -> "void default_bzfree(void*opaque,void*addr)" [color=black style=solid]
	"int BZ2_bzDecompressInit(bz_stream*strm,intverbosity,intsmall)" -> "void *default_bzalloc(void*opaque,Int32items,Int32size)" [color=black style=solid]
	"int BZ2_bzDecompressInit(bz_stream*strm,intverbosity,intsmall)" -> "int bz_config_ok(void)" [color=black style=solid]
	"int BZ2_bzDecompress(bz_stream*strm)" -> "fprintf()" [color=black style=solid]
	"int BZ2_bzDecompress(bz_stream*strm)" -> "Bool unRLE_obuf_to_output_FAST(DState*s)" [color=black style=solid]
	"int BZ2_bzDecompress(bz_stream*strm)" -> "void BZ2_bz__AssertH__fail(interrcode)" [color=black style=solid]
	"int BZ2_bzDecompress(bz_stream*strm)" -> "BZ2_decompress()" [color=black style=solid]
	"int BZ2_bzDecompress(bz_stream*strm)" -> "Bool unRLE_obuf_to_output_SMALL(DState*s)" [color=black style=solid]
	"Bool unRLE_obuf_to_output_SMALL(DState*s)" -> "__inline__ Int32BZ2_indexIntoF(Int32indx,Int32*cftab)" [color=black style=solid]
	"void BZ2_bz__AssertH__fail(interrcode)" -> "exit()" [color=black style=solid]
	"void BZ2_bz__AssertH__fail(interrcode)" -> "fprintf()" [color=black style=solid]
	"void BZ2_bz__AssertH__fail(interrcode)" -> "const char*BZ2_bzlibVersion(void)" [color=black style=solid]
	"void BZ2_bzclose(BZFILE*b)" -> "void BZ2_bzWriteClose(int*bzerror,BZFILE*b,intabandon,unsignedint*nbytes_in,unsignedint*nbytes_out)" [color=black style=solid]
	"void BZ2_bzclose(BZFILE*b)" -> "void BZ2_bzReadClose(int*bzerror,BZFILE*b)" [color=black style=solid]
	"void BZ2_bzclose(BZFILE*b)" -> "fclose()" [color=black style=solid]
	"void BZ2_bzWriteClose(int*bzerror,BZFILE*b,intabandon,unsignedint*nbytes_in,unsignedint*nbytes_out)" -> "void BZ2_bzWriteClose64(int*bzerror,BZFILE*b,intabandon,unsignedint*nbytes_in_lo32,unsignedint*nbytes_in_hi32,unsignedint*nbytes_out_lo32,unsignedint*nbytes_out_hi32)" [color=black style=solid]
	"void BZ2_bzWriteClose64(int*bzerror,BZFILE*b,intabandon,unsignedint*nbytes_in_lo32,unsignedint*nbytes_in_hi32,unsignedint*nbytes_out_lo32,unsignedint*nbytes_out_hi32)" -> "free()" [color=black style=solid]
	"void BZ2_bzWriteClose64(int*bzerror,BZFILE*b,intabandon,unsignedint*nbytes_in_lo32,unsignedint*nbytes_in_hi32,unsignedint*nbytes_out_lo32,unsignedint*nbytes_out_hi32)" -> "int BZ2_bzCompress(bz_stream*strm,intaction)" [color=black style=solid]
	"void BZ2_bzWriteClose64(int*bzerror,BZFILE*b,intabandon,unsignedint*nbytes_in_lo32,unsignedint*nbytes_in_hi32,unsignedint*nbytes_out_lo32,unsignedint*nbytes_out_hi32)" -> "fflush()" [color=black style=solid]
	"void BZ2_bzWriteClose64(int*bzerror,BZFILE*b,intabandon,unsignedint*nbytes_in_lo32,unsignedint*nbytes_in_hi32,unsignedint*nbytes_out_lo32,unsignedint*nbytes_out_hi32)" -> "fwrite()" [color=black style=solid]
	"void BZ2_bzWriteClose64(int*bzerror,BZFILE*b,intabandon,unsignedint*nbytes_in_lo32,unsignedint*nbytes_in_hi32,unsignedint*nbytes_out_lo32,unsignedint*nbytes_out_hi32)" -> "int BZ2_bzCompressEnd(bz_stream*strm)" [color=black style=solid]
	"void BZ2_bzWriteClose64(int*bzerror,BZFILE*b,intabandon,unsignedint*nbytes_in_lo32,unsignedint*nbytes_in_hi32,unsignedint*nbytes_out_lo32,unsignedint*nbytes_out_hi32)" -> "ferror()" [color=black style=solid]
	"void BZ2_bzReadClose(int*bzerror,BZFILE*b)" -> "int BZ2_bzDecompressEnd(bz_stream*strm)" [color=black style=solid]
	"void BZ2_bzReadClose(int*bzerror,BZFILE*b)" -> "free()" [color=black style=solid]
	"BZFILE *BZ2_bzdopen(intfd,constchar*mode)" -> "BZFILE *bzopen_or_bzdopen(constchar*path,intfd,constchar*mode,intopen_mode)" [color=black style=solid]
	"BZFILE *bzopen_or_bzdopen(constchar*path,intfd,constchar*mode,intopen_mode)" -> "BZFILE *BZ2_bzReadOpen(int*bzerror,FILE*f,intverbosity,intsmall,void*unused,intnUnused)" [color=black style=solid]
	"BZFILE *bzopen_or_bzdopen(constchar*path,intfd,constchar*mode,intopen_mode)" -> "int strcmp(constchar*__s1,constchar*__s2)" [color=black style=solid]
	"BZFILE *bzopen_or_bzdopen(constchar*path,intfd,constchar*mode,intopen_mode)" -> "strcat (char*__restrict__dest,constchar*__restrict__src)" [color=black style=solid]
	"BZFILE *bzopen_or_bzdopen(constchar*path,intfd,constchar*mode,intopen_mode)" -> "FILE *fdopen(int__fd,constchar*__modes)" [color=black style=solid]
	"BZFILE *bzopen_or_bzdopen(constchar*path,intfd,constchar*mode,intopen_mode)" -> "fclose()" [color=black style=solid]
	"BZFILE *bzopen_or_bzdopen(constchar*path,intfd,constchar*mode,intopen_mode)" -> "FILE *fopen(constchar*__restrict__filename,constchar*__restrict__modes)" [color=black style=solid]
	"BZFILE *bzopen_or_bzdopen(constchar*path,intfd,constchar*mode,intopen_mode)" -> "BZFILE *BZ2_bzWriteOpen(int*bzerror,FILE*f,intblockSize100k,intverbosity,intworkFactor)" [color=black style=solid]
	"BZFILE *BZ2_bzWriteOpen(int*bzerror,FILE*f,intblockSize100k,intverbosity,intworkFactor)" -> "int BZ2_bzCompressInit(bz_stream*strm,intblockSize100k,intverbosity,intworkFactor)" [color=black style=solid]
	"BZFILE *BZ2_bzWriteOpen(int*bzerror,FILE*f,intblockSize100k,intverbosity,intworkFactor)" -> "free()" [color=black style=solid]
	"BZFILE *BZ2_bzWriteOpen(int*bzerror,FILE*f,intblockSize100k,intverbosity,intworkFactor)" -> "ferror()" [color=black style=solid]
	"BZFILE *BZ2_bzWriteOpen(int*bzerror,FILE*f,intblockSize100k,intverbosity,intworkFactor)" -> "malloc()" [color=black style=solid]
	"BZFILE *BZ2_bzReadOpen(int*bzerror,FILE*f,intverbosity,intsmall,void*unused,intnUnused)" -> "int BZ2_bzDecompressInit(bz_stream*strm,intverbosity,intsmall)" [color=black style=solid]
	"BZFILE *BZ2_bzReadOpen(int*bzerror,FILE*f,intverbosity,intsmall,void*unused,intnUnused)" -> "free()" [color=black style=solid]
	"BZFILE *BZ2_bzReadOpen(int*bzerror,FILE*f,intverbosity,intsmall,void*unused,intnUnused)" -> "ferror()" [color=black style=solid]
	"BZFILE *BZ2_bzReadOpen(int*bzerror,FILE*f,intverbosity,intsmall,void*unused,intnUnused)" -> "malloc()" [color=black style=solid]
	"BZFILE *BZ2_bzopen(constchar*path,constchar*mode)" -> "BZFILE *bzopen_or_bzdopen(constchar*path,intfd,constchar*mode,intopen_mode)" [color=black style=solid]
	"int BZ2_bzread(BZFILE*b,void*buf,intlen)" -> "int BZ2_bzRead(int*bzerror,BZFILE*b,void*buf,intlen)" [color=black style=solid]
	"int BZ2_bzRead(int*bzerror,BZFILE*b,void*buf,intlen)" -> "size_t fread(void*__restrict__ptr,size_t__size,size_t__n,FILE*__restrict__stream)" [color=black style=solid]
	"int BZ2_bzRead(int*bzerror,BZFILE*b,void*buf,intlen)" -> "Bool myfeof(FILE*f)" [color=black style=solid]
	"int BZ2_bzRead(int*bzerror,BZFILE*b,void*buf,intlen)" -> "ferror()" [color=black style=solid]
	"int BZ2_bzRead(int*bzerror,BZFILE*b,void*buf,intlen)" -> "int BZ2_bzDecompress(bz_stream*strm)" [color=black style=solid]
	"int BZ2_bzwrite(BZFILE*b,void*buf,intlen)" -> "void BZ2_bzWrite(int*bzerror,BZFILE*b,void*buf,intlen)" [color=black style=solid]
	"void BZ2_bzWrite(int*bzerror,BZFILE*b,void*buf,intlen)" -> "int BZ2_bzCompress(bz_stream*strm,intaction)" [color=black style=solid]
	"void BZ2_bzWrite(int*bzerror,BZFILE*b,void*buf,intlen)" -> "ferror()" [color=black style=solid]
	"void BZ2_bzWrite(int*bzerror,BZFILE*b,void*buf,intlen)" -> "fwrite()" [color=black style=solid]
	BZ2_crc32Table [color=lightblue2 fontcolor=black shape=box style=filled]
	"Bool copy_input_until_stop(EState*s)" -> BZ2_crc32Table [label=8 color=blue style=dashed]
	"Bool unRLE_obuf_to_output_SMALL(DState*s)" -> BZ2_crc32Table [label=8 color=blue style=dashed]
	BZ2_rNums [color=lightblue2 fontcolor=black shape=box style=filled]
	"Bool unRLE_obuf_to_output_SMALL(DState*s)" -> BZ2_rNums [label=12 color=blue style=dashed]
	blockSize100k [color=lightblue2 fontcolor=black shape=box style=filled]
	"void compressStream(FILE*stream,FILE*zStream)" -> blockSize100k [label=37 color=blue style=dashed]
	"IntNative main(IntNativeargc,Char*argv[])" -> blockSize100k [label=37 color=blue style=dashed]
	deleteOutputOnInterrupt [color=lightblue2 fontcolor=black shape=box style=filled]
	"void cleanUpAndFail(Int32ec)" -> deleteOutputOnInterrupt [label=12 color=blue style=dashed]
	"void compress(Char*name)" -> deleteOutputOnInterrupt [label=12 color=blue style=dashed]
	"void uncompress(Char*name)" -> deleteOutputOnInterrupt [label=12 color=blue style=dashed]
	"void testf(Char*name)" -> deleteOutputOnInterrupt [label=12 color=blue style=dashed]
	"IntNative main(IntNativeargc,Char*argv[])" -> deleteOutputOnInterrupt [label=12 color=blue style=dashed]
	exitValue [color=lightblue2 fontcolor=black shape=box style=filled]
	"void cleanUpAndFail(Int32ec)" -> exitValue [label=10 color=blue style=dashed]
	"void mySIGSEGVorSIGBUScatcher(IntNativen)" -> exitValue [label=10 color=blue style=dashed]
	"void configError(void)" -> exitValue [label=10 color=blue style=dashed]
	"void copyFileName(Char*to,Char*from)" -> exitValue [label=10 color=blue style=dashed]
	"IntNative main(IntNativeargc,Char*argv[])" -> exitValue [label=10 color=blue style=dashed]
	forceOverwrite [color=lightblue2 fontcolor=black shape=box style=filled]
	"Bool uncompressStream(FILE*zStream,FILE*stream)" -> forceOverwrite [label=10 color=blue style=dashed]
	"void compress(Char*name)" -> forceOverwrite [label=10 color=blue style=dashed]
	"void uncompress(Char*name)" -> forceOverwrite [label=10 color=blue style=dashed]
	"IntNative main(IntNativeargc,Char*argv[])" -> forceOverwrite [label=10 color=blue style=dashed]
	inName [color=lightblue2 fontcolor=black shape=box style=filled]
	"Bool uncompressStream(FILE*zStream,FILE*stream)" -> inName [label=66 color=blue style=dashed]
	"Bool testStream(FILE*zStream)" -> inName [label=66 color=blue style=dashed]
	"void showFileNames(void)" -> inName [label=66 color=blue style=dashed]
	"void cleanUpAndFail(Int32ec)" -> inName [label=66 color=blue style=dashed]
	"void mySIGSEGVorSIGBUScatcher(IntNativen)" -> inName [label=66 color=blue style=dashed]
	"void compress(Char*name)" -> inName [label=66 color=blue style=dashed]
	"void uncompress(Char*name)" -> inName [label=66 color=blue style=dashed]
	"void testf(Char*name)" -> inName [label=66 color=blue style=dashed]
	"IntNative main(IntNativeargc,Char*argv[])" -> inName [label=66 color=blue style=dashed]
	keepInputFiles [color=lightblue2 fontcolor=black shape=box style=filled]
	"void compress(Char*name)" -> keepInputFiles [label=5 color=blue style=dashed]
	"void uncompress(Char*name)" -> keepInputFiles [label=5 color=blue style=dashed]
	"IntNative main(IntNativeargc,Char*argv[])" -> keepInputFiles [label=5 color=blue style=dashed]
	longestFileName [color=lightblue2 fontcolor=black shape=box style=filled]
	"void pad(Char*s)" -> longestFileName [label=5 color=blue style=dashed]
	"IntNative main(IntNativeargc,Char*argv[])" -> longestFileName [label=5 color=blue style=dashed]
	noisy [color=lightblue2 fontcolor=black shape=box style=filled]
	"Bool uncompressStream(FILE*zStream,FILE*stream)" -> noisy [label=18 color=blue style=dashed]
	"Bool testStream(FILE*zStream)" -> noisy [label=18 color=blue style=dashed]
	"void cadvise(void)" -> noisy [label=18 color=blue style=dashed]
	"void showFileNames(void)" -> noisy [label=18 color=blue style=dashed]
	"void cleanUpAndFail(Int32ec)" -> noisy [label=18 color=blue style=dashed]
	"void compressedStreamEOF(void)" -> noisy [label=18 color=blue style=dashed]
	"void compress(Char*name)" -> noisy [label=18 color=blue style=dashed]
	"void uncompress(Char*name)" -> noisy [label=18 color=blue style=dashed]
	"void testf(Char*name)" -> noisy [label=18 color=blue style=dashed]
	"IntNative main(IntNativeargc,Char*argv[])" -> noisy [label=18 color=blue style=dashed]
	numFileNames [color=lightblue2 fontcolor=black shape=box style=filled]
	"void cleanUpAndFail(Int32ec)" -> numFileNames [label=10 color=blue style=dashed]
	"IntNative main(IntNativeargc,Char*argv[])" -> numFileNames [label=10 color=blue style=dashed]
	numFilesProcessed [color=lightblue2 fontcolor=black shape=box style=filled]
	"void cleanUpAndFail(Int32ec)" -> numFilesProcessed [label=6 color=blue style=dashed]
	"IntNative main(IntNativeargc,Char*argv[])" -> numFilesProcessed [label=6 color=blue style=dashed]
	opMode [color=lightblue2 fontcolor=black shape=box style=filled]
	"void cleanUpAndFail(Int32ec)" -> opMode [label=17 color=blue style=dashed]
	"void mySIGSEGVorSIGBUScatcher(IntNativen)" -> opMode [label=17 color=blue style=dashed]
	"IntNative main(IntNativeargc,Char*argv[])" -> opMode [label=17 color=blue style=dashed]
	outName [color=lightblue2 fontcolor=black shape=box style=filled]
	"void showFileNames(void)" -> outName [label=31 color=blue style=dashed]
	"void cleanUpAndFail(Int32ec)" -> outName [label=31 color=blue style=dashed]
	"void mySIGSEGVorSIGBUScatcher(IntNativen)" -> outName [label=31 color=blue style=dashed]
	"void compress(Char*name)" -> outName [label=31 color=blue style=dashed]
	"void uncompress(Char*name)" -> outName [label=31 color=blue style=dashed]
	"void testf(Char*name)" -> outName [label=31 color=blue style=dashed]
	"IntNative main(IntNativeargc,Char*argv[])" -> outName [label=31 color=blue style=dashed]
	outputHandleJustInCase [color=lightblue2 fontcolor=black shape=box style=filled]
	"void compressStream(FILE*stream,FILE*zStream)" -> outputHandleJustInCase [label=12 color=blue style=dashed]
	"Bool uncompressStream(FILE*zStream,FILE*stream)" -> outputHandleJustInCase [label=12 color=blue style=dashed]
	"void cleanUpAndFail(Int32ec)" -> outputHandleJustInCase [label=12 color=blue style=dashed]
	"void compress(Char*name)" -> outputHandleJustInCase [label=12 color=blue style=dashed]
	"void uncompress(Char*name)" -> outputHandleJustInCase [label=12 color=blue style=dashed]
	"void testf(Char*name)" -> outputHandleJustInCase [label=12 color=blue style=dashed]
	"IntNative main(IntNativeargc,Char*argv[])" -> outputHandleJustInCase [label=12 color=blue style=dashed]
	progName [color=lightblue2 fontcolor=black shape=box style=filled]
	"Bool uncompressStream(FILE*zStream,FILE*stream)" -> progName [label=73 color=blue style=dashed]
	"Bool testStream(FILE*zStream)" -> progName [label=73 color=blue style=dashed]
	"void cleanUpAndFail(Int32ec)" -> progName [label=73 color=blue style=dashed]
	"void panic(constChar*s)" -> progName [label=73 color=blue style=dashed]
	"void crcError(void)" -> progName [label=73 color=blue style=dashed]
	"void compressedStreamEOF(void)" -> progName [label=73 color=blue style=dashed]
	"void ioError(void)" -> progName [label=73 color=blue style=dashed]
	"void mySignalCatcher(IntNativen)" -> progName [label=73 color=blue style=dashed]
	"void mySIGSEGVorSIGBUScatcher(IntNativen)" -> progName [label=73 color=blue style=dashed]
	"void outOfMemory(void)" -> progName [label=73 color=blue style=dashed]
	"void compress(Char*name)" -> progName [label=73 color=blue style=dashed]
	"void uncompress(Char*name)" -> progName [label=73 color=blue style=dashed]
	"void testf(Char*name)" -> progName [label=73 color=blue style=dashed]
	"void redundant(Char*flag)" -> progName [label=73 color=blue style=dashed]
	"IntNative main(IntNativeargc,Char*argv[])" -> progName [label=73 color=blue style=dashed]
	progNameReally [color=lightblue2 fontcolor=black shape=box style=filled]
	"IntNative main(IntNativeargc,Char*argv[])" -> progNameReally [label=3 color=blue style=dashed]
	smallMode [color=lightblue2 fontcolor=black shape=box style=filled]
	"Bool uncompressStream(FILE*zStream,FILE*stream)" -> smallMode [label=9 color=blue style=dashed]
	"Bool testStream(FILE*zStream)" -> smallMode [label=9 color=blue style=dashed]
	"IntNative main(IntNativeargc,Char*argv[])" -> smallMode [label=9 color=blue style=dashed]
	srcMode [color=lightblue2 fontcolor=black shape=box style=filled]
	"void cleanUpAndFail(Int32ec)" -> srcMode [label=44 color=blue style=dashed]
	"void compress(Char*name)" -> srcMode [label=44 color=blue style=dashed]
	"void uncompress(Char*name)" -> srcMode [label=44 color=blue style=dashed]
	"void testf(Char*name)" -> srcMode [label=44 color=blue style=dashed]
	"IntNative main(IntNativeargc,Char*argv[])" -> srcMode [label=44 color=blue style=dashed]
	testFailsExist [color=lightblue2 fontcolor=black shape=box style=filled]
	"void testf(Char*name)" -> testFailsExist [label=4 color=blue style=dashed]
	"IntNative main(IntNativeargc,Char*argv[])" -> testFailsExist [label=4 color=blue style=dashed]
	tmpName [color=lightblue2 fontcolor=black shape=box style=filled]
	"void addFlagsFromEnvVar(Cell**argList,Char*varName)" -> tmpName [label=3 color=blue style=dashed]
	unzFailsExist [color=lightblue2 fontcolor=black shape=box style=filled]
	"void uncompress(Char*name)" -> unzFailsExist [label=4 color=blue style=dashed]
	"IntNative main(IntNativeargc,Char*argv[])" -> unzFailsExist [label=4 color=blue style=dashed]
	unzSuffix [color=lightblue2 fontcolor=black shape=box style=filled]
	"void uncompress(Char*name)" -> unzSuffix [label=1 color=blue style=dashed]
	verbosity [color=lightblue2 fontcolor=black shape=box style=filled]
	"void compressStream(FILE*stream,FILE*zStream)" -> verbosity [label=44 color=blue style=dashed]
	"Bool uncompressStream(FILE*zStream,FILE*stream)" -> verbosity [label=44 color=blue style=dashed]
	"Bool testStream(FILE*zStream)" -> verbosity [label=44 color=blue style=dashed]
	"void compress(Char*name)" -> verbosity [label=44 color=blue style=dashed]
	"void uncompress(Char*name)" -> verbosity [label=44 color=blue style=dashed]
	"void testf(Char*name)" -> verbosity [label=44 color=blue style=dashed]
	"IntNative main(IntNativeargc,Char*argv[])" -> verbosity [label=44 color=blue style=dashed]
	workFactor [color=lightblue2 fontcolor=black shape=box style=filled]
	"void compressStream(FILE*stream,FILE*zStream)" -> workFactor [label=23 color=blue style=dashed]
	"IntNative main(IntNativeargc,Char*argv[])" -> workFactor [label=23 color=blue style=dashed]
	zSuffix [color=lightblue2 fontcolor=black shape=box style=filled]
	"void compress(Char*name)" -> zSuffix [label=3 color=blue style=dashed]
	"void uncompress(Char*name)" -> zSuffix [label=3 color=blue style=dashed]
	"bzerrorstrings-bzlib.i" [color=lightblue2 fontcolor=black shape=box style=filled]
	"fileMetaInfo-bzip2.i" [color=lightblue2 fontcolor=black shape=box style=filled]
	"void saveInputFileMetaInfo(Char*srcName)" -> "fileMetaInfo-bzip2.i" [label=6 color=blue style=dashed]
	"void applySavedTimeInfoToOutputFile(Char*dstName)" -> "fileMetaInfo-bzip2.i" [label=6 color=blue style=dashed]
	"void applySavedFileAttrToOutputFile(IntNativefd)" -> "fileMetaInfo-bzip2.i" [label=6 color=blue style=dashed]
	"incs-blocksort.i" [color=lightblue2 fontcolor=black shape=box style=filled]
	FILE [color=lightblue2 fontcolor=black shape=box style=filled]
	"Bool myfeof(FILE*f)" -> FILE [label=107 color=blue style=dashed]
	"void compressStream(FILE*stream,FILE*zStream)" -> FILE [label=107 color=blue style=dashed]
	"Bool uncompressStream(FILE*zStream,FILE*stream)" -> FILE [label=107 color=blue style=dashed]
	"Bool testStream(FILE*zStream)" -> FILE [label=107 color=blue style=dashed]
	"Bool fileExists(Char*name)" -> FILE [label=107 color=blue style=dashed]
	"FILE *fopen_output_safely(Char*name,constchar*mode)" -> FILE [label=107 color=blue style=dashed]
	"void compress(Char*name)" -> FILE [label=107 color=blue style=dashed]
	"void uncompress(Char*name)" -> FILE [label=107 color=blue style=dashed]
	"void testf(Char*name)" -> FILE [label=107 color=blue style=dashed]
	"Bool myfeof(FILE*f)" -> FILE [label=107 color=blue style=dashed]
	"void BZ2_bzclose(BZFILE*b)" -> FILE [label=107 color=blue style=dashed]
	DState [color=lightblue2 fontcolor=black shape=box style=filled]
	"Bool unRLE_obuf_to_output_SMALL(DState*s)" -> DState [label=7 color=blue style=dashed]
	"int BZ2_bzDecompress(bz_stream*strm)" -> DState [label=7 color=blue style=dashed]
	bz_stream [color=lightblue2 fontcolor=black shape=box style=filled]
	"Bool handle_compress(bz_stream*strm)" -> bz_stream [label=10 color=blue style=dashed]
	"int BZ2_bzCompress(bz_stream*strm,intaction)" -> bz_stream [label=10 color=blue style=dashed]
	"int BZ2_bzDecompress(bz_stream*strm)" -> bz_stream [label=10 color=blue style=dashed]
	EState [color=lightblue2 fontcolor=black shape=box style=filled]
	"void bsPutUInt32(EState*s,UInt32u)" -> EState [label=21 color=blue style=dashed]
	"void bsPutUChar(EState*s,UCharc)" -> EState [label=21 color=blue style=dashed]
	"void generateMTFValues(EState*s)" -> EState [label=21 color=blue style=dashed]
	"void sendMTFValues(EState*s)" -> EState [label=21 color=blue style=dashed]
	"void flush_RL(EState*s)" -> EState [label=21 color=blue style=dashed]
	"Bool copy_input_until_stop(EState*s)" -> EState [label=21 color=blue style=dashed]
	"Bool handle_compress(bz_stream*strm)" -> EState [label=21 color=blue style=dashed]
	"int BZ2_bzCompress(bz_stream*strm,intaction)" -> EState [label=21 color=blue style=dashed]
	UInt64 [color=lightblue2 fontcolor=black shape=box style=filled]
	"void uInt64_toAscii(char*outbuf,UInt64*n)" -> UInt64 [label=7 color=blue style=dashed]
	"void compressStream(FILE*stream,FILE*zStream)" -> UInt64 [label=7 color=blue style=dashed]
	stat [color=lightblue2 fontcolor=black shape=box style=filled]
	"void cleanUpAndFail(Int32ec)" -> stat [label=6 color=blue style=dashed]
	"Bool notAStandardFile(Char*name)" -> stat [label=6 color=blue style=dashed]
	"Int32 countHardLinks(Char*name)" -> stat [label=6 color=blue style=dashed]
	"void compress(Char*name)" -> stat [label=6 color=blue style=dashed]
	"void uncompress(Char*name)" -> stat [label=6 color=blue style=dashed]
	"void testf(Char*name)" -> stat [label=6 color=blue style=dashed]
	utimbuf [color=lightblue2 fontcolor=black shape=box style=filled]
	"void applySavedTimeInfoToOutputFile(Char*dstName)" -> utimbuf [label=1 color=blue style=dashed]
	Cell [color=lightblue2 fontcolor=black shape=box style=filled]
	"Cell *mkCell(void)" -> Cell [label=11 color=blue style=dashed]
	"Cell *snocString(Cell*root,Char*name)" -> Cell [label=11 color=blue style=dashed]
	"void addFlagsFromEnvVar(Cell**argList,Char*varName)" -> Cell [label=11 color=blue style=dashed]
	"IntNative main(IntNativeargc,Char*argv[])" -> Cell [label=11 color=blue style=dashed]
	bzFile [color=lightblue2 fontcolor=black shape=box style=filled]
	"void BZ2_bzReadClose(int*bzerror,BZFILE*b)" -> bzFile [label=16 color=blue style=dashed]
	"int BZ2_bzread(BZFILE*b,void*buf,intlen)" -> bzFile [label=16 color=blue style=dashed]
	"void BZ2_bzclose(BZFILE*b)" -> bzFile [label=16 color=blue style=dashed]
}
