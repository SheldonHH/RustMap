        -:    0:Source:main.c
        -:    0:Graph:main.gcno
        -:    0:Data:main.gcda
        -:    0:Runs:4
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2: 
       12:    3:int mul_inv(int a, int b)
        -:    4:{
       12:    5:	int b0 = b, t, q;
       12:    6:	int x0 = 0, x1 = 1;
       12:    7:	if (b == 1) return 1;
       40:    8:	while (a > 1) {
       28:    9:		q = a / b;
       28:   10:		t = b, b = a % b, a = t;
       28:   11:		t = x0, x0 = x1 - q * x0, x1 = t;
        -:   12:	}
       12:   13:	if (x1 < 0) x1 += b0;
       12:   14:	return x1;
       12:   15:}
        -:   16: 
        4:   17:int chinese_remainder(int *n, int *a, int len)
        -:   18:{
        4:   19:	int p, i, prod = 1, sum = 0;
        -:   20: 
       16:   21:	for (i = 0; i < len; i++) prod *= n[i];
        -:   22: 
       16:   23:	for (i = 0; i < len; i++) {
       12:   24:		p = prod / n[i];
       12:   25:		sum += a[i] * mul_inv(p, n[i]) * p;
       12:   26:	}
        -:   27: 
        4:   28:	return sum % prod;
        -:   29:}
        -:   30: 
        4:   31:int main(void)
        -:   32:{
        4:   33:	int n[] = { 3, 5, 7 };
        4:   34:	int a[] = { 2, 3, 2 };
        -:   35: 
        4:   36:	printf("%d\n", chinese_remainder(n, a, sizeof(n)/sizeof(n[0])));
        4:   37:	return 0;
        -:   38:}
