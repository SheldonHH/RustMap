        -:    0:Source:main.c
        -:    0:Graph:main.gcno
        -:    0:Data:main.gcda
        -:    0:Runs:4
        -:    0:Programs:1
        -:    1:#include <math.h>
        -:    2:#include <stdio.h>
        -:    3:#include <stdlib.h>
        -:    4: 
        -:    5:typedef struct {
        -:    6:    int n;
        -:    7:    double **elems;
        -:    8:} SquareMatrix;
        -:    9: 
        4:   10:SquareMatrix init_square_matrix(int n, double elems[n][n]) {
       12:   11:    SquareMatrix A = {
        4:   12:        .n = n,
        4:   13:        .elems = malloc(n * sizeof(double *))
        -:   14:    };
       20:   15:    for(int i = 0; i < n; ++i) {
       16:   16:        A.elems[i] = malloc(n * sizeof(double));
       80:   17:        for(int j = 0; j < n; ++j)
       64:   18:            A.elems[i][j] = elems[i][j];
       16:   19:    }
        -:   20: 
        4:   21:    return A;
        -:   22:}
        -:   23: 
       20:   24:SquareMatrix copy_square_matrix(SquareMatrix src) {
        -:   25:    SquareMatrix dest;
       20:   26:    dest.n = src.n;
       20:   27:    dest.elems = malloc(dest.n * sizeof(double *));
      100:   28:    for(int i = 0; i < dest.n; ++i) {
       80:   29:        dest.elems[i] = malloc(dest.n * sizeof(double));
      400:   30:        for(int j = 0; j < dest.n; ++j)
      320:   31:            dest.elems[i][j] = src.elems[i][j];
       80:   32:    }
        -:   33: 
       20:   34:    return dest;
        -:   35:}
        -:   36: 
       20:   37:double det(SquareMatrix A) {
       20:   38:    double det = 1;
        -:   39: 
      100:   40:    for(int j = 0; j < A.n; ++j) {
       80:   41:        int i_max = j;
      280:   42:        for(int i = j; i < A.n; ++i)
      272:   43:            if(A.elems[i][j] > A.elems[i_max][j])
       72:   44:                i_max = i;
        -:   45: 
       80:   46:        if(i_max != j) {
      260:   47:            for(int k = 0; k < A.n; ++k) {
      208:   48:                double tmp = A.elems[i_max][k];
      208:   49:                A.elems[i_max][k] = A.elems[j][k];
      208:   50:                A.elems[j][k]     = tmp;
      208:   51:            }
        -:   52: 
       52:   53:            det *= -1;
       52:   54:        }
        -:   55: 
       80:   56:        if(abs(A.elems[j][j]) < 1e-12) {
    #####:   57:            puts("Singular matrix!");
    #####:   58:            return NAN;
        -:   59:        }
        -:   60: 
      200:   61:        for(int i = j + 1; i < A.n; ++i) {
      120:   62:            double mult = -A.elems[i][j] / A.elems[j][j];
      600:   63:            for(int k = 0; k < A.n; ++k)
      480:   64:                A.elems[i][k] += mult * A.elems[j][k];
      120:   65:        }
       80:   66:    }
        -:   67: 
      100:   68:    for(int i = 0; i < A.n; ++i)
       80:   69:        det *= A.elems[i][i];
        -:   70: 
       20:   71:    return det;
       20:   72:}
        -:   73: 
       24:   74:void deinit_square_matrix(SquareMatrix A) {
      120:   75:    for(int i = 0; i < A.n; ++i)
       96:   76:        free(A.elems[i]);
       24:   77:    free(A.elems);
       24:   78:}
        -:   79: 
       16:   80:double cramer_solve(SquareMatrix A, double det_A, double *b, int var) {
       16:   81:    SquareMatrix tmp = copy_square_matrix(A);
       80:   82:    for(int i = 0; i < tmp.n; ++i)
       64:   83:        tmp.elems[i][var] = b[i];
        -:   84: 
       16:   85:    double det_tmp = det(tmp);
       16:   86:    deinit_square_matrix(tmp);
        -:   87: 
       16:   88:    return det_tmp / det_A;
        -:   89:}
        -:   90: 
        4:   91:int main(int argc, char **argv) {
        -:   92:#define N 4
        4:   93:    double elems[N][N] = {
        -:   94:        { 2, -1,  5,  1},
        -:   95:        { 3,  2,  2, -6},
        -:   96:        { 1,  3,  3, -1},
        -:   97:        { 5, -2, -3,  3}
        -:   98:    };
        4:   99:    SquareMatrix A = init_square_matrix(N, elems);
        -:  100: 
        4:  101:    SquareMatrix tmp = copy_square_matrix(A);
        4:  102:    int det_A = det(tmp);
        4:  103:    deinit_square_matrix(tmp);
        -:  104: 
        4:  105:    double b[] = {-3, -32, -47, 49};
        -:  106: 
       20:  107:    for(int i = 0; i < N; ++i)
       16:  108:        printf("%7.3lf\n", cramer_solve(A, det_A, b, i));
        -:  109: 
        4:  110:    deinit_square_matrix(A);
        4:  111:    return EXIT_SUCCESS;
        -:  112:}
