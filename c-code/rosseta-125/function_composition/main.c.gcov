        -:    0:Source:main.c
        -:    0:Graph:main.gcno
        -:    0:Data:main.gcda
        -:    0:Runs:3
        -:    0:Programs:1
        -:    1:#include <stdlib.h>
        -:    2: 
        -:    3:/* generic interface for functors from double to double */
        -:    4:typedef struct double_to_double {
        -:    5:  double (*fn)(struct double_to_double *, double);
        -:    6:} double_to_double;
        -:    7: 
        -:    8:#define CALL(f, x) f->fn(f, x)
        -:    9: 
        -:   10: 
        -:   11:/* functor returned by compose */
        -:   12:typedef struct compose_functor {
        -:   13:  double (*fn)(struct compose_functor *, double);
        -:   14:  double_to_double *f;
        -:   15:  double_to_double *g;
        -:   16:} compose_functor;
        -:   17:/* function to be used in "fn" in preceding functor */
        3:   18:double compose_call(compose_functor *this, double x) {
        3:   19:  return CALL(this->f, CALL(this->g, x));
        -:   20:}
        -:   21:/* returns functor that is the composition of functors
        -:   22:   f & g. caller is responsible for deallocating memory */
        3:   23:double_to_double *compose(double_to_double *f,
        -:   24:                          double_to_double *g) {
        3:   25:  compose_functor *result = malloc(sizeof(compose_functor));
        3:   26:  result->fn = &compose_call;
        3:   27:  result->f = f;
        3:   28:  result->g = g;
        3:   29:  return (double_to_double *)result;
        -:   30:}
        -:   31: 
        -:   32: 
        -:   33: 
        -:   34:#include <math.h>
        -:   35: 
        -:   36:/* we can make functors for sin and asin by using 
        -:   37:   the following as "fn" in a functor */
        3:   38:double sin_call(double_to_double *this, double x) {
        3:   39:  return sin(x);
        -:   40:}
        3:   41:double asin_call(double_to_double *this, double x) {
        3:   42:  return asin(x);
        -:   43:}
        -:   44: 
        -:   45: 
        -:   46: 
        -:   47:#include <stdio.h>
        -:   48: 
        3:   49:int main() {
        3:   50:  double_to_double *my_sin = malloc(sizeof(double_to_double));
        3:   51:  my_sin->fn = &sin_call;
        3:   52:  double_to_double *my_asin = malloc(sizeof(double_to_double));
        3:   53:  my_asin->fn = &asin_call;
        -:   54: 
        3:   55:  double_to_double *sin_asin = compose(my_sin, my_asin);
        -:   56: 
        3:   57:  printf("%f\n", CALL(sin_asin, 0.5)); /* prints "0.500000" */
        -:   58: 
        3:   59:  free(sin_asin);
        3:   60:  free(my_sin);
        3:   61:  free(my_asin);
        -:   62: 
        3:   63:  return 0;
        -:   64:}
