        -:    0:Source:main.c
        -:    0:Graph:main.gcno
        -:    0:Data:main.gcda
        -:    0:Runs:3
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:#include <limits.h>
        -:    3:#include <stdlib.h>
        -:    4: 
        -:    5:int **m;
        -:    6:int **s;
        -:    7: 
        9:    8:void optimal_matrix_chain_order(int *dims, int n) {
        -:    9:    int len, i, j, k, temp, cost;
        9:   10:    n--;
        9:   11:    m = (int **)malloc(n * sizeof(int *));
       87:   12:    for (i = 0; i < n; ++i) {
       78:   13:        m[i] = (int *)calloc(n, sizeof(int));
       78:   14:    }
        -:   15: 
        9:   16:    s = (int **)malloc(n * sizeof(int *));
       87:   17:    for (i = 0; i < n; ++i) {
       78:   18:        s[i] = (int *)calloc(n, sizeof(int));
       78:   19:    }
        -:   20: 
       78:   21:    for (len = 1; len < n; ++len) {
      441:   22:        for (i = 0; i < n - len; ++i) {
      372:   23:            j = i + len;
      372:   24:            m[i][j] = INT_MAX;
     1902:   25:            for (k = i; k < j; ++k) {
     1530:   26:                temp = dims[i] * dims[k + 1] * dims[j + 1];
     1530:   27:                cost = m[i][k] + m[k + 1][j] + temp;
     1530:   28:                if (cost < m[i][j]) {
      726:   29:                    m[i][j] = cost;
      726:   30:                    s[i][j] = k;
      726:   31:                }
     1530:   32:            }
      372:   33:        }
       69:   34:    }
        9:   35:}
        -:   36: 
      147:   37:void print_optimal_chain_order(int i, int j) {
      147:   38:    if (i == j)
       78:   39:        printf("%c", i + 65);
        -:   40:    else {
       69:   41:        printf("(");
       69:   42:        print_optimal_chain_order(i, s[i][j]);
       69:   43:        print_optimal_chain_order(s[i][j] + 1, j);
       69:   44:        printf(")");
        -:   45:    }
      147:   46:}
        -:   47: 
        3:   48:int main() {
        -:   49:    int i, j, n;
        3:   50:    int a1[4]  = {5, 6, 3, 1};
        3:   51:    int a2[13] = {1, 5, 25, 30, 100, 70, 2, 1, 100, 250, 1, 1000, 2};
        3:   52:    int a3[12] = {1000, 1, 500, 12, 1, 700, 2500, 3, 2, 5, 14, 10};
        3:   53:    int *dims_list[3] = {a1, a2, a3};
        3:   54:    int sizes[3] = {4, 13, 12};
       12:   55:    for (i = 0; i < 3; ++i) {
        9:   56:        printf("Dims  : [");
        9:   57:        n = sizes[i];
       96:   58:        for (j = 0; j < n; ++j) {
       87:   59:            printf("%d", dims_list[i][j]);
       87:   60:            if (j < n - 1) printf(", "); else printf("]\n");
       87:   61:        }        
        9:   62:        optimal_matrix_chain_order(dims_list[i], n);
        9:   63:        printf("Order : ");
        9:   64:        print_optimal_chain_order(0, n - 2);
        9:   65:        printf("\nCost  : %d\n\n", m[0][n - 2]);
       87:   66:        for (j = 0; j <= n - 2; ++j) free(m[j]);
        9:   67:        free(m);
       87:   68:        for (j = 0; j <= n - 2; ++j) free(s[j]);
        9:   69:        free(s);
        9:   70:    }
        3:   71:    return 0;
        -:   72:}
