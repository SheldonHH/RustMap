        -:    0:Source:main.c
        -:    0:Graph:main.gcno
        -:    0:Data:main.gcda
        -:    0:Runs:3
        -:    0:Programs:1
        -:    1:#include <stdbool.h>
        -:    2:#include <stdio.h>
        -:    3:#include <stdint.h>
        -:    4:#include <stdlib.h>
        -:    5:#include <string.h>
        -:    6: 
       39:    7:void swap(char* str, int i, int j) {
       39:    8:    char c = str[i];
       39:    9:    str[i] = str[j];
       39:   10:    str[j] = c;
       39:   11:}
        -:   12: 
       18:   13:void reverse(char* str, int i, int j) {
       39:   14:    for (; i < j; ++i, --j)
       21:   15:        swap(str, i, j);
       18:   16:}
        -:   17: 
       27:   18:bool next_permutation(char* str) {
       27:   19:    int len = strlen(str);
       27:   20:    if (len < 2)
        6:   21:        return false;
       54:   22:    for (int i = len - 1; i > 0; ) {
       51:   23:        int j = i, k;
       51:   24:        if (str[--i] < str[j]) {
       18:   25:            k = len;
       42:   26:            while (str[i] >= str[--k]) {}
       18:   27:            swap(str, i, k);
       18:   28:            reverse(str, j, len - 1);
       18:   29:            return true;
        -:   30:        }
        -:   31:    }
        3:   32:    return false;
       27:   33:}
        -:   34: 
       24:   35:uint32_t next_highest_int(uint32_t n) {
        -:   36:    char str[16];
       24:   37:    snprintf(str, sizeof(str), "%u", n);
       24:   38:    if (!next_permutation(str))
        9:   39:        return 0;
       15:   40:    return strtoul(str, 0, 10);
       24:   41:}
        -:   42: 
        3:   43:int main() {
        3:   44:    uint32_t numbers[] = {0, 9, 12, 21, 12453, 738440, 45072010, 95322020};
        3:   45:    const int count = sizeof(numbers)/sizeof(int);
       27:   46:    for (int i = 0; i < count; ++i)
       24:   47:        printf("%d -> %d\n", numbers[i], next_highest_int(numbers[i]));
        -:   48:    // Last one is too large to convert to an integer
        3:   49:    const char big[] = "9589776899767587796600";
        -:   50:    char next[sizeof(big)];
        3:   51:    memcpy(next, big, sizeof(big));
        3:   52:    next_permutation(next);
        3:   53:    printf("%s -> %s\n", big, next);
        3:   54:    return 0;
        -:   55:}
