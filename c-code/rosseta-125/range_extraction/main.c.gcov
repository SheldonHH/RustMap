        -:    0:Source:main.c
        -:    0:Graph:main.gcno
        -:    0:Data:main.gcda
        -:    0:Runs:3
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3: 
        6:    4:size_t rprint(char *s, int *x, int len)
        -:    5:{
        -:    6:#define sep (a > s ? "," : "") /* use comma except before first output */
        -:    7:#define ol (s ? 100 : 0)       /* print only if not testing for length */
        -:    8:	int i, j;
        6:    9:	char *a = s;
       48:   10:	for (i = j = 0; i < len; i = ++j) {
      198:   11:		for (; j < len - 1 && x[j + 1] == x[j] + 1; j++);
        -:   12: 
       42:   13:		if (i + 1 < j)
       30:   14:			a += snprintf(s?a:s, ol, "%s%d-%d", sep, x[i], x[j]);
        -:   15:		else
       30:   16:			while (i <= j)
       18:   17:				a += snprintf(s?a:s, ol, "%s%d", sep, x[i++]);
       42:   18:	}
        6:   19:	return a - s;
        -:   20:#undef sep
        -:   21:#undef ol
        -:   22:}
        -:   23: 
        3:   24:int main()
        -:   25:{
        3:   26:	int x[] = {	0,  1,  2,  4,  6,  7,  8, 11, 12, 14,
        -:   27:			15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
        -:   28:			25, 27, 28, 29, 30, 31, 32, 33, 35, 36,
        -:   29:			37, 38, 39 };
        -:   30: 
        3:   31:	char *s = malloc(rprint(0, x, sizeof(x) / sizeof(int)) + 1);
        3:   32:	rprint(s, x, sizeof(x) / sizeof(int));
        3:   33:	printf("%s\n", s);
        -:   34: 
        3:   35:	return 0;
        -:   36:}
