        -:    0:Source:main.c
        -:    0:Graph:main.gcno
        -:    0:Data:main.gcda
        -:    0:Runs:3
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:#include <math.h>
        -:    4: 
      300:    5:double rk4(double(*f)(double, double), double dx, double x, double y)
        -:    6:{
      300:    7:	double	k1 = dx * f(x, y),
      300:    8:		k2 = dx * f(x + dx / 2, y + k1 / 2),
      300:    9:		k3 = dx * f(x + dx / 2, y + k2 / 2),
      300:   10:		k4 = dx * f(x + dx, y + k3);
      300:   11:	return y + (k1 + 2 * k2 + 2 * k3 + k4) / 6;
        -:   12:}
        -:   13: 
     1200:   14:double rate(double x, double y)
        -:   15:{
     1200:   16:	return x * sqrt(y);
        -:   17:}
        -:   18: 
        3:   19:int main(void)
        -:   20:{
        -:   21:	double *y, x, y2;
        3:   22:	double x0 = 0, x1 = 10, dx = .1;
        3:   23:	int i, n = 1 + (x1 - x0)/dx;
        3:   24:	y = (double *)malloc(sizeof(double) * n);
        -:   25: 
      303:   26:	for (y[0] = 1, i = 1; i < n; i++)
      300:   27:		y[i] = rk4(rate, dx, x0 + dx * (i - 1), y[i-1]);
        -:   28: 
        3:   29:	printf("x\ty\trel. err.\n------------\n");
       36:   30:	for (i = 0; i < n; i += 10) {
       33:   31:		x = x0 + dx * i;
       33:   32:		y2 = pow(x * x / 4 + 1, 2);
       33:   33:		printf("%g\t%g\t%g\n", x, y[i], y[i]/y2 - 1);
       33:   34:	}
        -:   35: 
        3:   36:	return 0;
        -:   37:}
