        -:    0:Source:/root/rustmap/bzip2_rs_gpt/src/bzlib/scc_14_root_8_BZ2_indexIntoF.c
        -:    0:Graph:/root/rustmap/bzip2_rs_gpt/src/bzlib/scc_14_root_8_BZ2_indexIntoF.gcno
        -:    0:Data:/root/rustmap/bzip2_rs_gpt/src/bzlib/scc_14_root_8_BZ2_indexIntoF.gcda
        -:    0:Runs:1
        -:    1:
        -:    2:// BZ2_indexIntoF ( Int32, Int32* )
        -:    3:
        -:    4:// BZ2_indexIntoF ( Int32 indx, Int32 *cftab )
        -:    5:#include <CUnit/CUnit.h>
        -:    6:#include <CUnit/Basic.h>
        -:    7:
        -:    8:typedef int Int32;
        1:    9:void test_BZ2_indexIntoF(void) {
        -:   10:    Int32 cftab[257];
      258:   11:    for (Int32 i = 0; i < 257; i++) {
      257:   12:        cftab[i] = i * 10;  // 为简单起见，每个索引位置的值是其索引的10倍
        -:   13:    }
        -:   14:
        1:   15:    CU_ASSERT_EQUAL(BZ2_indexIntoF(50, cftab), 5);
        1:   16:    CU_ASSERT_EQUAL(BZ2_indexIntoF(150, cftab), 15);
        1:   17:    CU_ASSERT_EQUAL(BZ2_indexIntoF(2550, cftab), 255);
        1:   18:}
        -:   19:
        1:   20:int main(void) {
        1:   21:    CU_pSuite pSuite = NULL;
        -:   22:
        -:   23:    /* 初始化CUnit库 */
        1:   24:    if (CUE_SUCCESS != CU_initialize_registry())
    #####:   25:        return CU_get_error();
        -:   26:
        -:   27:    /* 添加测试套件 */
        1:   28:    pSuite = CU_add_suite("Suite_1", NULL, NULL);
        1:   29:    if (NULL == pSuite) {
    #####:   30:        CU_cleanup_registry();
    #####:   31:        return CU_get_error();
        -:   32:    }
        -:   33:
        -:   34:    /* 添加测试用例到套件 */
        1:   35:    if ((NULL == CU_add_test(pSuite, "test_BZ2_indexIntoF", test_BZ2_indexIntoF))) {
    #####:   36:        CU_cleanup_registry();
    #####:   37:        return CU_get_error();
        -:   38:    }
        -:   39:
        -:   40:    /* 运行所有测试 */
        1:   41:    CU_basic_set_mode(CU_BRM_VERBOSE);
        1:   42:    CU_basic_run_tests();
        1:   43:    CU_cleanup_registry();
        1:   44:    return CU_get_error();
        -:   45:}
        -:   46:
        -:   47:// 通过二分查找方法在cftab数组中搜索一个给定的索引indx。函数返回这个索引所处的位置。
        3:   48:__inline__ Int32 BZ2_indexIntoF ( Int32 indx, Int32 *cftab )
        -:   49:{
        -:   50:   // 定义搜索范围的开始和结束
        -:   51:   Int32 nb, na, mid;
        3:   52:   nb = 0;
        3:   53:   na = 256;
        -:   54:
        -:   55:   // 用二分查找在cftab中搜索indx
        -:   56:   do {
        -:   57:      // 计算中点
       24:   58:      mid = (nb + na) >> 1;
        -:   59:
        -:   60:      // 根据中点位置更新搜索范围
       24:   61:      if (indx >= cftab[mid]) nb = mid; else na = mid;
        -:   62:   } 
       24:   63:   while (na - nb != 1); // 继续循环直到搜索范围缩小到1
        -:   64:
        -:   65:   // 返回找到的位置
        3:   66:   return nb;
        -:   67:}
        -:   68:
