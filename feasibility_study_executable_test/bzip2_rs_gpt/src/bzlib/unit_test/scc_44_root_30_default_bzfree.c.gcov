        -:    0:Source:/root/crown-rust/bzip2_rs_gpt/src/bzlib/scc_44_root_30_default_bzfree.c
        -:    0:Graph:scc_11_BZ2_bzReadClose.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    1:
        -:    2:#include "../typedef.h"
        -:    3:// 检查配置是否正确
        -:    4:static
    #####:    5:int bz_config_ok ( void )
        -:    6:{
        -:    7:   if (sizeof(int) != 4) return 0;   // 检查int类型大小是否为4字节
        -:    8:   if (sizeof(short) != 2) return 0; // 检查short类型大小是否为2字节
        -:    9:   if (sizeof(char) != 1) return 0;  // 检查char类型大小是否为1字节
    #####:   10:   return 1;                         // 所有检查都通过，返回1
        -:   11:}
        -:   12:
        -:   13:// 根据指定的项目数量和项目大小分配内存
        -:   14:static
    #####:   15:void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
        -:   16:{
    #####:   17:   void* v = malloc ( items * size ); // 分配内存
    #####:   18:   return v;
        -:   19:}
        -:   20:
        -:   21:// 释放内存
        -:   22:static
    #####:   23:void default_bzfree ( void* opaque, void* addr )
        -:   24:{
    #####:   25:   if (addr != ((void *)0)) free ( addr ); // 如果地址非空，释放内存
    #####:   26:}
        -:   27:
        -:   28:#include <CUnit/Basic.h>
        -:   29:#include <stdio.h>
        -:   30:
    #####:   31:void test_bz_config_ok(void) {
        -:   32:   // 通常情况下，在大多数平台上，int是4字节，short是2字节，char是1字节。
    #####:   33:   CU_ASSERT(bz_config_ok() == 1);
    #####:   34:}
        -:   35:
    #####:   36:void test_default_bzalloc_and_bzfree(void) {
    #####:   37:   void* mem = default_bzalloc(NULL, 5, sizeof(int));
    #####:   38:   CU_ASSERT_PTR_NOT_NULL(mem); // 检查分配是否成功
    #####:   39:   default_bzfree(NULL, mem);
    #####:   40:}
        -:   41:
        -:   42:// int main(void) {
        -:   43://    CU_pSuite pSuite = NULL;
        -:   44:
        -:   45://    // 初始化CUnit库
        -:   46://    if (CUE_SUCCESS != CU_initialize_registry())
        -:   47://       return CU_get_error();
        -:   48:
        -:   49://    // 添加测试套件到注册中心
        -:   50://    pSuite = CU_add_suite("bz_test_suite", NULL, NULL);
        -:   51://    if (NULL == pSuite) {
        -:   52://       CU_cleanup_registry();
        -:   53://       return CU_get_error();
        -:   54://    }
        -:   55:
        -:   56://    // 添加测试函数到套件
        -:   57://    CU_add_test(pSuite, "test_bz_config_ok", test_bz_config_ok);
        -:   58://    CU_add_test(pSuite, "test_default_bzalloc_and_bzfree", test_default_bzalloc_and_bzfree);
        -:   59:
        -:   60://    // 运行所有测试
        -:   61://    CU_basic_set_mode(CU_BRM_VERBOSE);
        -:   62://    CU_basic_run_tests();
        -:   63://    CU_cleanup_registry();
        -:   64:
        -:   65://    return CU_get_error();
        -:   66:// }
