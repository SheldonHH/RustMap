{"$message_type":"diagnostic","message":"feature has been removed","code":{"code":"E0557","explanation":"A feature attribute named a feature that has been removed.\n\nErroneous code example:\n\n```compile_fail,E0557\n#![feature(managed_boxes)] // error: feature has been removed\n```\n\nDelete the offending feature attribute.\n"},"level":"error","spans":[{"file_name":"c2rust-lib.rs","byte_start":206,"byte_end":233,"line_start":8,"line_end":8,"column_start":12,"column_end":39,"is_primary":true,"text":[{"text":"#![feature(const_raw_ptr_to_usize_cast)]","highlight_start":12,"highlight_end":39}],"label":"feature has been removed","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"at compile-time, pointers do not have an integer value, so these casts cannot be properly supported","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0557]\u001b[0m\u001b[0m\u001b[1m: feature has been removed\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mc2rust-lib.rs:8:12\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![feature(const_raw_ptr_to_usize_cast)]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mfeature has been removed\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: at compile-time, pointers do not have an integer value, so these casts cannot be properly supported\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"feature has been removed","code":{"code":"E0557","explanation":"A feature attribute named a feature that has been removed.\n\nErroneous code example:\n\n```compile_fail,E0557\n#![feature(managed_boxes)] // error: feature has been removed\n```\n\nDelete the offending feature attribute.\n"},"level":"error","spans":[{"file_name":"c2rust-lib.rs","byte_start":326,"byte_end":330,"line_start":12,"line_end":12,"column_start":12,"column_end":16,"is_primary":true,"text":[{"text":"#![feature(main)]","highlight_start":12,"highlight_end":16}],"label":"feature has been removed","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0557]\u001b[0m\u001b[0m\u001b[1m: feature has been removed\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mc2rust-lib.rs:12:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![feature(main)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mfeature has been removed\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find attribute `main` in this scope","code":null,"level":"error","spans":[{"file_name":"bzip2.rs","byte_start":158997,"byte_end":159001,"line_start":3164,"line_end":3164,"column_start":3,"column_end":7,"is_primary":true,"text":[{"text":"#[main]","highlight_start":3,"highlight_end":7}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`main` is in scope, but it is a function, not an attribute","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot find attribute `main` in this scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:3164:3\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3164\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[main]\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `main` is in scope, but it is a function, not an attribute\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find attribute `main` in this scope","code":null,"level":"error","spans":[{"file_name":"bzip2recover.rs","byte_start":26956,"byte_end":26960,"line_start":590,"line_end":590,"column_start":3,"column_end":7,"is_primary":true,"text":[{"text":"#[main]","highlight_start":3,"highlight_end":7}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`main` is in scope, but it is a function, not an attribute","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot find attribute `main` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2recover.rs:590:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m590\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[main]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `main` is in scope, but it is a function, not an attribute\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"blocksort.rs","byte_start":9457,"byte_end":9492,"line_start":234,"line_end":234,"column_start":50,"column_end":85,"is_primary":true,"text":[{"text":"                    *eclass.offset(*fmap.offset((lo + hi >> 1 as std::os::raw::c_int)","highlight_start":50,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::precedence)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"blocksort.rs","byte_start":9457,"byte_end":9492,"line_start":234,"line_end":234,"column_start":50,"column_end":85,"is_primary":true,"text":[{"text":"                    *eclass.offset(*fmap.offset((lo + hi >> 1 as std::os::raw::c_int)","highlight_start":50,"highlight_end":85}],"label":null,"suggested_replacement":"(lo + hi) >> 1 as std::os::raw::c_int","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mblocksort.rs:234:50\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m234\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0map.offset((lo + hi >> 1 as std::os::raw::c_int)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(lo + hi) >> 1 as std::os::raw::c_int`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::precedence)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"blocksort.rs","byte_start":16310,"byte_end":16375,"line_start":409,"line_end":409,"column_start":28,"column_end":93,"is_primary":true,"text":[{"text":"            *bhtab.offset((nblock + 2 as std::os::raw::c_int * i >> 5 as std::os::raw::c_int)","highlight_start":28,"highlight_end":93}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"blocksort.rs","byte_start":16310,"byte_end":16375,"line_start":409,"line_end":409,"column_start":28,"column_end":93,"is_primary":true,"text":[{"text":"            *bhtab.offset((nblock + 2 as std::os::raw::c_int * i >> 5 as std::os::raw::c_int)","highlight_start":28,"highlight_end":93}],"label":null,"suggested_replacement":"(nblock + 2 as std::os::raw::c_int * i) >> 5 as std::os::raw::c_int","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mblocksort.rs:409:28\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m409\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mt((nblock + 2 as std::os::raw::c_int * i >> 5 as std::os::raw::c_i\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(nblock + 2 as std::os::raw::c_int * i) >> 5 as std::os::raw::c_int`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"blocksort.rs","byte_start":16506,"byte_end":16571,"line_start":413,"line_end":413,"column_start":18,"column_end":83,"is_primary":true,"text":[{"text":"                (nblock + 2 as std::os::raw::c_int * i & 31 as std::os::raw::c_int);","highlight_start":18,"highlight_end":83}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"blocksort.rs","byte_start":16506,"byte_end":16571,"line_start":413,"line_end":413,"column_start":18,"column_end":83,"is_primary":true,"text":[{"text":"                (nblock + 2 as std::os::raw::c_int * i & 31 as std::os::raw::c_int);","highlight_start":18,"highlight_end":83}],"label":null,"suggested_replacement":"(nblock + 2 as std::os::raw::c_int * i) & 31 as std::os::raw::c_int","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mblocksort.rs:413:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m413\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  (nblock + 2 as std::os::raw::c_int * i & 31 as std::os::raw::c_in\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(nblock + 2 as std::os::raw::c_int * i) & 31 as std::os::raw::c_int`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"blocksort.rs","byte_start":16630,"byte_end":16753,"line_start":415,"line_end":416,"column_start":28,"column_end":56,"is_primary":true,"text":[{"text":"            *bhtab.offset((nblock + 2 as std::os::raw::c_int * i + 1 as std::os::raw::c_int >>","highlight_start":28,"highlight_end":95},{"text":"                               5 as std::os::raw::c_int) as isize);","highlight_start":1,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"blocksort.rs","byte_start":16630,"byte_end":16753,"line_start":415,"line_end":416,"column_start":28,"column_end":56,"is_primary":true,"text":[{"text":"            *bhtab.offset((nblock + 2 as std::os::raw::c_int * i + 1 as std::os::raw::c_int >>","highlight_start":28,"highlight_end":95},{"text":"                               5 as std::os::raw::c_int) as isize);","highlight_start":1,"highlight_end":56}],"label":null,"suggested_replacement":"(nblock + 2 as std::os::raw::c_int * i + 1 as std::os::raw::c_int) >> 5 as std::os::raw::c_int","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mblocksort.rs:415:28\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m415\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mhtab.offset((nblock + 2 as std::os::raw::c_int * i + 1 as s\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m_________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m416\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                 5 as std::os::raw::c_int) as isize);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|____________________________________________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(nblock + 2 as std::os::raw::c_int * i + 1 as std::os::raw::c_int) >> 5 as std::os::raw::c_int`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"blocksort.rs","byte_start":16858,"byte_end":16973,"line_start":419,"line_end":420,"column_start":20,"column_end":49,"is_primary":true,"text":[{"text":"                  (nblock + 2 as std::os::raw::c_int * i + 1 as std::os::raw::c_int &","highlight_start":20,"highlight_end":86},{"text":"                       31 as std::os::raw::c_int));","highlight_start":1,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"blocksort.rs","byte_start":16858,"byte_end":16973,"line_start":419,"line_end":420,"column_start":20,"column_end":49,"is_primary":true,"text":[{"text":"                  (nblock + 2 as std::os::raw::c_int * i + 1 as std::os::raw::c_int &","highlight_start":20,"highlight_end":86},{"text":"                       31 as std::os::raw::c_int));","highlight_start":1,"highlight_end":49}],"label":null,"suggested_replacement":"(nblock + 2 as std::os::raw::c_int * i + 1 as std::os::raw::c_int) & 31 as std::os::raw::c_int","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mblocksort.rs:419:20\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m419\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m          (nblock + 2 as std::os::raw::c_int * i + 1 as std\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m_______________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m420\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m               31 as std::os::raw::c_int));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|___________________________________________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(nblock + 2 as std::os::raw::c_int * i + 1 as std::os::raw::c_int) & 31 as std::os::raw::c_int`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"blocksort.rs","byte_start":39213,"byte_end":39248,"line_start":941,"line_end":941,"column_start":51,"column_end":86,"is_primary":true,"text":[{"text":"                      *block.offset((*ptr.offset((lo + hi >> 1 as std::os::raw::c_int)","highlight_start":51,"highlight_end":86}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"blocksort.rs","byte_start":39213,"byte_end":39248,"line_start":941,"line_end":941,"column_start":51,"column_end":86,"is_primary":true,"text":[{"text":"                      *block.offset((*ptr.offset((lo + hi >> 1 as std::os::raw::c_int)","highlight_start":51,"highlight_end":86}],"label":null,"suggested_replacement":"(lo + hi) >> 1 as std::os::raw::c_int","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mblocksort.rs:941:51\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m941\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mtr.offset((lo + hi >> 1 as std::os::raw::c_int)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(lo + hi) >> 1 as std::os::raw::c_int`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"blocksort.rs","byte_start":69389,"byte_end":69432,"line_start":1537,"line_end":1537,"column_start":18,"column_end":61,"is_primary":true,"text":[{"text":"            if !(bbSize - 1 as std::os::raw::c_int >> shifts <= 65535 as std::os::raw::c_int)","highlight_start":18,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"blocksort.rs","byte_start":69389,"byte_end":69432,"line_start":1537,"line_end":1537,"column_start":18,"column_end":61,"is_primary":true,"text":[{"text":"            if !(bbSize - 1 as std::os::raw::c_int >> shifts <= 65535 as std::os::raw::c_int)","highlight_start":18,"highlight_end":61}],"label":null,"suggested_replacement":"(bbSize - 1 as std::os::raw::c_int) >> shifts","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mblocksort.rs:1537:18\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1537\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  if !(bbSize - 1 as std::os::raw::c_int >> shifts <= 65535 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(bbSize - 1 as std::os::raw::c_int) >> shifts`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this `if` statement can be collapsed","code":{"code":"clippy::collapsible_if","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":19885,"byte_end":33575,"line_start":507,"line_end":734,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    if !(ferror(stream) != 0) {","highlight_start":5,"highlight_end":32},{"text":"        if !(ferror(zStream) != 0) {","highlight_start":1,"highlight_end":37},{"text":"            bzf =","highlight_start":1,"highlight_end":18},{"text":"                BZ2_bzWriteOpen(&mut bzerr, zStream, blockSize100k, verbosity,","highlight_start":1,"highlight_end":79},{"text":"                                workFactor);","highlight_start":1,"highlight_end":45},{"text":"            if bzerr != 0 as std::os::raw::c_int {","highlight_start":1,"highlight_end":51},{"text":"                current_block = 660242869387099075;","highlight_start":1,"highlight_end":52},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                if verbosity >= 2 as std::os::raw::c_int {","highlight_start":1,"highlight_end":59},{"text":"                    fprintf(__stderrp,","highlight_start":1,"highlight_end":39},{"text":"                            b\"\\n\\x00\" as *const u8 as *const std::os::raw::c_char);","highlight_start":1,"highlight_end":84},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                loop  {","highlight_start":1,"highlight_end":24},{"text":"                    if !(1 as std::os::raw::c_int as Bool != 0) {","highlight_start":1,"highlight_end":66},{"text":"                        current_block = 13242334135786603907;","highlight_start":1,"highlight_end":62},{"text":"                        break ;","highlight_start":1,"highlight_end":32},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    if myfeof(stream) != 0 {","highlight_start":1,"highlight_end":45},{"text":"                        current_block = 13242334135786603907;","highlight_start":1,"highlight_end":62},{"text":"                        break ;","highlight_start":1,"highlight_end":32},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    nIbuf =","highlight_start":1,"highlight_end":28},{"text":"                        fread(ibuf.as_mut_ptr() as *mut std::os::raw::c_void,","highlight_start":1,"highlight_end":78},{"text":"                              ::std::mem::size_of::<UChar>() as std::os::raw::c_ulong,","highlight_start":1,"highlight_end":87},{"text":"                              5000 as std::os::raw::c_int as std::os::raw::c_ulong, stream) as","highlight_start":1,"highlight_end":95},{"text":"                            Int32;","highlight_start":1,"highlight_end":35},{"text":"                    if ferror(stream) != 0 {","highlight_start":1,"highlight_end":45},{"text":"                        current_block = 18225113528933273530;","highlight_start":1,"highlight_end":62},{"text":"                        break ;","highlight_start":1,"highlight_end":32},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    if nIbuf > 0 as std::os::raw::c_int {","highlight_start":1,"highlight_end":58},{"text":"                        BZ2_bzWrite(&mut bzerr, bzf,","highlight_start":1,"highlight_end":53},{"text":"                                    ibuf.as_mut_ptr() as *mut std::os::raw::c_void,","highlight_start":1,"highlight_end":84},{"text":"                                    nIbuf);","highlight_start":1,"highlight_end":44},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    if bzerr != 0 as std::os::raw::c_int {","highlight_start":1,"highlight_end":59},{"text":"                        current_block = 660242869387099075;","highlight_start":1,"highlight_end":60},{"text":"                        break ;","highlight_start":1,"highlight_end":32},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                match current_block {","highlight_start":1,"highlight_end":38},{"text":"                    18225113528933273530 => { }","highlight_start":1,"highlight_end":48},{"text":"                    660242869387099075 => { }","highlight_start":1,"highlight_end":46},{"text":"                    _ => {","highlight_start":1,"highlight_end":27},{"text":"                        BZ2_bzWriteClose64(&mut bzerr, bzf, 0 as std::os::raw::c_int,","highlight_start":1,"highlight_end":86},{"text":"                                           &mut nbytes_in_lo32,","highlight_start":1,"highlight_end":64},{"text":"                                           &mut nbytes_in_hi32,","highlight_start":1,"highlight_end":64},{"text":"                                           &mut nbytes_out_lo32,","highlight_start":1,"highlight_end":65},{"text":"                                           &mut nbytes_out_hi32);","highlight_start":1,"highlight_end":66},{"text":"                        if bzerr != 0 as std::os::raw::c_int {","highlight_start":1,"highlight_end":63},{"text":"                            current_block = 660242869387099075;","highlight_start":1,"highlight_end":64},{"text":"                        } else if ferror(zStream) != 0 {","highlight_start":1,"highlight_end":57},{"text":"                            current_block = 18225113528933273530;","highlight_start":1,"highlight_end":66},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            ret = fflush(zStream);","highlight_start":1,"highlight_end":51},{"text":"                            if ret == -(1 as std::os::raw::c_int) {","highlight_start":1,"highlight_end":68},{"text":"                                current_block = 18225113528933273530;","highlight_start":1,"highlight_end":70},{"text":"                            } else {","highlight_start":1,"highlight_end":37},{"text":"                                if zStream != __stdoutp {","highlight_start":1,"highlight_end":58},{"text":"                                    let mut fd: Int32 = fileno(zStream);","highlight_start":1,"highlight_end":73},{"text":"                                    if fd < 0 as std::os::raw::c_int {","highlight_start":1,"highlight_end":71},{"text":"                                        current_block = 18225113528933273530;","highlight_start":1,"highlight_end":78},{"text":"                                    } else {","highlight_start":1,"highlight_end":45},{"text":"                                        applySavedFileAttrToOutputFile(fd);","highlight_start":1,"highlight_end":76},{"text":"                                        ret = fclose(zStream);","highlight_start":1,"highlight_end":63},{"text":"                                        outputHandleJustInCase =","highlight_start":1,"highlight_end":65},{"text":"                                            0 as *mut FILE;","highlight_start":1,"highlight_end":60},{"text":"                                        if ret == -(1 as std::os::raw::c_int) {","highlight_start":1,"highlight_end":80},{"text":"                                            current_block =","highlight_start":1,"highlight_end":60},{"text":"                                                18225113528933273530;","highlight_start":1,"highlight_end":70},{"text":"                                        } else {","highlight_start":1,"highlight_end":49},{"text":"                                            current_block =","highlight_start":1,"highlight_end":60},{"text":"                                                17281240262373992796;","highlight_start":1,"highlight_end":70},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                } else {","highlight_start":1,"highlight_end":41},{"text":"                                    current_block = 17281240262373992796;","highlight_start":1,"highlight_end":74},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                                match current_block {","highlight_start":1,"highlight_end":54},{"text":"                                    18225113528933273530 => { }","highlight_start":1,"highlight_end":64},{"text":"                                    _ => {","highlight_start":1,"highlight_end":43},{"text":"                                        outputHandleJustInCase =","highlight_start":1,"highlight_end":65},{"text":"                                            0 as *mut FILE;","highlight_start":1,"highlight_end":60},{"text":"                                        if ferror(stream) != 0 {","highlight_start":1,"highlight_end":65},{"text":"                                            current_block =","highlight_start":1,"highlight_end":60},{"text":"                                                18225113528933273530;","highlight_start":1,"highlight_end":70},{"text":"                                        } else {","highlight_start":1,"highlight_end":49},{"text":"                                            ret = fclose(stream);","highlight_start":1,"highlight_end":66},{"text":"                                            if ret == -(1 as std::os::raw::c_int) {","highlight_start":1,"highlight_end":84},{"text":"                                                current_block =","highlight_start":1,"highlight_end":64},{"text":"                                                    18225113528933273530;","highlight_start":1,"highlight_end":74},{"text":"                                            } else {","highlight_start":1,"highlight_end":53},{"text":"                                                if verbosity >=","highlight_start":1,"highlight_end":64},{"text":"                                                       1 as std::os::raw::c_int {","highlight_start":1,"highlight_end":82},{"text":"                                                    if nbytes_in_lo32 ==","highlight_start":1,"highlight_end":73},{"text":"                                                           0 as std::os::raw::c_int as","highlight_start":1,"highlight_end":87},{"text":"                                                               std::os::raw::c_uint &&","highlight_start":1,"highlight_end":87},{"text":"                                                           nbytes_in_hi32 ==","highlight_start":1,"highlight_end":77},{"text":"                                                               0 as","highlight_start":1,"highlight_end":68},{"text":"                                                                   std::os::raw::c_int","highlight_start":1,"highlight_end":87},{"text":"                                                                   as","highlight_start":1,"highlight_end":70},{"text":"                                                                   std::os::raw::c_uint","highlight_start":1,"highlight_end":88},{"text":"                                                       {","highlight_start":1,"highlight_end":57},{"text":"                                                        fprintf(__stderrp,","highlight_start":1,"highlight_end":75},{"text":"                                                                b\" no data compressed.\\n\\x00\"","highlight_start":1,"highlight_end":94},{"text":"                                                                    as","highlight_start":1,"highlight_end":71},{"text":"                                                                    *const u8","highlight_start":1,"highlight_end":78},{"text":"                                                                    as","highlight_start":1,"highlight_end":71},{"text":"                                                                    *const std::os::raw::c_char);","highlight_start":1,"highlight_end":98},{"text":"                                                    } else {","highlight_start":1,"highlight_end":61},{"text":"                                                        let mut buf_nin:","highlight_start":1,"highlight_end":73},{"text":"                                                                [Char; 32] =","highlight_start":1,"highlight_end":77},{"text":"                                                            [0; 32];","highlight_start":1,"highlight_end":69},{"text":"                                                        let mut buf_nout:","highlight_start":1,"highlight_end":74},{"text":"                                                                [Char; 32] =","highlight_start":1,"highlight_end":77},{"text":"                                                            [0; 32];","highlight_start":1,"highlight_end":69},{"text":"                                                        let mut nbytes_in:","highlight_start":1,"highlight_end":75},{"text":"                                                                UInt64 =","highlight_start":1,"highlight_end":73},{"text":"                                                            UInt64{b:","highlight_start":1,"highlight_end":70},{"text":"                                                                       [0;","highlight_start":1,"highlight_end":75},{"text":"                                                                           8],};","highlight_start":1,"highlight_end":81},{"text":"                                                        let mut nbytes_out:","highlight_start":1,"highlight_end":76},{"text":"                                                                UInt64 =","highlight_start":1,"highlight_end":73},{"text":"                                                            UInt64{b:","highlight_start":1,"highlight_end":70},{"text":"                                                                       [0;","highlight_start":1,"highlight_end":75},{"text":"                                                                           8],};","highlight_start":1,"highlight_end":81},{"text":"                                                        let mut nbytes_in_d:","highlight_start":1,"highlight_end":77},{"text":"                                                                std::os::raw::c_double =","highlight_start":1,"highlight_end":89},{"text":"                                                            0.;","highlight_start":1,"highlight_end":64},{"text":"                                                        let mut nbytes_out_d:","highlight_start":1,"highlight_end":78},{"text":"                                                                std::os::raw::c_double =","highlight_start":1,"highlight_end":89},{"text":"                                                            0.;","highlight_start":1,"highlight_end":64},{"text":"                                                        uInt64_from_UInt32s(&mut nbytes_in,","highlight_start":1,"highlight_end":92},{"text":"                                                                            nbytes_in_lo32,","highlight_start":1,"highlight_end":92},{"text":"                                                                            nbytes_in_hi32);","highlight_start":1,"highlight_end":93},{"text":"                                                        uInt64_from_UInt32s(&mut nbytes_out,","highlight_start":1,"highlight_end":93},{"text":"                                                                            nbytes_out_lo32,","highlight_start":1,"highlight_end":93},{"text":"                                                                            nbytes_out_hi32);","highlight_start":1,"highlight_end":94},{"text":"                                                        nbytes_in_d =","highlight_start":1,"highlight_end":70},{"text":"                                                            uInt64_to_double(&mut nbytes_in);","highlight_start":1,"highlight_end":94},{"text":"                                                        nbytes_out_d =","highlight_start":1,"highlight_end":71},{"text":"                                                            uInt64_to_double(&mut nbytes_out);","highlight_start":1,"highlight_end":95},{"text":"                                                        uInt64_toAscii(buf_nin.as_mut_ptr(),","highlight_start":1,"highlight_end":93},{"text":"                                                                       &mut nbytes_in);","highlight_start":1,"highlight_end":88},{"text":"                                                        uInt64_toAscii(buf_nout.as_mut_ptr(),","highlight_start":1,"highlight_end":94},{"text":"                                                                       &mut nbytes_out);","highlight_start":1,"highlight_end":89},{"text":"                                                        fprintf(__stderrp,","highlight_start":1,"highlight_end":75},{"text":"                                                                b\"%6.3f:1, %6.3f bits/byte, %5.2f%% saved, %s in, %s out.\\n\\x00\"","highlight_start":1,"highlight_end":129},{"text":"                                                                    as","highlight_start":1,"highlight_end":71},{"text":"                                                                    *const u8","highlight_start":1,"highlight_end":78},{"text":"                                                                    as","highlight_start":1,"highlight_end":71},{"text":"                                                                    *const std::os::raw::c_char,","highlight_start":1,"highlight_end":97},{"text":"                                                                nbytes_in_d /","highlight_start":1,"highlight_end":78},{"text":"                                                                    nbytes_out_d,","highlight_start":1,"highlight_end":82},{"text":"                                                                8.0f64 *","highlight_start":1,"highlight_end":73},{"text":"                                                                    nbytes_out_d","highlight_start":1,"highlight_end":81},{"text":"                                                                    /","highlight_start":1,"highlight_end":70},{"text":"                                                                    nbytes_in_d,","highlight_start":1,"highlight_end":81},{"text":"                                                                100.0f64 *","highlight_start":1,"highlight_end":75},{"text":"                                                                    (1.0f64 -","highlight_start":1,"highlight_end":78},{"text":"                                                                         nbytes_out_d","highlight_start":1,"highlight_end":86},{"text":"                                                                             /","highlight_start":1,"highlight_end":79},{"text":"                                                                             nbytes_in_d),","highlight_start":1,"highlight_end":91},{"text":"                                                                buf_nin.as_mut_ptr(),","highlight_start":1,"highlight_end":86},{"text":"                                                                buf_nout.as_mut_ptr());","highlight_start":1,"highlight_end":88},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                return","highlight_start":1,"highlight_end":55},{"text":"                                            }","highlight_start":1,"highlight_end":46},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            match current_block {","highlight_start":1,"highlight_end":34},{"text":"                18225113528933273530 => { }","highlight_start":1,"highlight_end":44},{"text":"                _ => {","highlight_start":1,"highlight_end":23},{"text":"                    BZ2_bzWriteClose64(&mut bzerr_dummy, bzf,","highlight_start":1,"highlight_end":62},{"text":"                                       1 as std::os::raw::c_int, &mut nbytes_in_lo32,","highlight_start":1,"highlight_end":86},{"text":"                                       &mut nbytes_in_hi32,","highlight_start":1,"highlight_end":60},{"text":"                                       &mut nbytes_out_lo32,","highlight_start":1,"highlight_end":61},{"text":"                                       &mut nbytes_out_hi32);","highlight_start":1,"highlight_end":62},{"text":"                    match bzerr {","highlight_start":1,"highlight_end":34},{"text":"                        -9 => {","highlight_start":1,"highlight_end":32},{"text":"                            current_block = 5122324059762049690;","highlight_start":1,"highlight_end":65},{"text":"                            match current_block {","highlight_start":1,"highlight_end":50},{"text":"                                4323399205346619401 => {","highlight_start":1,"highlight_end":57},{"text":"                                    panic(b\"compress:unexpected error\\x00\" as","highlight_start":1,"highlight_end":78},{"text":"                                              *const u8 as","highlight_start":1,"highlight_end":59},{"text":"                                              *const std::os::raw::c_char);","highlight_start":1,"highlight_end":76},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                                2380987886157893679 => { outOfMemory(); }","highlight_start":1,"highlight_end":74},{"text":"                                _ => { configError(); }","highlight_start":1,"highlight_end":56},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        -3 => {","highlight_start":1,"highlight_end":32},{"text":"                            current_block = 2380987886157893679;","highlight_start":1,"highlight_end":65},{"text":"                            match current_block {","highlight_start":1,"highlight_end":50},{"text":"                                4323399205346619401 => {","highlight_start":1,"highlight_end":57},{"text":"                                    panic(b\"compress:unexpected error\\x00\" as","highlight_start":1,"highlight_end":78},{"text":"                                              *const u8 as","highlight_start":1,"highlight_end":59},{"text":"                                              *const std::os::raw::c_char);","highlight_start":1,"highlight_end":76},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                                2380987886157893679 => { outOfMemory(); }","highlight_start":1,"highlight_end":74},{"text":"                                _ => { configError(); }","highlight_start":1,"highlight_end":56},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        -6 => { }","highlight_start":1,"highlight_end":34},{"text":"                        _ => {","highlight_start":1,"highlight_end":31},{"text":"                            current_block = 4323399205346619401;","highlight_start":1,"highlight_end":65},{"text":"                            match current_block {","highlight_start":1,"highlight_end":50},{"text":"                                4323399205346619401 => {","highlight_start":1,"highlight_end":57},{"text":"                                    panic(b\"compress:unexpected error\\x00\" as","highlight_start":1,"highlight_end":78},{"text":"                                              *const u8 as","highlight_start":1,"highlight_end":59},{"text":"                                              *const std::os::raw::c_char);","highlight_start":1,"highlight_end":76},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                                2380987886157893679 => { outOfMemory(); }","highlight_start":1,"highlight_end":74},{"text":"                                _ => { configError(); }","highlight_start":1,"highlight_end":56},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::collapsible_if)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"collapse nested if block","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":19885,"byte_end":33575,"line_start":507,"line_end":734,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    if !(ferror(stream) != 0) {","highlight_start":5,"highlight_end":32},{"text":"        if !(ferror(zStream) != 0) {","highlight_start":1,"highlight_end":37},{"text":"            bzf =","highlight_start":1,"highlight_end":18},{"text":"                BZ2_bzWriteOpen(&mut bzerr, zStream, blockSize100k, verbosity,","highlight_start":1,"highlight_end":79},{"text":"                                workFactor);","highlight_start":1,"highlight_end":45},{"text":"            if bzerr != 0 as std::os::raw::c_int {","highlight_start":1,"highlight_end":51},{"text":"                current_block = 660242869387099075;","highlight_start":1,"highlight_end":52},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                if verbosity >= 2 as std::os::raw::c_int {","highlight_start":1,"highlight_end":59},{"text":"                    fprintf(__stderrp,","highlight_start":1,"highlight_end":39},{"text":"                            b\"\\n\\x00\" as *const u8 as *const std::os::raw::c_char);","highlight_start":1,"highlight_end":84},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                loop  {","highlight_start":1,"highlight_end":24},{"text":"                    if !(1 as std::os::raw::c_int as Bool != 0) {","highlight_start":1,"highlight_end":66},{"text":"                        current_block = 13242334135786603907;","highlight_start":1,"highlight_end":62},{"text":"                        break ;","highlight_start":1,"highlight_end":32},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    if myfeof(stream) != 0 {","highlight_start":1,"highlight_end":45},{"text":"                        current_block = 13242334135786603907;","highlight_start":1,"highlight_end":62},{"text":"                        break ;","highlight_start":1,"highlight_end":32},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    nIbuf =","highlight_start":1,"highlight_end":28},{"text":"                        fread(ibuf.as_mut_ptr() as *mut std::os::raw::c_void,","highlight_start":1,"highlight_end":78},{"text":"                              ::std::mem::size_of::<UChar>() as std::os::raw::c_ulong,","highlight_start":1,"highlight_end":87},{"text":"                              5000 as std::os::raw::c_int as std::os::raw::c_ulong, stream) as","highlight_start":1,"highlight_end":95},{"text":"                            Int32;","highlight_start":1,"highlight_end":35},{"text":"                    if ferror(stream) != 0 {","highlight_start":1,"highlight_end":45},{"text":"                        current_block = 18225113528933273530;","highlight_start":1,"highlight_end":62},{"text":"                        break ;","highlight_start":1,"highlight_end":32},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    if nIbuf > 0 as std::os::raw::c_int {","highlight_start":1,"highlight_end":58},{"text":"                        BZ2_bzWrite(&mut bzerr, bzf,","highlight_start":1,"highlight_end":53},{"text":"                                    ibuf.as_mut_ptr() as *mut std::os::raw::c_void,","highlight_start":1,"highlight_end":84},{"text":"                                    nIbuf);","highlight_start":1,"highlight_end":44},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    if bzerr != 0 as std::os::raw::c_int {","highlight_start":1,"highlight_end":59},{"text":"                        current_block = 660242869387099075;","highlight_start":1,"highlight_end":60},{"text":"                        break ;","highlight_start":1,"highlight_end":32},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                match current_block {","highlight_start":1,"highlight_end":38},{"text":"                    18225113528933273530 => { }","highlight_start":1,"highlight_end":48},{"text":"                    660242869387099075 => { }","highlight_start":1,"highlight_end":46},{"text":"                    _ => {","highlight_start":1,"highlight_end":27},{"text":"                        BZ2_bzWriteClose64(&mut bzerr, bzf, 0 as std::os::raw::c_int,","highlight_start":1,"highlight_end":86},{"text":"                                           &mut nbytes_in_lo32,","highlight_start":1,"highlight_end":64},{"text":"                                           &mut nbytes_in_hi32,","highlight_start":1,"highlight_end":64},{"text":"                                           &mut nbytes_out_lo32,","highlight_start":1,"highlight_end":65},{"text":"                                           &mut nbytes_out_hi32);","highlight_start":1,"highlight_end":66},{"text":"                        if bzerr != 0 as std::os::raw::c_int {","highlight_start":1,"highlight_end":63},{"text":"                            current_block = 660242869387099075;","highlight_start":1,"highlight_end":64},{"text":"                        } else if ferror(zStream) != 0 {","highlight_start":1,"highlight_end":57},{"text":"                            current_block = 18225113528933273530;","highlight_start":1,"highlight_end":66},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            ret = fflush(zStream);","highlight_start":1,"highlight_end":51},{"text":"                            if ret == -(1 as std::os::raw::c_int) {","highlight_start":1,"highlight_end":68},{"text":"                                current_block = 18225113528933273530;","highlight_start":1,"highlight_end":70},{"text":"                            } else {","highlight_start":1,"highlight_end":37},{"text":"                                if zStream != __stdoutp {","highlight_start":1,"highlight_end":58},{"text":"                                    let mut fd: Int32 = fileno(zStream);","highlight_start":1,"highlight_end":73},{"text":"                                    if fd < 0 as std::os::raw::c_int {","highlight_start":1,"highlight_end":71},{"text":"                                        current_block = 18225113528933273530;","highlight_start":1,"highlight_end":78},{"text":"                                    } else {","highlight_start":1,"highlight_end":45},{"text":"                                        applySavedFileAttrToOutputFile(fd);","highlight_start":1,"highlight_end":76},{"text":"                                        ret = fclose(zStream);","highlight_start":1,"highlight_end":63},{"text":"                                        outputHandleJustInCase =","highlight_start":1,"highlight_end":65},{"text":"                                            0 as *mut FILE;","highlight_start":1,"highlight_end":60},{"text":"                                        if ret == -(1 as std::os::raw::c_int) {","highlight_start":1,"highlight_end":80},{"text":"                                            current_block =","highlight_start":1,"highlight_end":60},{"text":"                                                18225113528933273530;","highlight_start":1,"highlight_end":70},{"text":"                                        } else {","highlight_start":1,"highlight_end":49},{"text":"                                            current_block =","highlight_start":1,"highlight_end":60},{"text":"                                                17281240262373992796;","highlight_start":1,"highlight_end":70},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                } else {","highlight_start":1,"highlight_end":41},{"text":"                                    current_block = 17281240262373992796;","highlight_start":1,"highlight_end":74},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                                match current_block {","highlight_start":1,"highlight_end":54},{"text":"                                    18225113528933273530 => { }","highlight_start":1,"highlight_end":64},{"text":"                                    _ => {","highlight_start":1,"highlight_end":43},{"text":"                                        outputHandleJustInCase =","highlight_start":1,"highlight_end":65},{"text":"                                            0 as *mut FILE;","highlight_start":1,"highlight_end":60},{"text":"                                        if ferror(stream) != 0 {","highlight_start":1,"highlight_end":65},{"text":"                                            current_block =","highlight_start":1,"highlight_end":60},{"text":"                                                18225113528933273530;","highlight_start":1,"highlight_end":70},{"text":"                                        } else {","highlight_start":1,"highlight_end":49},{"text":"                                            ret = fclose(stream);","highlight_start":1,"highlight_end":66},{"text":"                                            if ret == -(1 as std::os::raw::c_int) {","highlight_start":1,"highlight_end":84},{"text":"                                                current_block =","highlight_start":1,"highlight_end":64},{"text":"                                                    18225113528933273530;","highlight_start":1,"highlight_end":74},{"text":"                                            } else {","highlight_start":1,"highlight_end":53},{"text":"                                                if verbosity >=","highlight_start":1,"highlight_end":64},{"text":"                                                       1 as std::os::raw::c_int {","highlight_start":1,"highlight_end":82},{"text":"                                                    if nbytes_in_lo32 ==","highlight_start":1,"highlight_end":73},{"text":"                                                           0 as std::os::raw::c_int as","highlight_start":1,"highlight_end":87},{"text":"                                                               std::os::raw::c_uint &&","highlight_start":1,"highlight_end":87},{"text":"                                                           nbytes_in_hi32 ==","highlight_start":1,"highlight_end":77},{"text":"                                                               0 as","highlight_start":1,"highlight_end":68},{"text":"                                                                   std::os::raw::c_int","highlight_start":1,"highlight_end":87},{"text":"                                                                   as","highlight_start":1,"highlight_end":70},{"text":"                                                                   std::os::raw::c_uint","highlight_start":1,"highlight_end":88},{"text":"                                                       {","highlight_start":1,"highlight_end":57},{"text":"                                                        fprintf(__stderrp,","highlight_start":1,"highlight_end":75},{"text":"                                                                b\" no data compressed.\\n\\x00\"","highlight_start":1,"highlight_end":94},{"text":"                                                                    as","highlight_start":1,"highlight_end":71},{"text":"                                                                    *const u8","highlight_start":1,"highlight_end":78},{"text":"                                                                    as","highlight_start":1,"highlight_end":71},{"text":"                                                                    *const std::os::raw::c_char);","highlight_start":1,"highlight_end":98},{"text":"                                                    } else {","highlight_start":1,"highlight_end":61},{"text":"                                                        let mut buf_nin:","highlight_start":1,"highlight_end":73},{"text":"                                                                [Char; 32] =","highlight_start":1,"highlight_end":77},{"text":"                                                            [0; 32];","highlight_start":1,"highlight_end":69},{"text":"                                                        let mut buf_nout:","highlight_start":1,"highlight_end":74},{"text":"                                                                [Char; 32] =","highlight_start":1,"highlight_end":77},{"text":"                                                            [0; 32];","highlight_start":1,"highlight_end":69},{"text":"                                                        let mut nbytes_in:","highlight_start":1,"highlight_end":75},{"text":"                                                                UInt64 =","highlight_start":1,"highlight_end":73},{"text":"                                                            UInt64{b:","highlight_start":1,"highlight_end":70},{"text":"                                                                       [0;","highlight_start":1,"highlight_end":75},{"text":"                                                                           8],};","highlight_start":1,"highlight_end":81},{"text":"                                                        let mut nbytes_out:","highlight_start":1,"highlight_end":76},{"text":"                                                                UInt64 =","highlight_start":1,"highlight_end":73},{"text":"                                                            UInt64{b:","highlight_start":1,"highlight_end":70},{"text":"                                                                       [0;","highlight_start":1,"highlight_end":75},{"text":"                                                                           8],};","highlight_start":1,"highlight_end":81},{"text":"                                                        let mut nbytes_in_d:","highlight_start":1,"highlight_end":77},{"text":"                                                                std::os::raw::c_double =","highlight_start":1,"highlight_end":89},{"text":"                                                            0.;","highlight_start":1,"highlight_end":64},{"text":"                                                        let mut nbytes_out_d:","highlight_start":1,"highlight_end":78},{"text":"                                                                std::os::raw::c_double =","highlight_start":1,"highlight_end":89},{"text":"                                                            0.;","highlight_start":1,"highlight_end":64},{"text":"                                                        uInt64_from_UInt32s(&mut nbytes_in,","highlight_start":1,"highlight_end":92},{"text":"                                                                            nbytes_in_lo32,","highlight_start":1,"highlight_end":92},{"text":"                                                                            nbytes_in_hi32);","highlight_start":1,"highlight_end":93},{"text":"                                                        uInt64_from_UInt32s(&mut nbytes_out,","highlight_start":1,"highlight_end":93},{"text":"                                                                            nbytes_out_lo32,","highlight_start":1,"highlight_end":93},{"text":"                                                                            nbytes_out_hi32);","highlight_start":1,"highlight_end":94},{"text":"                                                        nbytes_in_d =","highlight_start":1,"highlight_end":70},{"text":"                                                            uInt64_to_double(&mut nbytes_in);","highlight_start":1,"highlight_end":94},{"text":"                                                        nbytes_out_d =","highlight_start":1,"highlight_end":71},{"text":"                                                            uInt64_to_double(&mut nbytes_out);","highlight_start":1,"highlight_end":95},{"text":"                                                        uInt64_toAscii(buf_nin.as_mut_ptr(),","highlight_start":1,"highlight_end":93},{"text":"                                                                       &mut nbytes_in);","highlight_start":1,"highlight_end":88},{"text":"                                                        uInt64_toAscii(buf_nout.as_mut_ptr(),","highlight_start":1,"highlight_end":94},{"text":"                                                                       &mut nbytes_out);","highlight_start":1,"highlight_end":89},{"text":"                                                        fprintf(__stderrp,","highlight_start":1,"highlight_end":75},{"text":"                                                                b\"%6.3f:1, %6.3f bits/byte, %5.2f%% saved, %s in, %s out.\\n\\x00\"","highlight_start":1,"highlight_end":129},{"text":"                                                                    as","highlight_start":1,"highlight_end":71},{"text":"                                                                    *const u8","highlight_start":1,"highlight_end":78},{"text":"                                                                    as","highlight_start":1,"highlight_end":71},{"text":"                                                                    *const std::os::raw::c_char,","highlight_start":1,"highlight_end":97},{"text":"                                                                nbytes_in_d /","highlight_start":1,"highlight_end":78},{"text":"                                                                    nbytes_out_d,","highlight_start":1,"highlight_end":82},{"text":"                                                                8.0f64 *","highlight_start":1,"highlight_end":73},{"text":"                                                                    nbytes_out_d","highlight_start":1,"highlight_end":81},{"text":"                                                                    /","highlight_start":1,"highlight_end":70},{"text":"                                                                    nbytes_in_d,","highlight_start":1,"highlight_end":81},{"text":"                                                                100.0f64 *","highlight_start":1,"highlight_end":75},{"text":"                                                                    (1.0f64 -","highlight_start":1,"highlight_end":78},{"text":"                                                                         nbytes_out_d","highlight_start":1,"highlight_end":86},{"text":"                                                                             /","highlight_start":1,"highlight_end":79},{"text":"                                                                             nbytes_in_d),","highlight_start":1,"highlight_end":91},{"text":"                                                                buf_nin.as_mut_ptr(),","highlight_start":1,"highlight_end":86},{"text":"                                                                buf_nout.as_mut_ptr());","highlight_start":1,"highlight_end":88},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                return","highlight_start":1,"highlight_end":55},{"text":"                                            }","highlight_start":1,"highlight_end":46},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            match current_block {","highlight_start":1,"highlight_end":34},{"text":"                18225113528933273530 => { }","highlight_start":1,"highlight_end":44},{"text":"                _ => {","highlight_start":1,"highlight_end":23},{"text":"                    BZ2_bzWriteClose64(&mut bzerr_dummy, bzf,","highlight_start":1,"highlight_end":62},{"text":"                                       1 as std::os::raw::c_int, &mut nbytes_in_lo32,","highlight_start":1,"highlight_end":86},{"text":"                                       &mut nbytes_in_hi32,","highlight_start":1,"highlight_end":60},{"text":"                                       &mut nbytes_out_lo32,","highlight_start":1,"highlight_end":61},{"text":"                                       &mut nbytes_out_hi32);","highlight_start":1,"highlight_end":62},{"text":"                    match bzerr {","highlight_start":1,"highlight_end":34},{"text":"                        -9 => {","highlight_start":1,"highlight_end":32},{"text":"                            current_block = 5122324059762049690;","highlight_start":1,"highlight_end":65},{"text":"                            match current_block {","highlight_start":1,"highlight_end":50},{"text":"                                4323399205346619401 => {","highlight_start":1,"highlight_end":57},{"text":"                                    panic(b\"compress:unexpected error\\x00\" as","highlight_start":1,"highlight_end":78},{"text":"                                              *const u8 as","highlight_start":1,"highlight_end":59},{"text":"                                              *const std::os::raw::c_char);","highlight_start":1,"highlight_end":76},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                                2380987886157893679 => { outOfMemory(); }","highlight_start":1,"highlight_end":74},{"text":"                                _ => { configError(); }","highlight_start":1,"highlight_end":56},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        -3 => {","highlight_start":1,"highlight_end":32},{"text":"                            current_block = 2380987886157893679;","highlight_start":1,"highlight_end":65},{"text":"                            match current_block {","highlight_start":1,"highlight_end":50},{"text":"                                4323399205346619401 => {","highlight_start":1,"highlight_end":57},{"text":"                                    panic(b\"compress:unexpected error\\x00\" as","highlight_start":1,"highlight_end":78},{"text":"                                              *const u8 as","highlight_start":1,"highlight_end":59},{"text":"                                              *const std::os::raw::c_char);","highlight_start":1,"highlight_end":76},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                                2380987886157893679 => { outOfMemory(); }","highlight_start":1,"highlight_end":74},{"text":"                                _ => { configError(); }","highlight_start":1,"highlight_end":56},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        -6 => { }","highlight_start":1,"highlight_end":34},{"text":"                        _ => {","highlight_start":1,"highlight_end":31},{"text":"                            current_block = 4323399205346619401;","highlight_start":1,"highlight_end":65},{"text":"                            match current_block {","highlight_start":1,"highlight_end":50},{"text":"                                4323399205346619401 => {","highlight_start":1,"highlight_end":57},{"text":"                                    panic(b\"compress:unexpected error\\x00\" as","highlight_start":1,"highlight_end":78},{"text":"                                              *const u8 as","highlight_start":1,"highlight_end":59},{"text":"                                              *const std::os::raw::c_char);","highlight_start":1,"highlight_end":76},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                                2380987886157893679 => { outOfMemory(); }","highlight_start":1,"highlight_end":74},{"text":"                                _ => { configError(); }","highlight_start":1,"highlight_end":56},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":"if !(ferror(stream) != 0) && !(ferror(zStream) != 0) {\n        bzf =\n            BZ2_bzWriteOpen(&mut bzerr, zStream, blockSize100k, verbosity,\n                            workFactor);\n        if bzerr != 0 as std::os::raw::c_int {\n            current_block = 660242869387099075;\n        } else {\n            if verbosity >= 2 as std::os::raw::c_int {\n                fprintf(__stderrp,\n                        b\"\\n\\x00\" as *const u8 as *const std::os::raw::c_char);\n            }\n            loop  {\n                if !(1 as std::os::raw::c_int as Bool != 0) {\n                    current_block = 13242334135786603907;\n                    break ;\n                }\n                if myfeof(stream) != 0 {\n                    current_block = 13242334135786603907;\n                    break ;\n                }\n                nIbuf =\n                    fread(ibuf.as_mut_ptr() as *mut std::os::raw::c_void,\n                          ::std::mem::size_of::<UChar>() as std::os::raw::c_ulong,\n                          5000 as std::os::raw::c_int as std::os::raw::c_ulong, stream) as\n                        Int32;\n                if ferror(stream) != 0 {\n                    current_block = 18225113528933273530;\n                    break ;\n                }\n                if nIbuf > 0 as std::os::raw::c_int {\n                    BZ2_bzWrite(&mut bzerr, bzf,\n                                ibuf.as_mut_ptr() as *mut std::os::raw::c_void,\n                                nIbuf);\n                }\n                if bzerr != 0 as std::os::raw::c_int {\n                    current_block = 660242869387099075;\n                    break ;\n                }\n            }\n            match current_block {\n                18225113528933273530 => { }\n                660242869387099075 => { }\n                _ => {\n                    BZ2_bzWriteClose64(&mut bzerr, bzf, 0 as std::os::raw::c_int,\n                                       &mut nbytes_in_lo32,\n                                       &mut nbytes_in_hi32,\n                                       &mut nbytes_out_lo32,\n                                       &mut nbytes_out_hi32);\n                    if bzerr != 0 as std::os::raw::c_int {\n                        current_block = 660242869387099075;\n                    } else if ferror(zStream) != 0 {\n                        current_block = 18225113528933273530;\n                    } else {\n                        ret = fflush(zStream);\n                        if ret == -(1 as std::os::raw::c_int) {\n                            current_block = 18225113528933273530;\n                        } else {\n                            if zStream != __stdoutp {\n                                let mut fd: Int32 = fileno(zStream);\n                                if fd < 0 as std::os::raw::c_int {\n                                    current_block = 18225113528933273530;\n                                } else {\n                                    applySavedFileAttrToOutputFile(fd);\n                                    ret = fclose(zStream);\n                                    outputHandleJustInCase =\n                                        0 as *mut FILE;\n                                    if ret == -(1 as std::os::raw::c_int) {\n                                        current_block =\n                                            18225113528933273530;\n                                    } else {\n                                        current_block =\n                                            17281240262373992796;\n                                    }\n                                }\n                            } else {\n                                current_block = 17281240262373992796;\n                            }\n                            match current_block {\n                                18225113528933273530 => { }\n                                _ => {\n                                    outputHandleJustInCase =\n                                        0 as *mut FILE;\n                                    if ferror(stream) != 0 {\n                                        current_block =\n                                            18225113528933273530;\n                                    } else {\n                                        ret = fclose(stream);\n                                        if ret == -(1 as std::os::raw::c_int) {\n                                            current_block =\n                                                18225113528933273530;\n                                        } else {\n                                            if verbosity >=\n                                                   1 as std::os::raw::c_int {\n                                                if nbytes_in_lo32 ==\n                                                       0 as std::os::raw::c_int as\n                                                           std::os::raw::c_uint &&\n                                                       nbytes_in_hi32 ==\n                                                           0 as\n                                                               std::os::raw::c_int\n                                                               as\n                                                               std::os::raw::c_uint\n                                                   {\n                                                    fprintf(__stderrp,\n                                                            b\" no data compressed.\\n\\x00\"\n                                                                as\n                                                                *const u8\n                                                                as\n                                                                *const std::os::raw::c_char);\n                                                } else {\n                                                    let mut buf_nin:\n                                                            [Char; 32] =\n                                                        [0; 32];\n                                                    let mut buf_nout:\n                                                            [Char; 32] =\n                                                        [0; 32];\n                                                    let mut nbytes_in:\n                                                            UInt64 =\n                                                        UInt64{b:\n                                                                   [0;\n                                                                       8],};\n                                                    let mut nbytes_out:\n                                                            UInt64 =\n                                                        UInt64{b:\n                                                                   [0;\n                                                                       8],};\n                                                    let mut nbytes_in_d:\n                                                            std::os::raw::c_double =\n                                                        0.;\n                                                    let mut nbytes_out_d:\n                                                            std::os::raw::c_double =\n                                                        0.;\n                                                    uInt64_from_UInt32s(&mut nbytes_in,\n                                                                        nbytes_in_lo32,\n                                                                        nbytes_in_hi32);\n                                                    uInt64_from_UInt32s(&mut nbytes_out,\n                                                                        nbytes_out_lo32,\n                                                                        nbytes_out_hi32);\n                                                    nbytes_in_d =\n                                                        uInt64_to_double(&mut nbytes_in);\n                                                    nbytes_out_d =\n                                                        uInt64_to_double(&mut nbytes_out);\n                                                    uInt64_toAscii(buf_nin.as_mut_ptr(),\n                                                                   &mut nbytes_in);\n                                                    uInt64_toAscii(buf_nout.as_mut_ptr(),\n                                                                   &mut nbytes_out);\n                                                    fprintf(__stderrp,\n                                                            b\"%6.3f:1, %6.3f bits/byte, %5.2f%% saved, %s in, %s out.\\n\\x00\"\n                                                                as\n                                                                *const u8\n                                                                as\n                                                                *const std::os::raw::c_char,\n                                                            nbytes_in_d /\n                                                                nbytes_out_d,\n                                                            8.0f64 *\n                                                                nbytes_out_d\n                                                                /\n                                                                nbytes_in_d,\n                                                            100.0f64 *\n                                                                (1.0f64 -\n                                                                     nbytes_out_d\n                                                                         /\n                                                                         nbytes_in_d),\n                                                            buf_nin.as_mut_ptr(),\n                                                            buf_nout.as_mut_ptr());\n                                                }\n                                            }\n                                            return\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        match current_block {\n            18225113528933273530 => { }\n            _ => {\n                BZ2_bzWriteClose64(&mut bzerr_dummy, bzf,\n                                   1 as std::os::raw::c_int, &mut nbytes_in_lo32,\n                                   &mut nbytes_in_hi32,\n                                   &mut nbytes_out_lo32,\n                                   &mut nbytes_out_hi32);\n                match bzerr {\n                    -9 => {\n                        current_block = 5122324059762049690;\n                        match current_block {\n                            4323399205346619401 => {\n                                panic(b\"compress:unexpected error\\x00\" as\n                                          *const u8 as\n                                          *const std::os::raw::c_char);\n                            }\n                            2380987886157893679 => { outOfMemory(); }\n                            _ => { configError(); }\n                        }\n                    }\n                    -3 => {\n                        current_block = 2380987886157893679;\n                        match current_block {\n                            4323399205346619401 => {\n                                panic(b\"compress:unexpected error\\x00\" as\n                                          *const u8 as\n                                          *const std::os::raw::c_char);\n                            }\n                            2380987886157893679 => { outOfMemory(); }\n                            _ => { configError(); }\n                        }\n                    }\n                    -6 => { }\n                    _ => {\n                        current_block = 4323399205346619401;\n                        match current_block {\n                            4323399205346619401 => {\n                                panic(b\"compress:unexpected error\\x00\" as\n                                          *const u8 as\n                                          *const std::os::raw::c_char);\n                            }\n                            2380987886157893679 => { outOfMemory(); }\n                            _ => { configError(); }\n                        }\n                    }\n                }\n            }\n        }\n    }","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this `if` statement can be collapsed\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:507:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m507\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    if !(ferror(stream) != 0) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m508\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if !(ferror(zStream) != 0) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m509\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            bzf =\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m510\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                BZ2_bzWriteOpen(&mut bzerr, zStream, blockSize\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m733\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m734\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_____^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::collapsible_if)]` on by default\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: collapse nested if block\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m507\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[38;5;10mif !(ferror(stream) != 0) && !(ferror(zStream) != 0) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m508\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+         bzf =\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m509\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+             BZ2_bzWriteOpen(&mut bzerr, zStream, blockSize100k, verbosity,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m510\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                             workFactor);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m511\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+         if bzerr != 0 as std::os::raw::c_int {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m512\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+             current_block = 660242869387099075;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m513\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+         } else {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m514\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+             if verbosity >= 2 as std::os::raw::c_int {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m515\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                 fprintf(__stderrp,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m516\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         b\"\\n\\x00\" as *const u8 as *const std::os::raw::c_char);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m517\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m518\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+             loop  {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m519\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                 if !(1 as std::os::raw::c_int as Bool != 0) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m520\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     current_block = 13242334135786603907;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m521\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     break ;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m522\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m523\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                 if myfeof(stream) != 0 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m524\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     current_block = 13242334135786603907;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m525\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     break ;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m526\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m527\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                 nIbuf =\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m528\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     fread(ibuf.as_mut_ptr() as *mut std::os::raw::c_void,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m529\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                           ::std::mem::size_of::<UChar>() as std::os::raw::c_ulong,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m530\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                           5000 as std::os::raw::c_int as std::os::raw::c_ulong, stream) as\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m531\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         Int32;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m532\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                 if ferror(stream) != 0 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m533\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     current_block = 18225113528933273530;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m534\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     break ;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m535\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m536\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                 if nIbuf > 0 as std::os::raw::c_int {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m537\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     BZ2_bzWrite(&mut bzerr, bzf,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m538\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                 ibuf.as_mut_ptr() as *mut std::os::raw::c_void,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m539\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                 nIbuf);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m540\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m541\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                 if bzerr != 0 as std::os::raw::c_int {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m542\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     current_block = 660242869387099075;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m543\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     break ;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m544\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m545\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m546\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+             match current_block {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m547\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                 18225113528933273530 => { }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m548\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                 660242869387099075 => { }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m549\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                 _ => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m550\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     BZ2_bzWriteClose64(&mut bzerr, bzf, 0 as std::os::raw::c_int,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m551\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                        &mut nbytes_in_lo32,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m552\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                        &mut nbytes_in_hi32,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m553\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                        &mut nbytes_out_lo32,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m554\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                        &mut nbytes_out_hi32);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m555\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     if bzerr != 0 as std::os::raw::c_int {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m556\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         current_block = 660242869387099075;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m557\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     } else if ferror(zStream) != 0 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m558\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         current_block = 18225113528933273530;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m559\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     } else {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m560\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         ret = fflush(zStream);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m561\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         if ret == -(1 as std::os::raw::c_int) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m562\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                             current_block = 18225113528933273530;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m563\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         } else {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m564\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                             if zStream != __stdoutp {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m565\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                 let mut fd: Int32 = fileno(zStream);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m566\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                 if fd < 0 as std::os::raw::c_int {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m567\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                     current_block = 18225113528933273530;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m568\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                 } else {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m569\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                     applySavedFileAttrToOutputFile(fd);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m570\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                     ret = fclose(zStream);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m571\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                     outputHandleJustInCase =\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m572\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                         0 as *mut FILE;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m573\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                     if ret == -(1 as std::os::raw::c_int) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m574\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                         current_block =\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m575\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             18225113528933273530;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m576\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                     } else {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m577\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                         current_block =\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m578\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             17281240262373992796;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m579\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                     }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m580\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m581\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                             } else {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m582\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                 current_block = 17281240262373992796;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m583\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m584\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                             match current_block {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m585\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                 18225113528933273530 => { }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m586\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                 _ => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m587\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                     outputHandleJustInCase =\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m588\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                         0 as *mut FILE;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m589\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                     if ferror(stream) != 0 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m590\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                         current_block =\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m591\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             18225113528933273530;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m592\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                     } else {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m593\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                         ret = fclose(stream);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m594\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                         if ret == -(1 as std::os::raw::c_int) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m595\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             current_block =\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m596\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 18225113528933273530;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m597\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                         } else {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m598\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             if verbosity >=\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m599\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                    1 as std::os::raw::c_int {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m600\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 if nbytes_in_lo32 ==\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m601\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                        0 as std::os::raw::c_int as\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m602\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                            std::os::raw::c_uint &&\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m603\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                        nbytes_in_hi32 ==\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m604\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                            0 as\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m605\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                std::os::raw::c_int\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m606\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                as\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m607\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                std::os::raw::c_uint\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m608\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                    {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m609\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     fprintf(__stderrp,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m610\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                             b\" no data compressed.\\n\\x00\"\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m611\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                 as\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m612\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                 *const u8\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m613\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                 as\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m614\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                 *const std::os::raw::c_char);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m615\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 } else {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m616\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     let mut buf_nin:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m617\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                             [Char; 32] =\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m618\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                         [0; 32];\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m619\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     let mut buf_nout:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m620\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                             [Char; 32] =\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m621\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                         [0; 32];\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m622\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     let mut nbytes_in:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m623\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                             UInt64 =\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m624\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                         UInt64{b:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m625\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                    [0;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m626\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                        8],};\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m627\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     let mut nbytes_out:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m628\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                             UInt64 =\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m629\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                         UInt64{b:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m630\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                    [0;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m631\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                        8],};\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m632\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     let mut nbytes_in_d:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m633\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                             std::os::raw::c_double =\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m634\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                         0.;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m635\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     let mut nbytes_out_d:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m636\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                             std::os::raw::c_double =\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m637\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                         0.;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m638\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     uInt64_from_UInt32s(&mut nbytes_in,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m639\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                         nbytes_in_lo32,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m640\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                         nbytes_in_hi32);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m641\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     uInt64_from_UInt32s(&mut nbytes_out,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m642\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                         nbytes_out_lo32,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m643\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                         nbytes_out_hi32);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m644\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     nbytes_in_d =\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m645\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                         uInt64_to_double(&mut nbytes_in);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m646\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     nbytes_out_d =\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m647\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                         uInt64_to_double(&mut nbytes_out);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m648\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     uInt64_toAscii(buf_nin.as_mut_ptr(),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m649\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                    &mut nbytes_in);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m650\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     uInt64_toAscii(buf_nout.as_mut_ptr(),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m651\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                    &mut nbytes_out);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m652\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     fprintf(__stderrp,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m653\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                             b\"%6.3f:1, %6.3f bits/byte, %5.2f%% saved, %s in, %s out.\\n\\x00\"\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m654\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                 as\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m655\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                 *const u8\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m656\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                 as\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m657\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                 *const std::os::raw::c_char,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m658\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                             nbytes_in_d /\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m659\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                 nbytes_out_d,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m660\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                             8.0f64 *\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m661\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                 nbytes_out_d\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m662\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                 /\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m663\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                 nbytes_in_d,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m664\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                             100.0f64 *\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m665\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                 (1.0f64 -\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m666\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                      nbytes_out_d\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m667\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                          /\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m668\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                          nbytes_in_d),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m669\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                             buf_nin.as_mut_ptr(),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m670\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                             buf_nout.as_mut_ptr());\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m671\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m672\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m673\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             return\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m674\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                         }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m675\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                     }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m676\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m677\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m678\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m679\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m680\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m681\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m682\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+         }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m683\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+         match current_block {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m684\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+             18225113528933273530 => { }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m685\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+             _ => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m686\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                 BZ2_bzWriteClose64(&mut bzerr_dummy, bzf,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m687\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                    1 as std::os::raw::c_int, &mut nbytes_in_lo32,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m688\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                    &mut nbytes_in_hi32,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m689\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                    &mut nbytes_out_lo32,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m690\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                    &mut nbytes_out_hi32);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m691\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                 match bzerr {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m692\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     -9 => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m693\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         current_block = 5122324059762049690;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m694\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         match current_block {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m695\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                             4323399205346619401 => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m696\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                 panic(b\"compress:unexpected error\\x00\" as\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m697\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                           *const u8 as\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m698\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                           *const std::os::raw::c_char);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m699\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m700\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                             2380987886157893679 => { outOfMemory(); }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m701\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                             _ => { configError(); }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m702\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m703\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m704\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     -3 => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m705\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         current_block = 2380987886157893679;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m706\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         match current_block {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m707\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                             4323399205346619401 => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m708\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                 panic(b\"compress:unexpected error\\x00\" as\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m709\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                           *const u8 as\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m710\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                           *const std::os::raw::c_char);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m711\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m712\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                             2380987886157893679 => { outOfMemory(); }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m713\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                             _ => { configError(); }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m714\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m715\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m716\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     -6 => { }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m717\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     _ => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m718\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         current_block = 4323399205346619401;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m719\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         match current_block {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m720\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                             4323399205346619401 => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m721\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                 panic(b\"compress:unexpected error\\x00\" as\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m722\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                           *const u8 as\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m723\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                           *const std::os::raw::c_char);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m724\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m725\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                             2380987886157893679 => { outOfMemory(); }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m726\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                             _ => { configError(); }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m727\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m728\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m729\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m730\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m731\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+         }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m732\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+     }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this `if` statement can be collapsed","code":{"code":"clippy::collapsible_if","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":34433,"byte_end":69044,"line_start":756,"line_end":1283,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    if !(ferror(stream) != 0) {","highlight_start":5,"highlight_end":32},{"text":"        if !(ferror(zStream) != 0) {","highlight_start":1,"highlight_end":37},{"text":"            's_51:","highlight_start":1,"highlight_end":19},{"text":"                loop  {","highlight_start":1,"highlight_end":24},{"text":"                    if !(1 as std::os::raw::c_int as Bool != 0) {","highlight_start":1,"highlight_end":66},{"text":"                        current_block = 926243229934402080;","highlight_start":1,"highlight_end":60},{"text":"                        break ;","highlight_start":1,"highlight_end":32},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    bzf =","highlight_start":1,"highlight_end":26},{"text":"                        BZ2_bzReadOpen(&mut bzerr, zStream, verbosity,","highlight_start":1,"highlight_end":71},{"text":"                                       smallMode as std::os::raw::c_int,","highlight_start":1,"highlight_end":73},{"text":"                                       unused.as_mut_ptr() as","highlight_start":1,"highlight_end":62},{"text":"                                           *mut std::os::raw::c_void, nUnused);","highlight_start":1,"highlight_end":80},{"text":"                    if bzf.is_null() || bzerr != 0 as std::os::raw::c_int {","highlight_start":1,"highlight_end":76},{"text":"                        current_block = 673979509383251364;","highlight_start":1,"highlight_end":60},{"text":"                        break ;","highlight_start":1,"highlight_end":32},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    streamNo += 1;","highlight_start":1,"highlight_end":35},{"text":"                    while bzerr == 0 as std::os::raw::c_int {","highlight_start":1,"highlight_end":62},{"text":"                        nread =","highlight_start":1,"highlight_end":32},{"text":"                            BZ2_bzRead(&mut bzerr, bzf,","highlight_start":1,"highlight_end":56},{"text":"                                       obuf.as_mut_ptr() as *mut std::os::raw::c_void,","highlight_start":1,"highlight_end":87},{"text":"                                       5000 as std::os::raw::c_int);","highlight_start":1,"highlight_end":69},{"text":"                        if bzerr == -(5 as std::os::raw::c_int) {","highlight_start":1,"highlight_end":66},{"text":"                            current_block = 18063049917807660484;","highlight_start":1,"highlight_end":66},{"text":"                            break 's_51 ;","highlight_start":1,"highlight_end":42},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        if (bzerr == 0 as std::os::raw::c_int ||","highlight_start":1,"highlight_end":65},{"text":"                                bzerr == 4 as std::os::raw::c_int) &&","highlight_start":1,"highlight_end":70},{"text":"                               nread > 0 as std::os::raw::c_int {","highlight_start":1,"highlight_end":66},{"text":"                            fwrite(obuf.as_mut_ptr() as *const std::os::raw::c_void,","highlight_start":1,"highlight_end":85},{"text":"                                   ::std::mem::size_of::<UChar>() as","highlight_start":1,"highlight_end":69},{"text":"                                       std::os::raw::c_ulong, nread as std::os::raw::c_ulong,","highlight_start":1,"highlight_end":94},{"text":"                                   stream);","highlight_start":1,"highlight_end":44},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        if ferror(stream) != 0 {","highlight_start":1,"highlight_end":49},{"text":"                            current_block = 5049394217699438129;","highlight_start":1,"highlight_end":65},{"text":"                            break 's_51 ;","highlight_start":1,"highlight_end":42},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    if bzerr != 4 as std::os::raw::c_int {","highlight_start":1,"highlight_end":59},{"text":"                        current_block = 673979509383251364;","highlight_start":1,"highlight_end":60},{"text":"                        break ;","highlight_start":1,"highlight_end":32},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    BZ2_bzReadGetUnused(&mut bzerr, bzf, &mut unusedTmpV,","highlight_start":1,"highlight_end":74},{"text":"                                        &mut nUnused);","highlight_start":1,"highlight_end":55},{"text":"                    if bzerr != 0 as std::os::raw::c_int {","highlight_start":1,"highlight_end":59},{"text":"                        panic(b\"decompress:bzReadGetUnused\\x00\" as *const u8","highlight_start":1,"highlight_end":77},{"text":"                                  as *const std::os::raw::c_char);","highlight_start":1,"highlight_end":67},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    unusedTmp = unusedTmpV as *mut UChar;","highlight_start":1,"highlight_end":58},{"text":"                    i = 0 as std::os::raw::c_int;","highlight_start":1,"highlight_end":50},{"text":"                    while i < nUnused {","highlight_start":1,"highlight_end":40},{"text":"                        unused[i as usize] = *unusedTmp.offset(i as isize);","highlight_start":1,"highlight_end":76},{"text":"                        i += 1","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    BZ2_bzReadClose(&mut bzerr, bzf);","highlight_start":1,"highlight_end":54},{"text":"                    if bzerr != 0 as std::os::raw::c_int {","highlight_start":1,"highlight_end":59},{"text":"                        panic(b\"decompress:bzReadGetUnused\\x00\" as *const u8","highlight_start":1,"highlight_end":77},{"text":"                                  as *const std::os::raw::c_char);","highlight_start":1,"highlight_end":67},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    if nUnused == 0 as std::os::raw::c_int &&","highlight_start":1,"highlight_end":62},{"text":"                           myfeof(zStream) as std::os::raw::c_int != 0 {","highlight_start":1,"highlight_end":73},{"text":"                        current_block = 926243229934402080;","highlight_start":1,"highlight_end":60},{"text":"                        break ;","highlight_start":1,"highlight_end":32},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            match current_block {","highlight_start":1,"highlight_end":34},{"text":"                5049394217699438129 => { }","highlight_start":1,"highlight_end":43},{"text":"                _ => {","highlight_start":1,"highlight_end":23},{"text":"                    match current_block {","highlight_start":1,"highlight_end":42},{"text":"                        18063049917807660484 => {","highlight_start":1,"highlight_end":50},{"text":"                            if forceOverwrite != 0 {","highlight_start":1,"highlight_end":53},{"text":"                                rewind(zStream);","highlight_start":1,"highlight_end":49},{"text":"                                loop  {","highlight_start":1,"highlight_end":40},{"text":"                                    if !(1 as std::os::raw::c_int as Bool != 0) {","highlight_start":1,"highlight_end":82},{"text":"                                        current_block = 926243229934402080;","highlight_start":1,"highlight_end":76},{"text":"                                        break ;","highlight_start":1,"highlight_end":48},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                    if myfeof(zStream) != 0 {","highlight_start":1,"highlight_end":62},{"text":"                                        current_block = 926243229934402080;","highlight_start":1,"highlight_end":76},{"text":"                                        break ;","highlight_start":1,"highlight_end":48},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                    nread =","highlight_start":1,"highlight_end":44},{"text":"                                        fread(obuf.as_mut_ptr() as","highlight_start":1,"highlight_end":67},{"text":"                                                  *mut std::os::raw::c_void,","highlight_start":1,"highlight_end":77},{"text":"                                              ::std::mem::size_of::<UChar>()","highlight_start":1,"highlight_end":77},{"text":"                                                  as std::os::raw::c_ulong,","highlight_start":1,"highlight_end":76},{"text":"                                              5000 as std::os::raw::c_int as","highlight_start":1,"highlight_end":77},{"text":"                                                  std::os::raw::c_ulong, zStream) as","highlight_start":1,"highlight_end":85},{"text":"                                            Int32;","highlight_start":1,"highlight_end":51},{"text":"                                    if ferror(zStream) != 0 {","highlight_start":1,"highlight_end":62},{"text":"                                        current_block = 5049394217699438129;","highlight_start":1,"highlight_end":77},{"text":"                                        break ;","highlight_start":1,"highlight_end":48},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                    if nread > 0 as std::os::raw::c_int {","highlight_start":1,"highlight_end":74},{"text":"                                        fwrite(obuf.as_mut_ptr() as","highlight_start":1,"highlight_end":68},{"text":"                                                   *const std::os::raw::c_void,","highlight_start":1,"highlight_end":80},{"text":"                                               ::std::mem::size_of::<UChar>()","highlight_start":1,"highlight_end":78},{"text":"                                                   as std::os::raw::c_ulong,","highlight_start":1,"highlight_end":77},{"text":"                                               nread as std::os::raw::c_ulong,","highlight_start":1,"highlight_end":79},{"text":"                                               stream);","highlight_start":1,"highlight_end":56},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                    if ferror(stream) != 0 {","highlight_start":1,"highlight_end":61},{"text":"                                        current_block = 5049394217699438129;","highlight_start":1,"highlight_end":77},{"text":"                                        break ;","highlight_start":1,"highlight_end":48},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            } else { current_block = 673979509383251364; }","highlight_start":1,"highlight_end":75},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        _ => { }","highlight_start":1,"highlight_end":33},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    match current_block {","highlight_start":1,"highlight_end":42},{"text":"                        5049394217699438129 => { }","highlight_start":1,"highlight_end":51},{"text":"                        _ => {","highlight_start":1,"highlight_end":31},{"text":"                            match current_block {","highlight_start":1,"highlight_end":50},{"text":"                                673979509383251364 => {","highlight_start":1,"highlight_end":56},{"text":"                                    BZ2_bzReadClose(&mut bzerr_dummy, bzf);","highlight_start":1,"highlight_end":76},{"text":"                                    match bzerr {","highlight_start":1,"highlight_end":50},{"text":"                                        -9 => {","highlight_start":1,"highlight_end":48},{"text":"                                            current_block =","highlight_start":1,"highlight_end":60},{"text":"                                                3642457097893642164;","highlight_start":1,"highlight_end":69},{"text":"                                            match current_block {","highlight_start":1,"highlight_end":66},{"text":"                                                6455255476181645667 => {","highlight_start":1,"highlight_end":73},{"text":"                                                    panic(b\"decompress:unexpected error\\x00\"","highlight_start":1,"highlight_end":93},{"text":"                                                              as *const u8 as","highlight_start":1,"highlight_end":78},{"text":"                                                              *const std::os::raw::c_char);","highlight_start":1,"highlight_end":92},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                3642457097893642164 => {","highlight_start":1,"highlight_end":73},{"text":"                                                    configError();","highlight_start":1,"highlight_end":67},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                10766414566319669440 => {","highlight_start":1,"highlight_end":74},{"text":"                                                    crcError();","highlight_start":1,"highlight_end":64},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                16178635849926953562 => {","highlight_start":1,"highlight_end":74},{"text":"                                                    outOfMemory();","highlight_start":1,"highlight_end":67},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                5517467152645906530 => {","highlight_start":1,"highlight_end":73},{"text":"                                                    compressedStreamEOF();","highlight_start":1,"highlight_end":75},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                _ => {","highlight_start":1,"highlight_end":55},{"text":"                                                    if zStream != __stdinp {","highlight_start":1,"highlight_end":77},{"text":"                                                        fclose(zStream);","highlight_start":1,"highlight_end":73},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                    if stream != __stdoutp {","highlight_start":1,"highlight_end":77},{"text":"                                                        fclose(stream);","highlight_start":1,"highlight_end":72},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                    if streamNo ==","highlight_start":1,"highlight_end":67},{"text":"                                                           1 as std::os::raw::c_int {","highlight_start":1,"highlight_end":86},{"text":"                                                        return 0 as","highlight_start":1,"highlight_end":68},{"text":"                                                                   std::os::raw::c_int","highlight_start":1,"highlight_end":87},{"text":"                                                                   as Bool","highlight_start":1,"highlight_end":75},{"text":"                                                    } else {","highlight_start":1,"highlight_end":61},{"text":"                                                        if noisy != 0 {","highlight_start":1,"highlight_end":72},{"text":"                                                            fprintf(__stderrp,","highlight_start":1,"highlight_end":79},{"text":"                                                                    b\"\\n%s: %s: trailing garbage after EOF ignored\\n\\x00\"","highlight_start":1,"highlight_end":122},{"text":"                                                                        as","highlight_start":1,"highlight_end":75},{"text":"                                                                        *const u8","highlight_start":1,"highlight_end":82},{"text":"                                                                        as","highlight_start":1,"highlight_end":75},{"text":"                                                                        *const std::os::raw::c_char,","highlight_start":1,"highlight_end":101},{"text":"                                                                    progName,","highlight_start":1,"highlight_end":78},{"text":"                                                                    inName.as_mut_ptr());","highlight_start":1,"highlight_end":90},{"text":"                                                        }","highlight_start":1,"highlight_end":58},{"text":"                                                        return 1 as","highlight_start":1,"highlight_end":68},{"text":"                                                                   std::os::raw::c_int","highlight_start":1,"highlight_end":87},{"text":"                                                                   as Bool","highlight_start":1,"highlight_end":75},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                            }","highlight_start":1,"highlight_end":46},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                        -6 => { }","highlight_start":1,"highlight_end":50},{"text":"                                        -4 => {","highlight_start":1,"highlight_end":48},{"text":"                                            current_block =","highlight_start":1,"highlight_end":60},{"text":"                                                10766414566319669440;","highlight_start":1,"highlight_end":70},{"text":"                                            match current_block {","highlight_start":1,"highlight_end":66},{"text":"                                                6455255476181645667 => {","highlight_start":1,"highlight_end":73},{"text":"                                                    panic(b\"decompress:unexpected error\\x00\"","highlight_start":1,"highlight_end":93},{"text":"                                                              as *const u8 as","highlight_start":1,"highlight_end":78},{"text":"                                                              *const std::os::raw::c_char);","highlight_start":1,"highlight_end":92},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                3642457097893642164 => {","highlight_start":1,"highlight_end":73},{"text":"                                                    configError();","highlight_start":1,"highlight_end":67},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                10766414566319669440 => {","highlight_start":1,"highlight_end":74},{"text":"                                                    crcError();","highlight_start":1,"highlight_end":64},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                16178635849926953562 => {","highlight_start":1,"highlight_end":74},{"text":"                                                    outOfMemory();","highlight_start":1,"highlight_end":67},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                5517467152645906530 => {","highlight_start":1,"highlight_end":73},{"text":"                                                    compressedStreamEOF();","highlight_start":1,"highlight_end":75},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                _ => {","highlight_start":1,"highlight_end":55},{"text":"                                                    if zStream != __stdinp {","highlight_start":1,"highlight_end":77},{"text":"                                                        fclose(zStream);","highlight_start":1,"highlight_end":73},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                    if stream != __stdoutp {","highlight_start":1,"highlight_end":77},{"text":"                                                        fclose(stream);","highlight_start":1,"highlight_end":72},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                    if streamNo ==","highlight_start":1,"highlight_end":67},{"text":"                                                           1 as std::os::raw::c_int {","highlight_start":1,"highlight_end":86},{"text":"                                                        return 0 as","highlight_start":1,"highlight_end":68},{"text":"                                                                   std::os::raw::c_int","highlight_start":1,"highlight_end":87},{"text":"                                                                   as Bool","highlight_start":1,"highlight_end":75},{"text":"                                                    } else {","highlight_start":1,"highlight_end":61},{"text":"                                                        if noisy != 0 {","highlight_start":1,"highlight_end":72},{"text":"                                                            fprintf(__stderrp,","highlight_start":1,"highlight_end":79},{"text":"                                                                    b\"\\n%s: %s: trailing garbage after EOF ignored\\n\\x00\"","highlight_start":1,"highlight_end":122},{"text":"                                                                        as","highlight_start":1,"highlight_end":75},{"text":"                                                                        *const u8","highlight_start":1,"highlight_end":82},{"text":"                                                                        as","highlight_start":1,"highlight_end":75},{"text":"                                                                        *const std::os::raw::c_char,","highlight_start":1,"highlight_end":101},{"text":"                                                                    progName,","highlight_start":1,"highlight_end":78},{"text":"                                                                    inName.as_mut_ptr());","highlight_start":1,"highlight_end":90},{"text":"                                                        }","highlight_start":1,"highlight_end":58},{"text":"                                                        return 1 as","highlight_start":1,"highlight_end":68},{"text":"                                                                   std::os::raw::c_int","highlight_start":1,"highlight_end":87},{"text":"                                                                   as Bool","highlight_start":1,"highlight_end":75},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                            }","highlight_start":1,"highlight_end":46},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                        -3 => {","highlight_start":1,"highlight_end":48},{"text":"                                            current_block =","highlight_start":1,"highlight_end":60},{"text":"                                                16178635849926953562;","highlight_start":1,"highlight_end":70},{"text":"                                            match current_block {","highlight_start":1,"highlight_end":66},{"text":"                                                6455255476181645667 => {","highlight_start":1,"highlight_end":73},{"text":"                                                    panic(b\"decompress:unexpected error\\x00\"","highlight_start":1,"highlight_end":93},{"text":"                                                              as *const u8 as","highlight_start":1,"highlight_end":78},{"text":"                                                              *const std::os::raw::c_char);","highlight_start":1,"highlight_end":92},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                3642457097893642164 => {","highlight_start":1,"highlight_end":73},{"text":"                                                    configError();","highlight_start":1,"highlight_end":67},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                10766414566319669440 => {","highlight_start":1,"highlight_end":74},{"text":"                                                    crcError();","highlight_start":1,"highlight_end":64},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                16178635849926953562 => {","highlight_start":1,"highlight_end":74},{"text":"                                                    outOfMemory();","highlight_start":1,"highlight_end":67},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                5517467152645906530 => {","highlight_start":1,"highlight_end":73},{"text":"                                                    compressedStreamEOF();","highlight_start":1,"highlight_end":75},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                _ => {","highlight_start":1,"highlight_end":55},{"text":"                                                    if zStream != __stdinp {","highlight_start":1,"highlight_end":77},{"text":"                                                        fclose(zStream);","highlight_start":1,"highlight_end":73},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                    if stream != __stdoutp {","highlight_start":1,"highlight_end":77},{"text":"                                                        fclose(stream);","highlight_start":1,"highlight_end":72},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                    if streamNo ==","highlight_start":1,"highlight_end":67},{"text":"                                                           1 as std::os::raw::c_int {","highlight_start":1,"highlight_end":86},{"text":"                                                        return 0 as","highlight_start":1,"highlight_end":68},{"text":"                                                                   std::os::raw::c_int","highlight_start":1,"highlight_end":87},{"text":"                                                                   as Bool","highlight_start":1,"highlight_end":75},{"text":"                                                    } else {","highlight_start":1,"highlight_end":61},{"text":"                                                        if noisy != 0 {","highlight_start":1,"highlight_end":72},{"text":"                                                            fprintf(__stderrp,","highlight_start":1,"highlight_end":79},{"text":"                                                                    b\"\\n%s: %s: trailing garbage after EOF ignored\\n\\x00\"","highlight_start":1,"highlight_end":122},{"text":"                                                                        as","highlight_start":1,"highlight_end":75},{"text":"                                                                        *const u8","highlight_start":1,"highlight_end":82},{"text":"                                                                        as","highlight_start":1,"highlight_end":75},{"text":"                                                                        *const std::os::raw::c_char,","highlight_start":1,"highlight_end":101},{"text":"                                                                    progName,","highlight_start":1,"highlight_end":78},{"text":"                                                                    inName.as_mut_ptr());","highlight_start":1,"highlight_end":90},{"text":"                                                        }","highlight_start":1,"highlight_end":58},{"text":"                                                        return 1 as","highlight_start":1,"highlight_end":68},{"text":"                                                                   std::os::raw::c_int","highlight_start":1,"highlight_end":87},{"text":"                                                                   as Bool","highlight_start":1,"highlight_end":75},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                            }","highlight_start":1,"highlight_end":46},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                        -7 => {","highlight_start":1,"highlight_end":48},{"text":"                                            current_block =","highlight_start":1,"highlight_end":60},{"text":"                                                5517467152645906530;","highlight_start":1,"highlight_end":69},{"text":"                                            match current_block {","highlight_start":1,"highlight_end":66},{"text":"                                                6455255476181645667 => {","highlight_start":1,"highlight_end":73},{"text":"                                                    panic(b\"decompress:unexpected error\\x00\"","highlight_start":1,"highlight_end":93},{"text":"                                                              as *const u8 as","highlight_start":1,"highlight_end":78},{"text":"                                                              *const std::os::raw::c_char);","highlight_start":1,"highlight_end":92},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                3642457097893642164 => {","highlight_start":1,"highlight_end":73},{"text":"                                                    configError();","highlight_start":1,"highlight_end":67},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                10766414566319669440 => {","highlight_start":1,"highlight_end":74},{"text":"                                                    crcError();","highlight_start":1,"highlight_end":64},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                16178635849926953562 => {","highlight_start":1,"highlight_end":74},{"text":"                                                    outOfMemory();","highlight_start":1,"highlight_end":67},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                5517467152645906530 => {","highlight_start":1,"highlight_end":73},{"text":"                                                    compressedStreamEOF();","highlight_start":1,"highlight_end":75},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                _ => {","highlight_start":1,"highlight_end":55},{"text":"                                                    if zStream != __stdinp {","highlight_start":1,"highlight_end":77},{"text":"                                                        fclose(zStream);","highlight_start":1,"highlight_end":73},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                    if stream != __stdoutp {","highlight_start":1,"highlight_end":77},{"text":"                                                        fclose(stream);","highlight_start":1,"highlight_end":72},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                    if streamNo ==","highlight_start":1,"highlight_end":67},{"text":"                                                           1 as std::os::raw::c_int {","highlight_start":1,"highlight_end":86},{"text":"                                                        return 0 as","highlight_start":1,"highlight_end":68},{"text":"                                                                   std::os::raw::c_int","highlight_start":1,"highlight_end":87},{"text":"                                                                   as Bool","highlight_start":1,"highlight_end":75},{"text":"                                                    } else {","highlight_start":1,"highlight_end":61},{"text":"                                                        if noisy != 0 {","highlight_start":1,"highlight_end":72},{"text":"                                                            fprintf(__stderrp,","highlight_start":1,"highlight_end":79},{"text":"                                                                    b\"\\n%s: %s: trailing garbage after EOF ignored\\n\\x00\"","highlight_start":1,"highlight_end":122},{"text":"                                                                        as","highlight_start":1,"highlight_end":75},{"text":"                                                                        *const u8","highlight_start":1,"highlight_end":82},{"text":"                                                                        as","highlight_start":1,"highlight_end":75},{"text":"                                                                        *const std::os::raw::c_char,","highlight_start":1,"highlight_end":101},{"text":"                                                                    progName,","highlight_start":1,"highlight_end":78},{"text":"                                                                    inName.as_mut_ptr());","highlight_start":1,"highlight_end":90},{"text":"                                                        }","highlight_start":1,"highlight_end":58},{"text":"                                                        return 1 as","highlight_start":1,"highlight_end":68},{"text":"                                                                   std::os::raw::c_int","highlight_start":1,"highlight_end":87},{"text":"                                                                   as Bool","highlight_start":1,"highlight_end":75},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                            }","highlight_start":1,"highlight_end":46},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                        -5 => {","highlight_start":1,"highlight_end":48},{"text":"                                            current_block =","highlight_start":1,"highlight_end":60},{"text":"                                                7372986856480808103;","highlight_start":1,"highlight_end":69},{"text":"                                            match current_block {","highlight_start":1,"highlight_end":66},{"text":"                                                6455255476181645667 => {","highlight_start":1,"highlight_end":73},{"text":"                                                    panic(b\"decompress:unexpected error\\x00\"","highlight_start":1,"highlight_end":93},{"text":"                                                              as *const u8 as","highlight_start":1,"highlight_end":78},{"text":"                                                              *const std::os::raw::c_char);","highlight_start":1,"highlight_end":92},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                3642457097893642164 => {","highlight_start":1,"highlight_end":73},{"text":"                                                    configError();","highlight_start":1,"highlight_end":67},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                10766414566319669440 => {","highlight_start":1,"highlight_end":74},{"text":"                                                    crcError();","highlight_start":1,"highlight_end":64},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                16178635849926953562 => {","highlight_start":1,"highlight_end":74},{"text":"                                                    outOfMemory();","highlight_start":1,"highlight_end":67},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                5517467152645906530 => {","highlight_start":1,"highlight_end":73},{"text":"                                                    compressedStreamEOF();","highlight_start":1,"highlight_end":75},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                _ => {","highlight_start":1,"highlight_end":55},{"text":"                                                    if zStream != __stdinp {","highlight_start":1,"highlight_end":77},{"text":"                                                        fclose(zStream);","highlight_start":1,"highlight_end":73},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                    if stream != __stdoutp {","highlight_start":1,"highlight_end":77},{"text":"                                                        fclose(stream);","highlight_start":1,"highlight_end":72},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                    if streamNo ==","highlight_start":1,"highlight_end":67},{"text":"                                                           1 as std::os::raw::c_int {","highlight_start":1,"highlight_end":86},{"text":"                                                        return 0 as","highlight_start":1,"highlight_end":68},{"text":"                                                                   std::os::raw::c_int","highlight_start":1,"highlight_end":87},{"text":"                                                                   as Bool","highlight_start":1,"highlight_end":75},{"text":"                                                    } else {","highlight_start":1,"highlight_end":61},{"text":"                                                        if noisy != 0 {","highlight_start":1,"highlight_end":72},{"text":"                                                            fprintf(__stderrp,","highlight_start":1,"highlight_end":79},{"text":"                                                                    b\"\\n%s: %s: trailing garbage after EOF ignored\\n\\x00\"","highlight_start":1,"highlight_end":122},{"text":"                                                                        as","highlight_start":1,"highlight_end":75},{"text":"                                                                        *const u8","highlight_start":1,"highlight_end":82},{"text":"                                                                        as","highlight_start":1,"highlight_end":75},{"text":"                                                                        *const std::os::raw::c_char,","highlight_start":1,"highlight_end":101},{"text":"                                                                    progName,","highlight_start":1,"highlight_end":78},{"text":"                                                                    inName.as_mut_ptr());","highlight_start":1,"highlight_end":90},{"text":"                                                        }","highlight_start":1,"highlight_end":58},{"text":"                                                        return 1 as","highlight_start":1,"highlight_end":68},{"text":"                                                                   std::os::raw::c_int","highlight_start":1,"highlight_end":87},{"text":"                                                                   as Bool","highlight_start":1,"highlight_end":75},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                            }","highlight_start":1,"highlight_end":46},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                        _ => {","highlight_start":1,"highlight_end":47},{"text":"                                            current_block =","highlight_start":1,"highlight_end":60},{"text":"                                                6455255476181645667;","highlight_start":1,"highlight_end":69},{"text":"                                            match current_block {","highlight_start":1,"highlight_end":66},{"text":"                                                6455255476181645667 => {","highlight_start":1,"highlight_end":73},{"text":"                                                    panic(b\"decompress:unexpected error\\x00\"","highlight_start":1,"highlight_end":93},{"text":"                                                              as *const u8 as","highlight_start":1,"highlight_end":78},{"text":"                                                              *const std::os::raw::c_char);","highlight_start":1,"highlight_end":92},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                3642457097893642164 => {","highlight_start":1,"highlight_end":73},{"text":"                                                    configError();","highlight_start":1,"highlight_end":67},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                10766414566319669440 => {","highlight_start":1,"highlight_end":74},{"text":"                                                    crcError();","highlight_start":1,"highlight_end":64},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                16178635849926953562 => {","highlight_start":1,"highlight_end":74},{"text":"                                                    outOfMemory();","highlight_start":1,"highlight_end":67},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                5517467152645906530 => {","highlight_start":1,"highlight_end":73},{"text":"                                                    compressedStreamEOF();","highlight_start":1,"highlight_end":75},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                _ => {","highlight_start":1,"highlight_end":55},{"text":"                                                    if zStream != __stdinp {","highlight_start":1,"highlight_end":77},{"text":"                                                        fclose(zStream);","highlight_start":1,"highlight_end":73},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                    if stream != __stdoutp {","highlight_start":1,"highlight_end":77},{"text":"                                                        fclose(stream);","highlight_start":1,"highlight_end":72},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                    if streamNo ==","highlight_start":1,"highlight_end":67},{"text":"                                                           1 as std::os::raw::c_int {","highlight_start":1,"highlight_end":86},{"text":"                                                        return 0 as","highlight_start":1,"highlight_end":68},{"text":"                                                                   std::os::raw::c_int","highlight_start":1,"highlight_end":87},{"text":"                                                                   as Bool","highlight_start":1,"highlight_end":75},{"text":"                                                    } else {","highlight_start":1,"highlight_end":61},{"text":"                                                        if noisy != 0 {","highlight_start":1,"highlight_end":72},{"text":"                                                            fprintf(__stderrp,","highlight_start":1,"highlight_end":79},{"text":"                                                                    b\"\\n%s: %s: trailing garbage after EOF ignored\\n\\x00\"","highlight_start":1,"highlight_end":122},{"text":"                                                                        as","highlight_start":1,"highlight_end":75},{"text":"                                                                        *const u8","highlight_start":1,"highlight_end":82},{"text":"                                                                        as","highlight_start":1,"highlight_end":75},{"text":"                                                                        *const std::os::raw::c_char,","highlight_start":1,"highlight_end":101},{"text":"                                                                    progName,","highlight_start":1,"highlight_end":78},{"text":"                                                                    inName.as_mut_ptr());","highlight_start":1,"highlight_end":90},{"text":"                                                        }","highlight_start":1,"highlight_end":58},{"text":"                                                        return 1 as","highlight_start":1,"highlight_end":68},{"text":"                                                                   std::os::raw::c_int","highlight_start":1,"highlight_end":87},{"text":"                                                                   as Bool","highlight_start":1,"highlight_end":75},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                            }","highlight_start":1,"highlight_end":46},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                                _ => {","highlight_start":1,"highlight_end":39},{"text":"                                    if !(ferror(zStream) != 0) {","highlight_start":1,"highlight_end":65},{"text":"                                        if stream != __stdoutp {","highlight_start":1,"highlight_end":65},{"text":"                                            let mut fd: Int32 =","highlight_start":1,"highlight_end":64},{"text":"                                                fileno(stream);","highlight_start":1,"highlight_end":64},{"text":"                                            if fd < 0 as std::os::raw::c_int {","highlight_start":1,"highlight_end":79},{"text":"                                                current_block =","highlight_start":1,"highlight_end":64},{"text":"                                                    5049394217699438129;","highlight_start":1,"highlight_end":73},{"text":"                                            } else {","highlight_start":1,"highlight_end":53},{"text":"                                                applySavedFileAttrToOutputFile(fd);","highlight_start":1,"highlight_end":84},{"text":"                                                current_block =","highlight_start":1,"highlight_end":64},{"text":"                                                    14832935472441733737;","highlight_start":1,"highlight_end":74},{"text":"                                            }","highlight_start":1,"highlight_end":46},{"text":"                                        } else {","highlight_start":1,"highlight_end":49},{"text":"                                            current_block =","highlight_start":1,"highlight_end":60},{"text":"                                                14832935472441733737;","highlight_start":1,"highlight_end":70},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                        match current_block {","highlight_start":1,"highlight_end":62},{"text":"                                            5049394217699438129 => { }","highlight_start":1,"highlight_end":71},{"text":"                                            _ => {","highlight_start":1,"highlight_end":51},{"text":"                                                ret = fclose(zStream);","highlight_start":1,"highlight_end":71},{"text":"                                                if !(ret ==","highlight_start":1,"highlight_end":60},{"text":"                                                         -(1 as std::os::raw::c_int))","highlight_start":1,"highlight_end":86},{"text":"                                                   {","highlight_start":1,"highlight_end":53},{"text":"                                                    if !(ferror(stream) != 0)","highlight_start":1,"highlight_end":78},{"text":"                                                       {","highlight_start":1,"highlight_end":57},{"text":"                                                        ret = fflush(stream);","highlight_start":1,"highlight_end":78},{"text":"                                                        if !(ret !=","highlight_start":1,"highlight_end":68},{"text":"                                                                 0 as","highlight_start":1,"highlight_end":70},{"text":"                                                                     std::os::raw::c_int)","highlight_start":1,"highlight_end":90},{"text":"                                                           {","highlight_start":1,"highlight_end":61},{"text":"                                                            if stream !=","highlight_start":1,"highlight_end":73},{"text":"                                                                   __stdoutp {","highlight_start":1,"highlight_end":79},{"text":"                                                                ret =","highlight_start":1,"highlight_end":70},{"text":"                                                                    fclose(stream);","highlight_start":1,"highlight_end":84},{"text":"                                                                outputHandleJustInCase","highlight_start":1,"highlight_end":87},{"text":"                                                                    =","highlight_start":1,"highlight_end":70},{"text":"                                                                    0 as","highlight_start":1,"highlight_end":73},{"text":"                                                                        *mut FILE;","highlight_start":1,"highlight_end":83},{"text":"                                                                if ret ==","highlight_start":1,"highlight_end":74},{"text":"                                                                       -(1 as","highlight_start":1,"highlight_end":78},{"text":"                                                                             std::os::raw::c_int)","highlight_start":1,"highlight_end":98},{"text":"                                                                   {","highlight_start":1,"highlight_end":69},{"text":"                                                                    current_block","highlight_start":1,"highlight_end":82},{"text":"                                                                        =","highlight_start":1,"highlight_end":74},{"text":"                                                                        5049394217699438129;","highlight_start":1,"highlight_end":93},{"text":"                                                                } else {","highlight_start":1,"highlight_end":73},{"text":"                                                                    current_block","highlight_start":1,"highlight_end":82},{"text":"                                                                        =","highlight_start":1,"highlight_end":74},{"text":"                                                                        14775119014532381840;","highlight_start":1,"highlight_end":94},{"text":"                                                                }","highlight_start":1,"highlight_end":66},{"text":"                                                            } else {","highlight_start":1,"highlight_end":69},{"text":"                                                                current_block","highlight_start":1,"highlight_end":78},{"text":"                                                                    =","highlight_start":1,"highlight_end":70},{"text":"                                                                    14775119014532381840;","highlight_start":1,"highlight_end":90},{"text":"                                                            }","highlight_start":1,"highlight_end":62},{"text":"                                                            match current_block","highlight_start":1,"highlight_end":80},{"text":"                                                                {","highlight_start":1,"highlight_end":66},{"text":"                                                                5049394217699438129","highlight_start":1,"highlight_end":84},{"text":"                                                                => {","highlight_start":1,"highlight_end":69},{"text":"                                                                }","highlight_start":1,"highlight_end":66},{"text":"                                                                _ => {","highlight_start":1,"highlight_end":71},{"text":"                                                                    outputHandleJustInCase","highlight_start":1,"highlight_end":91},{"text":"                                                                        =","highlight_start":1,"highlight_end":74},{"text":"                                                                        0 as","highlight_start":1,"highlight_end":77},{"text":"                                                                            *mut FILE;","highlight_start":1,"highlight_end":87},{"text":"                                                                    if verbosity","highlight_start":1,"highlight_end":81},{"text":"                                                                           >=","highlight_start":1,"highlight_end":78},{"text":"                                                                           2","highlight_start":1,"highlight_end":77},{"text":"                                                                               as","highlight_start":1,"highlight_end":82},{"text":"                                                                               std::os::raw::c_int","highlight_start":1,"highlight_end":99},{"text":"                                                                       {","highlight_start":1,"highlight_end":73},{"text":"                                                                        fprintf(__stderrp,","highlight_start":1,"highlight_end":91},{"text":"                                                                                b\"\\n    \\x00\"","highlight_start":1,"highlight_end":94},{"text":"                                                                                    as","highlight_start":1,"highlight_end":87},{"text":"                                                                                    *const u8","highlight_start":1,"highlight_end":94},{"text":"                                                                                    as","highlight_start":1,"highlight_end":87},{"text":"                                                                                    *const std::os::raw::c_char);","highlight_start":1,"highlight_end":114},{"text":"                                                                    }","highlight_start":1,"highlight_end":70},{"text":"                                                                    return 1","highlight_start":1,"highlight_end":77},{"text":"                                                                               as","highlight_start":1,"highlight_end":82},{"text":"                                                                               std::os::raw::c_int","highlight_start":1,"highlight_end":99},{"text":"                                                                               as","highlight_start":1,"highlight_end":82},{"text":"                                                                               Bool","highlight_start":1,"highlight_end":84},{"text":"                                                                }","highlight_start":1,"highlight_end":66},{"text":"                                                            }","highlight_start":1,"highlight_end":62},{"text":"                                                        }","highlight_start":1,"highlight_end":58},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                            }","highlight_start":1,"highlight_end":46},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"collapse nested if block","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":34433,"byte_end":69044,"line_start":756,"line_end":1283,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    if !(ferror(stream) != 0) {","highlight_start":5,"highlight_end":32},{"text":"        if !(ferror(zStream) != 0) {","highlight_start":1,"highlight_end":37},{"text":"            's_51:","highlight_start":1,"highlight_end":19},{"text":"                loop  {","highlight_start":1,"highlight_end":24},{"text":"                    if !(1 as std::os::raw::c_int as Bool != 0) {","highlight_start":1,"highlight_end":66},{"text":"                        current_block = 926243229934402080;","highlight_start":1,"highlight_end":60},{"text":"                        break ;","highlight_start":1,"highlight_end":32},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    bzf =","highlight_start":1,"highlight_end":26},{"text":"                        BZ2_bzReadOpen(&mut bzerr, zStream, verbosity,","highlight_start":1,"highlight_end":71},{"text":"                                       smallMode as std::os::raw::c_int,","highlight_start":1,"highlight_end":73},{"text":"                                       unused.as_mut_ptr() as","highlight_start":1,"highlight_end":62},{"text":"                                           *mut std::os::raw::c_void, nUnused);","highlight_start":1,"highlight_end":80},{"text":"                    if bzf.is_null() || bzerr != 0 as std::os::raw::c_int {","highlight_start":1,"highlight_end":76},{"text":"                        current_block = 673979509383251364;","highlight_start":1,"highlight_end":60},{"text":"                        break ;","highlight_start":1,"highlight_end":32},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    streamNo += 1;","highlight_start":1,"highlight_end":35},{"text":"                    while bzerr == 0 as std::os::raw::c_int {","highlight_start":1,"highlight_end":62},{"text":"                        nread =","highlight_start":1,"highlight_end":32},{"text":"                            BZ2_bzRead(&mut bzerr, bzf,","highlight_start":1,"highlight_end":56},{"text":"                                       obuf.as_mut_ptr() as *mut std::os::raw::c_void,","highlight_start":1,"highlight_end":87},{"text":"                                       5000 as std::os::raw::c_int);","highlight_start":1,"highlight_end":69},{"text":"                        if bzerr == -(5 as std::os::raw::c_int) {","highlight_start":1,"highlight_end":66},{"text":"                            current_block = 18063049917807660484;","highlight_start":1,"highlight_end":66},{"text":"                            break 's_51 ;","highlight_start":1,"highlight_end":42},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        if (bzerr == 0 as std::os::raw::c_int ||","highlight_start":1,"highlight_end":65},{"text":"                                bzerr == 4 as std::os::raw::c_int) &&","highlight_start":1,"highlight_end":70},{"text":"                               nread > 0 as std::os::raw::c_int {","highlight_start":1,"highlight_end":66},{"text":"                            fwrite(obuf.as_mut_ptr() as *const std::os::raw::c_void,","highlight_start":1,"highlight_end":85},{"text":"                                   ::std::mem::size_of::<UChar>() as","highlight_start":1,"highlight_end":69},{"text":"                                       std::os::raw::c_ulong, nread as std::os::raw::c_ulong,","highlight_start":1,"highlight_end":94},{"text":"                                   stream);","highlight_start":1,"highlight_end":44},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        if ferror(stream) != 0 {","highlight_start":1,"highlight_end":49},{"text":"                            current_block = 5049394217699438129;","highlight_start":1,"highlight_end":65},{"text":"                            break 's_51 ;","highlight_start":1,"highlight_end":42},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    if bzerr != 4 as std::os::raw::c_int {","highlight_start":1,"highlight_end":59},{"text":"                        current_block = 673979509383251364;","highlight_start":1,"highlight_end":60},{"text":"                        break ;","highlight_start":1,"highlight_end":32},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    BZ2_bzReadGetUnused(&mut bzerr, bzf, &mut unusedTmpV,","highlight_start":1,"highlight_end":74},{"text":"                                        &mut nUnused);","highlight_start":1,"highlight_end":55},{"text":"                    if bzerr != 0 as std::os::raw::c_int {","highlight_start":1,"highlight_end":59},{"text":"                        panic(b\"decompress:bzReadGetUnused\\x00\" as *const u8","highlight_start":1,"highlight_end":77},{"text":"                                  as *const std::os::raw::c_char);","highlight_start":1,"highlight_end":67},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    unusedTmp = unusedTmpV as *mut UChar;","highlight_start":1,"highlight_end":58},{"text":"                    i = 0 as std::os::raw::c_int;","highlight_start":1,"highlight_end":50},{"text":"                    while i < nUnused {","highlight_start":1,"highlight_end":40},{"text":"                        unused[i as usize] = *unusedTmp.offset(i as isize);","highlight_start":1,"highlight_end":76},{"text":"                        i += 1","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    BZ2_bzReadClose(&mut bzerr, bzf);","highlight_start":1,"highlight_end":54},{"text":"                    if bzerr != 0 as std::os::raw::c_int {","highlight_start":1,"highlight_end":59},{"text":"                        panic(b\"decompress:bzReadGetUnused\\x00\" as *const u8","highlight_start":1,"highlight_end":77},{"text":"                                  as *const std::os::raw::c_char);","highlight_start":1,"highlight_end":67},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    if nUnused == 0 as std::os::raw::c_int &&","highlight_start":1,"highlight_end":62},{"text":"                           myfeof(zStream) as std::os::raw::c_int != 0 {","highlight_start":1,"highlight_end":73},{"text":"                        current_block = 926243229934402080;","highlight_start":1,"highlight_end":60},{"text":"                        break ;","highlight_start":1,"highlight_end":32},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            match current_block {","highlight_start":1,"highlight_end":34},{"text":"                5049394217699438129 => { }","highlight_start":1,"highlight_end":43},{"text":"                _ => {","highlight_start":1,"highlight_end":23},{"text":"                    match current_block {","highlight_start":1,"highlight_end":42},{"text":"                        18063049917807660484 => {","highlight_start":1,"highlight_end":50},{"text":"                            if forceOverwrite != 0 {","highlight_start":1,"highlight_end":53},{"text":"                                rewind(zStream);","highlight_start":1,"highlight_end":49},{"text":"                                loop  {","highlight_start":1,"highlight_end":40},{"text":"                                    if !(1 as std::os::raw::c_int as Bool != 0) {","highlight_start":1,"highlight_end":82},{"text":"                                        current_block = 926243229934402080;","highlight_start":1,"highlight_end":76},{"text":"                                        break ;","highlight_start":1,"highlight_end":48},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                    if myfeof(zStream) != 0 {","highlight_start":1,"highlight_end":62},{"text":"                                        current_block = 926243229934402080;","highlight_start":1,"highlight_end":76},{"text":"                                        break ;","highlight_start":1,"highlight_end":48},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                    nread =","highlight_start":1,"highlight_end":44},{"text":"                                        fread(obuf.as_mut_ptr() as","highlight_start":1,"highlight_end":67},{"text":"                                                  *mut std::os::raw::c_void,","highlight_start":1,"highlight_end":77},{"text":"                                              ::std::mem::size_of::<UChar>()","highlight_start":1,"highlight_end":77},{"text":"                                                  as std::os::raw::c_ulong,","highlight_start":1,"highlight_end":76},{"text":"                                              5000 as std::os::raw::c_int as","highlight_start":1,"highlight_end":77},{"text":"                                                  std::os::raw::c_ulong, zStream) as","highlight_start":1,"highlight_end":85},{"text":"                                            Int32;","highlight_start":1,"highlight_end":51},{"text":"                                    if ferror(zStream) != 0 {","highlight_start":1,"highlight_end":62},{"text":"                                        current_block = 5049394217699438129;","highlight_start":1,"highlight_end":77},{"text":"                                        break ;","highlight_start":1,"highlight_end":48},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                    if nread > 0 as std::os::raw::c_int {","highlight_start":1,"highlight_end":74},{"text":"                                        fwrite(obuf.as_mut_ptr() as","highlight_start":1,"highlight_end":68},{"text":"                                                   *const std::os::raw::c_void,","highlight_start":1,"highlight_end":80},{"text":"                                               ::std::mem::size_of::<UChar>()","highlight_start":1,"highlight_end":78},{"text":"                                                   as std::os::raw::c_ulong,","highlight_start":1,"highlight_end":77},{"text":"                                               nread as std::os::raw::c_ulong,","highlight_start":1,"highlight_end":79},{"text":"                                               stream);","highlight_start":1,"highlight_end":56},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                    if ferror(stream) != 0 {","highlight_start":1,"highlight_end":61},{"text":"                                        current_block = 5049394217699438129;","highlight_start":1,"highlight_end":77},{"text":"                                        break ;","highlight_start":1,"highlight_end":48},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            } else { current_block = 673979509383251364; }","highlight_start":1,"highlight_end":75},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        _ => { }","highlight_start":1,"highlight_end":33},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    match current_block {","highlight_start":1,"highlight_end":42},{"text":"                        5049394217699438129 => { }","highlight_start":1,"highlight_end":51},{"text":"                        _ => {","highlight_start":1,"highlight_end":31},{"text":"                            match current_block {","highlight_start":1,"highlight_end":50},{"text":"                                673979509383251364 => {","highlight_start":1,"highlight_end":56},{"text":"                                    BZ2_bzReadClose(&mut bzerr_dummy, bzf);","highlight_start":1,"highlight_end":76},{"text":"                                    match bzerr {","highlight_start":1,"highlight_end":50},{"text":"                                        -9 => {","highlight_start":1,"highlight_end":48},{"text":"                                            current_block =","highlight_start":1,"highlight_end":60},{"text":"                                                3642457097893642164;","highlight_start":1,"highlight_end":69},{"text":"                                            match current_block {","highlight_start":1,"highlight_end":66},{"text":"                                                6455255476181645667 => {","highlight_start":1,"highlight_end":73},{"text":"                                                    panic(b\"decompress:unexpected error\\x00\"","highlight_start":1,"highlight_end":93},{"text":"                                                              as *const u8 as","highlight_start":1,"highlight_end":78},{"text":"                                                              *const std::os::raw::c_char);","highlight_start":1,"highlight_end":92},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                3642457097893642164 => {","highlight_start":1,"highlight_end":73},{"text":"                                                    configError();","highlight_start":1,"highlight_end":67},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                10766414566319669440 => {","highlight_start":1,"highlight_end":74},{"text":"                                                    crcError();","highlight_start":1,"highlight_end":64},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                16178635849926953562 => {","highlight_start":1,"highlight_end":74},{"text":"                                                    outOfMemory();","highlight_start":1,"highlight_end":67},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                5517467152645906530 => {","highlight_start":1,"highlight_end":73},{"text":"                                                    compressedStreamEOF();","highlight_start":1,"highlight_end":75},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                _ => {","highlight_start":1,"highlight_end":55},{"text":"                                                    if zStream != __stdinp {","highlight_start":1,"highlight_end":77},{"text":"                                                        fclose(zStream);","highlight_start":1,"highlight_end":73},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                    if stream != __stdoutp {","highlight_start":1,"highlight_end":77},{"text":"                                                        fclose(stream);","highlight_start":1,"highlight_end":72},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                    if streamNo ==","highlight_start":1,"highlight_end":67},{"text":"                                                           1 as std::os::raw::c_int {","highlight_start":1,"highlight_end":86},{"text":"                                                        return 0 as","highlight_start":1,"highlight_end":68},{"text":"                                                                   std::os::raw::c_int","highlight_start":1,"highlight_end":87},{"text":"                                                                   as Bool","highlight_start":1,"highlight_end":75},{"text":"                                                    } else {","highlight_start":1,"highlight_end":61},{"text":"                                                        if noisy != 0 {","highlight_start":1,"highlight_end":72},{"text":"                                                            fprintf(__stderrp,","highlight_start":1,"highlight_end":79},{"text":"                                                                    b\"\\n%s: %s: trailing garbage after EOF ignored\\n\\x00\"","highlight_start":1,"highlight_end":122},{"text":"                                                                        as","highlight_start":1,"highlight_end":75},{"text":"                                                                        *const u8","highlight_start":1,"highlight_end":82},{"text":"                                                                        as","highlight_start":1,"highlight_end":75},{"text":"                                                                        *const std::os::raw::c_char,","highlight_start":1,"highlight_end":101},{"text":"                                                                    progName,","highlight_start":1,"highlight_end":78},{"text":"                                                                    inName.as_mut_ptr());","highlight_start":1,"highlight_end":90},{"text":"                                                        }","highlight_start":1,"highlight_end":58},{"text":"                                                        return 1 as","highlight_start":1,"highlight_end":68},{"text":"                                                                   std::os::raw::c_int","highlight_start":1,"highlight_end":87},{"text":"                                                                   as Bool","highlight_start":1,"highlight_end":75},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                            }","highlight_start":1,"highlight_end":46},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                        -6 => { }","highlight_start":1,"highlight_end":50},{"text":"                                        -4 => {","highlight_start":1,"highlight_end":48},{"text":"                                            current_block =","highlight_start":1,"highlight_end":60},{"text":"                                                10766414566319669440;","highlight_start":1,"highlight_end":70},{"text":"                                            match current_block {","highlight_start":1,"highlight_end":66},{"text":"                                                6455255476181645667 => {","highlight_start":1,"highlight_end":73},{"text":"                                                    panic(b\"decompress:unexpected error\\x00\"","highlight_start":1,"highlight_end":93},{"text":"                                                              as *const u8 as","highlight_start":1,"highlight_end":78},{"text":"                                                              *const std::os::raw::c_char);","highlight_start":1,"highlight_end":92},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                3642457097893642164 => {","highlight_start":1,"highlight_end":73},{"text":"                                                    configError();","highlight_start":1,"highlight_end":67},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                10766414566319669440 => {","highlight_start":1,"highlight_end":74},{"text":"                                                    crcError();","highlight_start":1,"highlight_end":64},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                16178635849926953562 => {","highlight_start":1,"highlight_end":74},{"text":"                                                    outOfMemory();","highlight_start":1,"highlight_end":67},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                5517467152645906530 => {","highlight_start":1,"highlight_end":73},{"text":"                                                    compressedStreamEOF();","highlight_start":1,"highlight_end":75},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                _ => {","highlight_start":1,"highlight_end":55},{"text":"                                                    if zStream != __stdinp {","highlight_start":1,"highlight_end":77},{"text":"                                                        fclose(zStream);","highlight_start":1,"highlight_end":73},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                    if stream != __stdoutp {","highlight_start":1,"highlight_end":77},{"text":"                                                        fclose(stream);","highlight_start":1,"highlight_end":72},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                    if streamNo ==","highlight_start":1,"highlight_end":67},{"text":"                                                           1 as std::os::raw::c_int {","highlight_start":1,"highlight_end":86},{"text":"                                                        return 0 as","highlight_start":1,"highlight_end":68},{"text":"                                                                   std::os::raw::c_int","highlight_start":1,"highlight_end":87},{"text":"                                                                   as Bool","highlight_start":1,"highlight_end":75},{"text":"                                                    } else {","highlight_start":1,"highlight_end":61},{"text":"                                                        if noisy != 0 {","highlight_start":1,"highlight_end":72},{"text":"                                                            fprintf(__stderrp,","highlight_start":1,"highlight_end":79},{"text":"                                                                    b\"\\n%s: %s: trailing garbage after EOF ignored\\n\\x00\"","highlight_start":1,"highlight_end":122},{"text":"                                                                        as","highlight_start":1,"highlight_end":75},{"text":"                                                                        *const u8","highlight_start":1,"highlight_end":82},{"text":"                                                                        as","highlight_start":1,"highlight_end":75},{"text":"                                                                        *const std::os::raw::c_char,","highlight_start":1,"highlight_end":101},{"text":"                                                                    progName,","highlight_start":1,"highlight_end":78},{"text":"                                                                    inName.as_mut_ptr());","highlight_start":1,"highlight_end":90},{"text":"                                                        }","highlight_start":1,"highlight_end":58},{"text":"                                                        return 1 as","highlight_start":1,"highlight_end":68},{"text":"                                                                   std::os::raw::c_int","highlight_start":1,"highlight_end":87},{"text":"                                                                   as Bool","highlight_start":1,"highlight_end":75},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                            }","highlight_start":1,"highlight_end":46},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                        -3 => {","highlight_start":1,"highlight_end":48},{"text":"                                            current_block =","highlight_start":1,"highlight_end":60},{"text":"                                                16178635849926953562;","highlight_start":1,"highlight_end":70},{"text":"                                            match current_block {","highlight_start":1,"highlight_end":66},{"text":"                                                6455255476181645667 => {","highlight_start":1,"highlight_end":73},{"text":"                                                    panic(b\"decompress:unexpected error\\x00\"","highlight_start":1,"highlight_end":93},{"text":"                                                              as *const u8 as","highlight_start":1,"highlight_end":78},{"text":"                                                              *const std::os::raw::c_char);","highlight_start":1,"highlight_end":92},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                3642457097893642164 => {","highlight_start":1,"highlight_end":73},{"text":"                                                    configError();","highlight_start":1,"highlight_end":67},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                10766414566319669440 => {","highlight_start":1,"highlight_end":74},{"text":"                                                    crcError();","highlight_start":1,"highlight_end":64},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                16178635849926953562 => {","highlight_start":1,"highlight_end":74},{"text":"                                                    outOfMemory();","highlight_start":1,"highlight_end":67},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                5517467152645906530 => {","highlight_start":1,"highlight_end":73},{"text":"                                                    compressedStreamEOF();","highlight_start":1,"highlight_end":75},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                _ => {","highlight_start":1,"highlight_end":55},{"text":"                                                    if zStream != __stdinp {","highlight_start":1,"highlight_end":77},{"text":"                                                        fclose(zStream);","highlight_start":1,"highlight_end":73},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                    if stream != __stdoutp {","highlight_start":1,"highlight_end":77},{"text":"                                                        fclose(stream);","highlight_start":1,"highlight_end":72},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                    if streamNo ==","highlight_start":1,"highlight_end":67},{"text":"                                                           1 as std::os::raw::c_int {","highlight_start":1,"highlight_end":86},{"text":"                                                        return 0 as","highlight_start":1,"highlight_end":68},{"text":"                                                                   std::os::raw::c_int","highlight_start":1,"highlight_end":87},{"text":"                                                                   as Bool","highlight_start":1,"highlight_end":75},{"text":"                                                    } else {","highlight_start":1,"highlight_end":61},{"text":"                                                        if noisy != 0 {","highlight_start":1,"highlight_end":72},{"text":"                                                            fprintf(__stderrp,","highlight_start":1,"highlight_end":79},{"text":"                                                                    b\"\\n%s: %s: trailing garbage after EOF ignored\\n\\x00\"","highlight_start":1,"highlight_end":122},{"text":"                                                                        as","highlight_start":1,"highlight_end":75},{"text":"                                                                        *const u8","highlight_start":1,"highlight_end":82},{"text":"                                                                        as","highlight_start":1,"highlight_end":75},{"text":"                                                                        *const std::os::raw::c_char,","highlight_start":1,"highlight_end":101},{"text":"                                                                    progName,","highlight_start":1,"highlight_end":78},{"text":"                                                                    inName.as_mut_ptr());","highlight_start":1,"highlight_end":90},{"text":"                                                        }","highlight_start":1,"highlight_end":58},{"text":"                                                        return 1 as","highlight_start":1,"highlight_end":68},{"text":"                                                                   std::os::raw::c_int","highlight_start":1,"highlight_end":87},{"text":"                                                                   as Bool","highlight_start":1,"highlight_end":75},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                            }","highlight_start":1,"highlight_end":46},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                        -7 => {","highlight_start":1,"highlight_end":48},{"text":"                                            current_block =","highlight_start":1,"highlight_end":60},{"text":"                                                5517467152645906530;","highlight_start":1,"highlight_end":69},{"text":"                                            match current_block {","highlight_start":1,"highlight_end":66},{"text":"                                                6455255476181645667 => {","highlight_start":1,"highlight_end":73},{"text":"                                                    panic(b\"decompress:unexpected error\\x00\"","highlight_start":1,"highlight_end":93},{"text":"                                                              as *const u8 as","highlight_start":1,"highlight_end":78},{"text":"                                                              *const std::os::raw::c_char);","highlight_start":1,"highlight_end":92},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                3642457097893642164 => {","highlight_start":1,"highlight_end":73},{"text":"                                                    configError();","highlight_start":1,"highlight_end":67},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                10766414566319669440 => {","highlight_start":1,"highlight_end":74},{"text":"                                                    crcError();","highlight_start":1,"highlight_end":64},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                16178635849926953562 => {","highlight_start":1,"highlight_end":74},{"text":"                                                    outOfMemory();","highlight_start":1,"highlight_end":67},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                5517467152645906530 => {","highlight_start":1,"highlight_end":73},{"text":"                                                    compressedStreamEOF();","highlight_start":1,"highlight_end":75},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                _ => {","highlight_start":1,"highlight_end":55},{"text":"                                                    if zStream != __stdinp {","highlight_start":1,"highlight_end":77},{"text":"                                                        fclose(zStream);","highlight_start":1,"highlight_end":73},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                    if stream != __stdoutp {","highlight_start":1,"highlight_end":77},{"text":"                                                        fclose(stream);","highlight_start":1,"highlight_end":72},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                    if streamNo ==","highlight_start":1,"highlight_end":67},{"text":"                                                           1 as std::os::raw::c_int {","highlight_start":1,"highlight_end":86},{"text":"                                                        return 0 as","highlight_start":1,"highlight_end":68},{"text":"                                                                   std::os::raw::c_int","highlight_start":1,"highlight_end":87},{"text":"                                                                   as Bool","highlight_start":1,"highlight_end":75},{"text":"                                                    } else {","highlight_start":1,"highlight_end":61},{"text":"                                                        if noisy != 0 {","highlight_start":1,"highlight_end":72},{"text":"                                                            fprintf(__stderrp,","highlight_start":1,"highlight_end":79},{"text":"                                                                    b\"\\n%s: %s: trailing garbage after EOF ignored\\n\\x00\"","highlight_start":1,"highlight_end":122},{"text":"                                                                        as","highlight_start":1,"highlight_end":75},{"text":"                                                                        *const u8","highlight_start":1,"highlight_end":82},{"text":"                                                                        as","highlight_start":1,"highlight_end":75},{"text":"                                                                        *const std::os::raw::c_char,","highlight_start":1,"highlight_end":101},{"text":"                                                                    progName,","highlight_start":1,"highlight_end":78},{"text":"                                                                    inName.as_mut_ptr());","highlight_start":1,"highlight_end":90},{"text":"                                                        }","highlight_start":1,"highlight_end":58},{"text":"                                                        return 1 as","highlight_start":1,"highlight_end":68},{"text":"                                                                   std::os::raw::c_int","highlight_start":1,"highlight_end":87},{"text":"                                                                   as Bool","highlight_start":1,"highlight_end":75},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                            }","highlight_start":1,"highlight_end":46},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                        -5 => {","highlight_start":1,"highlight_end":48},{"text":"                                            current_block =","highlight_start":1,"highlight_end":60},{"text":"                                                7372986856480808103;","highlight_start":1,"highlight_end":69},{"text":"                                            match current_block {","highlight_start":1,"highlight_end":66},{"text":"                                                6455255476181645667 => {","highlight_start":1,"highlight_end":73},{"text":"                                                    panic(b\"decompress:unexpected error\\x00\"","highlight_start":1,"highlight_end":93},{"text":"                                                              as *const u8 as","highlight_start":1,"highlight_end":78},{"text":"                                                              *const std::os::raw::c_char);","highlight_start":1,"highlight_end":92},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                3642457097893642164 => {","highlight_start":1,"highlight_end":73},{"text":"                                                    configError();","highlight_start":1,"highlight_end":67},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                10766414566319669440 => {","highlight_start":1,"highlight_end":74},{"text":"                                                    crcError();","highlight_start":1,"highlight_end":64},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                16178635849926953562 => {","highlight_start":1,"highlight_end":74},{"text":"                                                    outOfMemory();","highlight_start":1,"highlight_end":67},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                5517467152645906530 => {","highlight_start":1,"highlight_end":73},{"text":"                                                    compressedStreamEOF();","highlight_start":1,"highlight_end":75},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                _ => {","highlight_start":1,"highlight_end":55},{"text":"                                                    if zStream != __stdinp {","highlight_start":1,"highlight_end":77},{"text":"                                                        fclose(zStream);","highlight_start":1,"highlight_end":73},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                    if stream != __stdoutp {","highlight_start":1,"highlight_end":77},{"text":"                                                        fclose(stream);","highlight_start":1,"highlight_end":72},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                    if streamNo ==","highlight_start":1,"highlight_end":67},{"text":"                                                           1 as std::os::raw::c_int {","highlight_start":1,"highlight_end":86},{"text":"                                                        return 0 as","highlight_start":1,"highlight_end":68},{"text":"                                                                   std::os::raw::c_int","highlight_start":1,"highlight_end":87},{"text":"                                                                   as Bool","highlight_start":1,"highlight_end":75},{"text":"                                                    } else {","highlight_start":1,"highlight_end":61},{"text":"                                                        if noisy != 0 {","highlight_start":1,"highlight_end":72},{"text":"                                                            fprintf(__stderrp,","highlight_start":1,"highlight_end":79},{"text":"                                                                    b\"\\n%s: %s: trailing garbage after EOF ignored\\n\\x00\"","highlight_start":1,"highlight_end":122},{"text":"                                                                        as","highlight_start":1,"highlight_end":75},{"text":"                                                                        *const u8","highlight_start":1,"highlight_end":82},{"text":"                                                                        as","highlight_start":1,"highlight_end":75},{"text":"                                                                        *const std::os::raw::c_char,","highlight_start":1,"highlight_end":101},{"text":"                                                                    progName,","highlight_start":1,"highlight_end":78},{"text":"                                                                    inName.as_mut_ptr());","highlight_start":1,"highlight_end":90},{"text":"                                                        }","highlight_start":1,"highlight_end":58},{"text":"                                                        return 1 as","highlight_start":1,"highlight_end":68},{"text":"                                                                   std::os::raw::c_int","highlight_start":1,"highlight_end":87},{"text":"                                                                   as Bool","highlight_start":1,"highlight_end":75},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                            }","highlight_start":1,"highlight_end":46},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                        _ => {","highlight_start":1,"highlight_end":47},{"text":"                                            current_block =","highlight_start":1,"highlight_end":60},{"text":"                                                6455255476181645667;","highlight_start":1,"highlight_end":69},{"text":"                                            match current_block {","highlight_start":1,"highlight_end":66},{"text":"                                                6455255476181645667 => {","highlight_start":1,"highlight_end":73},{"text":"                                                    panic(b\"decompress:unexpected error\\x00\"","highlight_start":1,"highlight_end":93},{"text":"                                                              as *const u8 as","highlight_start":1,"highlight_end":78},{"text":"                                                              *const std::os::raw::c_char);","highlight_start":1,"highlight_end":92},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                3642457097893642164 => {","highlight_start":1,"highlight_end":73},{"text":"                                                    configError();","highlight_start":1,"highlight_end":67},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                10766414566319669440 => {","highlight_start":1,"highlight_end":74},{"text":"                                                    crcError();","highlight_start":1,"highlight_end":64},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                16178635849926953562 => {","highlight_start":1,"highlight_end":74},{"text":"                                                    outOfMemory();","highlight_start":1,"highlight_end":67},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                5517467152645906530 => {","highlight_start":1,"highlight_end":73},{"text":"                                                    compressedStreamEOF();","highlight_start":1,"highlight_end":75},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                _ => {","highlight_start":1,"highlight_end":55},{"text":"                                                    if zStream != __stdinp {","highlight_start":1,"highlight_end":77},{"text":"                                                        fclose(zStream);","highlight_start":1,"highlight_end":73},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                    if stream != __stdoutp {","highlight_start":1,"highlight_end":77},{"text":"                                                        fclose(stream);","highlight_start":1,"highlight_end":72},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                    if streamNo ==","highlight_start":1,"highlight_end":67},{"text":"                                                           1 as std::os::raw::c_int {","highlight_start":1,"highlight_end":86},{"text":"                                                        return 0 as","highlight_start":1,"highlight_end":68},{"text":"                                                                   std::os::raw::c_int","highlight_start":1,"highlight_end":87},{"text":"                                                                   as Bool","highlight_start":1,"highlight_end":75},{"text":"                                                    } else {","highlight_start":1,"highlight_end":61},{"text":"                                                        if noisy != 0 {","highlight_start":1,"highlight_end":72},{"text":"                                                            fprintf(__stderrp,","highlight_start":1,"highlight_end":79},{"text":"                                                                    b\"\\n%s: %s: trailing garbage after EOF ignored\\n\\x00\"","highlight_start":1,"highlight_end":122},{"text":"                                                                        as","highlight_start":1,"highlight_end":75},{"text":"                                                                        *const u8","highlight_start":1,"highlight_end":82},{"text":"                                                                        as","highlight_start":1,"highlight_end":75},{"text":"                                                                        *const std::os::raw::c_char,","highlight_start":1,"highlight_end":101},{"text":"                                                                    progName,","highlight_start":1,"highlight_end":78},{"text":"                                                                    inName.as_mut_ptr());","highlight_start":1,"highlight_end":90},{"text":"                                                        }","highlight_start":1,"highlight_end":58},{"text":"                                                        return 1 as","highlight_start":1,"highlight_end":68},{"text":"                                                                   std::os::raw::c_int","highlight_start":1,"highlight_end":87},{"text":"                                                                   as Bool","highlight_start":1,"highlight_end":75},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                            }","highlight_start":1,"highlight_end":46},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                                _ => {","highlight_start":1,"highlight_end":39},{"text":"                                    if !(ferror(zStream) != 0) {","highlight_start":1,"highlight_end":65},{"text":"                                        if stream != __stdoutp {","highlight_start":1,"highlight_end":65},{"text":"                                            let mut fd: Int32 =","highlight_start":1,"highlight_end":64},{"text":"                                                fileno(stream);","highlight_start":1,"highlight_end":64},{"text":"                                            if fd < 0 as std::os::raw::c_int {","highlight_start":1,"highlight_end":79},{"text":"                                                current_block =","highlight_start":1,"highlight_end":64},{"text":"                                                    5049394217699438129;","highlight_start":1,"highlight_end":73},{"text":"                                            } else {","highlight_start":1,"highlight_end":53},{"text":"                                                applySavedFileAttrToOutputFile(fd);","highlight_start":1,"highlight_end":84},{"text":"                                                current_block =","highlight_start":1,"highlight_end":64},{"text":"                                                    14832935472441733737;","highlight_start":1,"highlight_end":74},{"text":"                                            }","highlight_start":1,"highlight_end":46},{"text":"                                        } else {","highlight_start":1,"highlight_end":49},{"text":"                                            current_block =","highlight_start":1,"highlight_end":60},{"text":"                                                14832935472441733737;","highlight_start":1,"highlight_end":70},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                        match current_block {","highlight_start":1,"highlight_end":62},{"text":"                                            5049394217699438129 => { }","highlight_start":1,"highlight_end":71},{"text":"                                            _ => {","highlight_start":1,"highlight_end":51},{"text":"                                                ret = fclose(zStream);","highlight_start":1,"highlight_end":71},{"text":"                                                if !(ret ==","highlight_start":1,"highlight_end":60},{"text":"                                                         -(1 as std::os::raw::c_int))","highlight_start":1,"highlight_end":86},{"text":"                                                   {","highlight_start":1,"highlight_end":53},{"text":"                                                    if !(ferror(stream) != 0)","highlight_start":1,"highlight_end":78},{"text":"                                                       {","highlight_start":1,"highlight_end":57},{"text":"                                                        ret = fflush(stream);","highlight_start":1,"highlight_end":78},{"text":"                                                        if !(ret !=","highlight_start":1,"highlight_end":68},{"text":"                                                                 0 as","highlight_start":1,"highlight_end":70},{"text":"                                                                     std::os::raw::c_int)","highlight_start":1,"highlight_end":90},{"text":"                                                           {","highlight_start":1,"highlight_end":61},{"text":"                                                            if stream !=","highlight_start":1,"highlight_end":73},{"text":"                                                                   __stdoutp {","highlight_start":1,"highlight_end":79},{"text":"                                                                ret =","highlight_start":1,"highlight_end":70},{"text":"                                                                    fclose(stream);","highlight_start":1,"highlight_end":84},{"text":"                                                                outputHandleJustInCase","highlight_start":1,"highlight_end":87},{"text":"                                                                    =","highlight_start":1,"highlight_end":70},{"text":"                                                                    0 as","highlight_start":1,"highlight_end":73},{"text":"                                                                        *mut FILE;","highlight_start":1,"highlight_end":83},{"text":"                                                                if ret ==","highlight_start":1,"highlight_end":74},{"text":"                                                                       -(1 as","highlight_start":1,"highlight_end":78},{"text":"                                                                             std::os::raw::c_int)","highlight_start":1,"highlight_end":98},{"text":"                                                                   {","highlight_start":1,"highlight_end":69},{"text":"                                                                    current_block","highlight_start":1,"highlight_end":82},{"text":"                                                                        =","highlight_start":1,"highlight_end":74},{"text":"                                                                        5049394217699438129;","highlight_start":1,"highlight_end":93},{"text":"                                                                } else {","highlight_start":1,"highlight_end":73},{"text":"                                                                    current_block","highlight_start":1,"highlight_end":82},{"text":"                                                                        =","highlight_start":1,"highlight_end":74},{"text":"                                                                        14775119014532381840;","highlight_start":1,"highlight_end":94},{"text":"                                                                }","highlight_start":1,"highlight_end":66},{"text":"                                                            } else {","highlight_start":1,"highlight_end":69},{"text":"                                                                current_block","highlight_start":1,"highlight_end":78},{"text":"                                                                    =","highlight_start":1,"highlight_end":70},{"text":"                                                                    14775119014532381840;","highlight_start":1,"highlight_end":90},{"text":"                                                            }","highlight_start":1,"highlight_end":62},{"text":"                                                            match current_block","highlight_start":1,"highlight_end":80},{"text":"                                                                {","highlight_start":1,"highlight_end":66},{"text":"                                                                5049394217699438129","highlight_start":1,"highlight_end":84},{"text":"                                                                => {","highlight_start":1,"highlight_end":69},{"text":"                                                                }","highlight_start":1,"highlight_end":66},{"text":"                                                                _ => {","highlight_start":1,"highlight_end":71},{"text":"                                                                    outputHandleJustInCase","highlight_start":1,"highlight_end":91},{"text":"                                                                        =","highlight_start":1,"highlight_end":74},{"text":"                                                                        0 as","highlight_start":1,"highlight_end":77},{"text":"                                                                            *mut FILE;","highlight_start":1,"highlight_end":87},{"text":"                                                                    if verbosity","highlight_start":1,"highlight_end":81},{"text":"                                                                           >=","highlight_start":1,"highlight_end":78},{"text":"                                                                           2","highlight_start":1,"highlight_end":77},{"text":"                                                                               as","highlight_start":1,"highlight_end":82},{"text":"                                                                               std::os::raw::c_int","highlight_start":1,"highlight_end":99},{"text":"                                                                       {","highlight_start":1,"highlight_end":73},{"text":"                                                                        fprintf(__stderrp,","highlight_start":1,"highlight_end":91},{"text":"                                                                                b\"\\n    \\x00\"","highlight_start":1,"highlight_end":94},{"text":"                                                                                    as","highlight_start":1,"highlight_end":87},{"text":"                                                                                    *const u8","highlight_start":1,"highlight_end":94},{"text":"                                                                                    as","highlight_start":1,"highlight_end":87},{"text":"                                                                                    *const std::os::raw::c_char);","highlight_start":1,"highlight_end":114},{"text":"                                                                    }","highlight_start":1,"highlight_end":70},{"text":"                                                                    return 1","highlight_start":1,"highlight_end":77},{"text":"                                                                               as","highlight_start":1,"highlight_end":82},{"text":"                                                                               std::os::raw::c_int","highlight_start":1,"highlight_end":99},{"text":"                                                                               as","highlight_start":1,"highlight_end":82},{"text":"                                                                               Bool","highlight_start":1,"highlight_end":84},{"text":"                                                                }","highlight_start":1,"highlight_end":66},{"text":"                                                            }","highlight_start":1,"highlight_end":62},{"text":"                                                        }","highlight_start":1,"highlight_end":58},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                            }","highlight_start":1,"highlight_end":46},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":"if !(ferror(stream) != 0) && !(ferror(zStream) != 0) {\n        's_51:\n            loop  {\n                if !(1 as std::os::raw::c_int as Bool != 0) {\n                    current_block = 926243229934402080;\n                    break ;\n                }\n                bzf =\n                    BZ2_bzReadOpen(&mut bzerr, zStream, verbosity,\n                                   smallMode as std::os::raw::c_int,\n                                   unused.as_mut_ptr() as\n                                       *mut std::os::raw::c_void, nUnused);\n                if bzf.is_null() || bzerr != 0 as std::os::raw::c_int {\n                    current_block = 673979509383251364;\n                    break ;\n                }\n                streamNo += 1;\n                while bzerr == 0 as std::os::raw::c_int {\n                    nread =\n                        BZ2_bzRead(&mut bzerr, bzf,\n                                   obuf.as_mut_ptr() as *mut std::os::raw::c_void,\n                                   5000 as std::os::raw::c_int);\n                    if bzerr == -(5 as std::os::raw::c_int) {\n                        current_block = 18063049917807660484;\n                        break 's_51 ;\n                    }\n                    if (bzerr == 0 as std::os::raw::c_int ||\n                            bzerr == 4 as std::os::raw::c_int) &&\n                           nread > 0 as std::os::raw::c_int {\n                        fwrite(obuf.as_mut_ptr() as *const std::os::raw::c_void,\n                               ::std::mem::size_of::<UChar>() as\n                                   std::os::raw::c_ulong, nread as std::os::raw::c_ulong,\n                               stream);\n                    }\n                    if ferror(stream) != 0 {\n                        current_block = 5049394217699438129;\n                        break 's_51 ;\n                    }\n                }\n                if bzerr != 4 as std::os::raw::c_int {\n                    current_block = 673979509383251364;\n                    break ;\n                }\n                BZ2_bzReadGetUnused(&mut bzerr, bzf, &mut unusedTmpV,\n                                    &mut nUnused);\n                if bzerr != 0 as std::os::raw::c_int {\n                    panic(b\"decompress:bzReadGetUnused\\x00\" as *const u8\n                              as *const std::os::raw::c_char);\n                }\n                unusedTmp = unusedTmpV as *mut UChar;\n                i = 0 as std::os::raw::c_int;\n                while i < nUnused {\n                    unused[i as usize] = *unusedTmp.offset(i as isize);\n                    i += 1\n                }\n                BZ2_bzReadClose(&mut bzerr, bzf);\n                if bzerr != 0 as std::os::raw::c_int {\n                    panic(b\"decompress:bzReadGetUnused\\x00\" as *const u8\n                              as *const std::os::raw::c_char);\n                }\n                if nUnused == 0 as std::os::raw::c_int &&\n                       myfeof(zStream) as std::os::raw::c_int != 0 {\n                    current_block = 926243229934402080;\n                    break ;\n                }\n            }\n        match current_block {\n            5049394217699438129 => { }\n            _ => {\n                match current_block {\n                    18063049917807660484 => {\n                        if forceOverwrite != 0 {\n                            rewind(zStream);\n                            loop  {\n                                if !(1 as std::os::raw::c_int as Bool != 0) {\n                                    current_block = 926243229934402080;\n                                    break ;\n                                }\n                                if myfeof(zStream) != 0 {\n                                    current_block = 926243229934402080;\n                                    break ;\n                                }\n                                nread =\n                                    fread(obuf.as_mut_ptr() as\n                                              *mut std::os::raw::c_void,\n                                          ::std::mem::size_of::<UChar>()\n                                              as std::os::raw::c_ulong,\n                                          5000 as std::os::raw::c_int as\n                                              std::os::raw::c_ulong, zStream) as\n                                        Int32;\n                                if ferror(zStream) != 0 {\n                                    current_block = 5049394217699438129;\n                                    break ;\n                                }\n                                if nread > 0 as std::os::raw::c_int {\n                                    fwrite(obuf.as_mut_ptr() as\n                                               *const std::os::raw::c_void,\n                                           ::std::mem::size_of::<UChar>()\n                                               as std::os::raw::c_ulong,\n                                           nread as std::os::raw::c_ulong,\n                                           stream);\n                                }\n                                if ferror(stream) != 0 {\n                                    current_block = 5049394217699438129;\n                                    break ;\n                                }\n                            }\n                        } else { current_block = 673979509383251364; }\n                    }\n                    _ => { }\n                }\n                match current_block {\n                    5049394217699438129 => { }\n                    _ => {\n                        match current_block {\n                            673979509383251364 => {\n                                BZ2_bzReadClose(&mut bzerr_dummy, bzf);\n                                match bzerr {\n                                    -9 => {\n                                        current_block =\n                                            3642457097893642164;\n                                        match current_block {\n                                            6455255476181645667 => {\n                                                panic(b\"decompress:unexpected error\\x00\"\n                                                          as *const u8 as\n                                                          *const std::os::raw::c_char);\n                                            }\n                                            3642457097893642164 => {\n                                                configError();\n                                            }\n                                            10766414566319669440 => {\n                                                crcError();\n                                            }\n                                            16178635849926953562 => {\n                                                outOfMemory();\n                                            }\n                                            5517467152645906530 => {\n                                                compressedStreamEOF();\n                                            }\n                                            _ => {\n                                                if zStream != __stdinp {\n                                                    fclose(zStream);\n                                                }\n                                                if stream != __stdoutp {\n                                                    fclose(stream);\n                                                }\n                                                if streamNo ==\n                                                       1 as std::os::raw::c_int {\n                                                    return 0 as\n                                                               std::os::raw::c_int\n                                                               as Bool\n                                                } else {\n                                                    if noisy != 0 {\n                                                        fprintf(__stderrp,\n                                                                b\"\\n%s: %s: trailing garbage after EOF ignored\\n\\x00\"\n                                                                    as\n                                                                    *const u8\n                                                                    as\n                                                                    *const std::os::raw::c_char,\n                                                                progName,\n                                                                inName.as_mut_ptr());\n                                                    }\n                                                    return 1 as\n                                                               std::os::raw::c_int\n                                                               as Bool\n                                                }\n                                            }\n                                        }\n                                    }\n                                    -6 => { }\n                                    -4 => {\n                                        current_block =\n                                            10766414566319669440;\n                                        match current_block {\n                                            6455255476181645667 => {\n                                                panic(b\"decompress:unexpected error\\x00\"\n                                                          as *const u8 as\n                                                          *const std::os::raw::c_char);\n                                            }\n                                            3642457097893642164 => {\n                                                configError();\n                                            }\n                                            10766414566319669440 => {\n                                                crcError();\n                                            }\n                                            16178635849926953562 => {\n                                                outOfMemory();\n                                            }\n                                            5517467152645906530 => {\n                                                compressedStreamEOF();\n                                            }\n                                            _ => {\n                                                if zStream != __stdinp {\n                                                    fclose(zStream);\n                                                }\n                                                if stream != __stdoutp {\n                                                    fclose(stream);\n                                                }\n                                                if streamNo ==\n                                                       1 as std::os::raw::c_int {\n                                                    return 0 as\n                                                               std::os::raw::c_int\n                                                               as Bool\n                                                } else {\n                                                    if noisy != 0 {\n                                                        fprintf(__stderrp,\n                                                                b\"\\n%s: %s: trailing garbage after EOF ignored\\n\\x00\"\n                                                                    as\n                                                                    *const u8\n                                                                    as\n                                                                    *const std::os::raw::c_char,\n                                                                progName,\n                                                                inName.as_mut_ptr());\n                                                    }\n                                                    return 1 as\n                                                               std::os::raw::c_int\n                                                               as Bool\n                                                }\n                                            }\n                                        }\n                                    }\n                                    -3 => {\n                                        current_block =\n                                            16178635849926953562;\n                                        match current_block {\n                                            6455255476181645667 => {\n                                                panic(b\"decompress:unexpected error\\x00\"\n                                                          as *const u8 as\n                                                          *const std::os::raw::c_char);\n                                            }\n                                            3642457097893642164 => {\n                                                configError();\n                                            }\n                                            10766414566319669440 => {\n                                                crcError();\n                                            }\n                                            16178635849926953562 => {\n                                                outOfMemory();\n                                            }\n                                            5517467152645906530 => {\n                                                compressedStreamEOF();\n                                            }\n                                            _ => {\n                                                if zStream != __stdinp {\n                                                    fclose(zStream);\n                                                }\n                                                if stream != __stdoutp {\n                                                    fclose(stream);\n                                                }\n                                                if streamNo ==\n                                                       1 as std::os::raw::c_int {\n                                                    return 0 as\n                                                               std::os::raw::c_int\n                                                               as Bool\n                                                } else {\n                                                    if noisy != 0 {\n                                                        fprintf(__stderrp,\n                                                                b\"\\n%s: %s: trailing garbage after EOF ignored\\n\\x00\"\n                                                                    as\n                                                                    *const u8\n                                                                    as\n                                                                    *const std::os::raw::c_char,\n                                                                progName,\n                                                                inName.as_mut_ptr());\n                                                    }\n                                                    return 1 as\n                                                               std::os::raw::c_int\n                                                               as Bool\n                                                }\n                                            }\n                                        }\n                                    }\n                                    -7 => {\n                                        current_block =\n                                            5517467152645906530;\n                                        match current_block {\n                                            6455255476181645667 => {\n                                                panic(b\"decompress:unexpected error\\x00\"\n                                                          as *const u8 as\n                                                          *const std::os::raw::c_char);\n                                            }\n                                            3642457097893642164 => {\n                                                configError();\n                                            }\n                                            10766414566319669440 => {\n                                                crcError();\n                                            }\n                                            16178635849926953562 => {\n                                                outOfMemory();\n                                            }\n                                            5517467152645906530 => {\n                                                compressedStreamEOF();\n                                            }\n                                            _ => {\n                                                if zStream != __stdinp {\n                                                    fclose(zStream);\n                                                }\n                                                if stream != __stdoutp {\n                                                    fclose(stream);\n                                                }\n                                                if streamNo ==\n                                                       1 as std::os::raw::c_int {\n                                                    return 0 as\n                                                               std::os::raw::c_int\n                                                               as Bool\n                                                } else {\n                                                    if noisy != 0 {\n                                                        fprintf(__stderrp,\n                                                                b\"\\n%s: %s: trailing garbage after EOF ignored\\n\\x00\"\n                                                                    as\n                                                                    *const u8\n                                                                    as\n                                                                    *const std::os::raw::c_char,\n                                                                progName,\n                                                                inName.as_mut_ptr());\n                                                    }\n                                                    return 1 as\n                                                               std::os::raw::c_int\n                                                               as Bool\n                                                }\n                                            }\n                                        }\n                                    }\n                                    -5 => {\n                                        current_block =\n                                            7372986856480808103;\n                                        match current_block {\n                                            6455255476181645667 => {\n                                                panic(b\"decompress:unexpected error\\x00\"\n                                                          as *const u8 as\n                                                          *const std::os::raw::c_char);\n                                            }\n                                            3642457097893642164 => {\n                                                configError();\n                                            }\n                                            10766414566319669440 => {\n                                                crcError();\n                                            }\n                                            16178635849926953562 => {\n                                                outOfMemory();\n                                            }\n                                            5517467152645906530 => {\n                                                compressedStreamEOF();\n                                            }\n                                            _ => {\n                                                if zStream != __stdinp {\n                                                    fclose(zStream);\n                                                }\n                                                if stream != __stdoutp {\n                                                    fclose(stream);\n                                                }\n                                                if streamNo ==\n                                                       1 as std::os::raw::c_int {\n                                                    return 0 as\n                                                               std::os::raw::c_int\n                                                               as Bool\n                                                } else {\n                                                    if noisy != 0 {\n                                                        fprintf(__stderrp,\n                                                                b\"\\n%s: %s: trailing garbage after EOF ignored\\n\\x00\"\n                                                                    as\n                                                                    *const u8\n                                                                    as\n                                                                    *const std::os::raw::c_char,\n                                                                progName,\n                                                                inName.as_mut_ptr());\n                                                    }\n                                                    return 1 as\n                                                               std::os::raw::c_int\n                                                               as Bool\n                                                }\n                                            }\n                                        }\n                                    }\n                                    _ => {\n                                        current_block =\n                                            6455255476181645667;\n                                        match current_block {\n                                            6455255476181645667 => {\n                                                panic(b\"decompress:unexpected error\\x00\"\n                                                          as *const u8 as\n                                                          *const std::os::raw::c_char);\n                                            }\n                                            3642457097893642164 => {\n                                                configError();\n                                            }\n                                            10766414566319669440 => {\n                                                crcError();\n                                            }\n                                            16178635849926953562 => {\n                                                outOfMemory();\n                                            }\n                                            5517467152645906530 => {\n                                                compressedStreamEOF();\n                                            }\n                                            _ => {\n                                                if zStream != __stdinp {\n                                                    fclose(zStream);\n                                                }\n                                                if stream != __stdoutp {\n                                                    fclose(stream);\n                                                }\n                                                if streamNo ==\n                                                       1 as std::os::raw::c_int {\n                                                    return 0 as\n                                                               std::os::raw::c_int\n                                                               as Bool\n                                                } else {\n                                                    if noisy != 0 {\n                                                        fprintf(__stderrp,\n                                                                b\"\\n%s: %s: trailing garbage after EOF ignored\\n\\x00\"\n                                                                    as\n                                                                    *const u8\n                                                                    as\n                                                                    *const std::os::raw::c_char,\n                                                                progName,\n                                                                inName.as_mut_ptr());\n                                                    }\n                                                    return 1 as\n                                                               std::os::raw::c_int\n                                                               as Bool\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            _ => {\n                                if !(ferror(zStream) != 0) {\n                                    if stream != __stdoutp {\n                                        let mut fd: Int32 =\n                                            fileno(stream);\n                                        if fd < 0 as std::os::raw::c_int {\n                                            current_block =\n                                                5049394217699438129;\n                                        } else {\n                                            applySavedFileAttrToOutputFile(fd);\n                                            current_block =\n                                                14832935472441733737;\n                                        }\n                                    } else {\n                                        current_block =\n                                            14832935472441733737;\n                                    }\n                                    match current_block {\n                                        5049394217699438129 => { }\n                                        _ => {\n                                            ret = fclose(zStream);\n                                            if !(ret ==\n                                                     -(1 as std::os::raw::c_int))\n                                               {\n                                                if !(ferror(stream) != 0)\n                                                   {\n                                                    ret = fflush(stream);\n                                                    if !(ret !=\n                                                             0 as\n                                                                 std::os::raw::c_int)\n                                                       {\n                                                        if stream !=\n                                                               __stdoutp {\n                                                            ret =\n                                                                fclose(stream);\n                                                            outputHandleJustInCase\n                                                                =\n                                                                0 as\n                                                                    *mut FILE;\n                                                            if ret ==\n                                                                   -(1 as\n                                                                         std::os::raw::c_int)\n                                                               {\n                                                                current_block\n                                                                    =\n                                                                    5049394217699438129;\n                                                            } else {\n                                                                current_block\n                                                                    =\n                                                                    14775119014532381840;\n                                                            }\n                                                        } else {\n                                                            current_block\n                                                                =\n                                                                14775119014532381840;\n                                                        }\n                                                        match current_block\n                                                            {\n                                                            5049394217699438129\n                                                            => {\n                                                            }\n                                                            _ => {\n                                                                outputHandleJustInCase\n                                                                    =\n                                                                    0 as\n                                                                        *mut FILE;\n                                                                if verbosity\n                                                                       >=\n                                                                       2\n                                                                           as\n                                                                           std::os::raw::c_int\n                                                                   {\n                                                                    fprintf(__stderrp,\n                                                                            b\"\\n    \\x00\"\n                                                                                as\n                                                                                *const u8\n                                                                                as\n                                                                                *const std::os::raw::c_char);\n                                                                }\n                                                                return 1\n                                                                           as\n                                                                           std::os::raw::c_int\n                                                                           as\n                                                                           Bool\n                                                            }\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this `if` statement can be collapsed\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:756:5\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m756\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    if !(ferror(stream) != 0) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m757\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if !(ferror(zStream) != 0) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m758\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            's_51:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m759\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                loop  {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1282\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1283\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_____^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: collapse nested if block\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m756\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[38;5;10mif !(ferror(stream) != 0) && !(ferror(zStream) != 0) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m757\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+         's_51:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m758\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+             loop  {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m759\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                 if !(1 as std::os::raw::c_int as Bool != 0) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m760\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                     current_block = 926243229934402080;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m761\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                     break ;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m762\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m763\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                 bzf =\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m764\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                     BZ2_bzReadOpen(&mut bzerr, zStream, verbosity,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m765\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                    smallMode as std::os::raw::c_int,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m766\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                    unused.as_mut_ptr() as\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m767\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                        *mut std::os::raw::c_void, nUnused);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m768\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                 if bzf.is_null() || bzerr != 0 as std::os::raw::c_int {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m769\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                     current_block = 673979509383251364;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m770\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                     break ;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m771\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m772\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                 streamNo += 1;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m773\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                 while bzerr == 0 as std::os::raw::c_int {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m774\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                     nread =\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m775\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                         BZ2_bzRead(&mut bzerr, bzf,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m776\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                    obuf.as_mut_ptr() as *mut std::os::raw::c_void,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m777\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                    5000 as std::os::raw::c_int);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m778\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                     if bzerr == -(5 as std::os::raw::c_int) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m779\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                         current_block = 18063049917807660484;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m780\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                         break 's_51 ;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m781\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                     }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m782\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                     if (bzerr == 0 as std::os::raw::c_int ||\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m783\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                             bzerr == 4 as std::os::raw::c_int) &&\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m784\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                            nread > 0 as std::os::raw::c_int {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m785\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                         fwrite(obuf.as_mut_ptr() as *const std::os::raw::c_void,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m786\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                ::std::mem::size_of::<UChar>() as\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m787\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                    std::os::raw::c_ulong, nread as std::os::raw::c_ulong,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m788\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                stream);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m789\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                     }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m790\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                     if ferror(stream) != 0 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m791\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                         current_block = 5049394217699438129;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m792\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                         break 's_51 ;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m793\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                     }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m794\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m795\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                 if bzerr != 4 as std::os::raw::c_int {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m796\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                     current_block = 673979509383251364;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m797\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                     break ;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m798\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m799\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                 BZ2_bzReadGetUnused(&mut bzerr, bzf, &mut unusedTmpV,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m800\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                     &mut nUnused);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m801\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                 if bzerr != 0 as std::os::raw::c_int {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m802\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                     panic(b\"decompress:bzReadGetUnused\\x00\" as *const u8\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m803\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                               as *const std::os::raw::c_char);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m804\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m805\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                 unusedTmp = unusedTmpV as *mut UChar;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m806\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                 i = 0 as std::os::raw::c_int;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m807\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                 while i < nUnused {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m808\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                     unused[i as usize] = *unusedTmp.offset(i as isize);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m809\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                     i += 1\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m810\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m811\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                 BZ2_bzReadClose(&mut bzerr, bzf);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m812\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                 if bzerr != 0 as std::os::raw::c_int {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m813\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                     panic(b\"decompress:bzReadGetUnused\\x00\" as *const u8\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m814\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                               as *const std::os::raw::c_char);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m815\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m816\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                 if nUnused == 0 as std::os::raw::c_int &&\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m817\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                        myfeof(zStream) as std::os::raw::c_int != 0 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m818\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                     current_block = 926243229934402080;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m819\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                     break ;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m820\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m821\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m822\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+         match current_block {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m823\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+             5049394217699438129 => { }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m824\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+             _ => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m825\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                 match current_block {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m826\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                     18063049917807660484 => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m827\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                         if forceOverwrite != 0 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m828\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                             rewind(zStream);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m829\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                             loop  {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m830\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                 if !(1 as std::os::raw::c_int as Bool != 0) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m831\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                     current_block = 926243229934402080;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m832\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                     break ;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m833\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m834\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                 if myfeof(zStream) != 0 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m835\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                     current_block = 926243229934402080;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m836\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                     break ;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m837\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m838\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                 nread =\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m839\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                     fread(obuf.as_mut_ptr() as\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m840\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                               *mut std::os::raw::c_void,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m841\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                           ::std::mem::size_of::<UChar>()\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m842\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                               as std::os::raw::c_ulong,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m843\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                           5000 as std::os::raw::c_int as\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m844\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                               std::os::raw::c_ulong, zStream) as\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m845\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                         Int32;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m846\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                 if ferror(zStream) != 0 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m847\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                     current_block = 5049394217699438129;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m848\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                     break ;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m849\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m850\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                 if nread > 0 as std::os::raw::c_int {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m851\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                     fwrite(obuf.as_mut_ptr() as\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m852\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                *const std::os::raw::c_void,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m853\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                            ::std::mem::size_of::<UChar>()\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m854\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                as std::os::raw::c_ulong,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m855\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                            nread as std::os::raw::c_ulong,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m856\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                            stream);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m857\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m858\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                 if ferror(stream) != 0 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m859\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                     current_block = 5049394217699438129;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m860\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                     break ;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m861\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m862\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m863\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                         } else { current_block = 673979509383251364; }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m864\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                     }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m865\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                     _ => { }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m866\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m867\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                 match current_block {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m868\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                     5049394217699438129 => { }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m869\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                     _ => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m870\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                         match current_block {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m871\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                             673979509383251364 => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m872\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                 BZ2_bzReadClose(&mut bzerr_dummy, bzf);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m873\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                 match bzerr {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m874\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                     -9 => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m875\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                         current_block =\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m876\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                             3642457097893642164;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m877\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                         match current_block {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m878\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                             6455255476181645667 => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m879\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 panic(b\"decompress:unexpected error\\x00\"\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m880\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                           as *const u8 as\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m881\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                           *const std::os::raw::c_char);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m882\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m883\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                             3642457097893642164 => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m884\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 configError();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m885\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m886\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                             10766414566319669440 => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m887\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 crcError();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m888\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m889\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                             16178635849926953562 => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m890\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 outOfMemory();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m891\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m892\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                             5517467152645906530 => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m893\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 compressedStreamEOF();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m894\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m895\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                             _ => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m896\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 if zStream != __stdinp {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m897\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     fclose(zStream);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m898\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m899\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 if stream != __stdoutp {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m900\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     fclose(stream);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m901\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m902\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 if streamNo ==\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m903\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                        1 as std::os::raw::c_int {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m904\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     return 0 as\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m905\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                std::os::raw::c_int\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m906\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                as Bool\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m907\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 } else {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m908\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     if noisy != 0 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m909\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                         fprintf(__stderrp,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m910\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                 b\"\\n%s: %s: trailing garbage after EOF ignored\\n\\x00\"\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m911\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                     as\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m912\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                     *const u8\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m913\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                     as\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m914\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                     *const std::os::raw::c_char,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m915\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                 progName,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m916\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                 inName.as_mut_ptr());\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m917\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m918\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     return 1 as\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m919\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                std::os::raw::c_int\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m920\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                as Bool\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m921\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m922\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m923\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                         }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m924\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                     }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m925\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                     -6 => { }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m926\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                     -4 => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m927\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                         current_block =\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m928\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                             10766414566319669440;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m929\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                         match current_block {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m930\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                             6455255476181645667 => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m931\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 panic(b\"decompress:unexpected error\\x00\"\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m932\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                           as *const u8 as\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m933\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                           *const std::os::raw::c_char);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m934\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m935\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                             3642457097893642164 => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m936\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 configError();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m937\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m938\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                             10766414566319669440 => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m939\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 crcError();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m940\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m941\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                             16178635849926953562 => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m942\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 outOfMemory();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m943\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m944\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                             5517467152645906530 => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m945\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 compressedStreamEOF();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m946\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m947\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                             _ => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m948\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 if zStream != __stdinp {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m949\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     fclose(zStream);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m950\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m951\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 if stream != __stdoutp {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m952\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     fclose(stream);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m953\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m954\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 if streamNo ==\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m955\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                        1 as std::os::raw::c_int {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m956\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     return 0 as\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m957\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                std::os::raw::c_int\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m958\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                as Bool\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m959\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 } else {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m960\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     if noisy != 0 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m961\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                         fprintf(__stderrp,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m962\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                 b\"\\n%s: %s: trailing garbage after EOF ignored\\n\\x00\"\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m963\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                     as\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m964\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                     *const u8\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m965\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                     as\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m966\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                     *const std::os::raw::c_char,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m967\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                 progName,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m968\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                 inName.as_mut_ptr());\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m969\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m970\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     return 1 as\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m971\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                std::os::raw::c_int\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m972\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                as Bool\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m973\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m974\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m975\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                         }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m976\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                     }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m977\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                     -3 => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m978\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                         current_block =\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m979\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                             16178635849926953562;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m980\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                         match current_block {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m981\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                             6455255476181645667 => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m982\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 panic(b\"decompress:unexpected error\\x00\"\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m983\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                           as *const u8 as\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m984\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                           *const std::os::raw::c_char);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m985\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m986\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                             3642457097893642164 => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m987\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 configError();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m988\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m989\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                             10766414566319669440 => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m990\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 crcError();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m991\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m992\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                             16178635849926953562 => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m993\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 outOfMemory();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m994\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m995\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                             5517467152645906530 => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m996\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 compressedStreamEOF();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m997\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m998\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                             _ => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m999\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 if zStream != __stdinp {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1000\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     fclose(zStream);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1001\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1002\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 if stream != __stdoutp {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1003\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     fclose(stream);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1004\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1005\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 if streamNo ==\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1006\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                        1 as std::os::raw::c_int {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1007\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     return 0 as\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1008\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                std::os::raw::c_int\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1009\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                as Bool\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1010\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 } else {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1011\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     if noisy != 0 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1012\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                         fprintf(__stderrp,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1013\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                 b\"\\n%s: %s: trailing garbage after EOF ignored\\n\\x00\"\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1014\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                     as\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1015\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                     *const u8\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1016\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                     as\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1017\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                     *const std::os::raw::c_char,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1018\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                 progName,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1019\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                 inName.as_mut_ptr());\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1020\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1021\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     return 1 as\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1022\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                std::os::raw::c_int\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1023\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                as Bool\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1024\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1025\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1026\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                         }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1027\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                     }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1028\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                     -7 => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1029\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                         current_block =\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1030\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             5517467152645906530;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1031\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                         match current_block {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1032\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             6455255476181645667 => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1033\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 panic(b\"decompress:unexpected error\\x00\"\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1034\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                           as *const u8 as\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1035\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                           *const std::os::raw::c_char);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1036\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1037\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             3642457097893642164 => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1038\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 configError();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1039\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1040\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             10766414566319669440 => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1041\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 crcError();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1042\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1043\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             16178635849926953562 => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1044\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 outOfMemory();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1045\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1046\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             5517467152645906530 => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1047\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 compressedStreamEOF();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1048\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1049\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             _ => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1050\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 if zStream != __stdinp {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1051\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     fclose(zStream);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1052\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1053\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 if stream != __stdoutp {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1054\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     fclose(stream);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1055\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1056\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 if streamNo ==\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1057\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                        1 as std::os::raw::c_int {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1058\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     return 0 as\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1059\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                std::os::raw::c_int\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1060\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                as Bool\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1061\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 } else {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1062\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     if noisy != 0 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1063\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                         fprintf(__stderrp,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1064\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                 b\"\\n%s: %s: trailing garbage after EOF ignored\\n\\x00\"\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1065\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                     as\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1066\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                     *const u8\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1067\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                     as\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1068\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                     *const std::os::raw::c_char,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1069\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                 progName,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1070\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                 inName.as_mut_ptr());\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1071\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1072\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     return 1 as\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1073\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                std::os::raw::c_int\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1074\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                as Bool\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1075\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1076\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1077\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                         }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1078\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                     }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1079\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                     -5 => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1080\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                         current_block =\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1081\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             7372986856480808103;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1082\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                         match current_block {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1083\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             6455255476181645667 => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1084\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 panic(b\"decompress:unexpected error\\x00\"\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1085\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                           as *const u8 as\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1086\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                           *const std::os::raw::c_char);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1087\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1088\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             3642457097893642164 => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1089\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 configError();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1090\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1091\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             10766414566319669440 => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1092\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 crcError();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1093\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1094\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             16178635849926953562 => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1095\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 outOfMemory();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1096\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1097\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             5517467152645906530 => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1098\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 compressedStreamEOF();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1099\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1100\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             _ => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1101\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 if zStream != __stdinp {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1102\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     fclose(zStream);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1103\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1104\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 if stream != __stdoutp {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1105\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     fclose(stream);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1106\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1107\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 if streamNo ==\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1108\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                        1 as std::os::raw::c_int {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1109\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     return 0 as\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1110\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                std::os::raw::c_int\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1111\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                as Bool\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1112\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 } else {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1113\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     if noisy != 0 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1114\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                         fprintf(__stderrp,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1115\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                 b\"\\n%s: %s: trailing garbage after EOF ignored\\n\\x00\"\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1116\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                     as\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1117\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                     *const u8\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1118\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                     as\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1119\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                     *const std::os::raw::c_char,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1120\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                 progName,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1121\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                 inName.as_mut_ptr());\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1122\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1123\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     return 1 as\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1124\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                std::os::raw::c_int\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1125\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                as Bool\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1126\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1127\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1128\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                         }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1129\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                     }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1130\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                     _ => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1131\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                         current_block =\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1132\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             6455255476181645667;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1133\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                         match current_block {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1134\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             6455255476181645667 => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1135\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 panic(b\"decompress:unexpected error\\x00\"\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1136\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                           as *const u8 as\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1137\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                           *const std::os::raw::c_char);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1138\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1139\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             3642457097893642164 => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1140\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 configError();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1141\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1142\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             10766414566319669440 => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1143\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 crcError();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1144\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1145\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             16178635849926953562 => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1146\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 outOfMemory();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1147\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1148\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             5517467152645906530 => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1149\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 compressedStreamEOF();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1150\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1151\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             _ => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1152\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 if zStream != __stdinp {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1153\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     fclose(zStream);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1154\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1155\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 if stream != __stdoutp {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1156\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     fclose(stream);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1157\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1158\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 if streamNo ==\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1159\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                        1 as std::os::raw::c_int {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1160\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     return 0 as\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1161\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                std::os::raw::c_int\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1162\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                as Bool\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1163\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 } else {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1164\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     if noisy != 0 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1165\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                         fprintf(__stderrp,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1166\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                 b\"\\n%s: %s: trailing garbage after EOF ignored\\n\\x00\"\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1167\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                     as\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1168\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                     *const u8\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                     as\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1170\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                     *const std::os::raw::c_char,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1171\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                 progName,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1172\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                 inName.as_mut_ptr());\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1173\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1174\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     return 1 as\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1175\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                std::os::raw::c_int\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1176\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                as Bool\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1177\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1178\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1179\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                         }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1180\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                     }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1181\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1182\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1183\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                             _ => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1184\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                 if !(ferror(zStream) != 0) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1185\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                     if stream != __stdoutp {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1186\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                         let mut fd: Int32 =\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1187\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             fileno(stream);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1188\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                         if fd < 0 as std::os::raw::c_int {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1189\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             current_block =\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1190\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 5049394217699438129;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1191\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                         } else {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1192\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             applySavedFileAttrToOutputFile(fd);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1193\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             current_block =\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1194\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 14832935472441733737;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1195\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                         }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1196\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                     } else {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1197\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                         current_block =\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1198\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             14832935472441733737;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1199\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                     }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1200\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                     match current_block {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1201\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                         5049394217699438129 => { }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1202\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                         _ => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1203\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             ret = fclose(zStream);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1204\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             if !(ret ==\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1205\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                      -(1 as std::os::raw::c_int))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1206\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1207\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 if !(ferror(stream) != 0)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1208\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                    {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1209\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     ret = fflush(stream);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1210\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     if !(ret !=\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1211\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                              0 as\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1212\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                  std::os::raw::c_int)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1213\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                        {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1214\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                         if stream !=\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1215\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                __stdoutp {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1216\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                             ret =\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1217\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                 fclose(stream);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1218\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                             outputHandleJustInCase\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1219\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                 =\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1220\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                 0 as\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1221\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                     *mut FILE;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1222\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                             if ret ==\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1223\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                    -(1 as\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1224\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                          std::os::raw::c_int)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1225\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1226\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                 current_block\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1227\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                     =\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1228\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                     5049394217699438129;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1229\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                             } else {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1230\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                 current_block\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1231\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                     =\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1232\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                     14775119014532381840;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1233\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1234\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                         } else {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1235\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                             current_block\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1236\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                 =\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1237\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                 14775119014532381840;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1238\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                         }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1239\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                         match current_block\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1240\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                             {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1241\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                             5049394217699438129\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1242\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                             => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1243\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1244\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                             _ => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1245\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                 outputHandleJustInCase\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1246\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                     =\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1247\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                     0 as\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1248\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                         *mut FILE;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1249\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                 if verbosity\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1250\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                        >=\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1251\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                        2\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1252\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                            as\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1253\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                            std::os::raw::c_int\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1254\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                    {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1255\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                     fprintf(__stderrp,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1256\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                             b\"\\n    \\x00\"\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1257\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                                 as\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1258\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                                 *const u8\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1259\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                                 as\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1260\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                                 *const std::os::raw::c_char);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1261\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1262\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                 return 1\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1263\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                            as\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1264\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                            std::os::raw::c_int\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1265\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                            as\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1266\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                            Bool\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1267\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1268\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                         }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1269\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1270\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1271\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1272\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                         }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1273\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                     }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1274\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1275\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1276\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1277\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1278\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1279\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1280\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+         }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1281\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+     }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this `if` statement can be collapsed","code":{"code":"clippy::collapsible_if","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":63555,"byte_end":68758,"line_start":1205,"line_end":1272,"column_start":49,"column_end":50,"is_primary":true,"text":[{"text":"                                                if !(ret ==","highlight_start":49,"highlight_end":60},{"text":"                                                         -(1 as std::os::raw::c_int))","highlight_start":1,"highlight_end":86},{"text":"                                                   {","highlight_start":1,"highlight_end":53},{"text":"                                                    if !(ferror(stream) != 0)","highlight_start":1,"highlight_end":78},{"text":"                                                       {","highlight_start":1,"highlight_end":57},{"text":"                                                        ret = fflush(stream);","highlight_start":1,"highlight_end":78},{"text":"                                                        if !(ret !=","highlight_start":1,"highlight_end":68},{"text":"                                                                 0 as","highlight_start":1,"highlight_end":70},{"text":"                                                                     std::os::raw::c_int)","highlight_start":1,"highlight_end":90},{"text":"                                                           {","highlight_start":1,"highlight_end":61},{"text":"                                                            if stream !=","highlight_start":1,"highlight_end":73},{"text":"                                                                   __stdoutp {","highlight_start":1,"highlight_end":79},{"text":"                                                                ret =","highlight_start":1,"highlight_end":70},{"text":"                                                                    fclose(stream);","highlight_start":1,"highlight_end":84},{"text":"                                                                outputHandleJustInCase","highlight_start":1,"highlight_end":87},{"text":"                                                                    =","highlight_start":1,"highlight_end":70},{"text":"                                                                    0 as","highlight_start":1,"highlight_end":73},{"text":"                                                                        *mut FILE;","highlight_start":1,"highlight_end":83},{"text":"                                                                if ret ==","highlight_start":1,"highlight_end":74},{"text":"                                                                       -(1 as","highlight_start":1,"highlight_end":78},{"text":"                                                                             std::os::raw::c_int)","highlight_start":1,"highlight_end":98},{"text":"                                                                   {","highlight_start":1,"highlight_end":69},{"text":"                                                                    current_block","highlight_start":1,"highlight_end":82},{"text":"                                                                        =","highlight_start":1,"highlight_end":74},{"text":"                                                                        5049394217699438129;","highlight_start":1,"highlight_end":93},{"text":"                                                                } else {","highlight_start":1,"highlight_end":73},{"text":"                                                                    current_block","highlight_start":1,"highlight_end":82},{"text":"                                                                        =","highlight_start":1,"highlight_end":74},{"text":"                                                                        14775119014532381840;","highlight_start":1,"highlight_end":94},{"text":"                                                                }","highlight_start":1,"highlight_end":66},{"text":"                                                            } else {","highlight_start":1,"highlight_end":69},{"text":"                                                                current_block","highlight_start":1,"highlight_end":78},{"text":"                                                                    =","highlight_start":1,"highlight_end":70},{"text":"                                                                    14775119014532381840;","highlight_start":1,"highlight_end":90},{"text":"                                                            }","highlight_start":1,"highlight_end":62},{"text":"                                                            match current_block","highlight_start":1,"highlight_end":80},{"text":"                                                                {","highlight_start":1,"highlight_end":66},{"text":"                                                                5049394217699438129","highlight_start":1,"highlight_end":84},{"text":"                                                                => {","highlight_start":1,"highlight_end":69},{"text":"                                                                }","highlight_start":1,"highlight_end":66},{"text":"                                                                _ => {","highlight_start":1,"highlight_end":71},{"text":"                                                                    outputHandleJustInCase","highlight_start":1,"highlight_end":91},{"text":"                                                                        =","highlight_start":1,"highlight_end":74},{"text":"                                                                        0 as","highlight_start":1,"highlight_end":77},{"text":"                                                                            *mut FILE;","highlight_start":1,"highlight_end":87},{"text":"                                                                    if verbosity","highlight_start":1,"highlight_end":81},{"text":"                                                                           >=","highlight_start":1,"highlight_end":78},{"text":"                                                                           2","highlight_start":1,"highlight_end":77},{"text":"                                                                               as","highlight_start":1,"highlight_end":82},{"text":"                                                                               std::os::raw::c_int","highlight_start":1,"highlight_end":99},{"text":"                                                                       {","highlight_start":1,"highlight_end":73},{"text":"                                                                        fprintf(__stderrp,","highlight_start":1,"highlight_end":91},{"text":"                                                                                b\"\\n    \\x00\"","highlight_start":1,"highlight_end":94},{"text":"                                                                                    as","highlight_start":1,"highlight_end":87},{"text":"                                                                                    *const u8","highlight_start":1,"highlight_end":94},{"text":"                                                                                    as","highlight_start":1,"highlight_end":87},{"text":"                                                                                    *const std::os::raw::c_char);","highlight_start":1,"highlight_end":114},{"text":"                                                                    }","highlight_start":1,"highlight_end":70},{"text":"                                                                    return 1","highlight_start":1,"highlight_end":77},{"text":"                                                                               as","highlight_start":1,"highlight_end":82},{"text":"                                                                               std::os::raw::c_int","highlight_start":1,"highlight_end":99},{"text":"                                                                               as","highlight_start":1,"highlight_end":82},{"text":"                                                                               Bool","highlight_start":1,"highlight_end":84},{"text":"                                                                }","highlight_start":1,"highlight_end":66},{"text":"                                                            }","highlight_start":1,"highlight_end":62},{"text":"                                                        }","highlight_start":1,"highlight_end":58},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                }","highlight_start":1,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"collapse nested if block","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":63555,"byte_end":68758,"line_start":1205,"line_end":1272,"column_start":49,"column_end":50,"is_primary":true,"text":[{"text":"                                                if !(ret ==","highlight_start":49,"highlight_end":60},{"text":"                                                         -(1 as std::os::raw::c_int))","highlight_start":1,"highlight_end":86},{"text":"                                                   {","highlight_start":1,"highlight_end":53},{"text":"                                                    if !(ferror(stream) != 0)","highlight_start":1,"highlight_end":78},{"text":"                                                       {","highlight_start":1,"highlight_end":57},{"text":"                                                        ret = fflush(stream);","highlight_start":1,"highlight_end":78},{"text":"                                                        if !(ret !=","highlight_start":1,"highlight_end":68},{"text":"                                                                 0 as","highlight_start":1,"highlight_end":70},{"text":"                                                                     std::os::raw::c_int)","highlight_start":1,"highlight_end":90},{"text":"                                                           {","highlight_start":1,"highlight_end":61},{"text":"                                                            if stream !=","highlight_start":1,"highlight_end":73},{"text":"                                                                   __stdoutp {","highlight_start":1,"highlight_end":79},{"text":"                                                                ret =","highlight_start":1,"highlight_end":70},{"text":"                                                                    fclose(stream);","highlight_start":1,"highlight_end":84},{"text":"                                                                outputHandleJustInCase","highlight_start":1,"highlight_end":87},{"text":"                                                                    =","highlight_start":1,"highlight_end":70},{"text":"                                                                    0 as","highlight_start":1,"highlight_end":73},{"text":"                                                                        *mut FILE;","highlight_start":1,"highlight_end":83},{"text":"                                                                if ret ==","highlight_start":1,"highlight_end":74},{"text":"                                                                       -(1 as","highlight_start":1,"highlight_end":78},{"text":"                                                                             std::os::raw::c_int)","highlight_start":1,"highlight_end":98},{"text":"                                                                   {","highlight_start":1,"highlight_end":69},{"text":"                                                                    current_block","highlight_start":1,"highlight_end":82},{"text":"                                                                        =","highlight_start":1,"highlight_end":74},{"text":"                                                                        5049394217699438129;","highlight_start":1,"highlight_end":93},{"text":"                                                                } else {","highlight_start":1,"highlight_end":73},{"text":"                                                                    current_block","highlight_start":1,"highlight_end":82},{"text":"                                                                        =","highlight_start":1,"highlight_end":74},{"text":"                                                                        14775119014532381840;","highlight_start":1,"highlight_end":94},{"text":"                                                                }","highlight_start":1,"highlight_end":66},{"text":"                                                            } else {","highlight_start":1,"highlight_end":69},{"text":"                                                                current_block","highlight_start":1,"highlight_end":78},{"text":"                                                                    =","highlight_start":1,"highlight_end":70},{"text":"                                                                    14775119014532381840;","highlight_start":1,"highlight_end":90},{"text":"                                                            }","highlight_start":1,"highlight_end":62},{"text":"                                                            match current_block","highlight_start":1,"highlight_end":80},{"text":"                                                                {","highlight_start":1,"highlight_end":66},{"text":"                                                                5049394217699438129","highlight_start":1,"highlight_end":84},{"text":"                                                                => {","highlight_start":1,"highlight_end":69},{"text":"                                                                }","highlight_start":1,"highlight_end":66},{"text":"                                                                _ => {","highlight_start":1,"highlight_end":71},{"text":"                                                                    outputHandleJustInCase","highlight_start":1,"highlight_end":91},{"text":"                                                                        =","highlight_start":1,"highlight_end":74},{"text":"                                                                        0 as","highlight_start":1,"highlight_end":77},{"text":"                                                                            *mut FILE;","highlight_start":1,"highlight_end":87},{"text":"                                                                    if verbosity","highlight_start":1,"highlight_end":81},{"text":"                                                                           >=","highlight_start":1,"highlight_end":78},{"text":"                                                                           2","highlight_start":1,"highlight_end":77},{"text":"                                                                               as","highlight_start":1,"highlight_end":82},{"text":"                                                                               std::os::raw::c_int","highlight_start":1,"highlight_end":99},{"text":"                                                                       {","highlight_start":1,"highlight_end":73},{"text":"                                                                        fprintf(__stderrp,","highlight_start":1,"highlight_end":91},{"text":"                                                                                b\"\\n    \\x00\"","highlight_start":1,"highlight_end":94},{"text":"                                                                                    as","highlight_start":1,"highlight_end":87},{"text":"                                                                                    *const u8","highlight_start":1,"highlight_end":94},{"text":"                                                                                    as","highlight_start":1,"highlight_end":87},{"text":"                                                                                    *const std::os::raw::c_char);","highlight_start":1,"highlight_end":114},{"text":"                                                                    }","highlight_start":1,"highlight_end":70},{"text":"                                                                    return 1","highlight_start":1,"highlight_end":77},{"text":"                                                                               as","highlight_start":1,"highlight_end":82},{"text":"                                                                               std::os::raw::c_int","highlight_start":1,"highlight_end":99},{"text":"                                                                               as","highlight_start":1,"highlight_end":82},{"text":"                                                                               Bool","highlight_start":1,"highlight_end":84},{"text":"                                                                }","highlight_start":1,"highlight_end":66},{"text":"                                                            }","highlight_start":1,"highlight_end":62},{"text":"                                                        }","highlight_start":1,"highlight_end":58},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                }","highlight_start":1,"highlight_end":50}],"label":null,"suggested_replacement":"if !(ret ==\n                                                         -(1 as std::os::raw::c_int)) && !(ferror(stream) != 0) {\n                                                    ret = fflush(stream);\n                                                    if !(ret !=\n                                                             0 as\n                                                                 std::os::raw::c_int)\n                                                       {\n                                                        if stream !=\n                                                               __stdoutp {\n                                                            ret =\n                                                                fclose(stream);\n                                                            outputHandleJustInCase\n                                                                =\n                                                                0 as\n                                                                    *mut FILE;\n                                                            if ret ==\n                                                                   -(1 as\n                                                                         std::os::raw::c_int)\n                                                               {\n                                                                current_block\n                                                                    =\n                                                                    5049394217699438129;\n                                                            } else {\n                                                                current_block\n                                                                    =\n                                                                    14775119014532381840;\n                                                            }\n                                                        } else {\n                                                            current_block\n                                                                =\n                                                                14775119014532381840;\n                                                        }\n                                                        match current_block\n                                                            {\n                                                            5049394217699438129\n                                                            => {\n                                                            }\n                                                            _ => {\n                                                                outputHandleJustInCase\n                                                                    =\n                                                                    0 as\n                                                                        *mut FILE;\n                                                                if verbosity\n                                                                       >=\n                                                                       2\n                                                                           as\n                                                                           std::os::raw::c_int\n                                                                   {\n                                                                    fprintf(__stderrp,\n                                                                            b\"\\n    \\x00\"\n                                                                                as\n                                                                                *const u8\n                                                                                as\n                                                                                *const std::os::raw::c_char);\n                                                                }\n                                                                return 1\n                                                                           as\n                                                                           std::os::raw::c_int\n                                                                           as\n                                                                           Bool\n                                                            }\n                                                        }\n                                                    }\n                                                }","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this `if` statement can be collapsed\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:1205:49\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1205\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   if !(ret ==\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1206\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                            -(1 as std::os::raw::c_int))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1207\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                      {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1208\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                       if !(ferror(stream) != 0)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1271\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                       }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1272\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_______________________^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: collapse nested if block\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1205\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m                                                \u001b[0m\u001b[0m\u001b[38;5;10mif !(ret ==\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1206\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                          -(1 as std::os::raw::c_int)) && !(ferror(stream) != 0) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1207\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     ret = fflush(stream);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1208\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     if !(ret !=\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1209\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                              0 as\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1210\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                  std::os::raw::c_int)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1211\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                        {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1212\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                         if stream !=\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1213\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                __stdoutp {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1214\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                             ret =\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1215\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                 fclose(stream);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1216\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                             outputHandleJustInCase\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1217\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                 =\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1218\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                 0 as\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1219\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                     *mut FILE;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1220\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                             if ret ==\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1221\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                    -(1 as\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1222\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                          std::os::raw::c_int)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1223\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1224\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                 current_block\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1225\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                     =\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1226\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                     5049394217699438129;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1227\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                             } else {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1228\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                 current_block\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1229\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                     =\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1230\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                     14775119014532381840;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1231\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1232\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                         } else {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1233\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                             current_block\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1234\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                 =\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1235\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                 14775119014532381840;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1236\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                         }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1237\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                         match current_block\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1238\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                             {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1239\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                             5049394217699438129\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1240\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                             => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1241\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1242\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                             _ => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1243\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                 outputHandleJustInCase\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1244\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                     =\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1245\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                     0 as\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1246\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                         *mut FILE;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1247\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                 if verbosity\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1248\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                        >=\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1249\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                        2\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1250\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                            as\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1251\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                            std::os::raw::c_int\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1252\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                    {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1253\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                     fprintf(__stderrp,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1254\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                             b\"\\n    \\x00\"\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1255\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                                 as\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1256\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                                 *const u8\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1257\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                                 as\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1258\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                                 *const std::os::raw::c_char);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1259\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1260\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                 return 1\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1261\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                            as\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1262\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                            std::os::raw::c_int\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1263\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                            as\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1264\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                            Bool\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1265\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1266\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                         }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1267\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1268\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this `if` statement can be collapsed","code":{"code":"clippy::collapsible_if","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":124020,"byte_end":124372,"line_start":2419,"line_end":2427,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    if cantGuess != 0 {","highlight_start":5,"highlight_end":24},{"text":"        if noisy != 0 {","highlight_start":1,"highlight_end":24},{"text":"            fprintf(__stderrp,","highlight_start":1,"highlight_end":31},{"text":"                    b\"%s: Can\\'t guess original name for %s -- using %s\\n\\x00\"","highlight_start":1,"highlight_end":79},{"text":"                        as *const u8 as *const std::os::raw::c_char, progName,","highlight_start":1,"highlight_end":79},{"text":"                    inName.as_mut_ptr(), outName.as_mut_ptr());","highlight_start":1,"highlight_end":64},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        /* just a warning, no return */","highlight_start":1,"highlight_end":40},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"collapse nested if block","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":124020,"byte_end":124372,"line_start":2419,"line_end":2427,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    if cantGuess != 0 {","highlight_start":5,"highlight_end":24},{"text":"        if noisy != 0 {","highlight_start":1,"highlight_end":24},{"text":"            fprintf(__stderrp,","highlight_start":1,"highlight_end":31},{"text":"                    b\"%s: Can\\'t guess original name for %s -- using %s\\n\\x00\"","highlight_start":1,"highlight_end":79},{"text":"                        as *const u8 as *const std::os::raw::c_char, progName,","highlight_start":1,"highlight_end":79},{"text":"                    inName.as_mut_ptr(), outName.as_mut_ptr());","highlight_start":1,"highlight_end":64},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        /* just a warning, no return */","highlight_start":1,"highlight_end":40},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":"if cantGuess != 0 && noisy != 0 {\n        fprintf(__stderrp,\n                b\"%s: Can\\'t guess original name for %s -- using %s\\n\\x00\"\n                    as *const u8 as *const std::os::raw::c_char, progName,\n                inName.as_mut_ptr(), outName.as_mut_ptr());\n    }","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this `if` statement can be collapsed\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:2419:5\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2419\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    if cantGuess != 0 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2420\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if noisy != 0 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2421\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            fprintf(__stderrp,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2422\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    b\"%s: Can\\'t guess original name for %s -\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2426\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        /* just a warning, no return */\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2427\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_____^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: collapse nested if block\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2419\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[38;5;10mif cantGuess != 0 && noisy != 0 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2420\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+         fprintf(__stderrp,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2421\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                 b\"%s: Can\\'t guess original name for %s -- using %s\\n\\x00\"\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2422\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     as *const u8 as *const std::os::raw::c_char, progName,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2423\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                 inName.as_mut_ptr(), outName.as_mut_ptr());\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2424\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+     }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this `else { if .. }` block can be collapsed","code":{"code":"clippy::collapsible_else_if","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":153503,"byte_end":154024,"line_start":3039,"line_end":3050,"column_start":16,"column_end":10,"is_primary":true,"text":[{"text":"        } else {","highlight_start":16,"highlight_end":17},{"text":"            if strncmp((*aa).name,","highlight_start":1,"highlight_end":35},{"text":"                       b\"--\\x00\" as *const u8 as *const std::os::raw::c_char,","highlight_start":1,"highlight_end":78},{"text":"                       2 as std::os::raw::c_int as std::os::raw::c_ulong) == 0 as std::os::raw::c_int","highlight_start":1,"highlight_end":102},{"text":"               {","highlight_start":1,"highlight_end":17},{"text":"                fprintf(__stderrp,","highlight_start":1,"highlight_end":35},{"text":"                        b\"%s: Bad flag `%s\\'\\n\\x00\" as *const u8 as","highlight_start":1,"highlight_end":68},{"text":"                            *const std::os::raw::c_char, progName, (*aa).name);","highlight_start":1,"highlight_end":80},{"text":"                usage(progName);","highlight_start":1,"highlight_end":33},{"text":"                exit(1 as std::os::raw::c_int);","highlight_start":1,"highlight_end":48},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::collapsible_else_if)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"collapse nested if block","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":153503,"byte_end":154024,"line_start":3039,"line_end":3050,"column_start":16,"column_end":10,"is_primary":true,"text":[{"text":"        } else {","highlight_start":16,"highlight_end":17},{"text":"            if strncmp((*aa).name,","highlight_start":1,"highlight_end":35},{"text":"                       b\"--\\x00\" as *const u8 as *const std::os::raw::c_char,","highlight_start":1,"highlight_end":78},{"text":"                       2 as std::os::raw::c_int as std::os::raw::c_ulong) == 0 as std::os::raw::c_int","highlight_start":1,"highlight_end":102},{"text":"               {","highlight_start":1,"highlight_end":17},{"text":"                fprintf(__stderrp,","highlight_start":1,"highlight_end":35},{"text":"                        b\"%s: Bad flag `%s\\'\\n\\x00\" as *const u8 as","highlight_start":1,"highlight_end":68},{"text":"                            *const std::os::raw::c_char, progName, (*aa).name);","highlight_start":1,"highlight_end":80},{"text":"                usage(progName);","highlight_start":1,"highlight_end":33},{"text":"                exit(1 as std::os::raw::c_int);","highlight_start":1,"highlight_end":48},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":"if strncmp((*aa).name,\n                   b\"--\\x00\" as *const u8 as *const std::os::raw::c_char,\n                   2 as std::os::raw::c_int as std::os::raw::c_ulong) == 0 as std::os::raw::c_int\n           {\n            fprintf(__stderrp,\n                    b\"%s: Bad flag `%s\\'\\n\\x00\" as *const u8 as\n                        *const std::os::raw::c_char, progName, (*aa).name);\n            usage(progName);\n            exit(1 as std::os::raw::c_int);\n        }","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this `else { if .. }` block can be collapsed\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:3039:16\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3039\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   } else {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m______________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3040\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m       if strncmp((*aa).name,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3041\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                  b\"--\\x00\" as *const u8 as *const std::os\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3042\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                  2 as std::os::raw::c_int as std::os::raw\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3049\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m       }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3050\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_______^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::collapsible_else_if)]` on by default\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: collapse nested if block\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3039\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m        } else \u001b[0m\u001b[0m\u001b[38;5;10mif strncmp((*aa).name,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3040\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                    b\"--\\x00\" as *const u8 as *const std::os::raw::c_char,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3041\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                    2 as std::os::raw::c_int as std::os::raw::c_ulong) == 0 as std::os::raw::c_int\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3042\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+            {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3043\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+             fprintf(__stderrp,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3044\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     b\"%s: Bad flag `%s\\'\\n\\x00\" as *const u8 as\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3045\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         *const std::os::raw::c_char, progName, (*aa).name);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3046\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+             usage(progName);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3047\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+             exit(1 as std::os::raw::c_int);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3048\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+         }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"bzlib.rs","byte_start":63302,"byte_end":63337,"line_start":1308,"line_end":1308,"column_start":15,"column_end":50,"is_primary":true,"text":[{"text":"        mid = nb + na >> 1 as std::os::raw::c_int;","highlight_start":15,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"bzlib.rs","byte_start":63302,"byte_end":63337,"line_start":1308,"line_end":1308,"column_start":15,"column_end":50,"is_primary":true,"text":[{"text":"        mid = nb + na >> 1 as std::os::raw::c_int;","highlight_start":15,"highlight_end":50}],"label":null,"suggested_replacement":"(nb + na) >> 1 as std::os::raw::c_int","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzlib.rs:1308:15\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1308\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        mid = nb + na >> 1 as std::os::raw::c_int;\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(nb + na) >> 1 as std::os::raw::c_int`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"compress.rs","byte_start":6780,"byte_end":6828,"line_start":179,"line_end":179,"column_start":20,"column_end":68,"is_primary":true,"text":[{"text":"    (*s).bsBuff |= v << 32 as std::os::raw::c_int - (*s).bsLive - n;","highlight_start":20,"highlight_end":68}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"compress.rs","byte_start":6780,"byte_end":6828,"line_start":179,"line_end":179,"column_start":20,"column_end":68,"is_primary":true,"text":[{"text":"    (*s).bsBuff |= v << 32 as std::os::raw::c_int - (*s).bsLive - n;","highlight_start":20,"highlight_end":68}],"label":null,"suggested_replacement":"v << (32 as std::os::raw::c_int - (*s).bsLive - n)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcompress.rs:179:20\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m179\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mf |= v << 32 as std::os::raw::c_int - (*s).bsLive - n;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `v << (32 as std::os::raw::c_int - (*s).bsLive - n)`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":10191,"byte_end":10244,"line_start":281,"line_end":281,"column_start":25,"column_end":78,"is_primary":true,"text":[{"text":"                        (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int &","highlight_start":25,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":10191,"byte_end":10244,"line_start":281,"line_end":281,"column_start":25,"column_end":78,"is_primary":true,"text":[{"text":"                        (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int &","highlight_start":25,"highlight_end":78}],"label":null,"suggested_replacement":"(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:281:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m281\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int &\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":15187,"byte_end":15240,"line_start":381,"line_end":381,"column_start":25,"column_end":78,"is_primary":true,"text":[{"text":"                        (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int &","highlight_start":25,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":15187,"byte_end":15240,"line_start":381,"line_end":381,"column_start":25,"column_end":78,"is_primary":true,"text":[{"text":"                        (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int &","highlight_start":25,"highlight_end":78}],"label":null,"suggested_replacement":"(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:381:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m381\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int &\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":17639,"byte_end":17692,"line_start":433,"line_end":433,"column_start":25,"column_end":78,"is_primary":true,"text":[{"text":"                        (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int &","highlight_start":25,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":17639,"byte_end":17692,"line_start":433,"line_end":433,"column_start":25,"column_end":78,"is_primary":true,"text":[{"text":"                        (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int &","highlight_start":25,"highlight_end":78}],"label":null,"suggested_replacement":"(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:433:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m433\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int &\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":20091,"byte_end":20144,"line_start":485,"line_end":485,"column_start":25,"column_end":78,"is_primary":true,"text":[{"text":"                        (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int &","highlight_start":25,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":20091,"byte_end":20144,"line_start":485,"line_end":485,"column_start":25,"column_end":78,"is_primary":true,"text":[{"text":"                        (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int &","highlight_start":25,"highlight_end":78}],"label":null,"suggested_replacement":"(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:485:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m485\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int &\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":24239,"byte_end":25456,"line_start":545,"line_end":557,"column_start":87,"column_end":114,"is_primary":true,"text":[{"text":"                                                                                    ((1","highlight_start":87,"highlight_end":88},{"text":"                                                                                          as","highlight_start":1,"highlight_end":93},{"text":"                                                                                          std::os::raw::c_int","highlight_start":1,"highlight_end":110},{"text":"                                                                                          +","highlight_start":1,"highlight_end":92},{"text":"                                                                                          (*s).blockSize100k","highlight_start":1,"highlight_end":109},{"text":"                                                                                              *","highlight_start":1,"highlight_end":96},{"text":"                                                                                              100000","highlight_start":1,"highlight_end":101},{"text":"                                                                                                  as","highlight_start":1,"highlight_end":101},{"text":"                                                                                                  std::os::raw::c_int","highlight_start":1,"highlight_end":118},{"text":"                                                                                          >>","highlight_start":1,"highlight_end":93},{"text":"                                                                                          1","highlight_start":1,"highlight_end":92},{"text":"                                                                                              as","highlight_start":1,"highlight_end":97},{"text":"                                                                                              std::os::raw::c_int)","highlight_start":1,"highlight_end":114}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":24239,"byte_end":25456,"line_start":545,"line_end":557,"column_start":87,"column_end":114,"is_primary":true,"text":[{"text":"                                                                                    ((1","highlight_start":87,"highlight_end":88},{"text":"                                                                                          as","highlight_start":1,"highlight_end":93},{"text":"                                                                                          std::os::raw::c_int","highlight_start":1,"highlight_end":110},{"text":"                                                                                          +","highlight_start":1,"highlight_end":92},{"text":"                                                                                          (*s).blockSize100k","highlight_start":1,"highlight_end":109},{"text":"                                                                                              *","highlight_start":1,"highlight_end":96},{"text":"                                                                                              100000","highlight_start":1,"highlight_end":101},{"text":"                                                                                                  as","highlight_start":1,"highlight_end":101},{"text":"                                                                                                  std::os::raw::c_int","highlight_start":1,"highlight_end":118},{"text":"                                                                                          >>","highlight_start":1,"highlight_end":93},{"text":"                                                                                          1","highlight_start":1,"highlight_end":92},{"text":"                                                                                              as","highlight_start":1,"highlight_end":97},{"text":"                                                                                              std::os::raw::c_int)","highlight_start":1,"highlight_end":114}],"label":null,"suggested_replacement":"(1\n                                                                                          as\n                                                                                          std::os::raw::c_int\n                                                                                          +\n                                                                                          (*s).blockSize100k\n                                                                                              *\n                                                                                              100000\n                                                                                                  as\n                                                                                                  std::os::raw::c_int) >> 1\n                                                                                              as\n                                                                                              std::os::raw::c_int","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:545:87\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m545\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   ((1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m_________________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m546\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                         as\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m547\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                         std::os::raw::c_int\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m548\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                         +\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m556\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                             as\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m557\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                             std::os::raw::c_int)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|___________________________________________________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider parenthesizing your expression\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m545\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m                                                                                    ((\u001b[0m\u001b[0m\u001b[38;5;10m(1\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m546\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                                           as\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m547\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                                           std::os::raw::c_int\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m548\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                                           +\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m549\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                                           (*s).blockSize100k\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m550\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                                               *\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m551\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                                               100000\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m552\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                                                   as\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m553\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                                                   std::os::raw::c_int) >> 1\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m554\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                                               as\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m555\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~                                                                                               std::os::raw::c_int\u001b[0m\u001b[0m)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":29365,"byte_end":29418,"line_start":612,"line_end":612,"column_start":25,"column_end":78,"is_primary":true,"text":[{"text":"                        (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int &","highlight_start":25,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":29365,"byte_end":29418,"line_start":612,"line_end":612,"column_start":25,"column_end":78,"is_primary":true,"text":[{"text":"                        (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int &","highlight_start":25,"highlight_end":78}],"label":null,"suggested_replacement":"(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:612:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m612\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int &\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":31970,"byte_end":32023,"line_start":666,"line_end":666,"column_start":25,"column_end":78,"is_primary":true,"text":[{"text":"                        (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int &","highlight_start":25,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":31970,"byte_end":32023,"line_start":666,"line_end":666,"column_start":25,"column_end":78,"is_primary":true,"text":[{"text":"                        (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int &","highlight_start":25,"highlight_end":78}],"label":null,"suggested_replacement":"(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:666:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m666\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int &\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":34373,"byte_end":34426,"line_start":715,"line_end":715,"column_start":25,"column_end":78,"is_primary":true,"text":[{"text":"                        (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int &","highlight_start":25,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":34373,"byte_end":34426,"line_start":715,"line_end":715,"column_start":25,"column_end":78,"is_primary":true,"text":[{"text":"                        (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int &","highlight_start":25,"highlight_end":78}],"label":null,"suggested_replacement":"(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:715:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m715\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int &\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":36826,"byte_end":36879,"line_start":767,"line_end":767,"column_start":25,"column_end":78,"is_primary":true,"text":[{"text":"                        (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int &","highlight_start":25,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":36826,"byte_end":36879,"line_start":767,"line_end":767,"column_start":25,"column_end":78,"is_primary":true,"text":[{"text":"                        (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int &","highlight_start":25,"highlight_end":78}],"label":null,"suggested_replacement":"(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:767:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m767\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int &\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":39230,"byte_end":39283,"line_start":816,"line_end":816,"column_start":25,"column_end":78,"is_primary":true,"text":[{"text":"                        (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int &","highlight_start":25,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":39230,"byte_end":39283,"line_start":816,"line_end":816,"column_start":25,"column_end":78,"is_primary":true,"text":[{"text":"                        (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int &","highlight_start":25,"highlight_end":78}],"label":null,"suggested_replacement":"(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:816:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m816\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int &\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":41682,"byte_end":41735,"line_start":868,"line_end":868,"column_start":25,"column_end":78,"is_primary":true,"text":[{"text":"                        (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int &","highlight_start":25,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":41682,"byte_end":41735,"line_start":868,"line_end":868,"column_start":25,"column_end":78,"is_primary":true,"text":[{"text":"                        (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int &","highlight_start":25,"highlight_end":78}],"label":null,"suggested_replacement":"(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:868:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m868\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int &\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":44084,"byte_end":44137,"line_start":917,"line_end":917,"column_start":25,"column_end":78,"is_primary":true,"text":[{"text":"                        (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int &","highlight_start":25,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":44084,"byte_end":44137,"line_start":917,"line_end":917,"column_start":25,"column_end":78,"is_primary":true,"text":[{"text":"                        (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int &","highlight_start":25,"highlight_end":78}],"label":null,"suggested_replacement":"(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:917:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m917\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int &\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":46536,"byte_end":46589,"line_start":969,"line_end":969,"column_start":25,"column_end":78,"is_primary":true,"text":[{"text":"                        (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int &","highlight_start":25,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":46536,"byte_end":46589,"line_start":969,"line_end":969,"column_start":25,"column_end":78,"is_primary":true,"text":[{"text":"                        (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int &","highlight_start":25,"highlight_end":78}],"label":null,"suggested_replacement":"(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:969:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m969\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int &\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":48938,"byte_end":48991,"line_start":1018,"line_end":1018,"column_start":25,"column_end":78,"is_primary":true,"text":[{"text":"                        (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int &","highlight_start":25,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":48938,"byte_end":48991,"line_start":1018,"line_end":1018,"column_start":25,"column_end":78,"is_primary":true,"text":[{"text":"                        (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int &","highlight_start":25,"highlight_end":78}],"label":null,"suggested_replacement":"(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:1018:25\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1018\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int &\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":51390,"byte_end":51443,"line_start":1070,"line_end":1070,"column_start":25,"column_end":78,"is_primary":true,"text":[{"text":"                        (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int &","highlight_start":25,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":51390,"byte_end":51443,"line_start":1070,"line_end":1070,"column_start":25,"column_end":78,"is_primary":true,"text":[{"text":"                        (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int &","highlight_start":25,"highlight_end":78}],"label":null,"suggested_replacement":"(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:1070:25\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1070\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int &\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":53919,"byte_end":53972,"line_start":1122,"line_end":1122,"column_start":25,"column_end":78,"is_primary":true,"text":[{"text":"                        (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int &","highlight_start":25,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":53919,"byte_end":53972,"line_start":1122,"line_end":1122,"column_start":25,"column_end":78,"is_primary":true,"text":[{"text":"                        (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int &","highlight_start":25,"highlight_end":78}],"label":null,"suggested_replacement":"(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:1122:25\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1122\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int &\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":56893,"byte_end":56946,"line_start":1184,"line_end":1184,"column_start":25,"column_end":78,"is_primary":true,"text":[{"text":"                        (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int &","highlight_start":25,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":56893,"byte_end":56946,"line_start":1184,"line_end":1184,"column_start":25,"column_end":78,"is_primary":true,"text":[{"text":"                        (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int &","highlight_start":25,"highlight_end":78}],"label":null,"suggested_replacement":"(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:1184:25\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1184\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int &\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":59243,"byte_end":59296,"line_start":1233,"line_end":1233,"column_start":25,"column_end":78,"is_primary":true,"text":[{"text":"                        (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int &","highlight_start":25,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":59243,"byte_end":59296,"line_start":1233,"line_end":1233,"column_start":25,"column_end":78,"is_primary":true,"text":[{"text":"                        (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int &","highlight_start":25,"highlight_end":78}],"label":null,"suggested_replacement":"(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:1233:25\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1233\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int &\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":61635,"byte_end":61688,"line_start":1285,"line_end":1285,"column_start":25,"column_end":78,"is_primary":true,"text":[{"text":"                        (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int &","highlight_start":25,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":61635,"byte_end":61688,"line_start":1285,"line_end":1285,"column_start":25,"column_end":78,"is_primary":true,"text":[{"text":"                        (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int &","highlight_start":25,"highlight_end":78}],"label":null,"suggested_replacement":"(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:1285:25\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1285\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int &\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":63986,"byte_end":64039,"line_start":1334,"line_end":1334,"column_start":25,"column_end":78,"is_primary":true,"text":[{"text":"                        (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int &","highlight_start":25,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":63986,"byte_end":64039,"line_start":1334,"line_end":1334,"column_start":25,"column_end":78,"is_primary":true,"text":[{"text":"                        (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int &","highlight_start":25,"highlight_end":78}],"label":null,"suggested_replacement":"(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:1334:25\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1334\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int &\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":66381,"byte_end":66434,"line_start":1386,"line_end":1386,"column_start":25,"column_end":78,"is_primary":true,"text":[{"text":"                        (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int &","highlight_start":25,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":66381,"byte_end":66434,"line_start":1386,"line_end":1386,"column_start":25,"column_end":78,"is_primary":true,"text":[{"text":"                        (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int &","highlight_start":25,"highlight_end":78}],"label":null,"suggested_replacement":"(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:1386:25\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1386\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int &\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":68734,"byte_end":68787,"line_start":1435,"line_end":1435,"column_start":25,"column_end":78,"is_primary":true,"text":[{"text":"                        (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int &","highlight_start":25,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":68734,"byte_end":68787,"line_start":1435,"line_end":1435,"column_start":25,"column_end":78,"is_primary":true,"text":[{"text":"                        (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int &","highlight_start":25,"highlight_end":78}],"label":null,"suggested_replacement":"(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:1435:25\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1435\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int &\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":71131,"byte_end":71184,"line_start":1487,"line_end":1487,"column_start":25,"column_end":78,"is_primary":true,"text":[{"text":"                        (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int &","highlight_start":25,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":71131,"byte_end":71184,"line_start":1487,"line_end":1487,"column_start":25,"column_end":78,"is_primary":true,"text":[{"text":"                        (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int &","highlight_start":25,"highlight_end":78}],"label":null,"suggested_replacement":"(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:1487:25\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1487\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int &\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":73478,"byte_end":73531,"line_start":1536,"line_end":1536,"column_start":25,"column_end":78,"is_primary":true,"text":[{"text":"                        (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int &","highlight_start":25,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":73478,"byte_end":73531,"line_start":1536,"line_end":1536,"column_start":25,"column_end":78,"is_primary":true,"text":[{"text":"                        (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int &","highlight_start":25,"highlight_end":78}],"label":null,"suggested_replacement":"(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:1536:25\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1536\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int &\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":75994,"byte_end":76047,"line_start":1590,"line_end":1590,"column_start":25,"column_end":78,"is_primary":true,"text":[{"text":"                        (*s).bsBuff >> (*s).bsLive - 1 as std::os::raw::c_int &","highlight_start":25,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":75994,"byte_end":76047,"line_start":1590,"line_end":1590,"column_start":25,"column_end":78,"is_primary":true,"text":[{"text":"                        (*s).bsBuff >> (*s).bsLive - 1 as std::os::raw::c_int &","highlight_start":25,"highlight_end":78}],"label":null,"suggested_replacement":"(*s).bsBuff >> ((*s).bsLive - 1 as std::os::raw::c_int)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:1590:25\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1590\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   (*s).bsBuff >> (*s).bsLive - 1 as std::os::raw::c_int &\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(*s).bsBuff >> ((*s).bsLive - 1 as std::os::raw::c_int)`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":78306,"byte_end":78359,"line_start":1640,"line_end":1640,"column_start":25,"column_end":78,"is_primary":true,"text":[{"text":"                        (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int &","highlight_start":25,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":78306,"byte_end":78359,"line_start":1640,"line_end":1640,"column_start":25,"column_end":78,"is_primary":true,"text":[{"text":"                        (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int &","highlight_start":25,"highlight_end":78}],"label":null,"suggested_replacement":"(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:1640:25\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1640\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int &\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":80654,"byte_end":80707,"line_start":1691,"line_end":1691,"column_start":25,"column_end":78,"is_primary":true,"text":[{"text":"                        (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int &","highlight_start":25,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":80654,"byte_end":80707,"line_start":1691,"line_end":1691,"column_start":25,"column_end":78,"is_primary":true,"text":[{"text":"                        (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int &","highlight_start":25,"highlight_end":78}],"label":null,"suggested_replacement":"(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:1691:25\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1691\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int &\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":83001,"byte_end":83054,"line_start":1742,"line_end":1742,"column_start":25,"column_end":78,"is_primary":true,"text":[{"text":"                        (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int &","highlight_start":25,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":83001,"byte_end":83054,"line_start":1742,"line_end":1742,"column_start":25,"column_end":78,"is_primary":true,"text":[{"text":"                        (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int &","highlight_start":25,"highlight_end":78}],"label":null,"suggested_replacement":"(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:1742:25\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1742\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int &\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":86091,"byte_end":86122,"line_start":1805,"line_end":1805,"column_start":33,"column_end":64,"is_primary":true,"text":[{"text":"                                (*s).bsBuff >> (*s).bsLive - zn &","highlight_start":33,"highlight_end":64}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":86091,"byte_end":86122,"line_start":1805,"line_end":1805,"column_start":33,"column_end":64,"is_primary":true,"text":[{"text":"                                (*s).bsBuff >> (*s).bsLive - zn &","highlight_start":33,"highlight_end":64}],"label":null,"suggested_replacement":"(*s).bsBuff >> ((*s).bsLive - zn)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:1805:33\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1805\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   (*s).bsBuff >> (*s).bsLive - zn &\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(*s).bsBuff >> ((*s).bsLive - zn)`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":88261,"byte_end":88314,"line_start":1843,"line_end":1843,"column_start":33,"column_end":86,"is_primary":true,"text":[{"text":"                                (*s).bsBuff >> (*s).bsLive - 1 as std::os::raw::c_int","highlight_start":33,"highlight_end":86}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":88261,"byte_end":88314,"line_start":1843,"line_end":1843,"column_start":33,"column_end":86,"is_primary":true,"text":[{"text":"                                (*s).bsBuff >> (*s).bsLive - 1 as std::os::raw::c_int","highlight_start":33,"highlight_end":86}],"label":null,"suggested_replacement":"(*s).bsBuff >> ((*s).bsLive - 1 as std::os::raw::c_int)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:1843:33\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1843\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   (*s).bsBuff >> (*s).bsLive - 1 as std::os::raw::c_int\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(*s).bsBuff >> ((*s).bsLive - 1 as std::os::raw::c_int)`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":90575,"byte_end":90606,"line_start":1883,"line_end":1883,"column_start":33,"column_end":64,"is_primary":true,"text":[{"text":"                                (*s).bsBuff >> (*s).bsLive - zn &","highlight_start":33,"highlight_end":64}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":90575,"byte_end":90606,"line_start":1883,"line_end":1883,"column_start":33,"column_end":64,"is_primary":true,"text":[{"text":"                                (*s).bsBuff >> (*s).bsLive - zn &","highlight_start":33,"highlight_end":64}],"label":null,"suggested_replacement":"(*s).bsBuff >> ((*s).bsLive - zn)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:1883:33\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1883\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   (*s).bsBuff >> (*s).bsLive - zn &\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(*s).bsBuff >> ((*s).bsLive - zn)`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":92746,"byte_end":92799,"line_start":1921,"line_end":1921,"column_start":33,"column_end":86,"is_primary":true,"text":[{"text":"                                (*s).bsBuff >> (*s).bsLive - 1 as std::os::raw::c_int","highlight_start":33,"highlight_end":86}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":92746,"byte_end":92799,"line_start":1921,"line_end":1921,"column_start":33,"column_end":86,"is_primary":true,"text":[{"text":"                                (*s).bsBuff >> (*s).bsLive - 1 as std::os::raw::c_int","highlight_start":33,"highlight_end":86}],"label":null,"suggested_replacement":"(*s).bsBuff >> ((*s).bsLive - 1 as std::os::raw::c_int)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:1921:33\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1921\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   (*s).bsBuff >> (*s).bsLive - 1 as std::os::raw::c_int\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(*s).bsBuff >> ((*s).bsLive - 1 as std::os::raw::c_int)`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":95060,"byte_end":95091,"line_start":1961,"line_end":1961,"column_start":33,"column_end":64,"is_primary":true,"text":[{"text":"                                (*s).bsBuff >> (*s).bsLive - zn &","highlight_start":33,"highlight_end":64}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":95060,"byte_end":95091,"line_start":1961,"line_end":1961,"column_start":33,"column_end":64,"is_primary":true,"text":[{"text":"                                (*s).bsBuff >> (*s).bsLive - zn &","highlight_start":33,"highlight_end":64}],"label":null,"suggested_replacement":"(*s).bsBuff >> ((*s).bsLive - zn)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:1961:33\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1961\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   (*s).bsBuff >> (*s).bsLive - zn &\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(*s).bsBuff >> ((*s).bsLive - zn)`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":97229,"byte_end":97282,"line_start":1999,"line_end":1999,"column_start":33,"column_end":86,"is_primary":true,"text":[{"text":"                                (*s).bsBuff >> (*s).bsLive - 1 as std::os::raw::c_int","highlight_start":33,"highlight_end":86}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":97229,"byte_end":97282,"line_start":1999,"line_end":1999,"column_start":33,"column_end":86,"is_primary":true,"text":[{"text":"                                (*s).bsBuff >> (*s).bsLive - 1 as std::os::raw::c_int","highlight_start":33,"highlight_end":86}],"label":null,"suggested_replacement":"(*s).bsBuff >> ((*s).bsLive - 1 as std::os::raw::c_int)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:1999:33\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1999\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   (*s).bsBuff >> (*s).bsLive - 1 as std::os::raw::c_int\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(*s).bsBuff >> ((*s).bsLive - 1 as std::os::raw::c_int)`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":99653,"byte_end":99706,"line_start":2041,"line_end":2041,"column_start":33,"column_end":86,"is_primary":true,"text":[{"text":"                                (*s).bsBuff >> (*s).bsLive - 1 as std::os::raw::c_int","highlight_start":33,"highlight_end":86}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":99653,"byte_end":99706,"line_start":2041,"line_end":2041,"column_start":33,"column_end":86,"is_primary":true,"text":[{"text":"                                (*s).bsBuff >> (*s).bsLive - 1 as std::os::raw::c_int","highlight_start":33,"highlight_end":86}],"label":null,"suggested_replacement":"(*s).bsBuff >> ((*s).bsLive - 1 as std::os::raw::c_int)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:2041:33\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2041\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   (*s).bsBuff >> (*s).bsLive - 1 as std::os::raw::c_int\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(*s).bsBuff >> ((*s).bsLive - 1 as std::os::raw::c_int)`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":102124,"byte_end":102177,"line_start":2084,"line_end":2084,"column_start":33,"column_end":86,"is_primary":true,"text":[{"text":"                                (*s).bsBuff >> (*s).bsLive - 5 as std::os::raw::c_int","highlight_start":33,"highlight_end":86}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":102124,"byte_end":102177,"line_start":2084,"line_end":2084,"column_start":33,"column_end":86,"is_primary":true,"text":[{"text":"                                (*s).bsBuff >> (*s).bsLive - 5 as std::os::raw::c_int","highlight_start":33,"highlight_end":86}],"label":null,"suggested_replacement":"(*s).bsBuff >> ((*s).bsLive - 5 as std::os::raw::c_int)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:2084:33\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2084\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   (*s).bsBuff >> (*s).bsLive - 5 as std::os::raw::c_int\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(*s).bsBuff >> ((*s).bsLive - 5 as std::os::raw::c_int)`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":104445,"byte_end":104498,"line_start":2124,"line_end":2124,"column_start":33,"column_end":86,"is_primary":true,"text":[{"text":"                                (*s).bsBuff >> (*s).bsLive - 1 as std::os::raw::c_int","highlight_start":33,"highlight_end":86}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":104445,"byte_end":104498,"line_start":2124,"line_end":2124,"column_start":33,"column_end":86,"is_primary":true,"text":[{"text":"                                (*s).bsBuff >> (*s).bsLive - 1 as std::os::raw::c_int","highlight_start":33,"highlight_end":86}],"label":null,"suggested_replacement":"(*s).bsBuff >> ((*s).bsLive - 1 as std::os::raw::c_int)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:2124:33\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2124\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   (*s).bsBuff >> (*s).bsLive - 1 as std::os::raw::c_int\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(*s).bsBuff >> ((*s).bsLive - 1 as std::os::raw::c_int)`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":107166,"byte_end":107220,"line_start":2172,"line_end":2172,"column_start":33,"column_end":87,"is_primary":true,"text":[{"text":"                                (*s).bsBuff >> (*s).bsLive - 15 as std::os::raw::c_int","highlight_start":33,"highlight_end":87}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":107166,"byte_end":107220,"line_start":2172,"line_end":2172,"column_start":33,"column_end":87,"is_primary":true,"text":[{"text":"                                (*s).bsBuff >> (*s).bsLive - 15 as std::os::raw::c_int","highlight_start":33,"highlight_end":87}],"label":null,"suggested_replacement":"(*s).bsBuff >> ((*s).bsLive - 15 as std::os::raw::c_int)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:2172:33\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2172\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   (*s).bsBuff >> (*s).bsLive - 15 as std::os::raw::c_int\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(*s).bsBuff >> ((*s).bsLive - 15 as std::os::raw::c_int)`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":109790,"byte_end":109843,"line_start":2218,"line_end":2218,"column_start":33,"column_end":86,"is_primary":true,"text":[{"text":"                                (*s).bsBuff >> (*s).bsLive - 3 as std::os::raw::c_int","highlight_start":33,"highlight_end":86}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":109790,"byte_end":109843,"line_start":2218,"line_end":2218,"column_start":33,"column_end":86,"is_primary":true,"text":[{"text":"                                (*s).bsBuff >> (*s).bsLive - 3 as std::os::raw::c_int","highlight_start":33,"highlight_end":86}],"label":null,"suggested_replacement":"(*s).bsBuff >> ((*s).bsLive - 3 as std::os::raw::c_int)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:2218:33\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2218\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   (*s).bsBuff >> (*s).bsLive - 3 as std::os::raw::c_int\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(*s).bsBuff >> ((*s).bsLive - 3 as std::os::raw::c_int)`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":112402,"byte_end":112455,"line_start":2264,"line_end":2264,"column_start":33,"column_end":86,"is_primary":true,"text":[{"text":"                                (*s).bsBuff >> (*s).bsLive - 1 as std::os::raw::c_int","highlight_start":33,"highlight_end":86}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":112402,"byte_end":112455,"line_start":2264,"line_end":2264,"column_start":33,"column_end":86,"is_primary":true,"text":[{"text":"                                (*s).bsBuff >> (*s).bsLive - 1 as std::os::raw::c_int","highlight_start":33,"highlight_end":86}],"label":null,"suggested_replacement":"(*s).bsBuff >> ((*s).bsLive - 1 as std::os::raw::c_int)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:2264:33\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2264\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   (*s).bsBuff >> (*s).bsLive - 1 as std::os::raw::c_int\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(*s).bsBuff >> ((*s).bsLive - 1 as std::os::raw::c_int)`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":115531,"byte_end":115584,"line_start":2321,"line_end":2321,"column_start":33,"column_end":86,"is_primary":true,"text":[{"text":"                                (*s).bsBuff >> (*s).bsLive - 1 as std::os::raw::c_int","highlight_start":33,"highlight_end":86}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":115531,"byte_end":115584,"line_start":2321,"line_end":2321,"column_start":33,"column_end":86,"is_primary":true,"text":[{"text":"                                (*s).bsBuff >> (*s).bsLive - 1 as std::os::raw::c_int","highlight_start":33,"highlight_end":86}],"label":null,"suggested_replacement":"(*s).bsBuff >> ((*s).bsLive - 1 as std::os::raw::c_int)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:2321:33\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2321\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   (*s).bsBuff >> (*s).bsLive - 1 as std::os::raw::c_int\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(*s).bsBuff >> ((*s).bsLive - 1 as std::os::raw::c_int)`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":118140,"byte_end":118193,"line_start":2367,"line_end":2367,"column_start":33,"column_end":86,"is_primary":true,"text":[{"text":"                                (*s).bsBuff >> (*s).bsLive - 1 as std::os::raw::c_int","highlight_start":33,"highlight_end":86}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":118140,"byte_end":118193,"line_start":2367,"line_end":2367,"column_start":33,"column_end":86,"is_primary":true,"text":[{"text":"                                (*s).bsBuff >> (*s).bsLive - 1 as std::os::raw::c_int","highlight_start":33,"highlight_end":86}],"label":null,"suggested_replacement":"(*s).bsBuff >> ((*s).bsLive - 1 as std::os::raw::c_int)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:2367:33\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2367\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   (*s).bsBuff >> (*s).bsLive - 1 as std::os::raw::c_int\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(*s).bsBuff >> ((*s).bsLive - 1 as std::os::raw::c_int)`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"blocksort.rs","byte_start":58,"byte_end":113,"line_start":5,"line_end":5,"column_start":5,"column_end":60,"is_primary":false,"text":[{"text":"    fn BZ2_bz__AssertH__fail(errcode: std::os::raw::c_int);","highlight_start":5,"highlight_end":60}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"blocksort.rs","byte_start":41,"byte_end":53,"line_start":4,"line_end":4,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(unused_attributes)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"blocksort.rs","byte_start":41,"byte_end":53,"line_start":4,"line_end":4,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mblocksort.rs:4:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn BZ2_bz__AssertH__fail(errcode: std::os::raw::c_int);\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_attributes)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign static","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"blocksort.rs","byte_start":135,"byte_end":167,"line_start":7,"line_end":7,"column_start":5,"column_end":37,"is_primary":false,"text":[{"text":"    static mut __stderrp: *mut FILE;","highlight_start":5,"highlight_end":37}],"label":"foreign static","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"blocksort.rs","byte_start":118,"byte_end":130,"line_start":6,"line_end":6,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"blocksort.rs","byte_start":118,"byte_end":130,"line_start":6,"line_end":6,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign static\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mblocksort.rs:6:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    static mut __stderrp: *mut FILE;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign static\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"blocksort.rs","byte_start":189,"byte_end":277,"line_start":9,"line_end":9,"column_start":5,"column_end":93,"is_primary":false,"text":[{"text":"    fn fprintf(_: *mut FILE, _: *const std::os::raw::c_char, _: ...) -> std::os::raw::c_int;","highlight_start":5,"highlight_end":93}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"blocksort.rs","byte_start":172,"byte_end":184,"line_start":8,"line_end":8,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"blocksort.rs","byte_start":172,"byte_end":184,"line_start":8,"line_end":8,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mblocksort.rs:8:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn fprintf(_: *mut FILE, _: *const std::os::raw::c_char, _: ...) -> std::os::raw::c_int;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign static","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":58,"byte_end":89,"line_start":5,"line_end":5,"column_start":5,"column_end":36,"is_primary":false,"text":[{"text":"    static mut __stdinp: *mut FILE;","highlight_start":5,"highlight_end":36}],"label":"foreign static","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":41,"byte_end":53,"line_start":4,"line_end":4,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":41,"byte_end":53,"line_start":4,"line_end":4,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign static\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:4:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    static mut __stdinp: *mut FILE;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign static\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign static","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":111,"byte_end":143,"line_start":7,"line_end":7,"column_start":5,"column_end":37,"is_primary":false,"text":[{"text":"    static mut __stdoutp: *mut FILE;","highlight_start":5,"highlight_end":37}],"label":"foreign static","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":94,"byte_end":106,"line_start":6,"line_end":6,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":94,"byte_end":106,"line_start":6,"line_end":6,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign static\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:6:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    static mut __stdoutp: *mut FILE;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign static\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign static","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":165,"byte_end":197,"line_start":9,"line_end":9,"column_start":5,"column_end":37,"is_primary":false,"text":[{"text":"    static mut __stderrp: *mut FILE;","highlight_start":5,"highlight_end":37}],"label":"foreign static","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":148,"byte_end":160,"line_start":8,"line_end":8,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":148,"byte_end":160,"line_start":8,"line_end":8,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign static\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:8:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    static mut __stderrp: *mut FILE;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign static\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":219,"byte_end":266,"line_start":11,"line_end":11,"column_start":5,"column_end":52,"is_primary":false,"text":[{"text":"    fn fclose(_: *mut FILE) -> std::os::raw::c_int;","highlight_start":5,"highlight_end":52}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":202,"byte_end":214,"line_start":10,"line_end":10,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":202,"byte_end":214,"line_start":10,"line_end":10,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:10:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn fclose(_: *mut FILE) -> std::os::raw::c_int;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":288,"byte_end":335,"line_start":13,"line_end":13,"column_start":5,"column_end":52,"is_primary":false,"text":[{"text":"    fn ferror(_: *mut FILE) -> std::os::raw::c_int;","highlight_start":5,"highlight_end":52}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":271,"byte_end":283,"line_start":12,"line_end":12,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":271,"byte_end":283,"line_start":12,"line_end":12,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:12:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn ferror(_: *mut FILE) -> std::os::raw::c_int;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":357,"byte_end":404,"line_start":15,"line_end":15,"column_start":5,"column_end":52,"is_primary":false,"text":[{"text":"    fn fflush(_: *mut FILE) -> std::os::raw::c_int;","highlight_start":5,"highlight_end":52}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":340,"byte_end":352,"line_start":14,"line_end":14,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":340,"byte_end":352,"line_start":14,"line_end":14,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:14:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn fflush(_: *mut FILE) -> std::os::raw::c_int;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":426,"byte_end":472,"line_start":17,"line_end":17,"column_start":5,"column_end":51,"is_primary":false,"text":[{"text":"    fn fgetc(_: *mut FILE) -> std::os::raw::c_int;","highlight_start":5,"highlight_end":51}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":409,"byte_end":421,"line_start":16,"line_end":16,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":409,"byte_end":421,"line_start":16,"line_end":16,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:16:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn fgetc(_: *mut FILE) -> std::os::raw::c_int;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":494,"byte_end":580,"line_start":19,"line_end":19,"column_start":5,"column_end":91,"is_primary":false,"text":[{"text":"    fn fopen(_: *const std::os::raw::c_char, _: *const std::os::raw::c_char) -> *mut FILE;","highlight_start":5,"highlight_end":91}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":477,"byte_end":489,"line_start":18,"line_end":18,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":477,"byte_end":489,"line_start":18,"line_end":18,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:18:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m19\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn fopen(_: *const std::os::raw::c_char, _: *const std::os::raw::c_char) -> *mut FILE;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":602,"byte_end":690,"line_start":21,"line_end":21,"column_start":5,"column_end":93,"is_primary":false,"text":[{"text":"    fn fprintf(_: *mut FILE, _: *const std::os::raw::c_char, _: ...) -> std::os::raw::c_int;","highlight_start":5,"highlight_end":93}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":585,"byte_end":597,"line_start":20,"line_end":20,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":585,"byte_end":597,"line_start":20,"line_end":20,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:20:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn fprintf(_: *mut FILE, _: *const std::os::raw::c_char, _: ...) -> std::os::raw::c_int;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":712,"byte_end":855,"line_start":23,"line_end":24,"column_start":5,"column_end":53,"is_primary":false,"text":[{"text":"    fn fread(_: *mut std::os::raw::c_void, _: std::os::raw::c_ulong, _: std::os::raw::c_ulong,","highlight_start":5,"highlight_end":95},{"text":"             _: *mut FILE) -> std::os::raw::c_ulong;","highlight_start":1,"highlight_end":53}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":695,"byte_end":707,"line_start":22,"line_end":22,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":695,"byte_end":707,"line_start":22,"line_end":22,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:22:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn fread(_: *mut std::os::raw::c_void, _: std::os::raw::c_u\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m             _: *mut FILE) -> std::os::raw::c_ulong;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|____________________________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":877,"byte_end":1024,"line_start":26,"line_end":27,"column_start":5,"column_end":54,"is_primary":false,"text":[{"text":"    fn fwrite(_: *const std::os::raw::c_void, _: std::os::raw::c_ulong, _: std::os::raw::c_ulong,","highlight_start":5,"highlight_end":98},{"text":"              _: *mut FILE) -> std::os::raw::c_ulong;","highlight_start":1,"highlight_end":54}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":860,"byte_end":872,"line_start":25,"line_end":25,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":860,"byte_end":872,"line_start":25,"line_end":25,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:25:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m26\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn fwrite(_: *const std::os::raw::c_void, _: std::os::raw::\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m              _: *mut FILE) -> std::os::raw::c_ulong;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_____________________________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":1046,"byte_end":1088,"line_start":29,"line_end":29,"column_start":5,"column_end":47,"is_primary":false,"text":[{"text":"    fn perror(_: *const std::os::raw::c_char);","highlight_start":5,"highlight_end":47}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":1029,"byte_end":1041,"line_start":28,"line_end":28,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":1029,"byte_end":1041,"line_start":28,"line_end":28,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:28:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn perror(_: *const std::os::raw::c_char);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":1110,"byte_end":1175,"line_start":31,"line_end":31,"column_start":5,"column_end":70,"is_primary":false,"text":[{"text":"    fn remove(_: *const std::os::raw::c_char) -> std::os::raw::c_int;","highlight_start":5,"highlight_end":70}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":1093,"byte_end":1105,"line_start":30,"line_end":30,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":1093,"byte_end":1105,"line_start":30,"line_end":30,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:30:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn remove(_: *const std::os::raw::c_char) -> std::os::raw::c_int;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":1197,"byte_end":1221,"line_start":33,"line_end":33,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    fn rewind(_: *mut FILE);","highlight_start":5,"highlight_end":29}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":1180,"byte_end":1192,"line_start":32,"line_end":32,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":1180,"byte_end":1192,"line_start":32,"line_end":32,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:32:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m32\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn rewind(_: *mut FILE);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":1243,"byte_end":1314,"line_start":35,"line_end":35,"column_start":5,"column_end":76,"is_primary":false,"text":[{"text":"    fn ungetc(_: std::os::raw::c_int, _: *mut FILE) -> std::os::raw::c_int;","highlight_start":5,"highlight_end":76}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":1226,"byte_end":1238,"line_start":34,"line_end":34,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":1226,"byte_end":1238,"line_start":34,"line_end":34,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:34:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m35\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn ungetc(_: std::os::raw::c_int, _: *mut FILE) -> std::os::raw::c_int;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":1336,"byte_end":1415,"line_start":37,"line_end":37,"column_start":5,"column_end":84,"is_primary":false,"text":[{"text":"    fn fdopen(_: std::os::raw::c_int, _: *const std::os::raw::c_char) -> *mut FILE;","highlight_start":5,"highlight_end":84}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":1319,"byte_end":1331,"line_start":36,"line_end":36,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":1319,"byte_end":1331,"line_start":36,"line_end":36,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:36:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m36\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn fdopen(_: std::os::raw::c_int, _: *const std::os::raw::c_char) -> *mut FILE;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":1437,"byte_end":1484,"line_start":39,"line_end":39,"column_start":5,"column_end":52,"is_primary":false,"text":[{"text":"    fn fileno(_: *mut FILE) -> std::os::raw::c_int;","highlight_start":5,"highlight_end":52}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":1420,"byte_end":1432,"line_start":38,"line_end":38,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":1420,"byte_end":1432,"line_start":38,"line_end":38,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:38:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m38\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn fileno(_: *mut FILE) -> std::os::raw::c_int;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":1506,"byte_end":1543,"line_start":41,"line_end":41,"column_start":5,"column_end":42,"is_primary":false,"text":[{"text":"    fn exit(_: std::os::raw::c_int) -> !;","highlight_start":5,"highlight_end":42}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":1489,"byte_end":1501,"line_start":40,"line_end":40,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":1489,"byte_end":1501,"line_start":40,"line_end":40,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:40:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn exit(_: std::os::raw::c_int) -> !;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":1565,"byte_end":1636,"line_start":43,"line_end":43,"column_start":5,"column_end":76,"is_primary":false,"text":[{"text":"    fn getenv(_: *const std::os::raw::c_char) -> *mut std::os::raw::c_char;","highlight_start":5,"highlight_end":76}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":1548,"byte_end":1560,"line_start":42,"line_end":42,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":1548,"byte_end":1560,"line_start":42,"line_end":42,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:42:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn getenv(_: *const std::os::raw::c_char) -> *mut std::os::raw::c_char;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":1658,"byte_end":1723,"line_start":45,"line_end":45,"column_start":5,"column_end":70,"is_primary":false,"text":[{"text":"    fn malloc(_: std::os::raw::c_ulong) -> *mut std::os::raw::c_void;","highlight_start":5,"highlight_end":70}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":1641,"byte_end":1653,"line_start":44,"line_end":44,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":1641,"byte_end":1653,"line_start":44,"line_end":44,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:44:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m44\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m45\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn malloc(_: std::os::raw::c_ulong) -> *mut std::os::raw::c_void;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":1745,"byte_end":1783,"line_start":47,"line_end":47,"column_start":5,"column_end":43,"is_primary":false,"text":[{"text":"    fn free(_: *mut std::os::raw::c_void);","highlight_start":5,"highlight_end":43}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":1728,"byte_end":1740,"line_start":46,"line_end":46,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":1728,"byte_end":1740,"line_start":46,"line_end":46,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:46:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m46\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m47\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn free(_: *mut std::os::raw::c_void);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":1805,"byte_end":1983,"line_start":49,"line_end":51,"column_start":5,"column_end":68,"is_primary":false,"text":[{"text":"    fn signal(_: std::os::raw::c_int,","highlight_start":5,"highlight_end":38},{"text":"              _: Option<unsafe extern \"C\" fn(_: std::os::raw::c_int) -> ()>)","highlight_start":1,"highlight_end":77},{"text":"     -> Option<unsafe extern \"C\" fn(_: std::os::raw::c_int) -> ()>;","highlight_start":1,"highlight_end":68}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":1788,"byte_end":1800,"line_start":48,"line_end":48,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":1788,"byte_end":1800,"line_start":48,"line_end":48,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:48:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m48\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m49\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn signal(_: std::os::raw::c_int,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m              _: Option<unsafe extern \"C\" fn(_: std::os::raw::c_int) -\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m     -> Option<unsafe extern \"C\" fn(_: std::os::raw::c_int) -> ()>;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|___________________________________________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":2005,"byte_end":2102,"line_start":53,"line_end":53,"column_start":5,"column_end":102,"is_primary":false,"text":[{"text":"    fn strcmp(_: *const std::os::raw::c_char, _: *const std::os::raw::c_char) -> std::os::raw::c_int;","highlight_start":5,"highlight_end":102}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":1988,"byte_end":2000,"line_start":52,"line_end":52,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":1988,"byte_end":2000,"line_start":52,"line_end":52,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:52:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m53\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn strcmp(_: *const std::os::raw::c_char, _: *const std::os::raw::c_char) -> std::os::raw::c_int;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":2124,"byte_end":2230,"line_start":55,"line_end":56,"column_start":5,"column_end":35,"is_primary":false,"text":[{"text":"    fn strcpy(_: *mut std::os::raw::c_char, _: *const std::os::raw::c_char)","highlight_start":5,"highlight_end":76},{"text":"     -> *mut std::os::raw::c_char;","highlight_start":1,"highlight_end":35}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":2107,"byte_end":2119,"line_start":54,"line_end":54,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":2107,"byte_end":2119,"line_start":54,"line_end":54,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:54:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m55\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn strcpy(_: *mut std::os::raw::c_char, _: *const std::os::\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m     -> *mut std::os::raw::c_char;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|__________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":2252,"byte_end":2317,"line_start":58,"line_end":58,"column_start":5,"column_end":70,"is_primary":false,"text":[{"text":"    fn strerror(_: std::os::raw::c_int) -> *mut std::os::raw::c_char;","highlight_start":5,"highlight_end":70}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":2235,"byte_end":2247,"line_start":57,"line_end":57,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":2235,"byte_end":2247,"line_start":57,"line_end":57,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:57:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m57\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m58\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn strerror(_: std::os::raw::c_int) -> *mut std::os::raw::c_char;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":2339,"byte_end":2406,"line_start":60,"line_end":60,"column_start":5,"column_end":72,"is_primary":false,"text":[{"text":"    fn strlen(_: *const std::os::raw::c_char) -> std::os::raw::c_ulong;","highlight_start":5,"highlight_end":72}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":2322,"byte_end":2334,"line_start":59,"line_end":59,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":2322,"byte_end":2334,"line_start":59,"line_end":59,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:59:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m59\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m60\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn strlen(_: *const std::os::raw::c_char) -> std::os::raw::c_ulong;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":2428,"byte_end":2567,"line_start":62,"line_end":63,"column_start":5,"column_end":65,"is_primary":false,"text":[{"text":"    fn strncmp(_: *const std::os::raw::c_char, _: *const std::os::raw::c_char,","highlight_start":5,"highlight_end":79},{"text":"               _: std::os::raw::c_ulong) -> std::os::raw::c_int;","highlight_start":1,"highlight_end":65}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":2411,"byte_end":2423,"line_start":61,"line_end":61,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":2411,"byte_end":2423,"line_start":61,"line_end":61,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:61:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m61\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m62\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn strncmp(_: *const std::os::raw::c_char, _: *const std::os::r\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m               _: std::os::raw::c_ulong) -> std::os::raw::c_int;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|________________________________________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":2589,"byte_end":2722,"line_start":65,"line_end":66,"column_start":5,"column_end":35,"is_primary":false,"text":[{"text":"    fn strncpy(_: *mut std::os::raw::c_char, _: *const std::os::raw::c_char, _: std::os::raw::c_ulong)","highlight_start":5,"highlight_end":103},{"text":"     -> *mut std::os::raw::c_char;","highlight_start":1,"highlight_end":35}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":2572,"byte_end":2584,"line_start":64,"line_end":64,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":2572,"byte_end":2584,"line_start":64,"line_end":64,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:64:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m64\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m65\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn strncpy(_: *mut std::os::raw::c_char, _: *const std::os:\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m66\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m     -> *mut std::os::raw::c_char;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|__________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":2744,"byte_end":2852,"line_start":68,"line_end":69,"column_start":5,"column_end":35,"is_primary":false,"text":[{"text":"    fn strstr(_: *const std::os::raw::c_char, _: *const std::os::raw::c_char)","highlight_start":5,"highlight_end":78},{"text":"     -> *mut std::os::raw::c_char;","highlight_start":1,"highlight_end":35}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":2727,"byte_end":2739,"line_start":67,"line_end":67,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":2727,"byte_end":2739,"line_start":67,"line_end":67,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:67:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m67\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m68\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn strstr(_: *const std::os::raw::c_char, _: *const std::os\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m69\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m     -> *mut std::os::raw::c_char;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|__________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":2874,"byte_end":2980,"line_start":71,"line_end":72,"column_start":5,"column_end":35,"is_primary":false,"text":[{"text":"    fn strcat(_: *mut std::os::raw::c_char, _: *const std::os::raw::c_char)","highlight_start":5,"highlight_end":76},{"text":"     -> *mut std::os::raw::c_char;","highlight_start":1,"highlight_end":35}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":2857,"byte_end":2869,"line_start":70,"line_end":70,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":2857,"byte_end":2869,"line_start":70,"line_end":70,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:70:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m70\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m71\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn strcat(_: *mut std::os::raw::c_char, _: *const std::os::\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m72\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m     -> *mut std::os::raw::c_char;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|__________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":3002,"byte_end":3043,"line_start":74,"line_end":74,"column_start":5,"column_end":46,"is_primary":false,"text":[{"text":"    fn __error() -> *mut std::os::raw::c_int;","highlight_start":5,"highlight_end":46}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":2985,"byte_end":2997,"line_start":73,"line_end":73,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":2985,"byte_end":2997,"line_start":73,"line_end":73,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:73:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m73\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m74\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn __error() -> *mut std::os::raw::c_int;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":3065,"byte_end":3151,"line_start":76,"line_end":76,"column_start":5,"column_end":91,"is_primary":false,"text":[{"text":"    fn __maskrune(_: __darwin_ct_rune_t, _: std::os::raw::c_ulong) -> std::os::raw::c_int;","highlight_start":5,"highlight_end":91}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":3048,"byte_end":3060,"line_start":75,"line_end":75,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":3048,"byte_end":3060,"line_start":75,"line_end":75,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:75:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m75\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m76\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn __maskrune(_: __darwin_ct_rune_t, _: std::os::raw::c_ulong) -> std::os::raw::c_int;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign static","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":3173,"byte_end":3216,"line_start":78,"line_end":78,"column_start":5,"column_end":48,"is_primary":false,"text":[{"text":"    static mut _DefaultRuneLocale: _RuneLocale;","highlight_start":5,"highlight_end":48}],"label":"foreign static","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":3156,"byte_end":3168,"line_start":77,"line_end":77,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":3156,"byte_end":3168,"line_start":77,"line_end":77,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign static\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:77:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m77\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m78\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    static mut _DefaultRuneLocale: _RuneLocale;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign static\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":3238,"byte_end":3510,"line_start":80,"line_end":83,"column_start":5,"column_end":35,"is_primary":false,"text":[{"text":"    fn BZ2_bzReadOpen(bzerror: *mut std::os::raw::c_int, f: *mut FILE,","highlight_start":5,"highlight_end":71},{"text":"                      verbosity_0: std::os::raw::c_int, small: std::os::raw::c_int,","highlight_start":1,"highlight_end":84},{"text":"                      unused: *mut std::os::raw::c_void, nUnused: std::os::raw::c_int)","highlight_start":1,"highlight_end":87},{"text":"     -> *mut std::os::raw::c_void;","highlight_start":1,"highlight_end":35}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":3221,"byte_end":3233,"line_start":79,"line_end":79,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":3221,"byte_end":3233,"line_start":79,"line_end":79,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:79:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m79\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m80\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn BZ2_bzReadOpen(bzerror: *mut std::os::raw::c_int, f: *mu\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m81\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                      verbosity_0: std::os::raw::c_int, small: \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m82\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                      unused: *mut std::os::raw::c_void, nUnuse\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m83\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m     -> *mut std::os::raw::c_void;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|__________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":3532,"byte_end":3616,"line_start":85,"line_end":85,"column_start":5,"column_end":89,"is_primary":false,"text":[{"text":"    fn BZ2_bzReadClose(bzerror: *mut std::os::raw::c_int, b: *mut std::os::raw::c_void);","highlight_start":5,"highlight_end":89}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":3515,"byte_end":3527,"line_start":84,"line_end":84,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":3515,"byte_end":3527,"line_start":84,"line_end":84,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:84:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m84\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m85\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn BZ2_bzReadClose(bzerror: *mut std::os::raw::c_int, b: *mut std::os::raw::c_void);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":3638,"byte_end":3855,"line_start":87,"line_end":89,"column_start":5,"column_end":63,"is_primary":false,"text":[{"text":"    fn BZ2_bzReadGetUnused(bzerror: *mut std::os::raw::c_int, b: *mut std::os::raw::c_void,","highlight_start":5,"highlight_end":92},{"text":"                           unused: *mut *mut std::os::raw::c_void,","highlight_start":1,"highlight_end":67},{"text":"                           nUnused: *mut std::os::raw::c_int);","highlight_start":1,"highlight_end":63}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":3621,"byte_end":3633,"line_start":86,"line_end":86,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":3621,"byte_end":3633,"line_start":86,"line_end":86,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:86:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m86\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m87\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn BZ2_bzReadGetUnused(bzerror: *mut std::os::raw::c_int, b: \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m88\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                           unused: *mut *mut std::os::raw::c_void,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m89\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                           nUnused: *mut std::os::raw::c_int);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|______________________________________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":3877,"byte_end":4055,"line_start":91,"line_end":92,"column_start":5,"column_end":100,"is_primary":false,"text":[{"text":"    fn BZ2_bzRead(bzerror: *mut std::os::raw::c_int, b: *mut std::os::raw::c_void,","highlight_start":5,"highlight_end":83},{"text":"                  buf: *mut std::os::raw::c_void, len: std::os::raw::c_int) -> std::os::raw::c_int;","highlight_start":1,"highlight_end":100}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":3860,"byte_end":3872,"line_start":90,"line_end":90,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":3860,"byte_end":3872,"line_start":90,"line_end":90,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:90:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m90\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m91\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn BZ2_bzRead(bzerror: *mut std::os::raw::c_int, b: *mut std::os::raw::c_void,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m92\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                  buf: *mut std::os::raw::c_void, len: std::os::raw::c_int) -> std::os::raw::c_int;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|___________________________________________________________________________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":4077,"byte_end":4327,"line_start":94,"line_end":96,"column_start":5,"column_end":88,"is_primary":false,"text":[{"text":"    fn BZ2_bzWriteOpen(bzerror: *mut std::os::raw::c_int, f: *mut FILE,","highlight_start":5,"highlight_end":72},{"text":"                       blockSize100k_0: std::os::raw::c_int, verbosity_0: std::os::raw::c_int,","highlight_start":1,"highlight_end":95},{"text":"                       workFactor_0: std::os::raw::c_int) -> *mut std::os::raw::c_void;","highlight_start":1,"highlight_end":88}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":4060,"byte_end":4072,"line_start":93,"line_end":93,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":4060,"byte_end":4072,"line_start":93,"line_end":93,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:93:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m93\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m94\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn BZ2_bzWriteOpen(bzerror: *mut std::os::raw::c_int, f: *mut FILE,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m95\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                       blockSize100k_0: std::os::raw::c_int, verbosity_0: std::os::raw::c_\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m96\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                       workFactor_0: std::os::raw::c_int) -> *mut std::os::raw::c_void;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_______________________________________________________________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":4349,"byte_end":4506,"line_start":98,"line_end":99,"column_start":5,"column_end":78,"is_primary":false,"text":[{"text":"    fn BZ2_bzWrite(bzerror: *mut std::os::raw::c_int, b: *mut std::os::raw::c_void,","highlight_start":5,"highlight_end":84},{"text":"                   buf: *mut std::os::raw::c_void, len: std::os::raw::c_int);","highlight_start":1,"highlight_end":78}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":4332,"byte_end":4344,"line_start":97,"line_end":97,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":4332,"byte_end":4344,"line_start":97,"line_end":97,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:97:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m97\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m98\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn BZ2_bzWrite(bzerror: *mut std::os::raw::c_int, b: *mut std::os::raw::c_vo\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m99\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                   buf: *mut std::os::raw::c_void, len: std::os::raw::c_int);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_____________________________________________________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":4528,"byte_end":4949,"line_start":101,"line_end":106,"column_start":5,"column_end":71,"is_primary":false,"text":[{"text":"    fn BZ2_bzWriteClose64(bzerror: *mut std::os::raw::c_int, b: *mut std::os::raw::c_void,","highlight_start":5,"highlight_end":91},{"text":"                          abandon: std::os::raw::c_int,","highlight_start":1,"highlight_end":56},{"text":"                          nbytes_in_lo32: *mut std::os::raw::c_uint,","highlight_start":1,"highlight_end":69},{"text":"                          nbytes_in_hi32: *mut std::os::raw::c_uint,","highlight_start":1,"highlight_end":69},{"text":"                          nbytes_out_lo32: *mut std::os::raw::c_uint,","highlight_start":1,"highlight_end":70},{"text":"                          nbytes_out_hi32: *mut std::os::raw::c_uint);","highlight_start":1,"highlight_end":71}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":4511,"byte_end":4523,"line_start":100,"line_end":100,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":4511,"byte_end":4523,"line_start":100,"line_end":100,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:100:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m100\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m101\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn BZ2_bzWriteClose64(bzerror: *mut std::os::raw::c_int, b: *mut std:\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m102\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                          abandon: std::os::raw::c_int,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m103\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                          nbytes_in_lo32: *mut std::os::raw::c_uint,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m104\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                          nbytes_in_hi32: *mut std::os::raw::c_uint,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m105\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                          nbytes_out_lo32: *mut std::os::raw::c_uint,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m106\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                          nbytes_out_hi32: *mut std::os::raw::c_uint);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|______________________________________________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":4971,"byte_end":5024,"line_start":108,"line_end":108,"column_start":5,"column_end":58,"is_primary":false,"text":[{"text":"    fn BZ2_bzlibVersion() -> *const std::os::raw::c_char;","highlight_start":5,"highlight_end":58}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":4954,"byte_end":4966,"line_start":107,"line_end":107,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":4954,"byte_end":4966,"line_start":107,"line_end":107,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:107:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m107\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m108\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn BZ2_bzlibVersion() -> *const std::os::raw::c_char;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":5046,"byte_end":5141,"line_start":110,"line_end":110,"column_start":5,"column_end":100,"is_primary":false,"text":[{"text":"    fn open(_: *const std::os::raw::c_char, _: std::os::raw::c_int, _: ...) -> std::os::raw::c_int;","highlight_start":5,"highlight_end":100}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":5029,"byte_end":5041,"line_start":109,"line_end":109,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":5029,"byte_end":5041,"line_start":109,"line_end":109,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:109:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m109\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m110\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn open(_: *const std::os::raw::c_char, _: std::os::raw::c_int, _: ...) -> std::os::raw::c_int;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":5163,"byte_end":5246,"line_start":112,"line_end":112,"column_start":5,"column_end":88,"is_primary":false,"text":[{"text":"    fn utime(_: *const std::os::raw::c_char, _: *const utimbuf) -> std::os::raw::c_int;","highlight_start":5,"highlight_end":88}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":5146,"byte_end":5158,"line_start":111,"line_end":111,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":5146,"byte_end":5158,"line_start":111,"line_end":111,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:111:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m111\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m112\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn utime(_: *const std::os::raw::c_char, _: *const utimbuf) -> std::os::raw::c_int;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":5268,"byte_end":5306,"line_start":114,"line_end":114,"column_start":5,"column_end":43,"is_primary":false,"text":[{"text":"    fn _exit(_: std::os::raw::c_int) -> !;","highlight_start":5,"highlight_end":43}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":5251,"byte_end":5263,"line_start":113,"line_end":113,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":5251,"byte_end":5263,"line_start":113,"line_end":113,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:113:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m113\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m114\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn _exit(_: std::os::raw::c_int) -> !;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":5328,"byte_end":5384,"line_start":116,"line_end":116,"column_start":5,"column_end":61,"is_primary":false,"text":[{"text":"    fn close(_: std::os::raw::c_int) -> std::os::raw::c_int;","highlight_start":5,"highlight_end":61}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":5311,"byte_end":5323,"line_start":115,"line_end":115,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":5311,"byte_end":5323,"line_start":115,"line_end":115,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:115:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m115\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m116\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn close(_: std::os::raw::c_int) -> std::os::raw::c_int;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":5406,"byte_end":5463,"line_start":118,"line_end":118,"column_start":5,"column_end":62,"is_primary":false,"text":[{"text":"    fn isatty(_: std::os::raw::c_int) -> std::os::raw::c_int;","highlight_start":5,"highlight_end":62}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":5389,"byte_end":5401,"line_start":117,"line_end":117,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":5389,"byte_end":5401,"line_start":117,"line_end":117,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:117:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m117\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m118\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn isatty(_: std::os::raw::c_int) -> std::os::raw::c_int;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":5485,"byte_end":5590,"line_start":120,"line_end":121,"column_start":5,"column_end":17,"is_primary":false,"text":[{"text":"    fn write(__fd: std::os::raw::c_int, __buf: *const std::os::raw::c_void, __nbyte: size_t)","highlight_start":5,"highlight_end":93},{"text":"     -> ssize_t;","highlight_start":1,"highlight_end":17}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":5468,"byte_end":5480,"line_start":119,"line_end":119,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":5468,"byte_end":5480,"line_start":119,"line_end":119,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:119:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m119\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m120\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn write(__fd: std::os::raw::c_int, __buf: *const std::os:\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m121\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m     -> ssize_t;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":5612,"byte_end":5689,"line_start":123,"line_end":123,"column_start":5,"column_end":82,"is_primary":false,"text":[{"text":"    fn fchown(_: std::os::raw::c_int, _: uid_t, _: gid_t) -> std::os::raw::c_int;","highlight_start":5,"highlight_end":82}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":5595,"byte_end":5607,"line_start":122,"line_end":122,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":5595,"byte_end":5607,"line_start":122,"line_end":122,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:122:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m122\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m123\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn fchown(_: std::os::raw::c_int, _: uid_t, _: gid_t) -> std::os::raw::c_int;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":5711,"byte_end":5779,"line_start":125,"line_end":125,"column_start":5,"column_end":73,"is_primary":false,"text":[{"text":"    fn fchmod(_: std::os::raw::c_int, _: mode_t) -> std::os::raw::c_int;","highlight_start":5,"highlight_end":73}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":5694,"byte_end":5706,"line_start":124,"line_end":124,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":5694,"byte_end":5706,"line_start":124,"line_end":124,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:124:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m124\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m125\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn fchmod(_: std::os::raw::c_int, _: mode_t) -> std::os::raw::c_int;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":5801,"byte_end":5879,"line_start":127,"line_end":127,"column_start":5,"column_end":83,"is_primary":false,"text":[{"text":"    fn lstat(_: *const std::os::raw::c_char, _: *mut stat) -> std::os::raw::c_int;","highlight_start":5,"highlight_end":83}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":5784,"byte_end":5796,"line_start":126,"line_end":126,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":5784,"byte_end":5796,"line_start":126,"line_end":126,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:126:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m126\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m127\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn lstat(_: *const std::os::raw::c_char, _: *mut stat) -> std::os::raw::c_int;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":5901,"byte_end":5978,"line_start":129,"line_end":129,"column_start":5,"column_end":82,"is_primary":false,"text":[{"text":"    fn stat(_: *const std::os::raw::c_char, _: *mut stat) -> std::os::raw::c_int;","highlight_start":5,"highlight_end":82}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":5884,"byte_end":5896,"line_start":128,"line_end":128,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":5884,"byte_end":5896,"line_start":128,"line_end":128,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:128:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m128\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m129\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn stat(_: *const std::os::raw::c_char, _: *mut stat) -> std::os::raw::c_int;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign static","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2recover.rs","byte_start":58,"byte_end":90,"line_start":5,"line_end":5,"column_start":5,"column_end":37,"is_primary":false,"text":[{"text":"    static mut __stderrp: *mut FILE;","highlight_start":5,"highlight_end":37}],"label":"foreign static","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2recover.rs","byte_start":41,"byte_end":53,"line_start":4,"line_end":4,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2recover.rs","byte_start":41,"byte_end":53,"line_start":4,"line_end":4,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign static\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2recover.rs:4:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    static mut __stderrp: *mut FILE;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign static\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2recover.rs","byte_start":112,"byte_end":159,"line_start":7,"line_end":7,"column_start":5,"column_end":52,"is_primary":false,"text":[{"text":"    fn fclose(_: *mut FILE) -> std::os::raw::c_int;","highlight_start":5,"highlight_end":52}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2recover.rs","byte_start":95,"byte_end":107,"line_start":6,"line_end":6,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2recover.rs","byte_start":95,"byte_end":107,"line_start":6,"line_end":6,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2recover.rs:6:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn fclose(_: *mut FILE) -> std::os::raw::c_int;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2recover.rs","byte_start":181,"byte_end":228,"line_start":9,"line_end":9,"column_start":5,"column_end":52,"is_primary":false,"text":[{"text":"    fn fflush(_: *mut FILE) -> std::os::raw::c_int;","highlight_start":5,"highlight_end":52}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2recover.rs","byte_start":164,"byte_end":176,"line_start":8,"line_end":8,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2recover.rs","byte_start":164,"byte_end":176,"line_start":8,"line_end":8,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2recover.rs:8:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn fflush(_: *mut FILE) -> std::os::raw::c_int;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2recover.rs","byte_start":250,"byte_end":336,"line_start":11,"line_end":11,"column_start":5,"column_end":91,"is_primary":false,"text":[{"text":"    fn fopen(_: *const std::os::raw::c_char, _: *const std::os::raw::c_char) -> *mut FILE;","highlight_start":5,"highlight_end":91}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2recover.rs","byte_start":233,"byte_end":245,"line_start":10,"line_end":10,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2recover.rs","byte_start":233,"byte_end":245,"line_start":10,"line_end":10,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2recover.rs:10:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn fopen(_: *const std::os::raw::c_char, _: *const std::os::raw::c_char) -> *mut FILE;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2recover.rs","byte_start":358,"byte_end":446,"line_start":13,"line_end":13,"column_start":5,"column_end":93,"is_primary":false,"text":[{"text":"    fn fprintf(_: *mut FILE, _: *const std::os::raw::c_char, _: ...) -> std::os::raw::c_int;","highlight_start":5,"highlight_end":93}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2recover.rs","byte_start":341,"byte_end":353,"line_start":12,"line_end":12,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2recover.rs","byte_start":341,"byte_end":353,"line_start":12,"line_end":12,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2recover.rs:12:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn fprintf(_: *mut FILE, _: *const std::os::raw::c_char, _: ...) -> std::os::raw::c_int;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2recover.rs","byte_start":468,"byte_end":513,"line_start":15,"line_end":15,"column_start":5,"column_end":50,"is_primary":false,"text":[{"text":"    fn getc(_: *mut FILE) -> std::os::raw::c_int;","highlight_start":5,"highlight_end":50}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2recover.rs","byte_start":451,"byte_end":463,"line_start":14,"line_end":14,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2recover.rs","byte_start":451,"byte_end":463,"line_start":14,"line_end":14,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2recover.rs:14:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn getc(_: *mut FILE) -> std::os::raw::c_int;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2recover.rs","byte_start":535,"byte_end":577,"line_start":17,"line_end":17,"column_start":5,"column_end":47,"is_primary":false,"text":[{"text":"    fn perror(_: *const std::os::raw::c_char);","highlight_start":5,"highlight_end":47}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2recover.rs","byte_start":518,"byte_end":530,"line_start":16,"line_end":16,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2recover.rs","byte_start":518,"byte_end":530,"line_start":16,"line_end":16,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2recover.rs:16:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn perror(_: *const std::os::raw::c_char);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2recover.rs","byte_start":599,"byte_end":668,"line_start":19,"line_end":19,"column_start":5,"column_end":74,"is_primary":false,"text":[{"text":"    fn putc(_: std::os::raw::c_int, _: *mut FILE) -> std::os::raw::c_int;","highlight_start":5,"highlight_end":74}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2recover.rs","byte_start":582,"byte_end":594,"line_start":18,"line_end":18,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2recover.rs","byte_start":582,"byte_end":594,"line_start":18,"line_end":18,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2recover.rs:18:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m19\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn putc(_: std::os::raw::c_int, _: *mut FILE) -> std::os::raw::c_int;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2recover.rs","byte_start":690,"byte_end":799,"line_start":21,"line_end":22,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    fn sprintf(_: *mut std::os::raw::c_char, _: *const std::os::raw::c_char, _: ...)","highlight_start":5,"highlight_end":85},{"text":"     -> std::os::raw::c_int;","highlight_start":1,"highlight_end":29}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2recover.rs","byte_start":673,"byte_end":685,"line_start":20,"line_end":20,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2recover.rs","byte_start":673,"byte_end":685,"line_start":20,"line_end":20,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2recover.rs:20:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn sprintf(_: *mut std::os::raw::c_char, _: *const std::os:\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m     -> std::os::raw::c_int;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|____________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2recover.rs","byte_start":821,"byte_end":862,"line_start":24,"line_end":24,"column_start":5,"column_end":46,"is_primary":false,"text":[{"text":"    fn __error() -> *mut std::os::raw::c_int;","highlight_start":5,"highlight_end":46}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2recover.rs","byte_start":804,"byte_end":816,"line_start":23,"line_end":23,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2recover.rs","byte_start":804,"byte_end":816,"line_start":23,"line_end":23,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2recover.rs:23:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn __error() -> *mut std::os::raw::c_int;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2recover.rs","byte_start":884,"byte_end":949,"line_start":26,"line_end":26,"column_start":5,"column_end":70,"is_primary":false,"text":[{"text":"    fn malloc(_: std::os::raw::c_ulong) -> *mut std::os::raw::c_void;","highlight_start":5,"highlight_end":70}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2recover.rs","byte_start":867,"byte_end":879,"line_start":25,"line_end":25,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2recover.rs","byte_start":867,"byte_end":879,"line_start":25,"line_end":25,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2recover.rs:25:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m26\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn malloc(_: std::os::raw::c_ulong) -> *mut std::os::raw::c_void;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2recover.rs","byte_start":971,"byte_end":1009,"line_start":28,"line_end":28,"column_start":5,"column_end":43,"is_primary":false,"text":[{"text":"    fn free(_: *mut std::os::raw::c_void);","highlight_start":5,"highlight_end":43}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2recover.rs","byte_start":954,"byte_end":966,"line_start":27,"line_end":27,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2recover.rs","byte_start":954,"byte_end":966,"line_start":27,"line_end":27,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2recover.rs:27:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn free(_: *mut std::os::raw::c_void);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2recover.rs","byte_start":1031,"byte_end":1068,"line_start":30,"line_end":30,"column_start":5,"column_end":42,"is_primary":false,"text":[{"text":"    fn exit(_: std::os::raw::c_int) -> !;","highlight_start":5,"highlight_end":42}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2recover.rs","byte_start":1014,"byte_end":1026,"line_start":29,"line_end":29,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2recover.rs","byte_start":1014,"byte_end":1026,"line_start":29,"line_end":29,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2recover.rs:29:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn exit(_: std::os::raw::c_int) -> !;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2recover.rs","byte_start":1090,"byte_end":1196,"line_start":32,"line_end":33,"column_start":5,"column_end":35,"is_primary":false,"text":[{"text":"    fn strcat(_: *mut std::os::raw::c_char, _: *const std::os::raw::c_char)","highlight_start":5,"highlight_end":76},{"text":"     -> *mut std::os::raw::c_char;","highlight_start":1,"highlight_end":35}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2recover.rs","byte_start":1073,"byte_end":1085,"line_start":31,"line_end":31,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2recover.rs","byte_start":1073,"byte_end":1085,"line_start":31,"line_end":31,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2recover.rs:31:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m32\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn strcat(_: *mut std::os::raw::c_char, _: *const std::os::\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m     -> *mut std::os::raw::c_char;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|__________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2recover.rs","byte_start":1218,"byte_end":1324,"line_start":35,"line_end":36,"column_start":5,"column_end":35,"is_primary":false,"text":[{"text":"    fn strcpy(_: *mut std::os::raw::c_char, _: *const std::os::raw::c_char)","highlight_start":5,"highlight_end":76},{"text":"     -> *mut std::os::raw::c_char;","highlight_start":1,"highlight_end":35}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2recover.rs","byte_start":1201,"byte_end":1213,"line_start":34,"line_end":34,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2recover.rs","byte_start":1201,"byte_end":1213,"line_start":34,"line_end":34,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2recover.rs:34:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m35\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn strcpy(_: *mut std::os::raw::c_char, _: *const std::os::\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m36\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m     -> *mut std::os::raw::c_char;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|__________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2recover.rs","byte_start":1346,"byte_end":1413,"line_start":38,"line_end":38,"column_start":5,"column_end":72,"is_primary":false,"text":[{"text":"    fn strlen(_: *const std::os::raw::c_char) -> std::os::raw::c_ulong;","highlight_start":5,"highlight_end":72}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2recover.rs","byte_start":1329,"byte_end":1341,"line_start":37,"line_end":37,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2recover.rs","byte_start":1329,"byte_end":1341,"line_start":37,"line_end":37,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2recover.rs:37:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m38\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn strlen(_: *const std::os::raw::c_char) -> std::os::raw::c_ulong;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2recover.rs","byte_start":1435,"byte_end":1568,"line_start":40,"line_end":41,"column_start":5,"column_end":35,"is_primary":false,"text":[{"text":"    fn strncpy(_: *mut std::os::raw::c_char, _: *const std::os::raw::c_char, _: std::os::raw::c_ulong)","highlight_start":5,"highlight_end":103},{"text":"     -> *mut std::os::raw::c_char;","highlight_start":1,"highlight_end":35}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2recover.rs","byte_start":1418,"byte_end":1430,"line_start":39,"line_end":39,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2recover.rs","byte_start":1418,"byte_end":1430,"line_start":39,"line_end":39,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2recover.rs:39:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn strncpy(_: *mut std::os::raw::c_char, _: *const std::os:\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m     -> *mut std::os::raw::c_char;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|__________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2recover.rs","byte_start":1590,"byte_end":1686,"line_start":43,"line_end":43,"column_start":5,"column_end":101,"is_primary":false,"text":[{"text":"    fn strrchr(_: *const std::os::raw::c_char, _: std::os::raw::c_int) -> *mut std::os::raw::c_char;","highlight_start":5,"highlight_end":101}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2recover.rs","byte_start":1573,"byte_end":1585,"line_start":42,"line_end":42,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2recover.rs","byte_start":1573,"byte_end":1585,"line_start":42,"line_end":42,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2recover.rs:42:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn strrchr(_: *const std::os::raw::c_char, _: std::os::raw::c_int) -> *mut std::os::raw::c_char;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign static","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzlib.rs","byte_start":58,"byte_end":89,"line_start":5,"line_end":5,"column_start":5,"column_end":36,"is_primary":false,"text":[{"text":"    static mut __stdinp: *mut FILE;","highlight_start":5,"highlight_end":36}],"label":"foreign static","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzlib.rs","byte_start":41,"byte_end":53,"line_start":4,"line_end":4,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzlib.rs","byte_start":41,"byte_end":53,"line_start":4,"line_end":4,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign static\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzlib.rs:4:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    static mut __stdinp: *mut FILE;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign static\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign static","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzlib.rs","byte_start":111,"byte_end":143,"line_start":7,"line_end":7,"column_start":5,"column_end":37,"is_primary":false,"text":[{"text":"    static mut __stdoutp: *mut FILE;","highlight_start":5,"highlight_end":37}],"label":"foreign static","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzlib.rs","byte_start":94,"byte_end":106,"line_start":6,"line_end":6,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzlib.rs","byte_start":94,"byte_end":106,"line_start":6,"line_end":6,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign static\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzlib.rs:6:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    static mut __stdoutp: *mut FILE;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign static\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign static","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzlib.rs","byte_start":165,"byte_end":197,"line_start":9,"line_end":9,"column_start":5,"column_end":37,"is_primary":false,"text":[{"text":"    static mut __stderrp: *mut FILE;","highlight_start":5,"highlight_end":37}],"label":"foreign static","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzlib.rs","byte_start":148,"byte_end":160,"line_start":8,"line_end":8,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzlib.rs","byte_start":148,"byte_end":160,"line_start":8,"line_end":8,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign static\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzlib.rs:8:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    static mut __stderrp: *mut FILE;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign static\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzlib.rs","byte_start":219,"byte_end":266,"line_start":11,"line_end":11,"column_start":5,"column_end":52,"is_primary":false,"text":[{"text":"    fn fclose(_: *mut FILE) -> std::os::raw::c_int;","highlight_start":5,"highlight_end":52}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzlib.rs","byte_start":202,"byte_end":214,"line_start":10,"line_end":10,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzlib.rs","byte_start":202,"byte_end":214,"line_start":10,"line_end":10,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzlib.rs:10:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn fclose(_: *mut FILE) -> std::os::raw::c_int;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzlib.rs","byte_start":288,"byte_end":335,"line_start":13,"line_end":13,"column_start":5,"column_end":52,"is_primary":false,"text":[{"text":"    fn ferror(_: *mut FILE) -> std::os::raw::c_int;","highlight_start":5,"highlight_end":52}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzlib.rs","byte_start":271,"byte_end":283,"line_start":12,"line_end":12,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzlib.rs","byte_start":271,"byte_end":283,"line_start":12,"line_end":12,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzlib.rs:12:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn ferror(_: *mut FILE) -> std::os::raw::c_int;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzlib.rs","byte_start":357,"byte_end":404,"line_start":15,"line_end":15,"column_start":5,"column_end":52,"is_primary":false,"text":[{"text":"    fn fflush(_: *mut FILE) -> std::os::raw::c_int;","highlight_start":5,"highlight_end":52}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzlib.rs","byte_start":340,"byte_end":352,"line_start":14,"line_end":14,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzlib.rs","byte_start":340,"byte_end":352,"line_start":14,"line_end":14,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzlib.rs:14:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn fflush(_: *mut FILE) -> std::os::raw::c_int;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzlib.rs","byte_start":426,"byte_end":472,"line_start":17,"line_end":17,"column_start":5,"column_end":51,"is_primary":false,"text":[{"text":"    fn fgetc(_: *mut FILE) -> std::os::raw::c_int;","highlight_start":5,"highlight_end":51}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzlib.rs","byte_start":409,"byte_end":421,"line_start":16,"line_end":16,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzlib.rs","byte_start":409,"byte_end":421,"line_start":16,"line_end":16,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzlib.rs:16:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn fgetc(_: *mut FILE) -> std::os::raw::c_int;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzlib.rs","byte_start":494,"byte_end":580,"line_start":19,"line_end":19,"column_start":5,"column_end":91,"is_primary":false,"text":[{"text":"    fn fopen(_: *const std::os::raw::c_char, _: *const std::os::raw::c_char) -> *mut FILE;","highlight_start":5,"highlight_end":91}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzlib.rs","byte_start":477,"byte_end":489,"line_start":18,"line_end":18,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzlib.rs","byte_start":477,"byte_end":489,"line_start":18,"line_end":18,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzlib.rs:18:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m19\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn fopen(_: *const std::os::raw::c_char, _: *const std::os::raw::c_char) -> *mut FILE;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzlib.rs","byte_start":602,"byte_end":690,"line_start":21,"line_end":21,"column_start":5,"column_end":93,"is_primary":false,"text":[{"text":"    fn fprintf(_: *mut FILE, _: *const std::os::raw::c_char, _: ...) -> std::os::raw::c_int;","highlight_start":5,"highlight_end":93}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzlib.rs","byte_start":585,"byte_end":597,"line_start":20,"line_end":20,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzlib.rs","byte_start":585,"byte_end":597,"line_start":20,"line_end":20,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzlib.rs:20:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn fprintf(_: *mut FILE, _: *const std::os::raw::c_char, _: ...) -> std::os::raw::c_int;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzlib.rs","byte_start":712,"byte_end":855,"line_start":23,"line_end":24,"column_start":5,"column_end":53,"is_primary":false,"text":[{"text":"    fn fread(_: *mut std::os::raw::c_void, _: std::os::raw::c_ulong, _: std::os::raw::c_ulong,","highlight_start":5,"highlight_end":95},{"text":"             _: *mut FILE) -> std::os::raw::c_ulong;","highlight_start":1,"highlight_end":53}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzlib.rs","byte_start":695,"byte_end":707,"line_start":22,"line_end":22,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzlib.rs","byte_start":695,"byte_end":707,"line_start":22,"line_end":22,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzlib.rs:22:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn fread(_: *mut std::os::raw::c_void, _: std::os::raw::c_u\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m             _: *mut FILE) -> std::os::raw::c_ulong;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|____________________________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzlib.rs","byte_start":877,"byte_end":1024,"line_start":26,"line_end":27,"column_start":5,"column_end":54,"is_primary":false,"text":[{"text":"    fn fwrite(_: *const std::os::raw::c_void, _: std::os::raw::c_ulong, _: std::os::raw::c_ulong,","highlight_start":5,"highlight_end":98},{"text":"              _: *mut FILE) -> std::os::raw::c_ulong;","highlight_start":1,"highlight_end":54}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzlib.rs","byte_start":860,"byte_end":872,"line_start":25,"line_end":25,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzlib.rs","byte_start":860,"byte_end":872,"line_start":25,"line_end":25,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzlib.rs:25:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m26\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn fwrite(_: *const std::os::raw::c_void, _: std::os::raw::\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m              _: *mut FILE) -> std::os::raw::c_ulong;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_____________________________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzlib.rs","byte_start":1046,"byte_end":1117,"line_start":29,"line_end":29,"column_start":5,"column_end":76,"is_primary":false,"text":[{"text":"    fn ungetc(_: std::os::raw::c_int, _: *mut FILE) -> std::os::raw::c_int;","highlight_start":5,"highlight_end":76}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzlib.rs","byte_start":1029,"byte_end":1041,"line_start":28,"line_end":28,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzlib.rs","byte_start":1029,"byte_end":1041,"line_start":28,"line_end":28,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzlib.rs:28:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn ungetc(_: std::os::raw::c_int, _: *mut FILE) -> std::os::raw::c_int;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzlib.rs","byte_start":1139,"byte_end":1204,"line_start":31,"line_end":31,"column_start":5,"column_end":70,"is_primary":false,"text":[{"text":"    fn malloc(_: std::os::raw::c_ulong) -> *mut std::os::raw::c_void;","highlight_start":5,"highlight_end":70}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzlib.rs","byte_start":1122,"byte_end":1134,"line_start":30,"line_end":30,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzlib.rs","byte_start":1122,"byte_end":1134,"line_start":30,"line_end":30,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzlib.rs:30:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn malloc(_: std::os::raw::c_ulong) -> *mut std::os::raw::c_void;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzlib.rs","byte_start":1226,"byte_end":1264,"line_start":33,"line_end":33,"column_start":5,"column_end":43,"is_primary":false,"text":[{"text":"    fn free(_: *mut std::os::raw::c_void);","highlight_start":5,"highlight_end":43}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzlib.rs","byte_start":1209,"byte_end":1221,"line_start":32,"line_end":32,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzlib.rs","byte_start":1209,"byte_end":1221,"line_start":32,"line_end":32,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzlib.rs:32:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m32\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn free(_: *mut std::os::raw::c_void);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzlib.rs","byte_start":1286,"byte_end":1323,"line_start":35,"line_end":35,"column_start":5,"column_end":42,"is_primary":false,"text":[{"text":"    fn exit(_: std::os::raw::c_int) -> !;","highlight_start":5,"highlight_end":42}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzlib.rs","byte_start":1269,"byte_end":1281,"line_start":34,"line_end":34,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzlib.rs","byte_start":1269,"byte_end":1281,"line_start":34,"line_end":34,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzlib.rs:34:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m35\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn exit(_: std::os::raw::c_int) -> !;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzlib.rs","byte_start":1345,"byte_end":1424,"line_start":37,"line_end":37,"column_start":5,"column_end":84,"is_primary":false,"text":[{"text":"    fn fdopen(_: std::os::raw::c_int, _: *const std::os::raw::c_char) -> *mut FILE;","highlight_start":5,"highlight_end":84}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzlib.rs","byte_start":1328,"byte_end":1340,"line_start":36,"line_end":36,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzlib.rs","byte_start":1328,"byte_end":1340,"line_start":36,"line_end":36,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzlib.rs:36:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m36\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn fdopen(_: std::os::raw::c_int, _: *const std::os::raw::c_char) -> *mut FILE;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign static","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzlib.rs","byte_start":1446,"byte_end":1489,"line_start":39,"line_end":39,"column_start":5,"column_end":48,"is_primary":false,"text":[{"text":"    static mut _DefaultRuneLocale: _RuneLocale;","highlight_start":5,"highlight_end":48}],"label":"foreign static","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzlib.rs","byte_start":1429,"byte_end":1441,"line_start":38,"line_end":38,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzlib.rs","byte_start":1429,"byte_end":1441,"line_start":38,"line_end":38,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign static\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzlib.rs:38:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m38\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    static mut _DefaultRuneLocale: _RuneLocale;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign static\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzlib.rs","byte_start":1511,"byte_end":1617,"line_start":41,"line_end":42,"column_start":5,"column_end":35,"is_primary":false,"text":[{"text":"    fn strcat(_: *mut std::os::raw::c_char, _: *const std::os::raw::c_char)","highlight_start":5,"highlight_end":76},{"text":"     -> *mut std::os::raw::c_char;","highlight_start":1,"highlight_end":35}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzlib.rs","byte_start":1494,"byte_end":1506,"line_start":40,"line_end":40,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzlib.rs","byte_start":1494,"byte_end":1506,"line_start":40,"line_end":40,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzlib.rs:40:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn strcat(_: *mut std::os::raw::c_char, _: *const std::os::\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m     -> *mut std::os::raw::c_char;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|__________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzlib.rs","byte_start":1639,"byte_end":1736,"line_start":44,"line_end":44,"column_start":5,"column_end":102,"is_primary":false,"text":[{"text":"    fn strcmp(_: *const std::os::raw::c_char, _: *const std::os::raw::c_char) -> std::os::raw::c_int;","highlight_start":5,"highlight_end":102}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzlib.rs","byte_start":1622,"byte_end":1634,"line_start":43,"line_end":43,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzlib.rs","byte_start":1622,"byte_end":1634,"line_start":43,"line_end":43,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzlib.rs:43:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m44\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn strcmp(_: *const std::os::raw::c_char, _: *const std::os::raw::c_char) -> std::os::raw::c_int;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzlib.rs","byte_start":1758,"byte_end":1804,"line_start":46,"line_end":46,"column_start":5,"column_end":51,"is_primary":false,"text":[{"text":"    fn BZ2_compressBlock(_: *mut EState, _: Bool);","highlight_start":5,"highlight_end":51}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzlib.rs","byte_start":1741,"byte_end":1753,"line_start":45,"line_end":45,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzlib.rs","byte_start":1741,"byte_end":1753,"line_start":45,"line_end":45,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzlib.rs:45:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m45\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m46\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn BZ2_compressBlock(_: *mut EState, _: Bool);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign static","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzlib.rs","byte_start":1826,"byte_end":1867,"line_start":48,"line_end":48,"column_start":5,"column_end":46,"is_primary":false,"text":[{"text":"    static mut BZ2_crc32Table: [UInt32; 256];","highlight_start":5,"highlight_end":46}],"label":"foreign static","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzlib.rs","byte_start":1809,"byte_end":1821,"line_start":47,"line_end":47,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzlib.rs","byte_start":1809,"byte_end":1821,"line_start":47,"line_end":47,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign static\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzlib.rs:47:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m47\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m48\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    static mut BZ2_crc32Table: [UInt32; 256];\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign static\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzlib.rs","byte_start":1889,"byte_end":1932,"line_start":50,"line_end":50,"column_start":5,"column_end":48,"is_primary":false,"text":[{"text":"    fn BZ2_decompress(_: *mut DState) -> Int32;","highlight_start":5,"highlight_end":48}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzlib.rs","byte_start":1872,"byte_end":1884,"line_start":49,"line_end":49,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzlib.rs","byte_start":1872,"byte_end":1884,"line_start":49,"line_end":49,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzlib.rs:49:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m49\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn BZ2_decompress(_: *mut DState) -> Int32;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign static","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzlib.rs","byte_start":1954,"byte_end":1989,"line_start":52,"line_end":52,"column_start":5,"column_end":40,"is_primary":false,"text":[{"text":"    static mut BZ2_rNums: [Int32; 512];","highlight_start":5,"highlight_end":40}],"label":"foreign static","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzlib.rs","byte_start":1937,"byte_end":1949,"line_start":51,"line_end":51,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzlib.rs","byte_start":1937,"byte_end":1949,"line_start":51,"line_end":51,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign static\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzlib.rs:51:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    static mut BZ2_rNums: [Int32; 512];\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign static\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"compress.rs","byte_start":58,"byte_end":146,"line_start":5,"line_end":5,"column_start":5,"column_end":93,"is_primary":false,"text":[{"text":"    fn fprintf(_: *mut FILE, _: *const std::os::raw::c_char, _: ...) -> std::os::raw::c_int;","highlight_start":5,"highlight_end":93}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"compress.rs","byte_start":41,"byte_end":53,"line_start":4,"line_end":4,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"compress.rs","byte_start":41,"byte_end":53,"line_start":4,"line_end":4,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcompress.rs:4:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn fprintf(_: *mut FILE, _: *const std::os::raw::c_char, _: ...) -> std::os::raw::c_int;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign static","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"compress.rs","byte_start":168,"byte_end":200,"line_start":7,"line_end":7,"column_start":5,"column_end":37,"is_primary":false,"text":[{"text":"    static mut __stderrp: *mut FILE;","highlight_start":5,"highlight_end":37}],"label":"foreign static","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"compress.rs","byte_start":151,"byte_end":163,"line_start":6,"line_end":6,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"compress.rs","byte_start":151,"byte_end":163,"line_start":6,"line_end":6,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign static\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcompress.rs:6:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    static mut __stderrp: *mut FILE;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign static\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"compress.rs","byte_start":222,"byte_end":277,"line_start":9,"line_end":9,"column_start":5,"column_end":60,"is_primary":false,"text":[{"text":"    fn BZ2_bz__AssertH__fail(errcode: std::os::raw::c_int);","highlight_start":5,"highlight_end":60}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"compress.rs","byte_start":205,"byte_end":217,"line_start":8,"line_end":8,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"compress.rs","byte_start":205,"byte_end":217,"line_start":8,"line_end":8,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcompress.rs:8:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn BZ2_bz__AssertH__fail(errcode: std::os::raw::c_int);\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"compress.rs","byte_start":299,"byte_end":332,"line_start":11,"line_end":11,"column_start":5,"column_end":38,"is_primary":false,"text":[{"text":"    fn BZ2_blockSort(_: *mut EState);","highlight_start":5,"highlight_end":38}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"compress.rs","byte_start":282,"byte_end":294,"line_start":10,"line_end":10,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"compress.rs","byte_start":282,"byte_end":294,"line_start":10,"line_end":10,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcompress.rs:10:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn BZ2_blockSort(_: *mut EState);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"compress.rs","byte_start":354,"byte_end":460,"line_start":13,"line_end":14,"column_start":5,"column_end":36,"is_primary":false,"text":[{"text":"    fn BZ2_hbAssignCodes(_: *mut Int32, _: *mut UChar, _: Int32, _: Int32,","highlight_start":5,"highlight_end":75},{"text":"                         _: Int32);","highlight_start":1,"highlight_end":36}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"compress.rs","byte_start":337,"byte_end":349,"line_start":12,"line_end":12,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"compress.rs","byte_start":337,"byte_end":349,"line_start":12,"line_end":12,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcompress.rs:12:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn BZ2_hbAssignCodes(_: *mut Int32, _: *mut UChar, _: Int32\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                         _: Int32);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|___________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"compress.rs","byte_start":482,"byte_end":586,"line_start":16,"line_end":17,"column_start":5,"column_end":40,"is_primary":false,"text":[{"text":"    fn BZ2_hbMakeCodeLengths(_: *mut UChar, _: *mut Int32, _: Int32,","highlight_start":5,"highlight_end":69},{"text":"                             _: Int32);","highlight_start":1,"highlight_end":40}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"compress.rs","byte_start":465,"byte_end":477,"line_start":15,"line_end":15,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"compress.rs","byte_start":465,"byte_end":477,"line_start":15,"line_end":15,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcompress.rs:15:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn BZ2_hbMakeCodeLengths(_: *mut UChar, _: *mut Int32, _: I\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                             _: Int32);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_______________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign static","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":58,"byte_end":90,"line_start":5,"line_end":5,"column_start":5,"column_end":37,"is_primary":false,"text":[{"text":"    static mut __stderrp: *mut FILE;","highlight_start":5,"highlight_end":37}],"label":"foreign static","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"decompress.rs","byte_start":41,"byte_end":53,"line_start":4,"line_end":4,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":41,"byte_end":53,"line_start":4,"line_end":4,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign static\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:4:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    static mut __stderrp: *mut FILE;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign static\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":112,"byte_end":200,"line_start":7,"line_end":7,"column_start":5,"column_end":93,"is_primary":false,"text":[{"text":"    fn fprintf(_: *mut FILE, _: *const std::os::raw::c_char, _: ...) -> std::os::raw::c_int;","highlight_start":5,"highlight_end":93}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"decompress.rs","byte_start":95,"byte_end":107,"line_start":6,"line_end":6,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":95,"byte_end":107,"line_start":6,"line_end":6,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:6:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn fprintf(_: *mut FILE, _: *const std::os::raw::c_char, _: ...) -> std::os::raw::c_int;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":222,"byte_end":277,"line_start":9,"line_end":9,"column_start":5,"column_end":60,"is_primary":false,"text":[{"text":"    fn BZ2_bz__AssertH__fail(errcode: std::os::raw::c_int);","highlight_start":5,"highlight_end":60}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"decompress.rs","byte_start":205,"byte_end":217,"line_start":8,"line_end":8,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":205,"byte_end":217,"line_start":8,"line_end":8,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:8:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn BZ2_bz__AssertH__fail(errcode: std::os::raw::c_int);\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign static","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":299,"byte_end":334,"line_start":11,"line_end":11,"column_start":5,"column_end":40,"is_primary":false,"text":[{"text":"    static mut BZ2_rNums: [Int32; 512];","highlight_start":5,"highlight_end":40}],"label":"foreign static","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"decompress.rs","byte_start":282,"byte_end":294,"line_start":10,"line_end":10,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":282,"byte_end":294,"line_start":10,"line_end":10,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign static\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:10:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    static mut BZ2_rNums: [Int32; 512];\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign static\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":356,"byte_end":408,"line_start":13,"line_end":13,"column_start":5,"column_end":57,"is_primary":false,"text":[{"text":"    fn BZ2_indexIntoF(_: Int32, _: *mut Int32) -> Int32;","highlight_start":5,"highlight_end":57}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"decompress.rs","byte_start":339,"byte_end":351,"line_start":12,"line_end":12,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":339,"byte_end":351,"line_start":12,"line_end":12,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:12:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn BZ2_indexIntoF(_: Int32, _: *mut Int32) -> Int32;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":430,"byte_end":580,"line_start":15,"line_end":16,"column_start":5,"column_end":78,"is_primary":false,"text":[{"text":"    fn BZ2_hbCreateDecodeTables(_: *mut Int32, _: *mut Int32, _: *mut Int32,","highlight_start":5,"highlight_end":77},{"text":"                                _: *mut UChar, _: Int32, _: Int32, _: Int32);","highlight_start":1,"highlight_end":78}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"decompress.rs","byte_start":413,"byte_end":425,"line_start":14,"line_end":14,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":413,"byte_end":425,"line_start":14,"line_end":14,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:14:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn BZ2_hbCreateDecodeTables(_: *mut Int32, _: *mut Int32, _: *mut Int32,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                _: *mut UChar, _: Int32, _: Int32, _: Int32);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_____________________________________________________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"huffman.rs","byte_start":35,"byte_end":90,"line_start":4,"line_end":4,"column_start":5,"column_end":60,"is_primary":false,"text":[{"text":"    fn BZ2_bz__AssertH__fail(errcode: std::os::raw::c_int);","highlight_start":5,"highlight_end":60}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"huffman.rs","byte_start":18,"byte_end":30,"line_start":3,"line_end":3,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"huffman.rs","byte_start":18,"byte_end":30,"line_start":3,"line_end":3,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhuffman.rs:3:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn BZ2_bz__AssertH__fail(errcode: std::os::raw::c_int);\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the feature `ptr_offset_from` has been stable since 1.47.0 and no longer requires an attribute to enable","code":{"code":"stable_features","explanation":null},"level":"warning","spans":[{"file_name":"c2rust-lib.rs","byte_start":344,"byte_end":359,"line_start":13,"line_end":13,"column_start":12,"column_end":27,"is_primary":true,"text":[{"text":"#![feature(ptr_offset_from)]","highlight_start":12,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(stable_features)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the feature `ptr_offset_from` has been stable since 1.47.0 and no longer requires an attribute to enable\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mc2rust-lib.rs:13:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![feature(ptr_offset_from)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(stable_features)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"creating a mutable reference to mutable static is discouraged","code":{"code":"static_mut_refs","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":106612,"byte_end":106629,"line_start":2007,"line_end":2007,"column_start":28,"column_end":45,"is_primary":true,"text":[{"text":"    retVal = stat(srcName, &mut fileMetaInfo);","highlight_start":28,"highlight_end":45}],"label":"mutable reference to mutable static","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for more information, see issue #114447 <https://github.com/rust-lang/rust/issues/114447>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"this will be a hard error in the 2024 edition","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"this mutable reference has lifetime `'static`, but if the static gets accessed (read or written) by any other means, or any other reference is created, then any further use of this mutable reference is Undefined Behavior","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(static_mut_refs)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `addr_of_mut!` instead to create a raw pointer","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":106612,"byte_end":106629,"line_start":2007,"line_end":2007,"column_start":28,"column_end":45,"is_primary":true,"text":[{"text":"    retVal = stat(srcName, &mut fileMetaInfo);","highlight_start":28,"highlight_end":45}],"label":null,"suggested_replacement":"addr_of_mut!(fileMetaInfo)","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: creating a mutable reference to mutable static is discouraged\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:2007:28\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2007\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    retVal = stat(srcName, &mut fileMetaInfo);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mmutable reference to mutable static\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #114447 <https://github.com/rust-lang/rust/issues/114447>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this will be a hard error in the 2024 edition\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this mutable reference has lifetime `'static`, but if the static gets accessed (read or written) by any other means, or any other reference is created, then any further use of this mutable reference is Undefined Behavior\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(static_mut_refs)]` on by default\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use `addr_of_mut!` instead to create a raw pointer\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2007\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    retVal = stat(srcName, \u001b[0m\u001b[0m\u001b[38;5;10maddr_of_mut!(fileMetaInfo)\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `n`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":94405,"byte_end":94406,"line_start":1773,"line_end":1773,"column_start":42,"column_end":43,"is_primary":true,"text":[{"text":"unsafe extern \"C\" fn mySignalCatcher(mut n: IntNative) {","highlight_start":42,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_variables)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":94405,"byte_end":94406,"line_start":1773,"line_end":1773,"column_start":42,"column_end":43,"is_primary":true,"text":[{"text":"unsafe extern \"C\" fn mySignalCatcher(mut n: IntNative) {","highlight_start":42,"highlight_end":43}],"label":null,"suggested_replacement":"_n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `n`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:1773:42\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1773\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0munsafe extern \"C\" fn mySignalCatcher(mut n: IntNative) {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_n`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_variables)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `n`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":94730,"byte_end":94731,"line_start":1780,"line_end":1780,"column_start":51,"column_end":52,"is_primary":true,"text":[{"text":"unsafe extern \"C\" fn mySIGSEGVorSIGBUScatcher(mut n: IntNative) {","highlight_start":51,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":94730,"byte_end":94731,"line_start":1780,"line_end":1780,"column_start":51,"column_end":52,"is_primary":true,"text":[{"text":"unsafe extern \"C\" fn mySIGSEGVorSIGBUScatcher(mut n: IntNative) {","highlight_start":51,"highlight_end":52}],"label":null,"suggested_replacement":"_n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `n`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:1780:51\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1780\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0munsafe extern \"C\" fn mySIGSEGVorSIGBUScatcher(mut n: IntNative) {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_n`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `name`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":107545,"byte_end":107549,"line_start":2028,"line_end":2028,"column_start":47,"column_end":51,"is_primary":true,"text":[{"text":"unsafe extern \"C\" fn containsDubiousChars(mut name: *mut Char) -> Bool {","highlight_start":47,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":107545,"byte_end":107549,"line_start":2028,"line_end":2028,"column_start":47,"column_end":51,"is_primary":true,"text":[{"text":"unsafe extern \"C\" fn containsDubiousChars(mut name: *mut Char) -> Bool {","highlight_start":47,"highlight_end":51}],"label":null,"suggested_replacement":"_name","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `name`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:2028:47\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2028\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mntainsDubiousChars(mut name: *mut Char) -> Bool {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_name`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `opaque`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"bzlib.rs","byte_start":14859,"byte_end":14865,"line_start":370,"line_end":370,"column_start":42,"column_end":48,"is_primary":true,"text":[{"text":"unsafe extern \"C\" fn default_bzalloc(mut opaque: *mut std::os::raw::c_void,","highlight_start":42,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"bzlib.rs","byte_start":14859,"byte_end":14865,"line_start":370,"line_end":370,"column_start":42,"column_end":48,"is_primary":true,"text":[{"text":"unsafe extern \"C\" fn default_bzalloc(mut opaque: *mut std::os::raw::c_void,","highlight_start":42,"highlight_end":48}],"label":null,"suggested_replacement":"_opaque","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `opaque`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzlib.rs:370:42\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m370\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m default_bzalloc(mut opaque: *mut std::os::raw::c_void,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_opaque`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `opaque`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"bzlib.rs","byte_start":15146,"byte_end":15152,"line_start":376,"line_end":376,"column_start":41,"column_end":47,"is_primary":true,"text":[{"text":"unsafe extern \"C\" fn default_bzfree(mut opaque: *mut std::os::raw::c_void,","highlight_start":41,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"bzlib.rs","byte_start":15146,"byte_end":15152,"line_start":376,"line_end":376,"column_start":41,"column_end":47,"is_primary":true,"text":[{"text":"unsafe extern \"C\" fn default_bzfree(mut opaque: *mut std::os::raw::c_void,","highlight_start":41,"highlight_end":47}],"label":null,"suggested_replacement":"_opaque","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `opaque`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzlib.rs:376:41\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m376\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mn default_bzfree(mut opaque: *mut std::os::raw::c_void,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_opaque`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `b`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"bzlib.rs","byte_start":121761,"byte_end":121762,"line_start":2472,"line_end":2472,"column_start":42,"column_end":43,"is_primary":true,"text":[{"text":"pub unsafe extern \"C\" fn BZ2_bzflush(mut b: *mut std::os::raw::c_void)","highlight_start":42,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"bzlib.rs","byte_start":121761,"byte_end":121762,"line_start":2472,"line_end":2472,"column_start":42,"column_end":43,"is_primary":true,"text":[{"text":"pub unsafe extern \"C\" fn BZ2_bzflush(mut b: *mut std::os::raw::c_void)","highlight_start":42,"highlight_end":43}],"label":null,"suggested_replacement":"_b","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `b`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzlib.rs:2472:42\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2472\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m\"C\" fn BZ2_bzflush(mut b: *mut std::os::raw::c_void)\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_b`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 4 previous errors; 172 warnings emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 4 previous errors; 172 warnings emitted\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"For more information about this error, try `rustc --explain E0557`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0557`.\u001b[0m\n"}
