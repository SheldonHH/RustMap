{"type": "source_file", "children": [{"type": "use_declaration", "children": [{"type": "use", "children": [], "start_byte": 0, "end_byte": 3, "start_point": [0, 0], "end_point": [0, 3], "text": "use"}, {"type": "scoped_identifier", "children": [{"type": "scoped_identifier", "children": [{"type": "scoped_identifier", "children": [{"type": "crate", "children": [], "start_byte": 4, "end_byte": 9, "start_point": [0, 4], "end_point": [0, 9], "text": "crate"}, {"type": "::", "children": [], "start_byte": 9, "end_byte": 11, "start_point": [0, 9], "end_point": [0, 11], "text": "::"}, {"type": "identifier", "children": [], "start_byte": 11, "end_byte": 16, "start_point": [0, 11], "end_point": [0, 16], "text": "bzip2"}], "start_byte": 4, "end_byte": 16, "start_point": [0, 4], "end_point": [0, 16], "text": "crate::bzip2"}, {"type": "::", "children": [], "start_byte": 16, "end_byte": 18, "start_point": [0, 16], "end_point": [0, 18], "text": "::"}, {"type": "identifier", "children": [], "start_byte": 18, "end_byte": 34, "start_point": [0, 18], "end_point": [0, 34], "text": "scc_119_compress"}], "start_byte": 4, "end_byte": 34, "start_point": [0, 4], "end_point": [0, 34], "text": "crate::bzip2::scc_119_compress"}, {"type": "::", "children": [], "start_byte": 34, "end_byte": 36, "start_point": [0, 34], "end_point": [0, 36], "text": "::"}, {"type": "identifier", "children": [], "start_byte": 36, "end_byte": 44, "start_point": [0, 36], "end_point": [0, 44], "text": "SRC_MODE"}], "start_byte": 4, "end_byte": 44, "start_point": [0, 4], "end_point": [0, 44], "text": "crate::bzip2::scc_119_compress::SRC_MODE"}, {"type": ";", "children": [], "start_byte": 44, "end_byte": 45, "start_point": [0, 44], "end_point": [0, 45], "text": ";"}], "start_byte": 0, "end_byte": 45, "start_point": [0, 0], "end_point": [0, 45], "text": "use crate::bzip2::scc_119_compress::SRC_MODE;"}, {"type": "use_declaration", "children": [{"type": "use", "children": [], "start_byte": 46, "end_byte": 49, "start_point": [1, 0], "end_point": [1, 3], "text": "use"}, {"type": "scoped_identifier", "children": [{"type": "scoped_identifier", "children": [{"type": "scoped_identifier", "children": [{"type": "crate", "children": [], "start_byte": 50, "end_byte": 55, "start_point": [1, 4], "end_point": [1, 9], "text": "crate"}, {"type": "::", "children": [], "start_byte": 55, "end_byte": 57, "start_point": [1, 9], "end_point": [1, 11], "text": "::"}, {"type": "identifier", "children": [], "start_byte": 57, "end_byte": 68, "start_point": [1, 11], "end_point": [1, 22], "text": "global_vars"}], "start_byte": 50, "end_byte": 68, "start_point": [1, 4], "end_point": [1, 22], "text": "crate::global_vars"}, {"type": "::", "children": [], "start_byte": 68, "end_byte": 70, "start_point": [1, 22], "end_point": [1, 24], "text": "::"}, {"type": "identifier", "children": [], "start_byte": 70, "end_byte": 78, "start_point": [1, 24], "end_point": [1, 32], "text": "bzip2_c5"}], "start_byte": 50, "end_byte": 78, "start_point": [1, 4], "end_point": [1, 32], "text": "crate::global_vars::bzip2_c5"}, {"type": "::", "children": [], "start_byte": 78, "end_byte": 80, "start_point": [1, 32], "end_point": [1, 34], "text": "::"}, {"type": "identifier", "children": [], "start_byte": 80, "end_byte": 87, "start_point": [1, 34], "end_point": [1, 41], "text": "OP_MODE"}], "start_byte": 50, "end_byte": 87, "start_point": [1, 4], "end_point": [1, 41], "text": "crate::global_vars::bzip2_c5::OP_MODE"}, {"type": ";", "children": [], "start_byte": 87, "end_byte": 88, "start_point": [1, 41], "end_point": [1, 42], "text": ";"}], "start_byte": 46, "end_byte": 88, "start_point": [1, 0], "end_point": [1, 42], "text": "use crate::global_vars::bzip2_c5::OP_MODE;"}, {"type": "use_declaration", "children": [{"type": "use", "children": [], "start_byte": 89, "end_byte": 92, "start_point": [2, 0], "end_point": [2, 3], "text": "use"}, {"type": "use_wildcard", "children": [{"type": "scoped_identifier", "children": [{"type": "scoped_identifier", "children": [{"type": "crate", "children": [], "start_byte": 93, "end_byte": 98, "start_point": [2, 4], "end_point": [2, 9], "text": "crate"}, {"type": "::", "children": [], "start_byte": 98, "end_byte": 100, "start_point": [2, 9], "end_point": [2, 11], "text": "::"}, {"type": "identifier", "children": [], "start_byte": 100, "end_byte": 105, "start_point": [2, 11], "end_point": [2, 16], "text": "bzip2"}], "start_byte": 93, "end_byte": 105, "start_point": [2, 4], "end_point": [2, 16], "text": "crate::bzip2"}, {"type": "::", "children": [], "start_byte": 105, "end_byte": 107, "start_point": [2, 16], "end_point": [2, 18], "text": "::"}, {"type": "identifier", "children": [], "start_byte": 107, "end_byte": 119, "start_point": [2, 18], "end_point": [2, 30], "text": "scc_78_usage"}], "start_byte": 93, "end_byte": 119, "start_point": [2, 4], "end_point": [2, 30], "text": "crate::bzip2::scc_78_usage"}, {"type": "::", "children": [], "start_byte": 119, "end_byte": 121, "start_point": [2, 30], "end_point": [2, 32], "text": "::"}, {"type": "*", "children": [], "start_byte": 121, "end_byte": 122, "start_point": [2, 32], "end_point": [2, 33], "text": "*"}], "start_byte": 93, "end_byte": 122, "start_point": [2, 4], "end_point": [2, 33], "text": "crate::bzip2::scc_78_usage::*"}, {"type": ";", "children": [], "start_byte": 122, "end_byte": 123, "start_point": [2, 33], "end_point": [2, 34], "text": ";"}], "start_byte": 89, "end_byte": 123, "start_point": [2, 0], "end_point": [2, 34], "text": "use crate::bzip2::scc_78_usage::*;"}, {"type": "use_declaration", "children": [{"type": "use", "children": [], "start_byte": 124, "end_byte": 127, "start_point": [3, 0], "end_point": [3, 3], "text": "use"}, {"type": "use_wildcard", "children": [{"type": "scoped_identifier", "children": [{"type": "scoped_identifier", "children": [{"type": "crate", "children": [], "start_byte": 128, "end_byte": 133, "start_point": [3, 4], "end_point": [3, 9], "text": "crate"}, {"type": "::", "children": [], "start_byte": 133, "end_byte": 135, "start_point": [3, 9], "end_point": [3, 11], "text": "::"}, {"type": "identifier", "children": [], "start_byte": 135, "end_byte": 140, "start_point": [3, 11], "end_point": [3, 16], "text": "bzip2"}], "start_byte": 128, "end_byte": 140, "start_point": [3, 4], "end_point": [3, 16], "text": "crate::bzip2"}, {"type": "::", "children": [], "start_byte": 140, "end_byte": 142, "start_point": [3, 16], "end_point": [3, 18], "text": "::"}, {"type": "identifier", "children": [], "start_byte": 142, "end_byte": 160, "start_point": [3, 18], "end_point": [3, 36], "text": "scc_118_uncompress"}], "start_byte": 128, "end_byte": 160, "start_point": [3, 4], "end_point": [3, 36], "text": "crate::bzip2::scc_118_uncompress"}, {"type": "::", "children": [], "start_byte": 160, "end_byte": 162, "start_point": [3, 36], "end_point": [3, 38], "text": "::"}, {"type": "*", "children": [], "start_byte": 162, "end_byte": 163, "start_point": [3, 38], "end_point": [3, 39], "text": "*"}], "start_byte": 128, "end_byte": 163, "start_point": [3, 4], "end_point": [3, 39], "text": "crate::bzip2::scc_118_uncompress::*"}, {"type": ";", "children": [], "start_byte": 163, "end_byte": 164, "start_point": [3, 39], "end_point": [3, 40], "text": ";"}], "start_byte": 124, "end_byte": 164, "start_point": [3, 0], "end_point": [3, 40], "text": "use crate::bzip2::scc_118_uncompress::*;"}, {"type": "line_comment", "children": [], "start_byte": 165, "end_byte": 212, "start_point": [4, 0], "end_point": [4, 47], "text": "// use crate::bzip2::scc_120_root_57_signal::*;"}, {"type": "line_comment", "children": [], "start_byte": 213, "end_byte": 258, "start_point": [5, 0], "end_point": [5, 45], "text": "// use crate::bzip2::scc_105_copyFileName::*;"}, {"type": "line_comment", "children": [], "start_byte": 259, "end_byte": 313, "start_point": [6, 0], "end_point": [6, 54], "text": "// use crate::bzip2recover::scc_115_root_56_strcmp::*;"}, {"type": "line_comment", "children": [], "start_byte": 314, "end_byte": 368, "start_point": [7, 0], "end_point": [7, 54], "text": "// use crate::bzip2recover::scc_114_root_55_strstr::*;"}, {"type": "line_comment", "children": [], "start_byte": 369, "end_byte": 408, "start_point": [8, 0], "end_point": [8, 39], "text": "// use crate::bzip2::scc_79_license::*;"}, {"type": "line_comment", "children": [], "start_byte": 409, "end_byte": 446, "start_point": [9, 0], "end_point": [9, 37], "text": "// use crate::bzip2::scc_78_usage::*;"}, {"type": "line_comment", "children": [], "start_byte": 447, "end_byte": 497, "start_point": [10, 0], "end_point": [10, 50], "text": "// use crate::bzip2::scc_113_root_54_redundant::*;"}, {"type": "line_comment", "children": [], "start_byte": 498, "end_byte": 553, "start_point": [11, 0], "end_point": [11, 55], "text": "// use crate::bzip2recover::scc_112_root_53_strncmp::*;"}, {"type": "line_comment", "children": [], "start_byte": 554, "end_byte": 598, "start_point": [12, 0], "end_point": [12, 44], "text": "// use crate::bzip2recover::scc_121_main::*;"}, {"type": "line_comment", "children": [], "start_byte": 599, "end_byte": 646, "start_point": [13, 0], "end_point": [13, 47], "text": "// use crate::bzip2::scc_110_compressStream::*;"}, {"type": "line_comment", "children": [], "start_byte": 647, "end_byte": 696, "start_point": [14, 0], "end_point": [14, 49], "text": "// use crate::bzip2::scc_109_uncompressStream::*;"}, {"type": "line_comment", "children": [], "start_byte": 697, "end_byte": 742, "start_point": [15, 0], "end_point": [15, 45], "text": "// use crate::bzlib::scc_86_root_49_fopen::*;"}, {"type": "line_comment", "children": [], "start_byte": 743, "end_byte": 797, "start_point": [16, 0], "end_point": [16, 54], "text": "// use crate::bzip2recover::scc_8_bsOpenReadStream::*;"}, {"type": "line_comment", "children": [], "start_byte": 798, "end_byte": 844, "start_point": [17, 0], "end_point": [17, 46], "text": "// use crate::bzip2recover::scc_5_bsGetBit::*;"}, {"type": "line_comment", "children": [], "start_byte": 845, "end_byte": 905, "start_point": [18, 0], "end_point": [18, 60], "text": "// use crate::bzip2recover::scc_85_root_48_tooManyBlocks::*;"}, {"type": "line_comment", "children": [], "start_byte": 906, "end_byte": 952, "start_point": [19, 0], "end_point": [19, 46], "text": "// use crate::bzip2recover::scc_2_bsPutBit::*;"}, {"type": "line_comment", "children": [], "start_byte": 953, "end_byte": 1007, "start_point": [20, 0], "end_point": [20, 54], "text": "// use crate::bzip2recover::scc_84_root_47_strrchr::*;"}, {"type": "line_comment", "children": [], "start_byte": 1008, "end_byte": 1061, "start_point": [21, 0], "end_point": [21, 53], "text": "// use crate::bzip2recover::scc_82_root_45_strcat::*;"}, {"type": "line_comment", "children": [], "start_byte": 1062, "end_byte": 1118, "start_point": [22, 0], "end_point": [22, 56], "text": "// use crate::bzip2recover::scc_81_root_44_endsInBz2::*;"}, {"type": "line_comment", "children": [], "start_byte": 1119, "end_byte": 1170, "start_point": [23, 0], "end_point": [23, 51], "text": "// use crate::bzip2::scc_103_addFlagsFromEnvVar::*;"}, {"type": "line_comment", "children": [], "start_byte": 1171, "end_byte": 1213, "start_point": [24, 0], "end_point": [24, 42], "text": "// use crate::bzip2::scc_116_hasSuffix::*;"}, {"type": "line_comment", "children": [], "start_byte": 1214, "end_byte": 1261, "start_point": [25, 0], "end_point": [25, 47], "text": "// use crate::bzip2::scc_90_root_52_setExit::*;"}, {"type": "line_comment", "children": [], "start_byte": 1262, "end_byte": 1316, "start_point": [26, 0], "end_point": [26, 54], "text": "// use crate::bzip2recover::scc_89_root_51_strncpy::*;"}, {"type": "line_comment", "children": [], "start_byte": 1317, "end_byte": 1369, "start_point": [27, 0], "end_point": [27, 52], "text": "// use crate::compress::scc_73_BZ2_compressBlock::*;"}, {"type": "line_comment", "children": [], "start_byte": 1370, "end_byte": 1419, "start_point": [28, 0], "end_point": [28, 49], "text": "// use crate::bzip2recover::scc_35_bsPutUChar::*;"}, {"type": "line_comment", "children": [], "start_byte": 1420, "end_byte": 1470, "start_point": [29, 0], "end_point": [29, 50], "text": "// use crate::bzip2recover::scc_34_bsPutUInt32::*;"}, {"type": "line_comment", "children": [], "start_byte": 1471, "end_byte": 1514, "start_point": [30, 0], "end_point": [30, 43], "text": "// use crate::bzip2::scc_108_testStream::*;"}, {"type": "line_comment", "children": [], "start_byte": 1515, "end_byte": 1572, "start_point": [31, 0], "end_point": [31, 57], "text": "// use crate::bzip2::scc_106_mySIGSEGVorSIGBUScatcher::*;"}, {"type": "line_comment", "children": [], "start_byte": 1573, "end_byte": 1627, "start_point": [32, 0], "end_point": [32, 54], "text": "// use crate::bzip2recover::scc_83_root_46_sprintf::*;"}, {"type": "line_comment", "children": [], "start_byte": 1628, "end_byte": 1670, "start_point": [33, 0], "end_point": [33, 42], "text": "// use crate::bzip2::scc_87_fileExists::*;"}, {"type": "line_comment", "children": [], "start_byte": 1671, "end_byte": 1717, "start_point": [34, 0], "end_point": [34, 46], "text": "// use crate::bzip2::scc_91_cleanUpAndFail::*;"}, {"type": "line_comment", "children": [], "start_byte": 1718, "end_byte": 1838, "start_point": [35, 0], "end_point": [35, 120], "text": "// use crate::global_vars::bzip2_c2::{bEnd, bStart, inFileName, outFileName, progName, rbEnd, rbStart, FILE, BitStream};"}, {"type": "use_declaration", "children": [{"type": "use", "children": [], "start_byte": 1839, "end_byte": 1842, "start_point": [36, 0], "end_point": [36, 3], "text": "use"}, {"type": "use_wildcard", "children": [{"type": "scoped_identifier", "children": [{"type": "scoped_identifier", "children": [{"type": "crate", "children": [], "start_byte": 1843, "end_byte": 1848, "start_point": [36, 4], "end_point": [36, 9], "text": "crate"}, {"type": "::", "children": [], "start_byte": 1848, "end_byte": 1850, "start_point": [36, 9], "end_point": [36, 11], "text": "::"}, {"type": "identifier", "children": [], "start_byte": 1850, "end_byte": 1861, "start_point": [36, 11], "end_point": [36, 22], "text": "global_vars"}], "start_byte": 1843, "end_byte": 1861, "start_point": [36, 4], "end_point": [36, 22], "text": "crate::global_vars"}, {"type": "::", "children": [], "start_byte": 1861, "end_byte": 1863, "start_point": [36, 22], "end_point": [36, 24], "text": "::"}, {"type": "identifier", "children": [], "start_byte": 1863, "end_byte": 1871, "start_point": [36, 24], "end_point": [36, 32], "text": "bzip2_c1"}], "start_byte": 1843, "end_byte": 1871, "start_point": [36, 4], "end_point": [36, 32], "text": "crate::global_vars::bzip2_c1"}, {"type": "::", "children": [], "start_byte": 1871, "end_byte": 1873, "start_point": [36, 32], "end_point": [36, 34], "text": "::"}, {"type": "*", "children": [], "start_byte": 1873, "end_byte": 1874, "start_point": [36, 34], "end_point": [36, 35], "text": "*"}], "start_byte": 1843, "end_byte": 1874, "start_point": [36, 4], "end_point": [36, 35], "text": "crate::global_vars::bzip2_c1::*"}, {"type": ";", "children": [], "start_byte": 1874, "end_byte": 1875, "start_point": [36, 35], "end_point": [36, 36], "text": ";"}], "start_byte": 1839, "end_byte": 1875, "start_point": [36, 0], "end_point": [36, 36], "text": "use crate::global_vars::bzip2_c1::*;"}, {"type": "use_declaration", "children": [{"type": "use", "children": [], "start_byte": 1876, "end_byte": 1879, "start_point": [37, 0], "end_point": [37, 3], "text": "use"}, {"type": "use_wildcard", "children": [{"type": "scoped_identifier", "children": [{"type": "scoped_identifier", "children": [{"type": "crate", "children": [], "start_byte": 1880, "end_byte": 1885, "start_point": [37, 4], "end_point": [37, 9], "text": "crate"}, {"type": "::", "children": [], "start_byte": 1885, "end_byte": 1887, "start_point": [37, 9], "end_point": [37, 11], "text": "::"}, {"type": "identifier", "children": [], "start_byte": 1887, "end_byte": 1898, "start_point": [37, 11], "end_point": [37, 22], "text": "global_vars"}], "start_byte": 1880, "end_byte": 1898, "start_point": [37, 4], "end_point": [37, 22], "text": "crate::global_vars"}, {"type": "::", "children": [], "start_byte": 1898, "end_byte": 1900, "start_point": [37, 22], "end_point": [37, 24], "text": "::"}, {"type": "identifier", "children": [], "start_byte": 1900, "end_byte": 1908, "start_point": [37, 24], "end_point": [37, 32], "text": "bzip2_c2"}], "start_byte": 1880, "end_byte": 1908, "start_point": [37, 4], "end_point": [37, 32], "text": "crate::global_vars::bzip2_c2"}, {"type": "::", "children": [], "start_byte": 1908, "end_byte": 1910, "start_point": [37, 32], "end_point": [37, 34], "text": "::"}, {"type": "*", "children": [], "start_byte": 1910, "end_byte": 1911, "start_point": [37, 34], "end_point": [37, 35], "text": "*"}], "start_byte": 1880, "end_byte": 1911, "start_point": [37, 4], "end_point": [37, 35], "text": "crate::global_vars::bzip2_c2::*"}, {"type": ";", "children": [], "start_byte": 1911, "end_byte": 1912, "start_point": [37, 35], "end_point": [37, 36], "text": ";"}], "start_byte": 1876, "end_byte": 1912, "start_point": [37, 0], "end_point": [37, 36], "text": "use crate::global_vars::bzip2_c2::*;"}, {"type": "use_declaration", "children": [{"type": "use", "children": [], "start_byte": 1913, "end_byte": 1916, "start_point": [38, 0], "end_point": [38, 3], "text": "use"}, {"type": "use_wildcard", "children": [{"type": "scoped_identifier", "children": [{"type": "scoped_identifier", "children": [{"type": "crate", "children": [], "start_byte": 1917, "end_byte": 1922, "start_point": [38, 4], "end_point": [38, 9], "text": "crate"}, {"type": "::", "children": [], "start_byte": 1922, "end_byte": 1924, "start_point": [38, 9], "end_point": [38, 11], "text": "::"}, {"type": "identifier", "children": [], "start_byte": 1924, "end_byte": 1935, "start_point": [38, 11], "end_point": [38, 22], "text": "global_vars"}], "start_byte": 1917, "end_byte": 1935, "start_point": [38, 4], "end_point": [38, 22], "text": "crate::global_vars"}, {"type": "::", "children": [], "start_byte": 1935, "end_byte": 1937, "start_point": [38, 22], "end_point": [38, 24], "text": "::"}, {"type": "identifier", "children": [], "start_byte": 1937, "end_byte": 1945, "start_point": [38, 24], "end_point": [38, 32], "text": "bzip2_c5"}], "start_byte": 1917, "end_byte": 1945, "start_point": [38, 4], "end_point": [38, 32], "text": "crate::global_vars::bzip2_c5"}, {"type": "::", "children": [], "start_byte": 1945, "end_byte": 1947, "start_point": [38, 32], "end_point": [38, 34], "text": "::"}, {"type": "*", "children": [], "start_byte": 1947, "end_byte": 1948, "start_point": [38, 34], "end_point": [38, 35], "text": "*"}], "start_byte": 1917, "end_byte": 1948, "start_point": [38, 4], "end_point": [38, 35], "text": "crate::global_vars::bzip2_c5::*"}, {"type": ";", "children": [], "start_byte": 1948, "end_byte": 1949, "start_point": [38, 35], "end_point": [38, 36], "text": ";"}], "start_byte": 1913, "end_byte": 1949, "start_point": [38, 0], "end_point": [38, 36], "text": "use crate::global_vars::bzip2_c5::*;"}, {"type": "use_declaration", "children": [{"type": "use", "children": [], "start_byte": 1950, "end_byte": 1953, "start_point": [39, 0], "end_point": [39, 3], "text": "use"}, {"type": "scoped_use_list", "children": [{"type": "identifier", "children": [], "start_byte": 1954, "end_byte": 1957, "start_point": [39, 4], "end_point": [39, 7], "text": "std"}, {"type": "::", "children": [], "start_byte": 1957, "end_byte": 1959, "start_point": [39, 7], "end_point": [39, 9], "text": "::"}, {"type": "use_list", "children": [{"type": "{", "children": [], "start_byte": 1959, "end_byte": 1960, "start_point": [39, 9], "end_point": [39, 10], "text": "{"}, {"type": "identifier", "children": [], "start_byte": 1960, "end_byte": 1963, "start_point": [39, 10], "end_point": [39, 13], "text": "env"}, {"type": ",", "children": [], "start_byte": 1963, "end_byte": 1964, "start_point": [39, 13], "end_point": [39, 14], "text": ","}, {"type": "identifier", "children": [], "start_byte": 1965, "end_byte": 1972, "start_point": [39, 15], "end_point": [39, 22], "text": "process"}, {"type": ",", "children": [], "start_byte": 1972, "end_byte": 1973, "start_point": [39, 22], "end_point": [39, 23], "text": ","}, {"type": "identifier", "children": [], "start_byte": 1974, "end_byte": 1976, "start_point": [39, 24], "end_point": [39, 26], "text": "io"}, {"type": "}", "children": [], "start_byte": 1976, "end_byte": 1977, "start_point": [39, 26], "end_point": [39, 27], "text": "}"}], "start_byte": 1959, "end_byte": 1977, "start_point": [39, 9], "end_point": [39, 27], "text": "{env, process, io}"}], "start_byte": 1954, "end_byte": 1977, "start_point": [39, 4], "end_point": [39, 27], "text": "std::{env, process, io}"}, {"type": ";", "children": [], "start_byte": 1977, "end_byte": 1978, "start_point": [39, 27], "end_point": [39, 28], "text": ";"}], "start_byte": 1950, "end_byte": 1978, "start_point": [39, 0], "end_point": [39, 28], "text": "use std::{env, process, io};"}, {"type": "use_declaration", "children": [{"type": "use", "children": [], "start_byte": 1979, "end_byte": 1982, "start_point": [40, 0], "end_point": [40, 3], "text": "use"}, {"type": "use_wildcard", "children": [{"type": "scoped_identifier", "children": [{"type": "scoped_identifier", "children": [{"type": "crate", "children": [], "start_byte": 1983, "end_byte": 1988, "start_point": [40, 4], "end_point": [40, 9], "text": "crate"}, {"type": "::", "children": [], "start_byte": 1988, "end_byte": 1990, "start_point": [40, 9], "end_point": [40, 11], "text": "::"}, {"type": "identifier", "children": [], "start_byte": 1990, "end_byte": 1995, "start_point": [40, 11], "end_point": [40, 16], "text": "bzip2"}], "start_byte": 1983, "end_byte": 1995, "start_point": [40, 4], "end_point": [40, 16], "text": "crate::bzip2"}, {"type": "::", "children": [], "start_byte": 1995, "end_byte": 1997, "start_point": [40, 16], "end_point": [40, 18], "text": "::"}, {"type": "identifier", "children": [], "start_byte": 1997, "end_byte": 2054, "start_point": [40, 18], "end_point": [40, 75], "text": "scc_101_mkCell_102_snoc_string_103_add_flags_from_env_var"}], "start_byte": 1983, "end_byte": 2054, "start_point": [40, 4], "end_point": [40, 75], "text": "crate::bzip2::scc_101_mkCell_102_snoc_string_103_add_flags_from_env_var"}, {"type": "::", "children": [], "start_byte": 2054, "end_byte": 2056, "start_point": [40, 75], "end_point": [40, 77], "text": "::"}, {"type": "*", "children": [], "start_byte": 2056, "end_byte": 2057, "start_point": [40, 77], "end_point": [40, 78], "text": "*"}], "start_byte": 1983, "end_byte": 2057, "start_point": [40, 4], "end_point": [40, 78], "text": "crate::bzip2::scc_101_mkCell_102_snoc_string_103_add_flags_from_env_var::*"}, {"type": ";", "children": [], "start_byte": 2057, "end_byte": 2058, "start_point": [40, 78], "end_point": [40, 79], "text": ";"}], "start_byte": 1979, "end_byte": 2058, "start_point": [40, 0], "end_point": [40, 79], "text": "use crate::bzip2::scc_101_mkCell_102_snoc_string_103_add_flags_from_env_var::*;"}, {"type": "use_declaration", "children": [{"type": "use", "children": [], "start_byte": 2059, "end_byte": 2062, "start_point": [41, 0], "end_point": [41, 3], "text": "use"}, {"type": "use_wildcard", "children": [{"type": "scoped_identifier", "children": [{"type": "scoped_identifier", "children": [{"type": "crate", "children": [], "start_byte": 2063, "end_byte": 2068, "start_point": [41, 4], "end_point": [41, 9], "text": "crate"}, {"type": "::", "children": [], "start_byte": 2068, "end_byte": 2070, "start_point": [41, 9], "end_point": [41, 11], "text": "::"}, {"type": "identifier", "children": [], "start_byte": 2070, "end_byte": 2075, "start_point": [41, 11], "end_point": [41, 16], "text": "bzip2"}], "start_byte": 2063, "end_byte": 2075, "start_point": [41, 4], "end_point": [41, 16], "text": "crate::bzip2"}, {"type": "::", "children": [], "start_byte": 2075, "end_byte": 2077, "start_point": [41, 16], "end_point": [41, 18], "text": "::"}, {"type": "identifier", "children": [], "start_byte": 2077, "end_byte": 2102, "start_point": [41, 18], "end_point": [41, 43], "text": "scc_113_root_54_redundant"}], "start_byte": 2063, "end_byte": 2102, "start_point": [41, 4], "end_point": [41, 43], "text": "crate::bzip2::scc_113_root_54_redundant"}, {"type": "::", "children": [], "start_byte": 2102, "end_byte": 2104, "start_point": [41, 43], "end_point": [41, 45], "text": "::"}, {"type": "*", "children": [], "start_byte": 2104, "end_byte": 2105, "start_point": [41, 45], "end_point": [41, 46], "text": "*"}], "start_byte": 2063, "end_byte": 2105, "start_point": [41, 4], "end_point": [41, 46], "text": "crate::bzip2::scc_113_root_54_redundant::*"}, {"type": ";", "children": [], "start_byte": 2105, "end_byte": 2106, "start_point": [41, 46], "end_point": [41, 47], "text": ";"}], "start_byte": 2059, "end_byte": 2106, "start_point": [41, 0], "end_point": [41, 47], "text": "use crate::bzip2::scc_113_root_54_redundant::*;"}, {"type": "use_declaration", "children": [{"type": "use", "children": [], "start_byte": 2107, "end_byte": 2110, "start_point": [42, 0], "end_point": [42, 3], "text": "use"}, {"type": "use_wildcard", "children": [{"type": "scoped_identifier", "children": [{"type": "scoped_identifier", "children": [{"type": "crate", "children": [], "start_byte": 2111, "end_byte": 2116, "start_point": [42, 4], "end_point": [42, 9], "text": "crate"}, {"type": "::", "children": [], "start_byte": 2116, "end_byte": 2118, "start_point": [42, 9], "end_point": [42, 11], "text": "::"}, {"type": "identifier", "children": [], "start_byte": 2118, "end_byte": 2123, "start_point": [42, 11], "end_point": [42, 16], "text": "bzip2"}], "start_byte": 2111, "end_byte": 2123, "start_point": [42, 4], "end_point": [42, 16], "text": "crate::bzip2"}, {"type": "::", "children": [], "start_byte": 2123, "end_byte": 2125, "start_point": [42, 16], "end_point": [42, 18], "text": "::"}, {"type": "identifier", "children": [], "start_byte": 2125, "end_byte": 2139, "start_point": [42, 18], "end_point": [42, 32], "text": "scc_79_license"}], "start_byte": 2111, "end_byte": 2139, "start_point": [42, 4], "end_point": [42, 32], "text": "crate::bzip2::scc_79_license"}, {"type": "::", "children": [], "start_byte": 2139, "end_byte": 2141, "start_point": [42, 32], "end_point": [42, 34], "text": "::"}, {"type": "*", "children": [], "start_byte": 2141, "end_byte": 2142, "start_point": [42, 34], "end_point": [42, 35], "text": "*"}], "start_byte": 2111, "end_byte": 2142, "start_point": [42, 4], "end_point": [42, 35], "text": "crate::bzip2::scc_79_license::*"}, {"type": ";", "children": [], "start_byte": 2142, "end_byte": 2143, "start_point": [42, 35], "end_point": [42, 36], "text": ";"}], "start_byte": 2107, "end_byte": 2143, "start_point": [42, 0], "end_point": [42, 36], "text": "use crate::bzip2::scc_79_license::*;"}, {"type": "use_declaration", "children": [{"type": "use", "children": [], "start_byte": 2144, "end_byte": 2147, "start_point": [43, 0], "end_point": [43, 3], "text": "use"}, {"type": "use_wildcard", "children": [{"type": "scoped_identifier", "children": [{"type": "scoped_identifier", "children": [{"type": "crate", "children": [], "start_byte": 2148, "end_byte": 2153, "start_point": [43, 4], "end_point": [43, 9], "text": "crate"}, {"type": "::", "children": [], "start_byte": 2153, "end_byte": 2155, "start_point": [43, 9], "end_point": [43, 11], "text": "::"}, {"type": "identifier", "children": [], "start_byte": 2155, "end_byte": 2160, "start_point": [43, 11], "end_point": [43, 16], "text": "bzip2"}], "start_byte": 2148, "end_byte": 2160, "start_point": [43, 4], "end_point": [43, 16], "text": "crate::bzip2"}, {"type": "::", "children": [], "start_byte": 2160, "end_byte": 2162, "start_point": [43, 16], "end_point": [43, 18], "text": "::"}, {"type": "identifier", "children": [], "start_byte": 2162, "end_byte": 2178, "start_point": [43, 18], "end_point": [43, 34], "text": "scc_119_compress"}], "start_byte": 2148, "end_byte": 2178, "start_point": [43, 4], "end_point": [43, 34], "text": "crate::bzip2::scc_119_compress"}, {"type": "::", "children": [], "start_byte": 2178, "end_byte": 2180, "start_point": [43, 34], "end_point": [43, 36], "text": "::"}, {"type": "*", "children": [], "start_byte": 2180, "end_byte": 2181, "start_point": [43, 36], "end_point": [43, 37], "text": "*"}], "start_byte": 2148, "end_byte": 2181, "start_point": [43, 4], "end_point": [43, 37], "text": "crate::bzip2::scc_119_compress::*"}, {"type": ";", "children": [], "start_byte": 2181, "end_byte": 2182, "start_point": [43, 37], "end_point": [43, 38], "text": ";"}], "start_byte": 2144, "end_byte": 2182, "start_point": [43, 0], "end_point": [43, 38], "text": "use crate::bzip2::scc_119_compress::*;"}, {"type": "use_declaration", "children": [{"type": "use", "children": [], "start_byte": 2183, "end_byte": 2186, "start_point": [44, 0], "end_point": [44, 3], "text": "use"}, {"type": "use_wildcard", "children": [{"type": "scoped_identifier", "children": [{"type": "scoped_identifier", "children": [{"type": "crate", "children": [], "start_byte": 2187, "end_byte": 2192, "start_point": [44, 4], "end_point": [44, 9], "text": "crate"}, {"type": "::", "children": [], "start_byte": 2192, "end_byte": 2194, "start_point": [44, 9], "end_point": [44, 11], "text": "::"}, {"type": "identifier", "children": [], "start_byte": 2194, "end_byte": 2199, "start_point": [44, 11], "end_point": [44, 16], "text": "bzip2"}], "start_byte": 2187, "end_byte": 2199, "start_point": [44, 4], "end_point": [44, 16], "text": "crate::bzip2"}, {"type": "::", "children": [], "start_byte": 2199, "end_byte": 2201, "start_point": [44, 16], "end_point": [44, 18], "text": "::"}, {"type": "identifier", "children": [], "start_byte": 2201, "end_byte": 2223, "start_point": [44, 18], "end_point": [44, 40], "text": "scc_90_root_52_setExit"}], "start_byte": 2187, "end_byte": 2223, "start_point": [44, 4], "end_point": [44, 40], "text": "crate::bzip2::scc_90_root_52_setExit"}, {"type": "::", "children": [], "start_byte": 2223, "end_byte": 2225, "start_point": [44, 40], "end_point": [44, 42], "text": "::"}, {"type": "*", "children": [], "start_byte": 2225, "end_byte": 2226, "start_point": [44, 42], "end_point": [44, 43], "text": "*"}], "start_byte": 2187, "end_byte": 2226, "start_point": [44, 4], "end_point": [44, 43], "text": "crate::bzip2::scc_90_root_52_setExit::*"}, {"type": ";", "children": [], "start_byte": 2226, "end_byte": 2227, "start_point": [44, 43], "end_point": [44, 44], "text": ";"}], "start_byte": 2183, "end_byte": 2227, "start_point": [44, 0], "end_point": [44, 44], "text": "use crate::bzip2::scc_90_root_52_setExit::*;"}, {"type": "use_declaration", "children": [{"type": "use", "children": [], "start_byte": 2228, "end_byte": 2231, "start_point": [45, 0], "end_point": [45, 3], "text": "use"}, {"type": "use_wildcard", "children": [{"type": "scoped_identifier", "children": [{"type": "scoped_identifier", "children": [{"type": "crate", "children": [], "start_byte": 2232, "end_byte": 2237, "start_point": [45, 4], "end_point": [45, 9], "text": "crate"}, {"type": "::", "children": [], "start_byte": 2237, "end_byte": 2239, "start_point": [45, 9], "end_point": [45, 11], "text": "::"}, {"type": "identifier", "children": [], "start_byte": 2239, "end_byte": 2250, "start_point": [45, 11], "end_point": [45, 22], "text": "global_vars"}], "start_byte": 2232, "end_byte": 2250, "start_point": [45, 4], "end_point": [45, 22], "text": "crate::global_vars"}, {"type": "::", "children": [], "start_byte": 2250, "end_byte": 2252, "start_point": [45, 22], "end_point": [45, 24], "text": "::"}, {"type": "identifier", "children": [], "start_byte": 2252, "end_byte": 2262, "start_point": [45, 24], "end_point": [45, 34], "text": "conversion"}], "start_byte": 2232, "end_byte": 2262, "start_point": [45, 4], "end_point": [45, 34], "text": "crate::global_vars::conversion"}, {"type": "::", "children": [], "start_byte": 2262, "end_byte": 2264, "start_point": [45, 34], "end_point": [45, 36], "text": "::"}, {"type": "*", "children": [], "start_byte": 2264, "end_byte": 2265, "start_point": [45, 36], "end_point": [45, 37], "text": "*"}], "start_byte": 2232, "end_byte": 2265, "start_point": [45, 4], "end_point": [45, 37], "text": "crate::global_vars::conversion::*"}, {"type": ";", "children": [], "start_byte": 2265, "end_byte": 2266, "start_point": [45, 37], "end_point": [45, 38], "text": ";"}], "start_byte": 2228, "end_byte": 2266, "start_point": [45, 0], "end_point": [45, 38], "text": "use crate::global_vars::conversion::*;"}, {"type": "use_declaration", "children": [{"type": "use", "children": [], "start_byte": 2267, "end_byte": 2270, "start_point": [46, 0], "end_point": [46, 3], "text": "use"}, {"type": "scoped_identifier", "children": [{"type": "scoped_identifier", "children": [{"type": "identifier", "children": [], "start_byte": 2271, "end_byte": 2274, "start_point": [46, 4], "end_point": [46, 7], "text": "std"}, {"type": "::", "children": [], "start_byte": 2274, "end_byte": 2276, "start_point": [46, 7], "end_point": [46, 9], "text": "::"}, {"type": "identifier", "children": [], "start_byte": 2276, "end_byte": 2280, "start_point": [46, 9], "end_point": [46, 13], "text": "path"}], "start_byte": 2271, "end_byte": 2280, "start_point": [46, 4], "end_point": [46, 13], "text": "std::path"}, {"type": "::", "children": [], "start_byte": 2280, "end_byte": 2282, "start_point": [46, 13], "end_point": [46, 15], "text": "::"}, {"type": "identifier", "children": [], "start_byte": 2282, "end_byte": 2286, "start_point": [46, 15], "end_point": [46, 19], "text": "Path"}], "start_byte": 2271, "end_byte": 2286, "start_point": [46, 4], "end_point": [46, 19], "text": "std::path::Path"}, {"type": ";", "children": [], "start_byte": 2286, "end_byte": 2287, "start_point": [46, 19], "end_point": [46, 20], "text": ";"}], "start_byte": 2267, "end_byte": 2287, "start_point": [46, 0], "end_point": [46, 20], "text": "use std::path::Path;"}, {"type": "function_item", "children": [{"type": "fn", "children": [], "start_byte": 2289, "end_byte": 2291, "start_point": [48, 0], "end_point": [48, 2], "text": "fn"}, {"type": "identifier", "children": [], "start_byte": 2292, "end_byte": 2309, "start_point": [48, 3], "end_point": [48, 20], "text": "process_link_list"}, {"type": "parameters", "children": [{"type": "(", "children": [], "start_byte": 2309, "end_byte": 2310, "start_point": [48, 20], "end_point": [48, 21], "text": "("}, {"type": "parameter", "children": [{"type": "identifier", "children": [], "start_byte": 2310, "end_byte": 2321, "start_point": [48, 21], "end_point": [48, 32], "text": "cell_option"}, {"type": ":", "children": [], "start_byte": 2321, "end_byte": 2322, "start_point": [48, 32], "end_point": [48, 33], "text": ":"}, {"type": "reference_type", "children": [{"type": "&", "children": [], "start_byte": 2323, "end_byte": 2324, "start_point": [48, 34], "end_point": [48, 35], "text": "&"}, {"type": "mutable_specifier", "children": [], "start_byte": 2324, "end_byte": 2327, "start_point": [48, 35], "end_point": [48, 38], "text": "mut"}, {"type": "generic_type", "children": [{"type": "type_identifier", "children": [], "start_byte": 2328, "end_byte": 2334, "start_point": [48, 39], "end_point": [48, 45], "text": "Option"}, {"type": "type_arguments", "children": [{"type": "<", "children": [], "start_byte": 2334, "end_byte": 2335, "start_point": [48, 45], "end_point": [48, 46], "text": "<"}, {"type": "generic_type", "children": [{"type": "type_identifier", "children": [], "start_byte": 2335, "end_byte": 2338, "start_point": [48, 46], "end_point": [48, 49], "text": "Box"}, {"type": "type_arguments", "children": [{"type": "<", "children": [], "start_byte": 2338, "end_byte": 2339, "start_point": [48, 49], "end_point": [48, 50], "text": "<"}, {"type": "type_identifier", "children": [], "start_byte": 2339, "end_byte": 2343, "start_point": [48, 50], "end_point": [48, 54], "text": "Cell"}, {"type": ">", "children": [], "start_byte": 2343, "end_byte": 2344, "start_point": [48, 54], "end_point": [48, 55], "text": ">"}], "start_byte": 2338, "end_byte": 2344, "start_point": [48, 49], "end_point": [48, 55], "text": "<Cell>"}], "start_byte": 2335, "end_byte": 2344, "start_point": [48, 46], "end_point": [48, 55], "text": "Box<Cell>"}, {"type": ">", "children": [], "start_byte": 2344, "end_byte": 2345, "start_point": [48, 55], "end_point": [48, 56], "text": ">"}], "start_byte": 2334, "end_byte": 2345, "start_point": [48, 45], "end_point": [48, 56], "text": "<Box<Cell>>"}], "start_byte": 2328, "end_byte": 2345, "start_point": [48, 39], "end_point": [48, 56], "text": "Option<Box<Cell>>"}], "start_byte": 2323, "end_byte": 2345, "start_point": [48, 34], "end_point": [48, 56], "text": "&mut Option<Box<Cell>>"}], "start_byte": 2310, "end_byte": 2345, "start_point": [48, 21], "end_point": [48, 56], "text": "cell_option: &mut Option<Box<Cell>>"}, {"type": ",", "children": [], "start_byte": 2345, "end_byte": 2346, "start_point": [48, 56], "end_point": [48, 57], "text": ","}, {"type": "parameter", "children": [{"type": "identifier", "children": [], "start_byte": 2347, "end_byte": 2353, "start_point": [48, 58], "end_point": [48, 64], "text": "decode"}, {"type": ":", "children": [], "start_byte": 2353, "end_byte": 2354, "start_point": [48, 64], "end_point": [48, 65], "text": ":"}, {"type": "reference_type", "children": [{"type": "&", "children": [], "start_byte": 2355, "end_byte": 2356, "start_point": [48, 66], "end_point": [48, 67], "text": "&"}, {"type": "mutable_specifier", "children": [], "start_byte": 2356, "end_byte": 2359, "start_point": [48, 67], "end_point": [48, 70], "text": "mut"}, {"type": "primitive_type", "children": [], "start_byte": 2360, "end_byte": 2364, "start_point": [48, 71], "end_point": [48, 75], "text": "bool"}], "start_byte": 2355, "end_byte": 2364, "start_point": [48, 66], "end_point": [48, 75], "text": "&mut bool"}], "start_byte": 2347, "end_byte": 2364, "start_point": [48, 58], "end_point": [48, 75], "text": "decode: &mut bool"}, {"type": ")", "children": [], "start_byte": 2364, "end_byte": 2365, "start_point": [48, 75], "end_point": [48, 76], "text": ")"}], "start_byte": 2309, "end_byte": 2365, "start_point": [48, 20], "end_point": [48, 76], "text": "(cell_option: &mut Option<Box<Cell>>, decode: &mut bool)"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 2366, "end_byte": 2367, "start_point": [48, 77], "end_point": [48, 78], "text": "{"}, {"type": "expression_statement", "children": [{"type": "if_expression", "children": [{"type": "if", "children": [], "start_byte": 2372, "end_byte": 2374, "start_point": [49, 4], "end_point": [49, 6], "text": "if"}, {"type": "let_condition", "children": [{"type": "let", "children": [], "start_byte": 2375, "end_byte": 2378, "start_point": [49, 7], "end_point": [49, 10], "text": "let"}, {"type": "tuple_struct_pattern", "children": [{"type": "identifier", "children": [], "start_byte": 2379, "end_byte": 2383, "start_point": [49, 11], "end_point": [49, 15], "text": "Some"}, {"type": "(", "children": [], "start_byte": 2383, "end_byte": 2384, "start_point": [49, 15], "end_point": [49, 16], "text": "("}, {"type": "identifier", "children": [], "start_byte": 2384, "end_byte": 2388, "start_point": [49, 16], "end_point": [49, 20], "text": "cell"}, {"type": ")", "children": [], "start_byte": 2388, "end_byte": 2389, "start_point": [49, 20], "end_point": [49, 21], "text": ")"}], "start_byte": 2379, "end_byte": 2389, "start_point": [49, 11], "end_point": [49, 21], "text": "Some(cell)"}, {"type": "=", "children": [], "start_byte": 2390, "end_byte": 2391, "start_point": [49, 22], "end_point": [49, 23], "text": "="}, {"type": "identifier", "children": [], "start_byte": 2392, "end_byte": 2403, "start_point": [49, 24], "end_point": [49, 35], "text": "cell_option"}], "start_byte": 2375, "end_byte": 2403, "start_point": [49, 7], "end_point": [49, 35], "text": "let Some(cell) = cell_option"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 2404, "end_byte": 2405, "start_point": [49, 36], "end_point": [49, 37], "text": "{"}, {"type": "expression_statement", "children": [{"type": "if_expression", "children": [{"type": "if", "children": [], "start_byte": 2414, "end_byte": 2416, "start_point": [50, 8], "end_point": [50, 10], "text": "if"}, {"type": "let_condition", "children": [{"type": "let", "children": [], "start_byte": 2417, "end_byte": 2420, "start_point": [50, 11], "end_point": [50, 14], "text": "let"}, {"type": "tuple_struct_pattern", "children": [{"type": "identifier", "children": [], "start_byte": 2421, "end_byte": 2425, "start_point": [50, 15], "end_point": [50, 19], "text": "Some"}, {"type": "(", "children": [], "start_byte": 2425, "end_byte": 2426, "start_point": [50, 19], "end_point": [50, 20], "text": "("}, {"type": "ref_pattern", "children": [{"type": "ref", "children": [], "start_byte": 2426, "end_byte": 2429, "start_point": [50, 20], "end_point": [50, 23], "text": "ref"}, {"type": "identifier", "children": [], "start_byte": 2430, "end_byte": 2434, "start_point": [50, 24], "end_point": [50, 28], "text": "name"}], "start_byte": 2426, "end_byte": 2434, "start_point": [50, 20], "end_point": [50, 28], "text": "ref name"}, {"type": ")", "children": [], "start_byte": 2434, "end_byte": 2435, "start_point": [50, 28], "end_point": [50, 29], "text": ")"}], "start_byte": 2421, "end_byte": 2435, "start_point": [50, 15], "end_point": [50, 29], "text": "Some(ref name)"}, {"type": "=", "children": [], "start_byte": 2436, "end_byte": 2437, "start_point": [50, 30], "end_point": [50, 31], "text": "="}, {"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 2438, "end_byte": 2442, "start_point": [50, 32], "end_point": [50, 36], "text": "cell"}, {"type": ".", "children": [], "start_byte": 2442, "end_byte": 2443, "start_point": [50, 36], "end_point": [50, 37], "text": "."}, {"type": "field_identifier", "children": [], "start_byte": 2443, "end_byte": 2447, "start_point": [50, 37], "end_point": [50, 41], "text": "name"}], "start_byte": 2438, "end_byte": 2447, "start_point": [50, 32], "end_point": [50, 41], "text": "cell.name"}], "start_byte": 2417, "end_byte": 2447, "start_point": [50, 11], "end_point": [50, 41], "text": "let Some(ref name) = cell.name"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 2448, "end_byte": 2449, "start_point": [50, 42], "end_point": [50, 43], "text": "{"}, {"type": "expression_statement", "children": [{"type": "if_expression", "children": [{"type": "if", "children": [], "start_byte": 2462, "end_byte": 2464, "start_point": [51, 12], "end_point": [51, 14], "text": "if"}, {"type": "binary_expression", "children": [{"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 2465, "end_byte": 2469, "start_point": [51, 15], "end_point": [51, 19], "text": "name"}, {"type": ".", "children": [], "start_byte": 2469, "end_byte": 2470, "start_point": [51, 19], "end_point": [51, 20], "text": "."}, {"type": "field_identifier", "children": [], "start_byte": 2470, "end_byte": 2476, "start_point": [51, 20], "end_point": [51, 26], "text": "as_str"}], "start_byte": 2465, "end_byte": 2476, "start_point": [51, 15], "end_point": [51, 26], "text": "name.as_str"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 2476, "end_byte": 2477, "start_point": [51, 26], "end_point": [51, 27], "text": "("}, {"type": ")", "children": [], "start_byte": 2477, "end_byte": 2478, "start_point": [51, 27], "end_point": [51, 28], "text": ")"}], "start_byte": 2476, "end_byte": 2478, "start_point": [51, 26], "end_point": [51, 28], "text": "()"}], "start_byte": 2465, "end_byte": 2478, "start_point": [51, 15], "end_point": [51, 28], "text": "name.as_str()"}, {"type": "==", "children": [], "start_byte": 2479, "end_byte": 2481, "start_point": [51, 29], "end_point": [51, 31], "text": "=="}, {"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 2482, "end_byte": 2483, "start_point": [51, 32], "end_point": [51, 33], "text": "\""}, {"type": "\"", "children": [], "start_byte": 2485, "end_byte": 2486, "start_point": [51, 35], "end_point": [51, 36], "text": "\""}], "start_byte": 2482, "end_byte": 2486, "start_point": [51, 32], "end_point": [51, 36], "text": "\"--\""}], "start_byte": 2465, "end_byte": 2486, "start_point": [51, 15], "end_point": [51, 36], "text": "name.as_str() == \"--\""}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 2487, "end_byte": 2488, "start_point": [51, 37], "end_point": [51, 38], "text": "{"}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "unary_expression", "children": [{"type": "*", "children": [], "start_byte": 2505, "end_byte": 2506, "start_point": [52, 16], "end_point": [52, 17], "text": "*"}, {"type": "identifier", "children": [], "start_byte": 2506, "end_byte": 2512, "start_point": [52, 17], "end_point": [52, 23], "text": "decode"}], "start_byte": 2505, "end_byte": 2512, "start_point": [52, 16], "end_point": [52, 23], "text": "*decode"}, {"type": "=", "children": [], "start_byte": 2513, "end_byte": 2514, "start_point": [52, 24], "end_point": [52, 25], "text": "="}, {"type": "boolean_literal", "children": [{"type": "false", "children": [], "start_byte": 2515, "end_byte": 2520, "start_point": [52, 26], "end_point": [52, 31], "text": "false"}], "start_byte": 2515, "end_byte": 2520, "start_point": [52, 26], "end_point": [52, 31], "text": "false"}], "start_byte": 2505, "end_byte": 2520, "start_point": [52, 16], "end_point": [52, 31], "text": "*decode = false"}, {"type": ";", "children": [], "start_byte": 2520, "end_byte": 2521, "start_point": [52, 31], "end_point": [52, 32], "text": ";"}], "start_byte": 2505, "end_byte": 2521, "start_point": [52, 16], "end_point": [52, 32], "text": "*decode = false;"}, {"type": "expression_statement", "children": [{"type": "return_expression", "children": [{"type": "return", "children": [], "start_byte": 2538, "end_byte": 2544, "start_point": [53, 16], "end_point": [53, 22], "text": "return"}], "start_byte": 2538, "end_byte": 2544, "start_point": [53, 16], "end_point": [53, 22], "text": "return"}, {"type": ";", "children": [], "start_byte": 2544, "end_byte": 2545, "start_point": [53, 22], "end_point": [53, 23], "text": ";"}], "start_byte": 2538, "end_byte": 2545, "start_point": [53, 16], "end_point": [53, 23], "text": "return;"}, {"type": "}", "children": [], "start_byte": 2558, "end_byte": 2559, "start_point": [54, 12], "end_point": [54, 13], "text": "}"}], "start_byte": 2487, "end_byte": 2559, "start_point": [51, 37], "end_point": [54, 13], "text": "{\n                *decode = false;\n                return;\n            }"}, {"type": "else_clause", "children": [{"type": "else", "children": [], "start_byte": 2560, "end_byte": 2564, "start_point": [54, 14], "end_point": [54, 18], "text": "else"}, {"type": "if_expression", "children": [{"type": "if", "children": [], "start_byte": 2565, "end_byte": 2567, "start_point": [54, 19], "end_point": [54, 21], "text": "if"}, {"type": "binary_expression", "children": [{"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 2568, "end_byte": 2572, "start_point": [54, 22], "end_point": [54, 26], "text": "name"}, {"type": ".", "children": [], "start_byte": 2572, "end_byte": 2573, "start_point": [54, 26], "end_point": [54, 27], "text": "."}, {"type": "field_identifier", "children": [], "start_byte": 2573, "end_byte": 2584, "start_point": [54, 27], "end_point": [54, 38], "text": "starts_with"}], "start_byte": 2568, "end_byte": 2584, "start_point": [54, 22], "end_point": [54, 38], "text": "name.starts_with"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 2584, "end_byte": 2585, "start_point": [54, 38], "end_point": [54, 39], "text": "("}, {"type": "char_literal", "children": [], "start_byte": 2585, "end_byte": 2588, "start_point": [54, 39], "end_point": [54, 42], "text": "'-'"}, {"type": ")", "children": [], "start_byte": 2588, "end_byte": 2589, "start_point": [54, 42], "end_point": [54, 43], "text": ")"}], "start_byte": 2584, "end_byte": 2589, "start_point": [54, 38], "end_point": [54, 43], "text": "('-')"}], "start_byte": 2568, "end_byte": 2589, "start_point": [54, 22], "end_point": [54, 43], "text": "name.starts_with('-')"}, {"type": "&&", "children": [], "start_byte": 2590, "end_byte": 2592, "start_point": [54, 44], "end_point": [54, 46], "text": "&&"}, {"type": "unary_expression", "children": [{"type": "*", "children": [], "start_byte": 2593, "end_byte": 2594, "start_point": [54, 47], "end_point": [54, 48], "text": "*"}, {"type": "identifier", "children": [], "start_byte": 2594, "end_byte": 2600, "start_point": [54, 48], "end_point": [54, 54], "text": "decode"}], "start_byte": 2593, "end_byte": 2600, "start_point": [54, 47], "end_point": [54, 54], "text": "*decode"}], "start_byte": 2568, "end_byte": 2600, "start_point": [54, 22], "end_point": [54, 54], "text": "name.starts_with('-') && *decode"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 2601, "end_byte": 2602, "start_point": [54, 55], "end_point": [54, 56], "text": "{"}, {"type": "line_comment", "children": [], "start_byte": 2619, "end_byte": 2686, "start_point": [55, 16], "end_point": [55, 83], "text": "// \u5982\u679c\u53c2\u6570\u4ee5 '-' \u5f00\u5934\uff0c\u5e76\u4e14 continue_evaluation \u4e3a true\n                // \u5219\u8df3"}, {"type": "line_comment", "children": [], "start_byte": 2703, "end_byte": 2733, "start_point": [56, 16], "end_point": [56, 46], "text": "       // println!(\"\u8df3\u8fc7\u53c2\u6570: {}\","}, {"type": "line_comment", "children": [], "start_byte": 2750, "end_byte": 2813, "start_point": [57, 16], "end_point": [57, 79], "text": "\u5370\u4fe1\u606f\n                // ... \u5176\u4ed6\u8df3\u8fc7\u8282\u70b9\u65f6\u7684\u5904\u7406\u903b\u8f91 ...\n            } else "}, {"type": "line_comment", "children": [], "start_byte": 2830, "end_byte": 2877, "start_point": [58, 16], "end_point": [58, 63], "text": " unsafe {\n                    NUM_FILE_NAMES +="}, {"type": "}", "children": [], "start_byte": 2890, "end_byte": 2891, "start_point": [59, 12], "end_point": [59, 13], "text": " "}], "start_byte": 2601, "end_byte": 2891, "start_point": [54, 55], "end_point": [59, 13], "text": "{\n                // \u5982\u679c\u53c2\u6570\u4ee5 '-' \u5f00\u5934\uff0c\u5e76\u4e14 continue_evaluation \u4e3a true\n                // \u5219\u8df3\u8fc7\u6b64\u8282\u70b9\u7684\u5904\u7406\n                // println!(\"\u8df3\u8fc7\u53c2\u6570: {}\", name);  // \u793a\u4f8b: \u6253\u5370\u4fe1\u606f\n                // ... \u5176\u4ed6\u8df3\u8fc7\u8282\u70b9\u65f6\u7684\u5904\u7406\u903b\u8f91 ...\n            } else {\n                unsafe {\n                    NUM_FILE_NAMES += 1;\n          "}, {"type": "else_clause", "children": [{"type": "else", "children": [], "start_byte": 2892, "end_byte": 2896, "start_point": [59, 14], "end_point": [59, 18], "text": "    "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 2897, "end_byte": 2898, "start_point": [59, 19], "end_point": [59, 20], "text": " "}, {"type": "expression_statement", "children": [{"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 2915, "end_byte": 2921, "start_point": [60, 16], "end_point": [60, 22], "text": "AME = "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 2922, "end_byte": 2923, "start_point": [60, 23], "end_point": [60, 24], "text": "O"}, {"type": "expression_statement", "children": [{"type": "compound_assignment_expr", "children": [{"type": "identifier", "children": [], "start_byte": 2944, "end_byte": 2958, "start_point": [61, 20], "end_point": [61, 34], "text": "ame.len() as i"}, {"type": "+=", "children": [], "start_byte": 2959, "end_byte": 2961, "start_point": [61, 35], "end_point": [61, 37], "text": "2)"}, {"type": "integer_literal", "children": [], "start_byte": 2962, "end_byte": 2963, "start_point": [61, 38], "end_point": [61, 39], "text": "\n"}], "start_byte": 2944, "end_byte": 2963, "start_point": [61, 20], "end_point": [61, 39], "text": "ame.len() as i32);\n"}, {"type": ";", "children": [], "start_byte": 2963, "end_byte": 2964, "start_point": [61, 39], "end_point": [61, 40], "text": " "}], "start_byte": 2944, "end_byte": 2964, "start_point": [61, 20], "end_point": [61, 40], "text": "ame.len() as i32);\n "}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 2985, "end_byte": 3002, "start_point": [62, 20], "end_point": [62, 37], "text": "        }\n       "}, {"type": "=", "children": [], "start_byte": 3003, "end_byte": 3004, "start_point": [62, 38], "end_point": [62, 39], "text": "}"}, {"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 3005, "end_byte": 3022, "start_point": [62, 40], "end_point": [62, 57], "text": "\n        // \u9012\u5f52\u8c03\u7528\u5904"}, {"type": ".", "children": [], "start_byte": 3022, "end_byte": 3023, "start_point": [62, 57], "end_point": [62, 58], "text": "\u7406"}, {"type": "field_identifier", "children": [], "start_byte": 3023, "end_byte": 3026, "start_point": [62, 58], "end_point": [62, 61], "text": "\u4e0b\u4e00\u4e2a"}], "start_byte": 3005, "end_byte": 3026, "start_point": [62, 40], "end_point": [62, 61], "text": "\n        // \u9012\u5f52\u8c03\u7528\u5904\u7406\u4e0b\u4e00\u4e2a"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 3026, "end_byte": 3027, "start_point": [62, 61], "end_point": [62, 62], "text": "\u8282"}, {"type": "type_cast_expression", "children": [{"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 3027, "end_byte": 3031, "start_point": [62, 62], "end_point": [62, 66], "text": "\u70b9\n  "}, {"type": ".", "children": [], "start_byte": 3031, "end_byte": 3032, "start_point": [62, 66], "end_point": [62, 67], "text": " "}, {"type": "field_identifier", "children": [], "start_byte": 3032, "end_byte": 3035, "start_point": [62, 67], "end_point": [62, 70], "text": "   "}], "start_byte": 3027, "end_byte": 3035, "start_point": [62, 62], "end_point": [62, 70], "text": "\u70b9\n      "}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 3035, "end_byte": 3036, "start_point": [62, 70], "end_point": [62, 71], "text": " "}, {"type": ")", "children": [], "start_byte": 3036, "end_byte": 3037, "start_point": [62, 71], "end_point": [62, 72], "text": " "}], "start_byte": 3035, "end_byte": 3037, "start_point": [62, 70], "end_point": [62, 72], "text": "  "}], "start_byte": 3027, "end_byte": 3037, "start_point": [62, 62], "end_point": [62, 72], "text": "\u70b9\n        "}, {"type": "as", "children": [], "start_byte": 3038, "end_byte": 3040, "start_point": [62, 73], "end_point": [62, 75], "text": "f "}, {"type": "primitive_type", "children": [], "start_byte": 3041, "end_byte": 3044, "start_point": [62, 76], "end_point": [62, 79], "text": "ell"}], "start_byte": 3027, "end_byte": 3044, "start_point": [62, 62], "end_point": [62, 79], "text": "\u70b9\n        if cell"}, {"type": ")", "children": [], "start_byte": 3044, "end_byte": 3045, "start_point": [62, 79], "end_point": [62, 80], "text": "."}], "start_byte": 3026, "end_byte": 3045, "start_point": [62, 61], "end_point": [62, 80], "text": "\u8282\u70b9\n        if cell."}], "start_byte": 3005, "end_byte": 3045, "start_point": [62, 40], "end_point": [62, 80], "text": "\n        // \u9012\u5f52\u8c03\u7528\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9\n        if cell."}], "start_byte": 2985, "end_byte": 3045, "start_point": [62, 20], "end_point": [62, 80], "text": "        }\n        }\n\n        // \u9012\u5f52\u8c03\u7528\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9\n        if cell."}, {"type": ";", "children": [], "start_byte": 3045, "end_byte": 3046, "start_point": [62, 80], "end_point": [62, 81], "text": "l"}], "start_byte": 2985, "end_byte": 3046, "start_point": [62, 20], "end_point": [62, 81], "text": "        }\n        }\n\n        // \u9012\u5f52\u8c03\u7528\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9\n        if cell.l"}, {"type": "}", "children": [], "start_byte": 3063, "end_byte": 3064, "start_point": [63, 16], "end_point": [63, 17], "text": " "}], "start_byte": 2922, "end_byte": 3064, "start_point": [60, 23], "end_point": [63, 17], "text": "ONGEST_FILE_NAME.max(name.len() as i32);\n                }\n            }\n        }\n\n        // \u9012\u5f52\u8c03\u7528\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9\n        if cell.link.is_some() {\n  "}], "start_byte": 2915, "end_byte": 3064, "start_point": [60, 16], "end_point": [63, 17], "text": "AME = LONGEST_FILE_NAME.max(name.len() as i32);\n                }\n            }\n        }\n\n        // \u9012\u5f52\u8c03\u7528\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9\n        if cell.link.is_some() {\n  "}], "start_byte": 2915, "end_byte": 3064, "start_point": [60, 16], "end_point": [63, 17], "text": "AME = LONGEST_FILE_NAME.max(name.len() as i32);\n                }\n            }\n        }\n\n        // \u9012\u5f52\u8c03\u7528\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9\n        if cell.link.is_some() {\n  "}, {"type": "}", "children": [], "start_byte": 3077, "end_byte": 3078, "start_point": [64, 12], "end_point": [64, 13], "text": "c"}], "start_byte": 2897, "end_byte": 3078, "start_point": [59, 19], "end_point": [64, 13], "text": "    LONGEST_FILE_NAME = LONGEST_FILE_NAME.max(name.len() as i32);\n                }\n            }\n        }\n\n        // \u9012\u5f52\u8c03\u7528\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9\n        if cell.link.is_some() {\n            proc"}], "start_byte": 2892, "end_byte": 3078, "start_point": [59, 14], "end_point": [64, 13], "text": "         LONGEST_FILE_NAME = LONGEST_FILE_NAME.max(name.len() as i32);\n                }\n            }\n        }\n\n        // \u9012\u5f52\u8c03\u7528\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9\n        if cell.link.is_some() {\n            proc"}], "start_byte": 2565, "end_byte": 3078, "start_point": [54, 19], "end_point": [64, 13], "text": "if name.starts_with('-') && *decode {\n                // \u5982\u679c\u53c2\u6570\u4ee5 '-' \u5f00\u5934\uff0c\u5e76\u4e14 continue_evaluation \u4e3a true\n                // \u5219\u8df3\u8fc7\u6b64\u8282\u70b9\u7684\u5904\u7406\n                // println!(\"\u8df3\u8fc7\u53c2\u6570: {}\", name);  // \u793a\u4f8b: \u6253\u5370\u4fe1\u606f\n                // ... \u5176\u4ed6\u8df3\u8fc7\u8282\u70b9\u65f6\u7684\u5904\u7406\u903b\u8f91 ...\n            } else {\n                unsafe {\n                    NUM_FILE_NAMES += 1;\n                    LONGEST_FILE_NAME = LONGEST_FILE_NAME.max(name.len() as i32);\n                }\n            }\n        }\n\n        // \u9012\u5f52\u8c03\u7528\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9\n        if cell.link.is_some() {\n            proc"}], "start_byte": 2560, "end_byte": 3078, "start_point": [54, 14], "end_point": [64, 13], "text": "else if name.starts_with('-') && *decode {\n                // \u5982\u679c\u53c2\u6570\u4ee5 '-' \u5f00\u5934\uff0c\u5e76\u4e14 continue_evaluation \u4e3a true\n                // \u5219\u8df3\u8fc7\u6b64\u8282\u70b9\u7684\u5904\u7406\n                // println!(\"\u8df3\u8fc7\u53c2\u6570: {}\", name);  // \u793a\u4f8b: \u6253\u5370\u4fe1\u606f\n                // ... \u5176\u4ed6\u8df3\u8fc7\u8282\u70b9\u65f6\u7684\u5904\u7406\u903b\u8f91 ...\n            } else {\n                unsafe {\n                    NUM_FILE_NAMES += 1;\n                    LONGEST_FILE_NAME = LONGEST_FILE_NAME.max(name.len() as i32);\n                }\n            }\n        }\n\n        // \u9012\u5f52\u8c03\u7528\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9\n        if cell.link.is_some() {\n            proc"}], "start_byte": 2462, "end_byte": 3078, "start_point": [51, 12], "end_point": [64, 13], "text": "if name.as_str() == \"--\" {\n                *decode = false;\n                return;\n            } else if name.starts_with('-') && *decode {\n                // \u5982\u679c\u53c2\u6570\u4ee5 '-' \u5f00\u5934\uff0c\u5e76\u4e14 continue_evaluation \u4e3a true\n                // \u5219\u8df3\u8fc7\u6b64\u8282\u70b9\u7684\u5904\u7406\n                // println!(\"\u8df3\u8fc7\u53c2\u6570: {}\", name);  // \u793a\u4f8b: \u6253\u5370\u4fe1\u606f\n                // ... \u5176\u4ed6\u8df3\u8fc7\u8282\u70b9\u65f6\u7684\u5904\u7406\u903b\u8f91 ...\n            } else {\n                unsafe {\n                    NUM_FILE_NAMES += 1;\n                    LONGEST_FILE_NAME = LONGEST_FILE_NAME.max(name.len() as i32);\n                }\n            }\n        }\n\n        // \u9012\u5f52\u8c03\u7528\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9\n        if cell.link.is_some() {\n            proc"}], "start_byte": 2462, "end_byte": 3078, "start_point": [51, 12], "end_point": [64, 13], "text": "if name.as_str() == \"--\" {\n                *decode = false;\n                return;\n            } else if name.starts_with('-') && *decode {\n                // \u5982\u679c\u53c2\u6570\u4ee5 '-' \u5f00\u5934\uff0c\u5e76\u4e14 continue_evaluation \u4e3a true\n                // \u5219\u8df3\u8fc7\u6b64\u8282\u70b9\u7684\u5904\u7406\n                // println!(\"\u8df3\u8fc7\u53c2\u6570: {}\", name);  // \u793a\u4f8b: \u6253\u5370\u4fe1\u606f\n                // ... \u5176\u4ed6\u8df3\u8fc7\u8282\u70b9\u65f6\u7684\u5904\u7406\u903b\u8f91 ...\n            } else {\n                unsafe {\n                    NUM_FILE_NAMES += 1;\n                    LONGEST_FILE_NAME = LONGEST_FILE_NAME.max(name.len() as i32);\n                }\n            }\n        }\n\n        // \u9012\u5f52\u8c03\u7528\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9\n        if cell.link.is_some() {\n            proc"}, {"type": "}", "children": [], "start_byte": 3087, "end_byte": 3088, "start_point": [65, 8], "end_point": [65, 9], "text": "l"}], "start_byte": 2448, "end_byte": 3088, "start_point": [50, 42], "end_point": [65, 9], "text": "{\n            if name.as_str() == \"--\" {\n                *decode = false;\n                return;\n            } else if name.starts_with('-') && *decode {\n                // \u5982\u679c\u53c2\u6570\u4ee5 '-' \u5f00\u5934\uff0c\u5e76\u4e14 continue_evaluation \u4e3a true\n                // \u5219\u8df3\u8fc7\u6b64\u8282\u70b9\u7684\u5904\u7406\n                // println!(\"\u8df3\u8fc7\u53c2\u6570: {}\", name);  // \u793a\u4f8b: \u6253\u5370\u4fe1\u606f\n                // ... \u5176\u4ed6\u8df3\u8fc7\u8282\u70b9\u65f6\u7684\u5904\u7406\u903b\u8f91 ...\n            } else {\n                unsafe {\n                    NUM_FILE_NAMES += 1;\n                    LONGEST_FILE_NAME = LONGEST_FILE_NAME.max(name.len() as i32);\n                }\n            }\n        }\n\n        // \u9012\u5f52\u8c03\u7528\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9\n        if cell.link.is_some() {\n            process_link_l"}], "start_byte": 2414, "end_byte": 3088, "start_point": [50, 8], "end_point": [65, 9], "text": "if let Some(ref name) = cell.name {\n            if name.as_str() == \"--\" {\n                *decode = false;\n                return;\n            } else if name.starts_with('-') && *decode {\n                // \u5982\u679c\u53c2\u6570\u4ee5 '-' \u5f00\u5934\uff0c\u5e76\u4e14 continue_evaluation \u4e3a true\n                // \u5219\u8df3\u8fc7\u6b64\u8282\u70b9\u7684\u5904\u7406\n                // println!(\"\u8df3\u8fc7\u53c2\u6570: {}\", name);  // \u793a\u4f8b: \u6253\u5370\u4fe1\u606f\n                // ... \u5176\u4ed6\u8df3\u8fc7\u8282\u70b9\u65f6\u7684\u5904\u7406\u903b\u8f91 ...\n            } else {\n                unsafe {\n                    NUM_FILE_NAMES += 1;\n                    LONGEST_FILE_NAME = LONGEST_FILE_NAME.max(name.len() as i32);\n                }\n            }\n        }\n\n        // \u9012\u5f52\u8c03\u7528\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9\n        if cell.link.is_some() {\n            process_link_l"}], "start_byte": 2414, "end_byte": 3088, "start_point": [50, 8], "end_point": [65, 9], "text": "if let Some(ref name) = cell.name {\n            if name.as_str() == \"--\" {\n                *decode = false;\n                return;\n            } else if name.starts_with('-') && *decode {\n                // \u5982\u679c\u53c2\u6570\u4ee5 '-' \u5f00\u5934\uff0c\u5e76\u4e14 continue_evaluation \u4e3a true\n                // \u5219\u8df3\u8fc7\u6b64\u8282\u70b9\u7684\u5904\u7406\n                // println!(\"\u8df3\u8fc7\u53c2\u6570: {}\", name);  // \u793a\u4f8b: \u6253\u5370\u4fe1\u606f\n                // ... \u5176\u4ed6\u8df3\u8fc7\u8282\u70b9\u65f6\u7684\u5904\u7406\u903b\u8f91 ...\n            } else {\n                unsafe {\n                    NUM_FILE_NAMES += 1;\n                    LONGEST_FILE_NAME = LONGEST_FILE_NAME.max(name.len() as i32);\n                }\n            }\n        }\n\n        // \u9012\u5f52\u8c03\u7528\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9\n        if cell.link.is_some() {\n            process_link_l"}, {"type": "line_comment", "children": [], "start_byte": 3098, "end_byte": 3134, "start_point": [67, 8], "end_point": [67, 44], "text": "ell.link, decode);\n        }\n    }\n}"}, {"type": "expression_statement", "children": [{"type": "if_expression", "children": [{"type": "if", "children": [], "start_byte": 3143, "end_byte": 3145, "start_point": [68, 8], "end_point": [68, 10], "text": "es"}, {"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 3146, "end_byte": 3150, "start_point": [68, 11], "end_point": [68, 15], "text": "_cel"}, {"type": ".", "children": [], "start_byte": 3150, "end_byte": 3151, "start_point": [68, 15], "end_point": [68, 16], "text": "l"}, {"type": "field_identifier", "children": [], "start_byte": 3151, "end_byte": 3155, "start_point": [68, 16], "end_point": [68, 20], "text": "s(ce"}], "start_byte": 3146, "end_byte": 3155, "start_point": [68, 11], "end_point": [68, 20], "text": "_cells(ce"}, {"type": ".", "children": [], "start_byte": 3155, "end_byte": 3156, "start_point": [68, 20], "end_point": [68, 21], "text": "l"}, {"type": "field_identifier", "children": [], "start_byte": 3156, "end_byte": 3163, "start_point": [68, 21], "end_point": [68, 28], "text": "l: &Opt"}], "start_byte": 3146, "end_byte": 3163, "start_point": [68, 11], "end_point": [68, 28], "text": "_cells(cell: &Opt"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 3163, "end_byte": 3164, "start_point": [68, 28], "end_point": [68, 29], "text": "i"}, {"type": ")", "children": [], "start_byte": 3164, "end_byte": 3165, "start_point": [68, 29], "end_point": [68, 30], "text": "o"}], "start_byte": 3163, "end_byte": 3165, "start_point": [68, 28], "end_point": [68, 30], "text": "io"}], "start_byte": 3146, "end_byte": 3165, "start_point": [68, 11], "end_point": [68, 30], "text": "_cells(cell: &Optio"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 3166, "end_byte": 3167, "start_point": [68, 31], "end_point": [68, 32], "text": "<"}, {"type": "expression_statement", "children": [{"type": "call_expression", "children": [{"type": "identifier", "children": [], "start_byte": 3180, "end_byte": 3197, "start_point": [69, 12], "end_point": [69, 29], "text": "ecode: &mut bool)"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 3197, "end_byte": 3198, "start_point": [69, 29], "end_point": [69, 30], "text": " "}, {"type": "reference_expression", "children": [{"type": "&", "children": [], "start_byte": 3198, "end_byte": 3199, "start_point": [69, 30], "end_point": [69, 31], "text": "{"}, {"type": "mutable_specifier", "children": [], "start_byte": 3199, "end_byte": 3202, "start_point": [69, 31], "end_point": [69, 34], "text": "\n  "}, {"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 3203, "end_byte": 3207, "start_point": [69, 35], "end_point": [69, 39], "text": " if "}, {"type": ".", "children": [], "start_byte": 3207, "end_byte": 3208, "start_point": [69, 39], "end_point": [69, 40], "text": "l"}, {"type": "field_identifier", "children": [], "start_byte": 3208, "end_byte": 3212, "start_point": [69, 40], "end_point": [69, 44], "text": "et S"}], "start_byte": 3203, "end_byte": 3212, "start_point": [69, 35], "end_point": [69, 44], "text": " if let S"}], "start_byte": 3198, "end_byte": 3212, "start_point": [69, 30], "end_point": [69, 44], "text": "{\n    if let S"}, {"type": ",", "children": [], "start_byte": 3212, "end_byte": 3213, "start_point": [69, 44], "end_point": [69, 45], "text": "o"}, {"type": "identifier", "children": [], "start_byte": 3214, "end_byte": 3220, "start_point": [69, 46], "end_point": [69, 52], "text": "e(cell"}, {"type": ")", "children": [], "start_byte": 3220, "end_byte": 3221, "start_point": [69, 52], "end_point": [69, 53], "text": ")"}], "start_byte": 3197, "end_byte": 3221, "start_point": [69, 29], "end_point": [69, 53], "text": " {\n    if let Some(cell)"}], "start_byte": 3180, "end_byte": 3221, "start_point": [69, 12], "end_point": [69, 53], "text": "ecode: &mut bool) {\n    if let Some(cell)"}, {"type": ";", "children": [], "start_byte": 3221, "end_byte": 3222, "start_point": [69, 53], "end_point": [69, 54], "text": " "}], "start_byte": 3180, "end_byte": 3222, "start_point": [69, 12], "end_point": [69, 54], "text": "ecode: &mut bool) {\n    if let Some(cell) "}, {"type": "}", "children": [], "start_byte": 3231, "end_byte": 3232, "start_point": [70, 8], "end_point": [70, 9], "text": " "}], "start_byte": 3166, "end_byte": 3232, "start_point": [68, 31], "end_point": [70, 9], "text": "<Box<Cell>>, decode: &mut bool) {\n    if let Some(cell) = cell {\n "}], "start_byte": 3143, "end_byte": 3232, "start_point": [68, 8], "end_point": [70, 9], "text": "ess_cells(cell: &Option<Box<Cell>>, decode: &mut bool) {\n    if let Some(cell) = cell {\n "}], "start_byte": 3143, "end_byte": 3232, "start_point": [68, 8], "end_point": [70, 9], "text": "ess_cells(cell: &Option<Box<Cell>>, decode: &mut bool) {\n    if let Some(cell) = cell {\n "}, {"type": "}", "children": [], "start_byte": 3237, "end_byte": 3238, "start_point": [71, 4], "end_point": [71, 5], "text": " "}], "start_byte": 2404, "end_byte": 3238, "start_point": [49, 36], "end_point": [71, 5], "text": "{\n        if let Some(ref name) = cell.name {\n            if name.as_str() == \"--\" {\n                *decode = false;\n                return;\n            } else if name.starts_with('-') && *decode {\n                // \u5982\u679c\u53c2\u6570\u4ee5 '-' \u5f00\u5934\uff0c\u5e76\u4e14 continue_evaluation \u4e3a true\n                // \u5219\u8df3\u8fc7\u6b64\u8282\u70b9\u7684\u5904\u7406\n                // println!(\"\u8df3\u8fc7\u53c2\u6570: {}\", name);  // \u793a\u4f8b: \u6253\u5370\u4fe1\u606f\n                // ... \u5176\u4ed6\u8df3\u8fc7\u8282\u70b9\u65f6\u7684\u5904\u7406\u903b\u8f91 ...\n            } else {\n                unsafe {\n                    NUM_FILE_NAMES += 1;\n                    LONGEST_FILE_NAME = LONGEST_FILE_NAME.max(name.len() as i32);\n                }\n            }\n        }\n\n        // \u9012\u5f52\u8c03\u7528\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9\n        if cell.link.is_some() {\n            process_link_list(&mut cell.link, decode);\n        }\n    }\n}\n\nfn process_cells(cell: &Option<Box<Cell>>, decode: &mut bool) {\n    if let Some(cell) = cell {\n       "}], "start_byte": 2372, "end_byte": 3238, "start_point": [49, 4], "end_point": [71, 5], "text": "if let Some(cell) = cell_option {\n        if let Some(ref name) = cell.name {\n            if name.as_str() == \"--\" {\n                *decode = false;\n                return;\n            } else if name.starts_with('-') && *decode {\n                // \u5982\u679c\u53c2\u6570\u4ee5 '-' \u5f00\u5934\uff0c\u5e76\u4e14 continue_evaluation \u4e3a true\n                // \u5219\u8df3\u8fc7\u6b64\u8282\u70b9\u7684\u5904\u7406\n                // println!(\"\u8df3\u8fc7\u53c2\u6570: {}\", name);  // \u793a\u4f8b: \u6253\u5370\u4fe1\u606f\n                // ... \u5176\u4ed6\u8df3\u8fc7\u8282\u70b9\u65f6\u7684\u5904\u7406\u903b\u8f91 ...\n            } else {\n                unsafe {\n                    NUM_FILE_NAMES += 1;\n                    LONGEST_FILE_NAME = LONGEST_FILE_NAME.max(name.len() as i32);\n                }\n            }\n        }\n\n        // \u9012\u5f52\u8c03\u7528\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9\n        if cell.link.is_some() {\n            process_link_list(&mut cell.link, decode);\n        }\n    }\n}\n\nfn process_cells(cell: &Option<Box<Cell>>, decode: &mut bool) {\n    if let Some(cell) = cell {\n       "}], "start_byte": 2372, "end_byte": 3238, "start_point": [49, 4], "end_point": [71, 5], "text": "if let Some(cell) = cell_option {\n        if let Some(ref name) = cell.name {\n            if name.as_str() == \"--\" {\n                *decode = false;\n                return;\n            } else if name.starts_with('-') && *decode {\n                // \u5982\u679c\u53c2\u6570\u4ee5 '-' \u5f00\u5934\uff0c\u5e76\u4e14 continue_evaluation \u4e3a true\n                // \u5219\u8df3\u8fc7\u6b64\u8282\u70b9\u7684\u5904\u7406\n                // println!(\"\u8df3\u8fc7\u53c2\u6570: {}\", name);  // \u793a\u4f8b: \u6253\u5370\u4fe1\u606f\n                // ... \u5176\u4ed6\u8df3\u8fc7\u8282\u70b9\u65f6\u7684\u5904\u7406\u903b\u8f91 ...\n            } else {\n                unsafe {\n                    NUM_FILE_NAMES += 1;\n                    LONGEST_FILE_NAME = LONGEST_FILE_NAME.max(name.len() as i32);\n                }\n            }\n        }\n\n        // \u9012\u5f52\u8c03\u7528\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9\n        if cell.link.is_some() {\n            process_link_list(&mut cell.link, decode);\n        }\n    }\n}\n\nfn process_cells(cell: &Option<Box<Cell>>, decode: &mut bool) {\n    if let Some(cell) = cell {\n       "}, {"type": "}", "children": [], "start_byte": 3239, "end_byte": 3240, "start_point": [72, 0], "end_point": [72, 1], "text": "i"}], "start_byte": 2366, "end_byte": 3240, "start_point": [48, 77], "end_point": [72, 1], "text": "{\n    if let Some(cell) = cell_option {\n        if let Some(ref name) = cell.name {\n            if name.as_str() == \"--\" {\n                *decode = false;\n                return;\n            } else if name.starts_with('-') && *decode {\n                // \u5982\u679c\u53c2\u6570\u4ee5 '-' \u5f00\u5934\uff0c\u5e76\u4e14 continue_evaluation \u4e3a true\n                // \u5219\u8df3\u8fc7\u6b64\u8282\u70b9\u7684\u5904\u7406\n                // println!(\"\u8df3\u8fc7\u53c2\u6570: {}\", name);  // \u793a\u4f8b: \u6253\u5370\u4fe1\u606f\n                // ... \u5176\u4ed6\u8df3\u8fc7\u8282\u70b9\u65f6\u7684\u5904\u7406\u903b\u8f91 ...\n            } else {\n                unsafe {\n                    NUM_FILE_NAMES += 1;\n                    LONGEST_FILE_NAME = LONGEST_FILE_NAME.max(name.len() as i32);\n                }\n            }\n        }\n\n        // \u9012\u5f52\u8c03\u7528\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9\n        if cell.link.is_some() {\n            process_link_list(&mut cell.link, decode);\n        }\n    }\n}\n\nfn process_cells(cell: &Option<Box<Cell>>, decode: &mut bool) {\n    if let Some(cell) = cell {\n        i"}], "start_byte": 2289, "end_byte": 3240, "start_point": [48, 0], "end_point": [72, 1], "text": "fn process_link_list(cell_option: &mut Option<Box<Cell>>, decode: &mut bool) {\n    if let Some(cell) = cell_option {\n        if let Some(ref name) = cell.name {\n            if name.as_str() == \"--\" {\n                *decode = false;\n                return;\n            } else if name.starts_with('-') && *decode {\n                // \u5982\u679c\u53c2\u6570\u4ee5 '-' \u5f00\u5934\uff0c\u5e76\u4e14 continue_evaluation \u4e3a true\n                // \u5219\u8df3\u8fc7\u6b64\u8282\u70b9\u7684\u5904\u7406\n                // println!(\"\u8df3\u8fc7\u53c2\u6570: {}\", name);  // \u793a\u4f8b: \u6253\u5370\u4fe1\u606f\n                // ... \u5176\u4ed6\u8df3\u8fc7\u8282\u70b9\u65f6\u7684\u5904\u7406\u903b\u8f91 ...\n            } else {\n                unsafe {\n                    NUM_FILE_NAMES += 1;\n                    LONGEST_FILE_NAME = LONGEST_FILE_NAME.max(name.len() as i32);\n                }\n            }\n        }\n\n        // \u9012\u5f52\u8c03\u7528\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9\n        if cell.link.is_some() {\n            process_link_list(&mut cell.link, decode);\n        }\n    }\n}\n\nfn process_cells(cell: &Option<Box<Cell>>, decode: &mut bool) {\n    if let Some(cell) = cell {\n        i"}, {"type": "function_item", "children": [{"type": "fn", "children": [], "start_byte": 3242, "end_byte": 3244, "start_point": [74, 0], "end_point": [74, 2], "text": "le"}, {"type": "identifier", "children": [], "start_byte": 3245, "end_byte": 3258, "start_point": [74, 3], "end_point": [74, 16], "text": " Some(name) ="}, {"type": "parameters", "children": [{"type": "(", "children": [], "start_byte": 3258, "end_byte": 3259, "start_point": [74, 16], "end_point": [74, 17], "text": " "}, {"type": "parameter", "children": [{"type": "identifier", "children": [], "start_byte": 3259, "end_byte": 3263, "start_point": [74, 17], "end_point": [74, 21], "text": "&cel"}, {"type": ":", "children": [], "start_byte": 3263, "end_byte": 3264, "start_point": [74, 21], "end_point": [74, 22], "text": "l"}, {"type": "reference_type", "children": [{"type": "&", "children": [], "start_byte": 3265, "end_byte": 3266, "start_point": [74, 23], "end_point": [74, 24], "text": "n"}, {"type": "generic_type", "children": [{"type": "type_identifier", "children": [], "start_byte": 3266, "end_byte": 3272, "start_point": [74, 24], "end_point": [74, 30], "text": "ame {\n"}, {"type": "type_arguments", "children": [{"type": "<", "children": [], "start_byte": 3272, "end_byte": 3273, "start_point": [74, 30], "end_point": [74, 31], "text": " "}, {"type": "generic_type", "children": [{"type": "type_identifier", "children": [], "start_byte": 3273, "end_byte": 3276, "start_point": [74, 31], "end_point": [74, 34], "text": "   "}, {"type": "type_arguments", "children": [{"type": "<", "children": [], "start_byte": 3276, "end_byte": 3277, "start_point": [74, 34], "end_point": [74, 35], "text": " "}, {"type": "type_identifier", "children": [], "start_byte": 3277, "end_byte": 3281, "start_point": [74, 35], "end_point": [74, 39], "text": "    "}, {"type": ">", "children": [], "start_byte": 3281, "end_byte": 3282, "start_point": [74, 39], "end_point": [74, 40], "text": " "}], "start_byte": 3276, "end_byte": 3282, "start_point": [74, 34], "end_point": [74, 40], "text": "      "}], "start_byte": 3273, "end_byte": 3282, "start_point": [74, 31], "end_point": [74, 40], "text": "         "}, {"type": ">", "children": [], "start_byte": 3282, "end_byte": 3283, "start_point": [74, 40], "end_point": [74, 41], "text": " "}], "start_byte": 3272, "end_byte": 3283, "start_point": [74, 30], "end_point": [74, 41], "text": "           "}], "start_byte": 3266, "end_byte": 3283, "start_point": [74, 24], "end_point": [74, 41], "text": "ame {\n           "}], "start_byte": 3265, "end_byte": 3283, "start_point": [74, 23], "end_point": [74, 41], "text": "name {\n           "}], "start_byte": 3259, "end_byte": 3283, "start_point": [74, 17], "end_point": [74, 41], "text": "&cell.name {\n           "}, {"type": ",", "children": [], "start_byte": 3283, "end_byte": 3284, "start_point": [74, 41], "end_point": [74, 42], "text": " "}, {"type": "parameter", "children": [{"type": "identifier", "children": [], "start_byte": 3285, "end_byte": 3291, "start_point": [74, 43], "end_point": [74, 49], "text": "f name"}, {"type": ":", "children": [], "start_byte": 3291, "end_byte": 3292, "start_point": [74, 49], "end_point": [74, 50], "text": "."}, {"type": "reference_type", "children": [{"type": "&", "children": [], "start_byte": 3293, "end_byte": 3294, "start_point": [74, 51], "end_point": [74, 52], "text": "s"}, {"type": "mutable_specifier", "children": [], "start_byte": 3294, "end_byte": 3297, "start_point": [74, 52], "end_point": [74, 55], "text": "_st"}, {"type": "primitive_type", "children": [], "start_byte": 3298, "end_byte": 3302, "start_point": [74, 56], "end_point": [74, 60], "text": "() ="}], "start_byte": 3293, "end_byte": 3302, "start_point": [74, 51], "end_point": [74, 60], "text": "s_str() ="}], "start_byte": 3285, "end_byte": 3302, "start_point": [74, 43], "end_point": [74, 60], "text": "f name.as_str() ="}, {"type": ")", "children": [], "start_byte": 3302, "end_byte": 3303, "start_point": [74, 60], "end_point": [74, 61], "text": "="}], "start_byte": 3258, "end_byte": 3303, "start_point": [74, 16], "end_point": [74, 61], "text": " &cell.name {\n            if name.as_str() =="}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 3304, "end_byte": 3305, "start_point": [74, 62], "end_point": [74, 63], "text": "\""}, {"type": "expression_statement", "children": [{"type": "if_expression", "children": [{"type": "if", "children": [], "start_byte": 3310, "end_byte": 3312, "start_point": [75, 4], "end_point": [75, 6], "text": "\n "}, {"type": "let_condition", "children": [{"type": "let", "children": [], "start_byte": 3313, "end_byte": 3316, "start_point": [75, 7], "end_point": [75, 10], "text": "   "}, {"type": "tuple_struct_pattern", "children": [{"type": "identifier", "children": [], "start_byte": 3317, "end_byte": 3321, "start_point": [75, 11], "end_point": [75, 15], "text": "    "}, {"type": "(", "children": [], "start_byte": 3321, "end_byte": 3322, "start_point": [75, 15], "end_point": [75, 16], "text": " "}, {"type": "identifier", "children": [], "start_byte": 3322, "end_byte": 3326, "start_point": [75, 16], "end_point": [75, 20], "text": "    "}, {"type": ")", "children": [], "start_byte": 3326, "end_byte": 3327, "start_point": [75, 20], "end_point": [75, 21], "text": " "}], "start_byte": 3317, "end_byte": 3327, "start_point": [75, 11], "end_point": [75, 21], "text": "          "}, {"type": "=", "children": [], "start_byte": 3328, "end_byte": 3329, "start_point": [75, 22], "end_point": [75, 23], "text": "d"}, {"type": "identifier", "children": [], "start_byte": 3330, "end_byte": 3334, "start_point": [75, 24], "end_point": [75, 28], "text": "code"}], "start_byte": 3313, "end_byte": 3334, "start_point": [75, 7], "end_point": [75, 28], "text": "              *decode"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 3335, "end_byte": 3336, "start_point": [75, 29], "end_point": [75, 30], "text": "="}, {"type": "expression_statement", "children": [{"type": "if_expression", "children": [{"type": "if", "children": [], "start_byte": 3345, "end_byte": 3347, "start_point": [76, 8], "end_point": [76, 10], "text": "  "}, {"type": "let_condition", "children": [{"type": "let", "children": [], "start_byte": 3348, "end_byte": 3351, "start_point": [76, 11], "end_point": [76, 14], "text": "   "}, {"type": "tuple_struct_pattern", "children": [{"type": "identifier", "children": [], "start_byte": 3352, "end_byte": 3356, "start_point": [76, 15], "end_point": [76, 19], "text": "    "}, {"type": "(", "children": [], "start_byte": 3356, "end_byte": 3357, "start_point": [76, 19], "end_point": [76, 20], "text": " "}, {"type": "identifier", "children": [], "start_byte": 3357, "end_byte": 3361, "start_point": [76, 20], "end_point": [76, 24], "text": "   r"}, {"type": ")", "children": [], "start_byte": 3361, "end_byte": 3362, "start_point": [76, 24], "end_point": [76, 25], "text": "e"}], "start_byte": 3352, "end_byte": 3362, "start_point": [76, 15], "end_point": [76, 25], "text": "        re"}, {"type": "=", "children": [], "start_byte": 3363, "end_byte": 3364, "start_point": [76, 26], "end_point": [76, 27], "text": "u"}, {"type": "reference_expression", "children": [{"type": "&", "children": [], "start_byte": 3365, "end_byte": 3366, "start_point": [76, 28], "end_point": [76, 29], "text": "n"}, {"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 3366, "end_byte": 3370, "start_point": [76, 29], "end_point": [76, 33], "text": ";\n  "}, {"type": ".", "children": [], "start_byte": 3370, "end_byte": 3371, "start_point": [76, 33], "end_point": [76, 34], "text": " "}, {"type": "field_identifier", "children": [], "start_byte": 3371, "end_byte": 3375, "start_point": [76, 34], "end_point": [76, 38], "text": "    "}], "start_byte": 3366, "end_byte": 3375, "start_point": [76, 29], "end_point": [76, 38], "text": ";\n       "}], "start_byte": 3365, "end_byte": 3375, "start_point": [76, 28], "end_point": [76, 38], "text": "n;\n       "}], "start_byte": 3348, "end_byte": 3375, "start_point": [76, 11], "end_point": [76, 38], "text": "            return;\n       "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 3376, "end_byte": 3377, "start_point": [76, 39], "end_point": [76, 40], "text": " "}, {"type": "expression_statement", "children": [{"type": "if_expression", "children": [{"type": "if", "children": [], "start_byte": 3390, "end_byte": 3392, "start_point": [77, 12], "end_point": [77, 14], "text": "  "}, {"type": "binary_expression", "children": [{"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 3393, "end_byte": 3397, "start_point": [77, 15], "end_point": [77, 19], "text": " if "}, {"type": ".", "children": [], "start_byte": 3397, "end_byte": 3398, "start_point": [77, 19], "end_point": [77, 20], "text": "n"}, {"type": "field_identifier", "children": [], "start_byte": 3398, "end_byte": 3404, "start_point": [77, 20], "end_point": [77, 26], "text": "ame.st"}], "start_byte": 3393, "end_byte": 3404, "start_point": [77, 15], "end_point": [77, 26], "text": " if name.st"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 3404, "end_byte": 3405, "start_point": [77, 26], "end_point": [77, 27], "text": "a"}, {"type": ")", "children": [], "start_byte": 3405, "end_byte": 3406, "start_point": [77, 27], "end_point": [77, 28], "text": "r"}], "start_byte": 3404, "end_byte": 3406, "start_point": [77, 26], "end_point": [77, 28], "text": "ar"}], "start_byte": 3393, "end_byte": 3406, "start_point": [77, 15], "end_point": [77, 28], "text": " if name.star"}, {"type": "==", "children": [], "start_byte": 3407, "end_byte": 3409, "start_point": [77, 29], "end_point": [77, 31], "text": "s_"}, {"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 3410, "end_byte": 3411, "start_point": [77, 32], "end_point": [77, 33], "text": "i"}, {"type": "\"", "children": [], "start_byte": 3413, "end_byte": 3414, "start_point": [77, 35], "end_point": [77, 36], "text": "("}], "start_byte": 3410, "end_byte": 3414, "start_point": [77, 32], "end_point": [77, 36], "text": "ith("}], "start_byte": 3393, "end_byte": 3414, "start_point": [77, 15], "end_point": [77, 36], "text": " if name.starts_with("}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 3415, "end_byte": 3416, "start_point": [77, 37], "end_point": [77, 38], "text": "-"}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "unary_expression", "children": [{"type": "*", "children": [], "start_byte": 3433, "end_byte": 3434, "start_point": [78, 16], "end_point": [78, 17], "text": " "}, {"type": "identifier", "children": [], "start_byte": 3434, "end_byte": 3440, "start_point": [78, 17], "end_point": [78, 23], "text": "      "}], "start_byte": 3433, "end_byte": 3440, "start_point": [78, 16], "end_point": [78, 23], "text": "       "}, {"type": "=", "children": [], "start_byte": 3441, "end_byte": 3442, "start_point": [78, 24], "end_point": [78, 25], "text": " "}, {"type": "boolean_literal", "children": [{"type": "false", "children": [], "start_byte": 3443, "end_byte": 3448, "start_point": [78, 26], "end_point": [78, 31], "text": "     "}], "start_byte": 3443, "end_byte": 3448, "start_point": [78, 26], "end_point": [78, 31], "text": "     "}], "start_byte": 3433, "end_byte": 3448, "start_point": [78, 16], "end_point": [78, 31], "text": "               "}, {"type": ";", "children": [], "start_byte": 3448, "end_byte": 3449, "start_point": [78, 31], "end_point": [78, 32], "text": "/"}], "start_byte": 3433, "end_byte": 3449, "start_point": [78, 16], "end_point": [78, 32], "text": "               /"}, {"type": "expression_statement", "children": [{"type": "return_expression", "children": [{"type": "return", "children": [], "start_byte": 3466, "end_byte": 3472, "start_point": [79, 16], "end_point": [79, 22], "text": "      "}], "start_byte": 3466, "end_byte": 3472, "start_point": [79, 16], "end_point": [79, 22], "text": "      "}, {"type": ";", "children": [], "start_byte": 3472, "end_byte": 3473, "start_point": [79, 22], "end_point": [79, 23], "text": " "}], "start_byte": 3466, "end_byte": 3473, "start_point": [79, 16], "end_point": [79, 23], "text": "       "}, {"type": "}", "children": [], "start_byte": 3486, "end_byte": 3487, "start_point": [80, 12], "end_point": [80, 13], "text": "_"}], "start_byte": 3415, "end_byte": 3487, "start_point": [77, 37], "end_point": [80, 13], "text": "-') && *decode {\n                // \u9012\u5f52\u8c03\u7528\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9\n                process_"}], "start_byte": 3390, "end_byte": 3487, "start_point": [77, 12], "end_point": [80, 13], "text": "    if name.starts_with('-') && *decode {\n                // \u9012\u5f52\u8c03\u7528\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9\n                process_"}], "start_byte": 3390, "end_byte": 3487, "start_point": [77, 12], "end_point": [80, 13], "text": "    if name.starts_with('-') && *decode {\n                // \u9012\u5f52\u8c03\u7528\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9\n                process_"}, {"type": "expression_statement", "children": [{"type": "if_expression", "children": [{"type": "if", "children": [], "start_byte": 3500, "end_byte": 3502, "start_point": [81, 12], "end_point": [81, 14], "text": "in"}, {"type": "binary_expression", "children": [{"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 3503, "end_byte": 3507, "start_point": [81, 15], "end_point": [81, 19], "text": ", de"}, {"type": ".", "children": [], "start_byte": 3507, "end_byte": 3508, "start_point": [81, 19], "end_point": [81, 20], "text": "c"}, {"type": "field_identifier", "children": [], "start_byte": 3508, "end_byte": 3519, "start_point": [81, 20], "end_point": [81, 31], "text": "ode);\n     "}], "start_byte": 3503, "end_byte": 3519, "start_point": [81, 15], "end_point": [81, 31], "text": ", decode);\n     "}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 3519, "end_byte": 3520, "start_point": [81, 31], "end_point": [81, 32], "text": " "}, {"type": "char_literal", "children": [], "start_byte": 3520, "end_byte": 3523, "start_point": [81, 32], "end_point": [81, 35], "text": "   "}, {"type": ")", "children": [], "start_byte": 3523, "end_byte": 3524, "start_point": [81, 35], "end_point": [81, 36], "text": " "}], "start_byte": 3519, "end_byte": 3524, "start_point": [81, 31], "end_point": [81, 36], "text": "     "}], "start_byte": 3503, "end_byte": 3524, "start_point": [81, 15], "end_point": [81, 36], "text": ", decode);\n          "}, {"type": "&&", "children": [], "start_byte": 3525, "end_byte": 3527, "start_point": [81, 37], "end_point": [81, 39], "text": "  "}, {"type": "unary_expression", "children": [{"type": "*", "children": [], "start_byte": 3528, "end_byte": 3529, "start_point": [81, 40], "end_point": [81, 41], "text": " "}, {"type": "identifier", "children": [], "start_byte": 3529, "end_byte": 3535, "start_point": [81, 41], "end_point": [81, 47], "text": " retur"}], "start_byte": 3528, "end_byte": 3535, "start_point": [81, 40], "end_point": [81, 47], "text": "  retur"}], "start_byte": 3503, "end_byte": 3535, "start_point": [81, 15], "end_point": [81, 47], "text": ", decode);\n                retur"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 3536, "end_byte": 3537, "start_point": [81, 48], "end_point": [81, 49], "text": ";"}, {"type": "line_comment", "children": [], "start_byte": 3554, "end_byte": 3590, "start_point": [82, 16], "end_point": [82, 52], "text": "          unsafe { NUM_FILES_PROCESS"}, {"type": "expression_statement", "children": [{"type": "call_expression", "children": [{"type": "identifier", "children": [], "start_byte": 3607, "end_byte": 3620, "start_point": [83, 16], "end_point": [83, 29], "text": "      // prin"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 3620, "end_byte": 3621, "start_point": [83, 29], "end_point": [83, 30], "text": "t"}, {"type": "reference_expression", "children": [{"type": "&", "children": [], "start_byte": 3621, "end_byte": 3622, "start_point": [83, 30], "end_point": [83, 31], "text": "l"}, {"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 3622, "end_byte": 3626, "start_point": [83, 31], "end_point": [83, 35], "text": "n!(\""}, {"type": ".", "children": [], "start_byte": 3626, "end_byte": 3627, "start_point": [83, 35], "end_point": [83, 36], "text": "c"}, {"type": "field_identifier", "children": [], "start_byte": 3627, "end_byte": 3631, "start_point": [83, 36], "end_point": [83, 40], "text": "ell."}], "start_byte": 3622, "end_byte": 3631, "start_point": [83, 31], "end_point": [83, 40], "text": "n!(\"cell."}], "start_byte": 3621, "end_byte": 3631, "start_point": [83, 30], "end_point": [83, 40], "text": "ln!(\"cell."}, {"type": ",", "children": [], "start_byte": 3631, "end_byte": 3632, "start_point": [83, 40], "end_point": [83, 41], "text": "n"}, {"type": "identifier", "children": [], "start_byte": 3633, "end_byte": 3639, "start_point": [83, 42], "end_point": [83, 48], "text": "me: {}"}, {"type": ")", "children": [], "start_byte": 3639, "end_byte": 3640, "start_point": [83, 48], "end_point": [83, 49], "text": "\""}], "start_byte": 3620, "end_byte": 3640, "start_point": [83, 29], "end_point": [83, 49], "text": "tln!(\"cell.name: {}\""}], "start_byte": 3607, "end_byte": 3640, "start_point": [83, 16], "end_point": [83, 49], "text": "      // println!(\"cell.name: {}\""}, {"type": ";", "children": [], "start_byte": 3640, "end_byte": 3641, "start_point": [83, 49], "end_point": [83, 50], "text": ","}], "start_byte": 3607, "end_byte": 3641, "start_point": [83, 16], "end_point": [83, 50], "text": "      // println!(\"cell.name: {}\","}, {"type": "expression_statement", "children": [{"type": "return_expression", "children": [{"type": "return", "children": [], "start_byte": 3658, "end_byte": 3664, "start_point": [84, 16], "end_point": [84, 22], "text": "   if "}], "start_byte": 3658, "end_byte": 3664, "start_point": [84, 16], "end_point": [84, 22], "text": "   if "}, {"type": ";", "children": [], "start_byte": 3664, "end_byte": 3665, "start_point": [84, 22], "end_point": [84, 23], "text": "l"}], "start_byte": 3658, "end_byte": 3665, "start_point": [84, 16], "end_point": [84, 23], "text": "   if l"}, {"type": "}", "children": [], "start_byte": 3678, "end_byte": 3679, "start_point": [85, 12], "end_point": [85, 13], "text": "o"}], "start_byte": 3536, "end_byte": 3679, "start_point": [81, 48], "end_point": [85, 13], "text": ";\n            }\n            unsafe { NUM_FILES_PROCESSED += 1; }\n            // println!(\"cell.name: {}\", name);\n            if let Err(e) = co"}], "start_byte": 3500, "end_byte": 3679, "start_point": [81, 12], "end_point": [85, 13], "text": "ink, decode);\n                return;\n            }\n            unsafe { NUM_FILES_PROCESSED += 1; }\n            // println!(\"cell.name: {}\", name);\n            if let Err(e) = co"}], "start_byte": 3500, "end_byte": 3679, "start_point": [81, 12], "end_point": [85, 13], "text": "ink, decode);\n                return;\n            }\n            unsafe { NUM_FILES_PROCESSED += 1; }\n            // println!(\"cell.name: {}\", name);\n            if let Err(e) = co"}, {"type": "expression_statement", "children": [{"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 3692, "end_byte": 3698, "start_point": [86, 12], "end_point": [86, 18], "text": "ame)) "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 3699, "end_byte": 3700, "start_point": [86, 19], "end_point": [86, 20], "text": "\n"}, {"type": "expression_statement", "children": [{"type": "compound_assignment_expr", "children": [{"type": "identifier", "children": [], "start_byte": 3701, "end_byte": 3720, "start_point": [86, 21], "end_point": [86, 40], "text": "               epri"}, {"type": "+=", "children": [], "start_byte": 3721, "end_byte": 3723, "start_point": [86, 41], "end_point": [86, 43], "text": "tl"}, {"type": "integer_literal", "children": [], "start_byte": 3724, "end_byte": 3725, "start_point": [86, 44], "end_point": [86, 45], "text": "!"}], "start_byte": 3701, "end_byte": 3725, "start_point": [86, 21], "end_point": [86, 45], "text": "               eprintln!"}, {"type": ";", "children": [], "start_byte": 3725, "end_byte": 3726, "start_point": [86, 45], "end_point": [86, 46], "text": "("}], "start_byte": 3701, "end_byte": 3726, "start_point": [86, 21], "end_point": [86, 46], "text": "               eprintln!("}, {"type": "}", "children": [], "start_byte": 3727, "end_byte": 3728, "start_point": [86, 47], "end_point": [86, 48], "text": "\u538b"}], "start_byte": 3699, "end_byte": 3728, "start_point": [86, 19], "end_point": [86, 48], "text": "\n                eprintln!(\"\u538b"}], "start_byte": 3692, "end_byte": 3728, "start_point": [86, 12], "end_point": [86, 48], "text": "ame)) {\n                eprintln!(\"\u538b"}], "start_byte": 3692, "end_byte": 3728, "start_point": [86, 12], "end_point": [86, 48], "text": "ame)) {\n                eprintln!(\"\u538b"}, {"type": "line_comment", "children": [], "start_byte": 3741, "end_byte": 3776, "start_point": [87, 12], "end_point": [87, 47], "text": "e);\n            }\n        }\n       "}, {"type": "expression_statement", "children": [{"type": "if_expression", "children": [{"type": "if", "children": [], "start_byte": 3789, "end_byte": 3791, "start_point": [88, 12], "end_point": [88, 14], "text": "\u8282\u70b9"}, {"type": "let_condition", "children": [{"type": "let", "children": [], "start_byte": 3792, "end_byte": 3795, "start_point": [88, 15], "end_point": [88, 18], "text": "   "}, {"type": "tuple_struct_pattern", "children": [{"type": "identifier", "children": [], "start_byte": 3796, "end_byte": 3799, "start_point": [88, 19], "end_point": [88, 22], "text": "   "}, {"type": "(", "children": [], "start_byte": 3799, "end_byte": 3800, "start_point": [88, 22], "end_point": [88, 23], "text": " "}, {"type": "identifier", "children": [], "start_byte": 3800, "end_byte": 3801, "start_point": [88, 23], "end_point": [88, 24], "text": "p"}, {"type": ")", "children": [], "start_byte": 3801, "end_byte": 3802, "start_point": [88, 24], "end_point": [88, 25], "text": "r"}], "start_byte": 3796, "end_byte": 3802, "start_point": [88, 19], "end_point": [88, 25], "text": "    pr"}, {"type": "=", "children": [], "start_byte": 3803, "end_byte": 3804, "start_point": [88, 26], "end_point": [88, 27], "text": "c"}, {"type": "call_expression", "children": [{"type": "identifier", "children": [], "start_byte": 3805, "end_byte": 3813, "start_point": [88, 28], "end_point": [88, 36], "text": "ss_cells"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 3813, "end_byte": 3814, "start_point": [88, 36], "end_point": [88, 37], "text": "("}, {"type": "call_expression", "children": [{"type": "identifier", "children": [], "start_byte": 3814, "end_byte": 3818, "start_point": [88, 37], "end_point": [88, 41], "text": "&cel"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 3818, "end_byte": 3819, "start_point": [88, 41], "end_point": [88, 42], "text": "l"}, {"type": "identifier", "children": [], "start_byte": 3819, "end_byte": 3823, "start_point": [88, 42], "end_point": [88, 46], "text": ".lin"}, {"type": ")", "children": [], "start_byte": 3823, "end_byte": 3824, "start_point": [88, 46], "end_point": [88, 47], "text": "k"}], "start_byte": 3818, "end_byte": 3824, "start_point": [88, 41], "end_point": [88, 47], "text": "l.link"}], "start_byte": 3814, "end_byte": 3824, "start_point": [88, 37], "end_point": [88, 47], "text": "&cell.link"}, {"type": ")", "children": [], "start_byte": 3824, "end_byte": 3825, "start_point": [88, 47], "end_point": [88, 48], "text": ","}], "start_byte": 3813, "end_byte": 3825, "start_point": [88, 36], "end_point": [88, 48], "text": "(&cell.link,"}], "start_byte": 3805, "end_byte": 3825, "start_point": [88, 28], "end_point": [88, 48], "text": "ss_cells(&cell.link,"}], "start_byte": 3792, "end_byte": 3825, "start_point": [88, 15], "end_point": [88, 48], "text": "        process_cells(&cell.link,"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 3826, "end_byte": 3827, "start_point": [88, 49], "end_point": [88, 50], "text": "d"}, {"type": "expression_statement", "children": [{"type": "macro_invocation", "children": [{"type": "identifier", "children": [], "start_byte": 3844, "end_byte": 3852, "start_point": [89, 16], "end_point": [89, 24], "text": "\n\npub fn"}, {"type": "!", "children": [], "start_byte": 3852, "end_byte": 3853, "start_point": [89, 24], "end_point": [89, 25], "text": " "}, {"type": "token_tree", "children": [{"type": "(", "children": [], "start_byte": 3853, "end_byte": 3854, "start_point": [89, 25], "end_point": [89, 26], "text": "m"}, {"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 3854, "end_byte": 3855, "start_point": [89, 26], "end_point": [89, 27], "text": "a"}, {"type": "\"", "children": [], "start_byte": 3880, "end_byte": 3881, "start_point": [89, 52], "end_point": [89, 53], "text": "&"}], "start_byte": 3854, "end_byte": 3881, "start_point": [89, 26], "end_point": [89, 53], "text": "ain(argv: &[String], gou: &"}, {"type": "identifier", "children": [], "start_byte": 3883, "end_byte": 3884, "start_point": [89, 55], "end_point": [89, 56], "text": "t"}, {"type": ")", "children": [], "start_byte": 3884, "end_byte": 3885, "start_point": [89, 56], "end_point": [89, 57], "text": "r"}], "start_byte": 3853, "end_byte": 3885, "start_point": [89, 25], "end_point": [89, 57], "text": "main(argv: &[String], gou: &[Str"}], "start_byte": 3844, "end_byte": 3885, "start_point": [89, 16], "end_point": [89, 57], "text": "\n\npub fn main(argv: &[String], gou: &[Str"}, {"type": ";", "children": [], "start_byte": 3885, "end_byte": 3886, "start_point": [89, 57], "end_point": [89, 58], "text": "i"}], "start_byte": 3844, "end_byte": 3886, "start_point": [89, 16], "end_point": [89, 58], "text": "\n\npub fn main(argv: &[String], gou: &[Stri"}, {"type": "}", "children": [], "start_byte": 3899, "end_byte": 3900, "start_point": [90, 12], "end_point": [90, 13], "text": "l"}], "start_byte": 3826, "end_byte": 3900, "start_point": [88, 49], "end_point": [90, 13], "text": "decode);\n    }\n}\n\n\n\npub fn main(argv: &[String], gou: &[String])  -> Resul"}], "start_byte": 3789, "end_byte": 3900, "start_point": [88, 12], "end_point": [90, 13], "text": "\u8282\u70b9\n        process_cells(&cell.link, decode);\n    }\n}\n\n\n\npub fn main(argv: &[String], gou: &[String])  -> Resul"}], "start_byte": 3789, "end_byte": 3900, "start_point": [88, 12], "end_point": [90, 13], "text": "\u8282\u70b9\n        process_cells(&cell.link, decode);\n    }\n}\n\n\n\npub fn main(argv: &[String], gou: &[String])  -> Resul"}, {"type": "}", "children": [], "start_byte": 3909, "end_byte": 3910, "start_point": [91, 8], "end_point": [91, 9], "text": ":"}], "start_byte": 3376, "end_byte": 3910, "start_point": [76, 39], "end_point": [91, 9], "text": "    }\n            if name.starts_with('-') && *decode {\n                // \u9012\u5f52\u8c03\u7528\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9\n                process_cells(&cell.link, decode);\n                return;\n            }\n            unsafe { NUM_FILES_PROCESSED += 1; }\n            // println!(\"cell.name: {}\", name);\n            if let Err(e) = compress(Some(name)) {\n                eprintln!(\"\u538b\u7f29\u8fc7\u7a0b\u4e2d\u51fa\u9519: {}\", e);\n            }\n        }\n        // \u9012\u5f52\u8c03\u7528\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9\n        process_cells(&cell.link, decode);\n    }\n}\n\n\n\npub fn main(argv: &[String], gou: &[String])  -> Result<(), io::"}], "start_byte": 3345, "end_byte": 3910, "start_point": [76, 8], "end_point": [91, 9], "text": "               return;\n            }\n            if name.starts_with('-') && *decode {\n                // \u9012\u5f52\u8c03\u7528\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9\n                process_cells(&cell.link, decode);\n                return;\n            }\n            unsafe { NUM_FILES_PROCESSED += 1; }\n            // println!(\"cell.name: {}\", name);\n            if let Err(e) = compress(Some(name)) {\n                eprintln!(\"\u538b\u7f29\u8fc7\u7a0b\u4e2d\u51fa\u9519: {}\", e);\n            }\n        }\n        // \u9012\u5f52\u8c03\u7528\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9\n        process_cells(&cell.link, decode);\n    }\n}\n\n\n\npub fn main(argv: &[String], gou: &[String])  -> Result<(), io::"}], "start_byte": 3345, "end_byte": 3910, "start_point": [76, 8], "end_point": [91, 9], "text": "               return;\n            }\n            if name.starts_with('-') && *decode {\n                // \u9012\u5f52\u8c03\u7528\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9\n                process_cells(&cell.link, decode);\n                return;\n            }\n            unsafe { NUM_FILES_PROCESSED += 1; }\n            // println!(\"cell.name: {}\", name);\n            if let Err(e) = compress(Some(name)) {\n                eprintln!(\"\u538b\u7f29\u8fc7\u7a0b\u4e2d\u51fa\u9519: {}\", e);\n            }\n        }\n        // \u9012\u5f52\u8c03\u7528\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9\n        process_cells(&cell.link, decode);\n    }\n}\n\n\n\npub fn main(argv: &[String], gou: &[String])  -> Result<(), io::"}, {"type": "line_comment", "children": [], "start_byte": 3919, "end_byte": 3955, "start_point": [92, 8], "end_point": [92, 44], "text": "    // let argv: Vec<String> = env::"}, {"type": "expression_statement", "children": [{"type": "call_expression", "children": [{"type": "identifier", "children": [], "start_byte": 3964, "end_byte": 3977, "start_point": [93, 8], "end_point": [93, 21], "text": "llect();\n    "}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 3977, "end_byte": 3978, "start_point": [93, 21], "end_point": [93, 22], "text": "l"}, {"type": "reference_expression", "children": [{"type": "&", "children": [], "start_byte": 3978, "end_byte": 3979, "start_point": [93, 22], "end_point": [93, 23], "text": "e"}, {"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 3979, "end_byte": 3983, "start_point": [93, 23], "end_point": [93, 27], "text": "t ar"}, {"type": ".", "children": [], "start_byte": 3983, "end_byte": 3984, "start_point": [93, 27], "end_point": [93, 28], "text": "g"}, {"type": "field_identifier", "children": [], "start_byte": 3984, "end_byte": 3988, "start_point": [93, 28], "end_point": [93, 32], "text": "v = "}], "start_byte": 3979, "end_byte": 3988, "start_point": [93, 23], "end_point": [93, 32], "text": "t argv = "}], "start_byte": 3978, "end_byte": 3988, "start_point": [93, 22], "end_point": [93, 32], "text": "et argv = "}, {"type": ",", "children": [], "start_byte": 3988, "end_byte": 3989, "start_point": [93, 32], "end_point": [93, 33], "text": "a"}, {"type": "identifier", "children": [], "start_byte": 3990, "end_byte": 3996, "start_point": [93, 34], "end_point": [93, 40], "text": "gv;\n  "}, {"type": ")", "children": [], "start_byte": 3996, "end_byte": 3997, "start_point": [93, 40], "end_point": [93, 41], "text": " "}], "start_byte": 3977, "end_byte": 3997, "start_point": [93, 21], "end_point": [93, 41], "text": "let argv = argv;\n   "}], "start_byte": 3964, "end_byte": 3997, "start_point": [93, 8], "end_point": [93, 41], "text": "llect();\n    let argv = argv;\n   "}, {"type": ";", "children": [], "start_byte": 3997, "end_byte": 3998, "start_point": [93, 41], "end_point": [93, 42], "text": " "}], "start_byte": 3964, "end_byte": 3998, "start_point": [93, 8], "end_point": [93, 42], "text": "llect();\n    let argv = argv;\n    "}, {"type": "}", "children": [], "start_byte": 4003, "end_byte": 4004, "start_point": [94, 4], "end_point": [94, 5], "text": "r"}], "start_byte": 3335, "end_byte": 4004, "start_point": [75, 29], "end_point": [94, 5], "text": "= false;\n                return;\n            }\n            if name.starts_with('-') && *decode {\n                // \u9012\u5f52\u8c03\u7528\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9\n                process_cells(&cell.link, decode);\n                return;\n            }\n            unsafe { NUM_FILES_PROCESSED += 1; }\n            // println!(\"cell.name: {}\", name);\n            if let Err(e) = compress(Some(name)) {\n                eprintln!(\"\u538b\u7f29\u8fc7\u7a0b\u4e2d\u51fa\u9519: {}\", e);\n            }\n        }\n        // \u9012\u5f52\u8c03\u7528\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9\n        process_cells(&cell.link, decode);\n    }\n}\n\n\n\npub fn main(argv: &[String], gou: &[String])  -> Result<(), io::Error> {\n    // let argv: Vec<String> = env::args().collect();\n    let argv = argv;\n    let ar"}], "start_byte": 3310, "end_byte": 4004, "start_point": [75, 4], "end_point": [94, 5], "text": "\n                *decode = false;\n                return;\n            }\n            if name.starts_with('-') && *decode {\n                // \u9012\u5f52\u8c03\u7528\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9\n                process_cells(&cell.link, decode);\n                return;\n            }\n            unsafe { NUM_FILES_PROCESSED += 1; }\n            // println!(\"cell.name: {}\", name);\n            if let Err(e) = compress(Some(name)) {\n                eprintln!(\"\u538b\u7f29\u8fc7\u7a0b\u4e2d\u51fa\u9519: {}\", e);\n            }\n        }\n        // \u9012\u5f52\u8c03\u7528\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9\n        process_cells(&cell.link, decode);\n    }\n}\n\n\n\npub fn main(argv: &[String], gou: &[String])  -> Result<(), io::Error> {\n    // let argv: Vec<String> = env::args().collect();\n    let argv = argv;\n    let ar"}], "start_byte": 3310, "end_byte": 4004, "start_point": [75, 4], "end_point": [94, 5], "text": "\n                *decode = false;\n                return;\n            }\n            if name.starts_with('-') && *decode {\n                // \u9012\u5f52\u8c03\u7528\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9\n                process_cells(&cell.link, decode);\n                return;\n            }\n            unsafe { NUM_FILES_PROCESSED += 1; }\n            // println!(\"cell.name: {}\", name);\n            if let Err(e) = compress(Some(name)) {\n                eprintln!(\"\u538b\u7f29\u8fc7\u7a0b\u4e2d\u51fa\u9519: {}\", e);\n            }\n        }\n        // \u9012\u5f52\u8c03\u7528\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9\n        process_cells(&cell.link, decode);\n    }\n}\n\n\n\npub fn main(argv: &[String], gou: &[String])  -> Result<(), io::Error> {\n    // let argv: Vec<String> = env::args().collect();\n    let argv = argv;\n    let ar"}, {"type": "}", "children": [], "start_byte": 4005, "end_byte": 4006, "start_point": [95, 0], "end_point": [95, 1], "text": "c"}], "start_byte": 3304, "end_byte": 4006, "start_point": [74, 62], "end_point": [95, 1], "text": "\"--\" {\n                *decode = false;\n                return;\n            }\n            if name.starts_with('-') && *decode {\n                // \u9012\u5f52\u8c03\u7528\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9\n                process_cells(&cell.link, decode);\n                return;\n            }\n            unsafe { NUM_FILES_PROCESSED += 1; }\n            // println!(\"cell.name: {}\", name);\n            if let Err(e) = compress(Some(name)) {\n                eprintln!(\"\u538b\u7f29\u8fc7\u7a0b\u4e2d\u51fa\u9519: {}\", e);\n            }\n        }\n        // \u9012\u5f52\u8c03\u7528\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9\n        process_cells(&cell.link, decode);\n    }\n}\n\n\n\npub fn main(argv: &[String], gou: &[String])  -> Result<(), io::Error> {\n    // let argv: Vec<String> = env::args().collect();\n    let argv = argv;\n    let argc"}], "start_byte": 3242, "end_byte": 4006, "start_point": [74, 0], "end_point": [95, 1], "text": "let Some(name) = &cell.name {\n            if name.as_str() == \"--\" {\n                *decode = false;\n                return;\n            }\n            if name.starts_with('-') && *decode {\n                // \u9012\u5f52\u8c03\u7528\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9\n                process_cells(&cell.link, decode);\n                return;\n            }\n            unsafe { NUM_FILES_PROCESSED += 1; }\n            // println!(\"cell.name: {}\", name);\n            if let Err(e) = compress(Some(name)) {\n                eprintln!(\"\u538b\u7f29\u8fc7\u7a0b\u4e2d\u51fa\u9519: {}\", e);\n            }\n        }\n        // \u9012\u5f52\u8c03\u7528\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9\n        process_cells(&cell.link, decode);\n    }\n}\n\n\n\npub fn main(argv: &[String], gou: &[String])  -> Result<(), io::Error> {\n    // let argv: Vec<String> = env::args().collect();\n    let argv = argv;\n    let argc"}, {"type": "function_item", "children": [{"type": "visibility_modifier", "children": [{"type": "pub", "children": [], "start_byte": 4010, "end_byte": 4013, "start_point": [99, 0], "end_point": [99, 3], "text": "ou."}], "start_byte": 4010, "end_byte": 4013, "start_point": [99, 0], "end_point": [99, 3], "text": "ou."}, {"type": "fn", "children": [], "start_byte": 4014, "end_byte": 4016, "start_point": [99, 4], "end_point": [99, 6], "text": "en"}, {"type": "identifier", "children": [], "start_byte": 4017, "end_byte": 4021, "start_point": [99, 7], "end_point": [99, 11], "text": ") as"}, {"type": "parameters", "children": [{"type": "(", "children": [], "start_byte": 4021, "end_byte": 4022, "start_point": [99, 11], "end_point": [99, 12], "text": " "}, {"type": "parameter", "children": [{"type": "identifier", "children": [], "start_byte": 4022, "end_byte": 4026, "start_point": [99, 12], "end_point": [99, 16], "text": "i32;"}, {"type": ":", "children": [], "start_byte": 4026, "end_byte": 4027, "start_point": [99, 16], "end_point": [99, 17], "text": "\n"}, {"type": "reference_type", "children": [{"type": "&", "children": [], "start_byte": 4028, "end_byte": 4029, "start_point": [99, 18], "end_point": [99, 19], "text": " "}, {"type": "array_type", "children": [{"type": "[", "children": [], "start_byte": 4029, "end_byte": 4030, "start_point": [99, 19], "end_point": [99, 20], "text": " "}, {"type": "type_identifier", "children": [], "start_byte": 4030, "end_byte": 4036, "start_point": [99, 20], "end_point": [99, 26], "text": " let m"}, {"type": "]", "children": [], "start_byte": 4036, "end_byte": 4037, "start_point": [99, 26], "end_point": [99, 27], "text": "u"}], "start_byte": 4029, "end_byte": 4037, "start_point": [99, 19], "end_point": [99, 27], "text": "  let mu"}], "start_byte": 4028, "end_byte": 4037, "start_point": [99, 18], "end_point": [99, 27], "text": "   let mu"}], "start_byte": 4022, "end_byte": 4037, "start_point": [99, 12], "end_point": [99, 27], "text": "i32;\n    let mu"}, {"type": ",", "children": [], "start_byte": 4037, "end_byte": 4038, "start_point": [99, 27], "end_point": [99, 28], "text": "t"}, {"type": "parameter", "children": [{"type": "identifier", "children": [], "start_byte": 4039, "end_byte": 4042, "start_point": [99, 29], "end_point": [99, 32], "text": "dec"}, {"type": ":", "children": [], "start_byte": 4042, "end_byte": 4043, "start_point": [99, 32], "end_point": [99, 33], "text": "o"}, {"type": "reference_type", "children": [{"type": "&", "children": [], "start_byte": 4044, "end_byte": 4045, "start_point": [99, 34], "end_point": [99, 35], "text": "e"}, {"type": "array_type", "children": [{"type": "[", "children": [], "start_byte": 4045, "end_byte": 4046, "start_point": [99, 35], "end_point": [99, 36], "text": ":"}, {"type": "type_identifier", "children": [], "start_byte": 4046, "end_byte": 4052, "start_point": [99, 36], "end_point": [99, 42], "text": " bool;"}, {"type": "]", "children": [], "start_byte": 4052, "end_byte": 4053, "start_point": [99, 42], "end_point": [99, 43], "text": "\n"}], "start_byte": 4045, "end_byte": 4053, "start_point": [99, 35], "end_point": [99, 43], "text": ": bool;\n"}], "start_byte": 4044, "end_byte": 4053, "start_point": [99, 34], "end_point": [99, 43], "text": "e: bool;\n"}], "start_byte": 4039, "end_byte": 4053, "start_point": [99, 29], "end_point": [99, 43], "text": "decode: bool;\n"}, {"type": ")", "children": [], "start_byte": 4053, "end_byte": 4054, "start_point": [99, 43], "end_point": [99, 44], "text": " "}], "start_byte": 4021, "end_byte": 4054, "start_point": [99, 11], "end_point": [99, 44], "text": " i32;\n    let mut decode: bool;\n "}, {"type": "->", "children": [], "start_byte": 4056, "end_byte": 4058, "start_point": [99, 46], "end_point": [99, 48], "text": " /"}, {"type": "generic_type", "children": [{"type": "type_identifier", "children": [], "start_byte": 4059, "end_byte": 4065, "start_point": [99, 49], "end_point": [99, 55], "text": " \u521d\u59cb\u5316\u53d8\u91cf"}, {"type": "type_arguments", "children": [{"type": "<", "children": [], "start_byte": 4065, "end_byte": 4066, "start_point": [99, 55], "end_point": [99, 56], "text": "\n"}, {"type": "unit_type", "children": [{"type": "(", "children": [], "start_byte": 4066, "end_byte": 4067, "start_point": [99, 56], "end_point": [99, 57], "text": " "}, {"type": ")", "children": [], "start_byte": 4067, "end_byte": 4068, "start_point": [99, 57], "end_point": [99, 58], "text": " "}], "start_byte": 4066, "end_byte": 4068, "start_point": [99, 56], "end_point": [99, 58], "text": "  "}, {"type": ",", "children": [], "start_byte": 4068, "end_byte": 4069, "start_point": [99, 58], "end_point": [99, 59], "text": " "}, {"type": "scoped_type_identifier", "children": [{"type": "identifier", "children": [], "start_byte": 4070, "end_byte": 4072, "start_point": [99, 60], "end_point": [99, 62], "text": "un"}, {"type": "::", "children": [], "start_byte": 4072, "end_byte": 4074, "start_point": [99, 62], "end_point": [99, 64], "text": "sa"}, {"type": "type_identifier", "children": [], "start_byte": 4074, "end_byte": 4079, "start_point": [99, 64], "end_point": [99, 69], "text": "fe{\n "}], "start_byte": 4070, "end_byte": 4079, "start_point": [99, 60], "end_point": [99, 69], "text": "unsafe{\n "}, {"type": ">", "children": [], "start_byte": 4079, "end_byte": 4080, "start_point": [99, 69], "end_point": [99, 70], "text": " "}], "start_byte": 4065, "end_byte": 4080, "start_point": [99, 55], "end_point": [99, 70], "text": "\n    unsafe{\n  "}], "start_byte": 4059, "end_byte": 4080, "start_point": [99, 49], "end_point": [99, 70], "text": " \u521d\u59cb\u5316\u53d8\u91cf\n    unsafe{\n  "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 4081, "end_byte": 4082, "start_point": [99, 71], "end_point": [99, 72], "text": " "}, {"type": "line_comment", "children": [], "start_byte": 4087, "end_byte": 4136, "start_point": [100, 4], "end_point": [100, 53], "text": "MALL_MODE = false;\n        KEEP_INPUT_FILES = fal"}, {"type": "let_declaration", "children": [{"type": "let", "children": [], "start_byte": 4141, "end_byte": 4144, "start_point": [101, 4], "end_point": [101, 7], "text": "   "}, {"type": "identifier", "children": [], "start_byte": 4145, "end_byte": 4149, "start_point": [101, 8], "end_point": [101, 12], "text": "   F"}, {"type": "=", "children": [], "start_byte": 4150, "end_byte": 4151, "start_point": [101, 13], "end_point": [101, 14], "text": "R"}, {"type": "identifier", "children": [], "start_byte": 4152, "end_byte": 4156, "start_point": [101, 15], "end_point": [101, 19], "text": "E_OV"}, {"type": ";", "children": [], "start_byte": 4156, "end_byte": 4157, "start_point": [101, 19], "end_point": [101, 20], "text": "E"}], "start_byte": 4141, "end_byte": 4157, "start_point": [101, 4], "end_point": [101, 20], "text": "       FORCE_OVE"}, {"type": "let_declaration", "children": [{"type": "let", "children": [], "start_byte": 4162, "end_byte": 4165, "start_point": [102, 4], "end_point": [102, 7], "text": "E ="}, {"type": "identifier", "children": [], "start_byte": 4166, "end_byte": 4170, "start_point": [102, 8], "end_point": [102, 12], "text": "fals"}, {"type": "=", "children": [], "start_byte": 4171, "end_byte": 4172, "start_point": [102, 13], "end_point": [102, 14], "text": ";"}, {"type": "type_cast_expression", "children": [{"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 4173, "end_byte": 4176, "start_point": [102, 15], "end_point": [102, 18], "text": "   "}, {"type": ".", "children": [], "start_byte": 4176, "end_byte": 4177, "start_point": [102, 18], "end_point": [102, 19], "text": " "}, {"type": "field_identifier", "children": [], "start_byte": 4177, "end_byte": 4180, "start_point": [102, 19], "end_point": [102, 22], "text": "   "}], "start_byte": 4173, "end_byte": 4180, "start_point": [102, 15], "end_point": [102, 22], "text": "       "}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 4180, "end_byte": 4181, "start_point": [102, 22], "end_point": [102, 23], "text": " "}, {"type": ")", "children": [], "start_byte": 4181, "end_byte": 4182, "start_point": [102, 23], "end_point": [102, 24], "text": "N"}], "start_byte": 4180, "end_byte": 4182, "start_point": [102, 22], "end_point": [102, 24], "text": " N"}], "start_byte": 4173, "end_byte": 4182, "start_point": [102, 15], "end_point": [102, 24], "text": "        N"}, {"type": "as", "children": [], "start_byte": 4183, "end_byte": 4185, "start_point": [102, 25], "end_point": [102, 27], "text": "IS"}, {"type": "primitive_type", "children": [], "start_byte": 4186, "end_byte": 4189, "start_point": [102, 28], "end_point": [102, 31], "text": " = "}], "start_byte": 4173, "end_byte": 4189, "start_point": [102, 15], "end_point": [102, 31], "text": "        NOISY = "}, {"type": ";", "children": [], "start_byte": 4189, "end_byte": 4190, "start_point": [102, 31], "end_point": [102, 32], "text": "t"}], "start_byte": 4162, "end_byte": 4190, "start_point": [102, 4], "end_point": [102, 32], "text": "E = false;\n        NOISY = t"}, {"type": "let_declaration", "children": [{"type": "let", "children": [], "start_byte": 4195, "end_byte": 4198, "start_point": [103, 4], "end_point": [103, 7], "text": "   "}, {"type": "mutable_specifier", "children": [], "start_byte": 4199, "end_byte": 4202, "start_point": [103, 8], "end_point": [103, 11], "text": "   "}, {"type": "identifier", "children": [], "start_byte": 4203, "end_byte": 4209, "start_point": [103, 12], "end_point": [103, 18], "text": "verbos"}, {"type": ":", "children": [], "start_byte": 4209, "end_byte": 4210, "start_point": [103, 18], "end_point": [103, 19], "text": "i"}, {"type": "primitive_type", "children": [], "start_byte": 4211, "end_byte": 4215, "start_point": [103, 20], "end_point": [103, 24], "text": "y = "}, {"type": ";", "children": [], "start_byte": 4215, "end_byte": 4216, "start_point": [103, 24], "end_point": [103, 25], "text": "0"}], "start_byte": 4195, "end_byte": 4216, "start_point": [103, 4], "end_point": [103, 25], "text": "        verbosity = 0"}, {"type": "line_comment", "children": [], "start_byte": 4221, "end_byte": 4239, "start_point": [104, 4], "end_point": [104, 22], "text": "     blockSize100k"}, {"type": "expression_statement", "children": [{"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 4244, "end_byte": 4250, "start_point": [105, 4], "end_point": [105, 10], "text": "\n     "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 4250, "end_byte": 4251, "start_point": [105, 10], "end_point": [105, 11], "text": " "}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 4260, "end_byte": 4270, "start_point": [106, 8], "end_point": [106, 18], "text": "ILS_EXIST "}, {"type": "=", "children": [], "start_byte": 4271, "end_byte": 4272, "start_point": [106, 19], "end_point": [106, 20], "text": " "}, {"type": "boolean_literal", "children": [{"type": "false", "children": [], "start_byte": 4273, "end_byte": 4278, "start_point": [106, 21], "end_point": [106, 26], "text": "alse;"}], "start_byte": 4273, "end_byte": 4278, "start_point": [106, 21], "end_point": [106, 26], "text": "alse;"}], "start_byte": 4260, "end_byte": 4278, "start_point": [106, 8], "end_point": [106, 26], "text": "ILS_EXIST = false;"}, {"type": ";", "children": [], "start_byte": 4278, "end_byte": 4279, "start_point": [106, 26], "end_point": [106, 27], "text": "\n"}], "start_byte": 4260, "end_byte": 4279, "start_point": [106, 8], "end_point": [106, 27], "text": "ILS_EXIST = false;\n"}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 4288, "end_byte": 4304, "start_point": [107, 8], "end_point": [107, 24], "text": "NZ_FAILS_EXIST ="}, {"type": "=", "children": [], "start_byte": 4305, "end_byte": 4306, "start_point": [107, 25], "end_point": [107, 26], "text": "f"}, {"type": "boolean_literal", "children": [{"type": "false", "children": [], "start_byte": 4307, "end_byte": 4312, "start_point": [107, 27], "end_point": [107, 32], "text": "lse;\n"}], "start_byte": 4307, "end_byte": 4312, "start_point": [107, 27], "end_point": [107, 32], "text": "lse;\n"}], "start_byte": 4288, "end_byte": 4312, "start_point": [107, 8], "end_point": [107, 32], "text": "NZ_FAILS_EXIST = false;\n"}, {"type": ";", "children": [], "start_byte": 4312, "end_byte": 4313, "start_point": [107, 32], "end_point": [107, 33], "text": " "}], "start_byte": 4288, "end_byte": 4313, "start_point": [107, 8], "end_point": [107, 33], "text": "NZ_FAILS_EXIST = false;\n "}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 4322, "end_byte": 4337, "start_point": [108, 8], "end_point": [108, 23], "text": "M_FILE_NAMES = "}, {"type": "=", "children": [], "start_byte": 4338, "end_byte": 4339, "start_point": [108, 24], "end_point": [108, 25], "text": ";"}, {"type": "boolean_literal", "children": [{"type": "false", "children": [], "start_byte": 4340, "end_byte": 4345, "start_point": [108, 26], "end_point": [108, 31], "text": "     "}], "start_byte": 4340, "end_byte": 4345, "start_point": [108, 26], "end_point": [108, 31], "text": "     "}], "start_byte": 4322, "end_byte": 4345, "start_point": [108, 8], "end_point": [108, 31], "text": "M_FILE_NAMES = 0;\n     "}, {"type": ";", "children": [], "start_byte": 4345, "end_byte": 4346, "start_point": [108, 31], "end_point": [108, 32], "text": " "}], "start_byte": 4322, "end_byte": 4346, "start_point": [108, 8], "end_point": [108, 32], "text": "M_FILE_NAMES = 0;\n      "}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 4355, "end_byte": 4360, "start_point": [109, 8], "end_point": [109, 13], "text": "ES_PR"}, {"type": "=", "children": [], "start_byte": 4361, "end_byte": 4362, "start_point": [109, 14], "end_point": [109, 15], "text": "C"}, {"type": "boolean_literal", "children": [{"type": "true", "children": [], "start_byte": 4363, "end_byte": 4367, "start_point": [109, 16], "end_point": [109, 20], "text": "SSED"}], "start_byte": 4363, "end_byte": 4367, "start_point": [109, 16], "end_point": [109, 20], "text": "SSED"}], "start_byte": 4355, "end_byte": 4367, "start_point": [109, 8], "end_point": [109, 20], "text": "ES_PROCESSED"}, {"type": ";", "children": [], "start_byte": 4367, "end_byte": 4368, "start_point": [109, 20], "end_point": [109, 21], "text": " "}], "start_byte": 4355, "end_byte": 4368, "start_point": [109, 8], "end_point": [109, 21], "text": "ES_PROCESSED "}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 4377, "end_byte": 4386, "start_point": [110, 8], "end_point": [110, 17], "text": "    workF"}, {"type": "=", "children": [], "start_byte": 4387, "end_byte": 4388, "start_point": [110, 18], "end_point": [110, 19], "text": "c"}, {"type": "integer_literal", "children": [], "start_byte": 4389, "end_byte": 4390, "start_point": [110, 20], "end_point": [110, 21], "text": "o"}], "start_byte": 4377, "end_byte": 4390, "start_point": [110, 8], "end_point": [110, 21], "text": "    workFacto"}, {"type": ";", "children": [], "start_byte": 4390, "end_byte": 4391, "start_point": [110, 21], "end_point": [110, 22], "text": "r"}], "start_byte": 4377, "end_byte": 4391, "start_point": [110, 8], "end_point": [110, 22], "text": "    workFactor"}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 4400, "end_byte": 4413, "start_point": [111, 8], "end_point": [111, 21], "text": "      DELETE_"}, {"type": "=", "children": [], "start_byte": 4414, "end_byte": 4415, "start_point": [111, 22], "end_point": [111, 23], "text": "U"}, {"type": "integer_literal", "children": [], "start_byte": 4416, "end_byte": 4417, "start_point": [111, 24], "end_point": [111, 25], "text": "P"}], "start_byte": 4400, "end_byte": 4417, "start_point": [111, 8], "end_point": [111, 25], "text": "      DELETE_OUTP"}, {"type": ";", "children": [], "start_byte": 4417, "end_byte": 4418, "start_point": [111, 25], "end_point": [111, 26], "text": "U"}], "start_byte": 4400, "end_byte": 4418, "start_point": [111, 8], "end_point": [111, 26], "text": "      DELETE_OUTPU"}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 4427, "end_byte": 4443, "start_point": [112, 8], "end_point": [112, 24], "text": "RRUPT = false;\n "}, {"type": "=", "children": [], "start_byte": 4444, "end_byte": 4445, "start_point": [112, 25], "end_point": [112, 26], "text": " "}, {"type": "boolean_literal", "children": [{"type": "false", "children": [], "start_byte": 4446, "end_byte": 4451, "start_point": [112, 27], "end_point": [112, 32], "text": "    E"}], "start_byte": 4446, "end_byte": 4451, "start_point": [112, 27], "end_point": [112, 32], "text": "    E"}], "start_byte": 4427, "end_byte": 4451, "start_point": [112, 8], "end_point": [112, 32], "text": "RRUPT = false;\n        E"}, {"type": ";", "children": [], "start_byte": 4451, "end_byte": 4452, "start_point": [112, 32], "end_point": [112, 33], "text": "X"}], "start_byte": 4427, "end_byte": 4452, "start_point": [112, 8], "end_point": [112, 33], "text": "RRUPT = false;\n        EX"}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 4461, "end_byte": 4476, "start_point": [113, 8], "end_point": [113, 23], "text": "= 0;\n        OP"}, {"type": "=", "children": [], "start_byte": 4477, "end_byte": 4478, "start_point": [113, 24], "end_point": [113, 25], "text": "M"}, {"type": "boolean_literal", "children": [{"type": "false", "children": [], "start_byte": 4479, "end_byte": 4484, "start_point": [113, 26], "end_point": [113, 31], "text": "DE = "}], "start_byte": 4479, "end_byte": 4484, "start_point": [113, 26], "end_point": [113, 31], "text": "DE = "}], "start_byte": 4461, "end_byte": 4484, "start_point": [113, 8], "end_point": [113, 31], "text": "= 0;\n        OP_MODE = "}, {"type": ";", "children": [], "start_byte": 4484, "end_byte": 4485, "start_point": [113, 31], "end_point": [113, 32], "text": "1"}], "start_byte": 4461, "end_byte": 4485, "start_point": [113, 8], "end_point": [113, 32], "text": "= 0;\n        OP_MODE = 1"}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 4494, "end_byte": 4508, "start_point": [114, 8], "end_point": [114, 22], "text": " LONGEST_FILE_"}, {"type": "=", "children": [], "start_byte": 4509, "end_byte": 4510, "start_point": [114, 23], "end_point": [114, 24], "text": "A"}, {"type": "integer_literal", "children": [], "start_byte": 4511, "end_byte": 4512, "start_point": [114, 25], "end_point": [114, 26], "text": "E"}], "start_byte": 4494, "end_byte": 4512, "start_point": [114, 8], "end_point": [114, 26], "text": " LONGEST_FILE_NAME"}, {"type": ";", "children": [], "start_byte": 4512, "end_byte": 4513, "start_point": [114, 26], "end_point": [114, 27], "text": " "}], "start_byte": 4494, "end_byte": 4513, "start_point": [114, 8], "end_point": [114, 27], "text": " LONGEST_FILE_NAME "}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 4522, "end_byte": 4541, "start_point": [115, 8], "end_point": [115, 27], "text": "    \n    }\n\n    let"}, {"type": "=", "children": [], "start_byte": 4542, "end_byte": 4543, "start_point": [115, 28], "end_point": [115, 29], "text": "m"}, {"type": "integer_literal", "children": [], "start_byte": 4544, "end_byte": 4545, "start_point": [115, 30], "end_point": [115, 31], "text": "t"}], "start_byte": 4522, "end_byte": 4545, "start_point": [115, 8], "end_point": [115, 31], "text": "    \n    }\n\n    let mut"}, {"type": ";", "children": [], "start_byte": 4545, "end_byte": 4546, "start_point": [115, 31], "end_point": [115, 32], "text": " "}], "start_byte": 4522, "end_byte": 4546, "start_point": [115, 8], "end_point": [115, 32], "text": "    \n    }\n\n    let mut "}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 4555, "end_byte": 4565, "start_point": [116, 8], "end_point": [116, 18], "text": "  let mut "}, {"type": "=", "children": [], "start_byte": 4566, "end_byte": 4567, "start_point": [116, 19], "end_point": [116, 20], "text": " "}, {"type": "integer_literal", "children": [], "start_byte": 4568, "end_byte": 4570, "start_point": [116, 21], "end_point": [116, 23], "text": " 0"}], "start_byte": 4555, "end_byte": 4570, "start_point": [116, 8], "end_point": [116, 23], "text": "  let mut j = 0"}, {"type": ";", "children": [], "start_byte": 4570, "end_byte": 4571, "start_point": [116, 23], "end_point": [116, 24], "text": ";"}], "start_byte": 4555, "end_byte": 4571, "start_point": [116, 8], "end_point": [116, 24], "text": "  let mut j = 0;"}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 4580, "end_byte": 4606, "start_point": [117, 8], "end_point": [117, 34], "text": "ode = true;\n\n    // let mu"}, {"type": "=", "children": [], "start_byte": 4607, "end_byte": 4608, "start_point": [117, 35], "end_point": [117, 36], "text": " "}, {"type": "boolean_literal", "children": [{"type": "false", "children": [], "start_byte": 4609, "end_byte": 4614, "start_point": [117, 37], "end_point": [117, 42], "text": "n_nam"}], "start_byte": 4609, "end_byte": 4614, "start_point": [117, 37], "end_point": [117, 42], "text": "n_nam"}], "start_byte": 4580, "end_byte": 4614, "start_point": [117, 8], "end_point": [117, 42], "text": "ode = true;\n\n    // let mut in_nam"}, {"type": ";", "children": [], "start_byte": 4614, "end_byte": 4615, "start_point": [117, 42], "end_point": [117, 43], "text": "e"}], "start_byte": 4580, "end_byte": 4615, "start_point": [117, 8], "end_point": [117, 43], "text": "ode = true;\n\n    // let mut in_name"}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 4624, "end_byte": 4634, "start_point": [118, 8], "end_point": [118, 18], "text": "::from(\"(n"}, {"type": "=", "children": [], "start_byte": 4635, "end_byte": 4636, "start_point": [118, 19], "end_point": [118, 20], "text": "n"}, {"type": "integer_literal", "children": [], "start_byte": 4637, "end_byte": 4638, "start_point": [118, 21], "end_point": [118, 22], "text": ")"}], "start_byte": 4624, "end_byte": 4638, "start_point": [118, 8], "end_point": [118, 22], "text": "::from(\"(none)"}, {"type": ";", "children": [], "start_byte": 4638, "end_byte": 4639, "start_point": [118, 22], "end_point": [118, 23], "text": "\""}], "start_byte": 4624, "end_byte": 4639, "start_point": [118, 8], "end_point": [118, 23], "text": "::from(\"(none)\""}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 4648, "end_byte": 4655, "start_point": [119, 8], "end_point": [119, 15], "text": " let mu"}, {"type": "=", "children": [], "start_byte": 4656, "end_byte": 4657, "start_point": [119, 16], "end_point": [119, 17], "text": " "}, {"type": "integer_literal", "children": [], "start_byte": 4658, "end_byte": 4659, "start_point": [119, 18], "end_point": [119, 19], "text": "u"}], "start_byte": 4648, "end_byte": 4659, "start_point": [119, 8], "end_point": [119, 19], "text": " let mut ou"}, {"type": ";", "children": [], "start_byte": 4659, "end_byte": 4660, "start_point": [119, 19], "end_point": [119, 20], "text": "t"}], "start_byte": 4648, "end_byte": 4660, "start_point": [119, 8], "end_point": [119, 20], "text": " let mut out"}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 4669, "end_byte": 4686, "start_point": [120, 8], "end_point": [120, 25], "text": "tring::from(\"(non"}, {"type": "=", "children": [], "start_byte": 4687, "end_byte": 4688, "start_point": [120, 26], "end_point": [120, 27], "text": ")"}, {"type": "integer_literal", "children": [], "start_byte": 4689, "end_byte": 4690, "start_point": [120, 28], "end_point": [120, 29], "text": ")"}], "start_byte": 4669, "end_byte": 4690, "start_point": [120, 8], "end_point": [120, 29], "text": "tring::from(\"(none)\")"}, {"type": ";", "children": [], "start_byte": 4690, "end_byte": 4691, "start_point": [120, 29], "end_point": [120, 30], "text": ";"}], "start_byte": 4669, "end_byte": 4691, "start_point": [120, 8], "end_point": [120, 30], "text": "tring::from(\"(none)\");"}, {"type": "}", "children": [], "start_byte": 4705, "end_byte": 4706, "start_point": [122, 4], "end_point": [122, 5], "text": "t"}], "start_byte": 4250, "end_byte": 4706, "start_point": [105, 10], "end_point": [122, 5], "text": "   TEST_FAILS_EXIST = false;\n        UNZ_FAILS_EXIST = false;\n        NUM_FILE_NAMES = 0;\n        NUM_FILES_PROCESSED = 0;\n        workFactor = 30;\n        DELETE_OUTPUT_ON_INTERRUPT = false;\n        EXIT_VALUE = 0;\n        OP_MODE = 1;\n        LONGEST_FILE_NAME = 7;\n        \n    }\n\n    let mut i = 0;\n    let mut j = 0;\n\n    decode = true;\n\n    // let mut in_name = String::from(\"(none)\");\n    // let mut out_name = String::from(\"(none)\");\n    // let mut"}], "start_byte": 4244, "end_byte": 4706, "start_point": [105, 4], "end_point": [122, 5], "text": "\n        TEST_FAILS_EXIST = false;\n        UNZ_FAILS_EXIST = false;\n        NUM_FILE_NAMES = 0;\n        NUM_FILES_PROCESSED = 0;\n        workFactor = 30;\n        DELETE_OUTPUT_ON_INTERRUPT = false;\n        EXIT_VALUE = 0;\n        OP_MODE = 1;\n        LONGEST_FILE_NAME = 7;\n        \n    }\n\n    let mut i = 0;\n    let mut j = 0;\n\n    decode = true;\n\n    // let mut in_name = String::from(\"(none)\");\n    // let mut out_name = String::from(\"(none)\");\n    // let mut"}], "start_byte": 4244, "end_byte": 4706, "start_point": [105, 4], "end_point": [122, 5], "text": "\n        TEST_FAILS_EXIST = false;\n        UNZ_FAILS_EXIST = false;\n        NUM_FILE_NAMES = 0;\n        NUM_FILES_PROCESSED = 0;\n        workFactor = 30;\n        DELETE_OUTPUT_ON_INTERRUPT = false;\n        EXIT_VALUE = 0;\n        OP_MODE = 1;\n        LONGEST_FILE_NAME = 7;\n        \n    }\n\n    let mut i = 0;\n    let mut j = 0;\n\n    decode = true;\n\n    // let mut in_name = String::from(\"(none)\");\n    // let mut out_name = String::from(\"(none)\");\n    // let mut"}, {"type": "let_declaration", "children": [{"type": "let", "children": [], "start_byte": 4712, "end_byte": 4715, "start_point": [124, 4], "end_point": [124, 7], "text": "nam"}, {"type": "mutable_specifier", "children": [], "start_byte": 4716, "end_byte": 4719, "start_point": [124, 8], "end_point": [124, 11], "text": "_re"}, {"type": "identifier", "children": [], "start_byte": 4720, "end_byte": 4721, "start_point": [124, 12], "end_point": [124, 13], "text": "l"}, {"type": "=", "children": [], "start_byte": 4722, "end_byte": 4723, "start_point": [124, 14], "end_point": [124, 15], "text": "y"}, {"type": "integer_literal", "children": [], "start_byte": 4724, "end_byte": 4725, "start_point": [124, 16], "end_point": [124, 17], "text": "="}, {"type": ";", "children": [], "start_byte": 4725, "end_byte": 4726, "start_point": [124, 17], "end_point": [124, 18], "text": " "}], "start_byte": 4712, "end_byte": 4726, "start_point": [124, 4], "end_point": [124, 18], "text": "name_really = "}, {"type": "let_declaration", "children": [{"type": "let", "children": [], "start_byte": 4731, "end_byte": 4734, "start_point": [125, 4], "end_point": [125, 7], "text": "0]."}, {"type": "mutable_specifier", "children": [], "start_byte": 4735, "end_byte": 4738, "start_point": [125, 8], "end_point": [125, 11], "text": "lon"}, {"type": "identifier", "children": [], "start_byte": 4739, "end_byte": 4740, "start_point": [125, 12], "end_point": [125, 13], "text": "("}, {"type": "=", "children": [], "start_byte": 4741, "end_byte": 4742, "start_point": [125, 14], "end_point": [125, 15], "text": ";"}, {"type": "integer_literal", "children": [], "start_byte": 4743, "end_byte": 4744, "start_point": [125, 16], "end_point": [125, 17], "text": " "}, {"type": ";", "children": [], "start_byte": 4744, "end_byte": 4745, "start_point": [125, 17], "end_point": [125, 18], "text": " "}], "start_byte": 4731, "end_byte": 4745, "start_point": [125, 4], "end_point": [125, 18], "text": "0].clone();\n  "}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 4751, "end_byte": 4757, "start_point": [127, 4], "end_point": [127, 10], "text": "et pro"}, {"type": "=", "children": [], "start_byte": 4758, "end_byte": 4759, "start_point": [127, 11], "end_point": [127, 12], "text": "_"}, {"type": "boolean_literal", "children": [{"type": "true", "children": [], "start_byte": 4760, "end_byte": 4764, "start_point": [127, 13], "end_point": [127, 17], "text": "ame "}], "start_byte": 4760, "end_byte": 4764, "start_point": [127, 13], "end_point": [127, 17], "text": "ame "}], "start_byte": 4751, "end_byte": 4764, "start_point": [127, 4], "end_point": [127, 17], "text": "et prog_name "}, {"type": ";", "children": [], "start_byte": 4764, "end_byte": 4765, "start_point": [127, 17], "end_point": [127, 18], "text": "="}], "start_byte": 4751, "end_byte": 4765, "start_point": [127, 4], "end_point": [127, 18], "text": "et prog_name ="}, {"type": "line_comment", "children": [], "start_byte": 4771, "end_byte": 4815, "start_point": [129, 4], "end_point": [129, 48], "text": "_name_really;\n\n    // \u786e\u4fdd\u7c7b\u578b\u5927\u5c0f\u6b63\u786e\n    // // pri"}, {"type": "line_comment", "children": [], "start_byte": 4820, "end_byte": 4865, "start_point": [130, 4], "end_point": [130, 49], "text": "(\"121_main_\u68c0\u67e5\u6570\u636e\u7c7b\u578b\u5927\u5c0f\");\n    // if std::mem::si"}, {"type": "line_comment", "children": [], "start_byte": 4870, "end_byte": 4916, "start_point": [131, 4], "end_point": [131, 50], "text": "::<i32>() != 4 || std::mem::size_of::<u16>() !"}, {"type": "line_comment", "children": [], "start_byte": 4921, "end_byte": 4958, "start_point": [132, 4], "end_point": [132, 41], "text": "| std::mem::size_of::<char>() != 1 {\n"}, {"type": "line_comment", "children": [], "start_byte": 4964, "end_byte": 4991, "start_point": [134, 4], "end_point": [134, 31], "text": "     // println!(\"121_main_"}, {"type": "line_comment", "children": [], "start_byte": 4996, "end_byte": 5048, "start_point": [135, 4], "end_point": [135, 56], "text": "\u5c0f\u9519\u8bef\");\n    //     config_error();\n    //     return "}, {"type": "line_comment", "children": [], "start_byte": 5053, "end_byte": 5163, "start_point": [136, 4], "end_point": [136, 114], "text": "o::Error::new(io::ErrorKind::Other, \"\u914d\u7f6e\u9519\u8bef\"));\n    // }\n\n\n    unsafe {\n        let prog_name_str = env::args()."}, {"type": "line_comment", "children": [], "start_byte": 5168, "end_byte": 5224, "start_point": [137, 4], "end_point": [137, 60], "text": ").unwrap_or_else(|| String::from(\"(unknown)\"));\n        "}, {"type": "line_comment", "children": [], "start_byte": 5229, "end_byte": 5251, "start_point": [138, 4], "end_point": [138, 26], "text": "NAME_REALLY = string_t"}, {"type": "line_comment", "children": [], "start_byte": 5256, "end_byte": 5328, "start_point": [139, 4], "end_point": [139, 76], "text": "array_1034(prog_name_str.clone());\n        let p_str = Path::new(&prog_n"}, {"type": "line_comment", "children": [], "start_byte": 5333, "end_byte": 5337, "start_point": [140, 4], "end_point": [140, 8], "text": "tr)\n"}, {"type": "expression_statement", "children": [{"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 5344, "end_byte": 5350, "start_point": [143, 4], "end_point": [143, 10], "text": "     ."}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 5351, "end_byte": 5352, "start_point": [143, 11], "end_point": [143, 12], "text": "i"}, {"type": "let_declaration", "children": [{"type": "let", "children": [], "start_byte": 5361, "end_byte": 5364, "start_point": [144, 8], "end_point": [144, 11], "text": "\n  "}, {"type": "identifier", "children": [], "start_byte": 5365, "end_byte": 5378, "start_point": [144, 12], "end_point": [144, 25], "text": "         .unw"}, {"type": "=", "children": [], "start_byte": 5379, "end_byte": 5380, "start_point": [144, 26], "end_point": [144, 27], "text": "a"}, {"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "call_expression", "children": [{"type": "scoped_identifier", "children": [{"type": "identifier", "children": [], "start_byte": 5381, "end_byte": 5384, "start_point": [144, 28], "end_point": [144, 31], "text": "()\n"}, {"type": "::", "children": [], "start_byte": 5384, "end_byte": 5386, "start_point": [144, 31], "end_point": [144, 33], "text": "  "}, {"type": "identifier", "children": [], "start_byte": 5386, "end_byte": 5390, "start_point": [144, 33], "end_point": [144, 37], "text": "    "}], "start_byte": 5381, "end_byte": 5390, "start_point": [144, 28], "end_point": [144, 37], "text": "()\n      "}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 5390, "end_byte": 5391, "start_point": [144, 37], "end_point": [144, 38], "text": " "}, {"type": ")", "children": [], "start_byte": 5391, "end_byte": 5392, "start_point": [144, 38], "end_point": [144, 39], "text": " "}], "start_byte": 5390, "end_byte": 5392, "start_point": [144, 37], "end_point": [144, 39], "text": "  "}], "start_byte": 5381, "end_byte": 5392, "start_point": [144, 28], "end_point": [144, 39], "text": "()\n        "}, {"type": ".", "children": [], "start_byte": 5392, "end_byte": 5393, "start_point": [144, 39], "end_point": [144, 40], "text": " "}, {"type": "field_identifier", "children": [], "start_byte": 5393, "end_byte": 5396, "start_point": [144, 40], "end_point": [144, 43], "text": "   "}], "start_byte": 5381, "end_byte": 5396, "start_point": [144, 28], "end_point": [144, 43], "text": "()\n            "}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 5396, "end_byte": 5397, "start_point": [144, 43], "end_point": [144, 44], "text": "."}, {"type": "integer_literal", "children": [], "start_byte": 5397, "end_byte": 5398, "start_point": [144, 44], "end_point": [144, 45], "text": "t"}, {"type": ")", "children": [], "start_byte": 5398, "end_byte": 5399, "start_point": [144, 45], "end_point": [144, 46], "text": "o"}], "start_byte": 5396, "end_byte": 5399, "start_point": [144, 43], "end_point": [144, 46], "text": ".to"}], "start_byte": 5381, "end_byte": 5399, "start_point": [144, 28], "end_point": [144, 46], "text": "()\n            .to"}, {"type": ".", "children": [], "start_byte": 5399, "end_byte": 5400, "start_point": [144, 46], "end_point": [144, 47], "text": "_"}, {"type": "field_identifier", "children": [], "start_byte": 5400, "end_byte": 5414, "start_point": [144, 47], "end_point": [144, 61], "text": "str()\n        "}], "start_byte": 5381, "end_byte": 5414, "start_point": [144, 28], "end_point": [144, 61], "text": "()\n            .to_str()\n        "}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 5414, "end_byte": 5415, "start_point": [144, 61], "end_point": [144, 62], "text": " "}, {"type": "closure_expression", "children": [{"type": "closure_parameters", "children": [{"type": "|", "children": [], "start_byte": 5415, "end_byte": 5416, "start_point": [144, 62], "end_point": [144, 63], "text": " "}, {"type": "|", "children": [], "start_byte": 5416, "end_byte": 5417, "start_point": [144, 63], "end_point": [144, 64], "text": " "}], "start_byte": 5415, "end_byte": 5417, "start_point": [144, 62], "end_point": [144, 64], "text": "  "}, {"type": "call_expression", "children": [{"type": "scoped_identifier", "children": [{"type": "identifier", "children": [], "start_byte": 5418, "end_byte": 5424, "start_point": [144, 65], "end_point": [144, 71], "text": ".unwra"}, {"type": "::", "children": [], "start_byte": 5424, "end_byte": 5426, "start_point": [144, 71], "end_point": [144, 73], "text": "p("}, {"type": "identifier", "children": [], "start_byte": 5426, "end_byte": 5430, "start_point": [144, 73], "end_point": [144, 77], "text": ");\n "}], "start_byte": 5418, "end_byte": 5430, "start_point": [144, 65], "end_point": [144, 77], "text": ".unwrap();\n "}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 5430, "end_byte": 5431, "start_point": [144, 77], "end_point": [144, 78], "text": " "}, {"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 5431, "end_byte": 5432, "start_point": [144, 78], "end_point": [144, 79], "text": " "}, {"type": "\"", "children": [], "start_byte": 5441, "end_byte": 5442, "start_point": [144, 88], "end_point": [144, 89], "text": "_"}], "start_byte": 5431, "end_byte": 5442, "start_point": [144, 78], "end_point": [144, 89], "text": "      PROG_"}, {"type": ")", "children": [], "start_byte": 5442, "end_byte": 5443, "start_point": [144, 89], "end_point": [144, 90], "text": "N"}], "start_byte": 5430, "end_byte": 5443, "start_point": [144, 77], "end_point": [144, 90], "text": "       PROG_N"}], "start_byte": 5418, "end_byte": 5443, "start_point": [144, 65], "end_point": [144, 90], "text": ".unwrap();\n        PROG_N"}], "start_byte": 5415, "end_byte": 5443, "start_point": [144, 62], "end_point": [144, 90], "text": "   .unwrap();\n        PROG_N"}, {"type": ")", "children": [], "start_byte": 5443, "end_byte": 5444, "start_point": [144, 90], "end_point": [144, 91], "text": "A"}], "start_byte": 5414, "end_byte": 5444, "start_point": [144, 61], "end_point": [144, 91], "text": "    .unwrap();\n        PROG_NA"}], "start_byte": 5381, "end_byte": 5444, "start_point": [144, 28], "end_point": [144, 91], "text": "()\n            .to_str()\n            .unwrap();\n        PROG_NA"}, {"type": ";", "children": [], "start_byte": 5444, "end_byte": 5445, "start_point": [144, 91], "end_point": [144, 92], "text": "M"}], "start_byte": 5361, "end_byte": 5445, "start_point": [144, 8], "end_point": [144, 92], "text": "\n            .unwrap()\n            .to_str()\n            .unwrap();\n        PROG_NAM"}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 5454, "end_byte": 5470, "start_point": [145, 8], "end_point": [145, 24], "text": "g_to_u8_array_20"}, {"type": "=", "children": [], "start_byte": 5471, "end_byte": 5472, "start_point": [145, 25], "end_point": [145, 26], "text": "0"}, {"type": "call_expression", "children": [{"type": "identifier", "children": [], "start_byte": 5473, "end_byte": 5496, "start_point": [145, 27], "end_point": [145, 50], "text": "p_str.to_string());\n   "}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 5496, "end_byte": 5497, "start_point": [145, 50], "end_point": [145, 51], "text": " "}, {"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 5497, "end_byte": 5510, "start_point": [145, 51], "end_point": [145, 64], "text": "}\n\n    // \u5904\u7406\u547d"}, {"type": ".", "children": [], "start_byte": 5510, "end_byte": 5511, "start_point": [145, 64], "end_point": [145, 65], "text": "\u4ee4"}, {"type": "field_identifier", "children": [], "start_byte": 5511, "end_byte": 5516, "start_point": [145, 65], "end_point": [145, 70], "text": "\u884c\u53c2\u6570\n "}], "start_byte": 5497, "end_byte": 5516, "start_point": [145, 51], "end_point": [145, 70], "text": "}\n\n    // \u5904\u7406\u547d\u4ee4\u884c\u53c2\u6570\n "}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 5516, "end_byte": 5517, "start_point": [145, 70], "end_point": [145, 71], "text": " "}, {"type": ")", "children": [], "start_byte": 5517, "end_byte": 5518, "start_point": [145, 71], "end_point": [145, 72], "text": " "}], "start_byte": 5516, "end_byte": 5518, "start_point": [145, 70], "end_point": [145, 72], "text": "  "}], "start_byte": 5497, "end_byte": 5518, "start_point": [145, 51], "end_point": [145, 72], "text": "}\n\n    // \u5904\u7406\u547d\u4ee4\u884c\u53c2\u6570\n   "}, {"type": ")", "children": [], "start_byte": 5518, "end_byte": 5519, "start_point": [145, 72], "end_point": [145, 73], "text": " "}], "start_byte": 5496, "end_byte": 5519, "start_point": [145, 50], "end_point": [145, 73], "text": " }\n\n    // \u5904\u7406\u547d\u4ee4\u884c\u53c2\u6570\n    "}], "start_byte": 5473, "end_byte": 5519, "start_point": [145, 27], "end_point": [145, 73], "text": "p_str.to_string());\n    }\n\n    // \u5904\u7406\u547d\u4ee4\u884c\u53c2\u6570\n    "}], "start_byte": 5454, "end_byte": 5519, "start_point": [145, 8], "end_point": [145, 73], "text": "g_to_u8_array_2000(p_str.to_string());\n    }\n\n    // \u5904\u7406\u547d\u4ee4\u884c\u53c2\u6570\n    "}, {"type": ";", "children": [], "start_byte": 5519, "end_byte": 5520, "start_point": [145, 73], "end_point": [145, 74], "text": "/"}], "start_byte": 5454, "end_byte": 5520, "start_point": [145, 8], "end_point": [145, 74], "text": "g_to_u8_array_2000(p_str.to_string());\n    }\n\n    // \u5904\u7406\u547d\u4ee4\u884c\u53c2\u6570\n    /"}, {"type": "let_declaration", "children": [{"type": "let", "children": [], "start_byte": 5529, "end_byte": 5532, "start_point": [146, 8], "end_point": [146, 11], "text": "!(\""}, {"type": "identifier", "children": [], "start_byte": 5533, "end_byte": 5538, "start_point": [146, 12], "end_point": [146, 17], "text": "21_ma"}, {"type": "=", "children": [], "start_byte": 5539, "end_byte": 5540, "start_point": [146, 18], "end_point": [146, 19], "text": "n"}, {"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "call_expression", "children": [{"type": "scoped_identifier", "children": [{"type": "identifier", "children": [], "start_byte": 5541, "end_byte": 5545, "start_point": [146, 20], "end_point": [146, 24], "text": "\u5f00\u59cb\u5904\u7406"}, {"type": "::", "children": [], "start_byte": 5545, "end_byte": 5547, "start_point": [146, 24], "end_point": [146, 26], "text": "\u547d\u4ee4"}, {"type": "identifier", "children": [], "start_byte": 5547, "end_byte": 5550, "start_point": [146, 26], "end_point": [146, 29], "text": "\u884c\u53c2\u6570"}], "start_byte": 5541, "end_byte": 5550, "start_point": [146, 20], "end_point": [146, 29], "text": "\u5f00\u59cb\u5904\u7406\u547d\u4ee4\u884c\u53c2\u6570"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 5550, "end_byte": 5551, "start_point": [146, 29], "end_point": [146, 30], "text": "\""}, {"type": "reference_expression", "children": [{"type": "&", "children": [], "start_byte": 5551, "end_byte": 5552, "start_point": [146, 30], "end_point": [146, 31], "text": ")"}, {"type": "identifier", "children": [], "start_byte": 5552, "end_byte": 5565, "start_point": [146, 31], "end_point": [146, 44], "text": ";\n    let mut"}], "start_byte": 5551, "end_byte": 5565, "start_point": [146, 30], "end_point": [146, 44], "text": ");\n    let mut"}, {"type": ")", "children": [], "start_byte": 5565, "end_byte": 5566, "start_point": [146, 44], "end_point": [146, 45], "text": " "}], "start_byte": 5550, "end_byte": 5566, "start_point": [146, 29], "end_point": [146, 45], "text": "\");\n    let mut "}], "start_byte": 5541, "end_byte": 5566, "start_point": [146, 20], "end_point": [146, 45], "text": "\u5f00\u59cb\u5904\u7406\u547d\u4ee4\u884c\u53c2\u6570\");\n    let mut "}, {"type": ".", "children": [], "start_byte": 5579, "end_byte": 5580, "start_point": [147, 12], "end_point": [147, 13], "text": "m"}, {"type": "field_identifier", "children": [], "start_byte": 5580, "end_byte": 5589, "start_point": [147, 13], "end_point": [147, 22], "text": "e(Box::ne"}], "start_byte": 5541, "end_byte": 5589, "start_point": [146, 20], "end_point": [147, 22], "text": "\u5f00\u59cb\u5904\u7406\u547d\u4ee4\u884c\u53c2\u6570\");\n    let mut arg_list = Some(Box::ne"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 5589, "end_byte": 5590, "start_point": [147, 22], "end_point": [147, 23], "text": "w"}, {"type": ")", "children": [], "start_byte": 5590, "end_byte": 5591, "start_point": [147, 23], "end_point": [147, 24], "text": "("}], "start_byte": 5589, "end_byte": 5591, "start_point": [147, 22], "end_point": [147, 24], "text": "w("}], "start_byte": 5541, "end_byte": 5591, "start_point": [146, 20], "end_point": [147, 24], "text": "\u5f00\u59cb\u5904\u7406\u547d\u4ee4\u884c\u53c2\u6570\");\n    let mut arg_list = Some(Box::new("}, {"type": ".", "children": [], "start_byte": 5604, "end_byte": 5605, "start_point": [148, 12], "end_point": [148, 13], "text": "("}, {"type": "field_identifier", "children": [], "start_byte": 5605, "end_byte": 5611, "start_point": [148, 13], "end_point": [148, 19], "text": ")));\n "}], "start_byte": 5541, "end_byte": 5611, "start_point": [146, 20], "end_point": [148, 19], "text": "\u5f00\u59cb\u5904\u7406\u547d\u4ee4\u884c\u53c2\u6570\");\n    let mut arg_list = Some(Box::new(Cell::mk_cell()));\n "}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 5611, "end_byte": 5612, "start_point": [148, 19], "end_point": [148, 20], "text": " "}, {"type": ")", "children": [], "start_byte": 5612, "end_byte": 5613, "start_point": [148, 20], "end_point": [148, 21], "text": " "}], "start_byte": 5611, "end_byte": 5613, "start_point": [148, 19], "end_point": [148, 21], "text": "  "}], "start_byte": 5541, "end_byte": 5613, "start_point": [146, 20], "end_point": [148, 21], "text": "\u5f00\u59cb\u5904\u7406\u547d\u4ee4\u884c\u53c2\u6570\");\n    let mut arg_list = Some(Box::new(Cell::mk_cell()));\n   "}, {"type": ".", "children": [], "start_byte": 5626, "end_byte": 5627, "start_point": [149, 12], "end_point": [149, 13], "text": "a"}, {"type": "field_identifier", "children": [], "start_byte": 5627, "end_byte": 5633, "start_point": [149, 13], "end_point": [149, 19], "text": "gs_fro"}], "start_byte": 5541, "end_byte": 5633, "start_point": [146, 20], "end_point": [149, 19], "text": "\u5f00\u59cb\u5904\u7406\u547d\u4ee4\u884c\u53c2\u6570\");\n    let mut arg_list = Some(Box::new(Cell::mk_cell()));\n    Cell::add_flags_fro"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 5633, "end_byte": 5634, "start_point": [149, 19], "end_point": [149, 20], "text": "m"}, {"type": ")", "children": [], "start_byte": 5634, "end_byte": 5635, "start_point": [149, 20], "end_point": [149, 21], "text": "_"}], "start_byte": 5633, "end_byte": 5635, "start_point": [149, 19], "end_point": [149, 21], "text": "m_"}], "start_byte": 5541, "end_byte": 5635, "start_point": [146, 20], "end_point": [149, 21], "text": "\u5f00\u59cb\u5904\u7406\u547d\u4ee4\u884c\u53c2\u6570\");\n    let mut arg_list = Some(Box::new(Cell::mk_cell()));\n    Cell::add_flags_from_"}, {"type": ".", "children": [], "start_byte": 5648, "end_byte": 5649, "start_point": [150, 12], "end_point": [150, 13], "text": "a"}, {"type": "field_identifier", "children": [], "start_byte": 5649, "end_byte": 5655, "start_point": [150, 13], "end_point": [150, 19], "text": "rg_lis"}], "start_byte": 5541, "end_byte": 5655, "start_point": [146, 20], "end_point": [150, 19], "text": "\u5f00\u59cb\u5904\u7406\u547d\u4ee4\u884c\u53c2\u6570\");\n    let mut arg_list = Some(Box::new(Cell::mk_cell()));\n    Cell::add_flags_from_env_var(&mut arg_lis"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 5655, "end_byte": 5656, "start_point": [150, 19], "end_point": [150, 20], "text": "t"}, {"type": ")", "children": [], "start_byte": 5656, "end_byte": 5657, "start_point": [150, 20], "end_point": [150, 21], "text": ","}], "start_byte": 5655, "end_byte": 5657, "start_point": [150, 19], "end_point": [150, 21], "text": "t,"}], "start_byte": 5541, "end_byte": 5657, "start_point": [146, 20], "end_point": [150, 21], "text": "\u5f00\u59cb\u5904\u7406\u547d\u4ee4\u884c\u53c2\u6570\");\n    let mut arg_list = Some(Box::new(Cell::mk_cell()));\n    Cell::add_flags_from_env_var(&mut arg_list,"}, {"type": ";", "children": [], "start_byte": 5657, "end_byte": 5658, "start_point": [150, 21], "end_point": [150, 22], "text": " "}], "start_byte": 5529, "end_byte": 5658, "start_point": [146, 8], "end_point": [150, 22], "text": "!(\"121_main_\u5f00\u59cb\u5904\u7406\u547d\u4ee4\u884c\u53c2\u6570\");\n    let mut arg_list = Some(Box::new(Cell::mk_cell()));\n    Cell::add_flags_from_env_var(&mut arg_list, "}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 5667, "end_byte": 5676, "start_point": [151, 8], "end_point": [151, 17], "text": "\n    // p"}, {"type": "=", "children": [], "start_byte": 5677, "end_byte": 5678, "start_point": [151, 18], "end_point": [151, 19], "text": "i"}, {"type": "call_expression", "children": [{"type": "identifier", "children": [], "start_byte": 5679, "end_byte": 5702, "start_point": [151, 20], "end_point": [151, 43], "text": "tln!(\"121_main_\u6dfb\u52a0\u73af\u5883\u53d8\u91cf B"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 5702, "end_byte": 5703, "start_point": [151, 43], "end_point": [151, 44], "text": "Z"}, {"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 5703, "end_byte": 5708, "start_point": [151, 44], "end_point": [151, 49], "text": "IP2\")"}, {"type": ".", "children": [], "start_byte": 5708, "end_byte": 5709, "start_point": [151, 49], "end_point": [151, 50], "text": ";"}, {"type": "field_identifier", "children": [], "start_byte": 5709, "end_byte": 5718, "start_point": [151, 50], "end_point": [151, 59], "text": "\n\n    Cel"}], "start_byte": 5703, "end_byte": 5718, "start_point": [151, 44], "end_point": [151, 59], "text": "IP2\");\n\n    Cel"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 5718, "end_byte": 5719, "start_point": [151, 59], "end_point": [151, 60], "text": "l"}, {"type": ")", "children": [], "start_byte": 5719, "end_byte": 5720, "start_point": [151, 60], "end_point": [151, 61], "text": ":"}], "start_byte": 5718, "end_byte": 5720, "start_point": [151, 59], "end_point": [151, 61], "text": "l:"}], "start_byte": 5703, "end_byte": 5720, "start_point": [151, 44], "end_point": [151, 61], "text": "IP2\");\n\n    Cell:"}, {"type": ")", "children": [], "start_byte": 5720, "end_byte": 5721, "start_point": [151, 61], "end_point": [151, 62], "text": ":"}], "start_byte": 5702, "end_byte": 5721, "start_point": [151, 43], "end_point": [151, 62], "text": "ZIP2\");\n\n    Cell::"}], "start_byte": 5679, "end_byte": 5721, "start_point": [151, 20], "end_point": [151, 62], "text": "tln!(\"121_main_\u6dfb\u52a0\u73af\u5883\u53d8\u91cf BZIP2\");\n\n    Cell::"}], "start_byte": 5667, "end_byte": 5721, "start_point": [151, 8], "end_point": [151, 62], "text": "\n    // println!(\"121_main_\u6dfb\u52a0\u73af\u5883\u53d8\u91cf BZIP2\");\n\n    Cell::"}, {"type": ";", "children": [], "start_byte": 5721, "end_byte": 5722, "start_point": [151, 62], "end_point": [151, 63], "text": "a"}], "start_byte": 5667, "end_byte": 5722, "start_point": [151, 8], "end_point": [151, 63], "text": "\n    // println!(\"121_main_\u6dfb\u52a0\u73af\u5883\u53d8\u91cf BZIP2\");\n\n    Cell::a"}, {"type": "}", "children": [], "start_byte": 5727, "end_byte": 5728, "start_point": [152, 4], "end_point": [152, 5], "text": "a"}], "start_byte": 5351, "end_byte": 5728, "start_point": [143, 11], "end_point": [152, 5], "text": "ile_name()\n            .unwrap()\n            .to_str()\n            .unwrap();\n        PROG_NAME = string_to_u8_array_2000(p_str.to_string());\n    }\n\n    // \u5904\u7406\u547d\u4ee4\u884c\u53c2\u6570\n    // println!(\"121_main_\u5f00\u59cb\u5904\u7406\u547d\u4ee4\u884c\u53c2\u6570\");\n    let mut arg_list = Some(Box::new(Cell::mk_cell()));\n    Cell::add_flags_from_env_var(&mut arg_list, \"BZIP2\");\n    // println!(\"121_main_\u6dfb\u52a0\u73af\u5883\u53d8\u91cf BZIP2\");\n\n    Cell::add_fla"}], "start_byte": 5344, "end_byte": 5728, "start_point": [143, 4], "end_point": [152, 5], "text": "     .file_name()\n            .unwrap()\n            .to_str()\n            .unwrap();\n        PROG_NAME = string_to_u8_array_2000(p_str.to_string());\n    }\n\n    // \u5904\u7406\u547d\u4ee4\u884c\u53c2\u6570\n    // println!(\"121_main_\u5f00\u59cb\u5904\u7406\u547d\u4ee4\u884c\u53c2\u6570\");\n    let mut arg_list = Some(Box::new(Cell::mk_cell()));\n    Cell::add_flags_from_env_var(&mut arg_list, \"BZIP2\");\n    // println!(\"121_main_\u6dfb\u52a0\u73af\u5883\u53d8\u91cf BZIP2\");\n\n    Cell::add_fla"}], "start_byte": 5344, "end_byte": 5728, "start_point": [143, 4], "end_point": [152, 5], "text": "     .file_name()\n            .unwrap()\n            .to_str()\n            .unwrap();\n        PROG_NAME = string_to_u8_array_2000(p_str.to_string());\n    }\n\n    // \u5904\u7406\u547d\u4ee4\u884c\u53c2\u6570\n    // println!(\"121_main_\u5f00\u59cb\u5904\u7406\u547d\u4ee4\u884c\u53c2\u6570\");\n    let mut arg_list = Some(Box::new(Cell::mk_cell()));\n    Cell::add_flags_from_env_var(&mut arg_list, \"BZIP2\");\n    // println!(\"121_main_\u6dfb\u52a0\u73af\u5883\u53d8\u91cf BZIP2\");\n\n    Cell::add_fla"}, {"type": "line_comment", "children": [], "start_byte": 5734, "end_byte": 5758, "start_point": [154, 4], "end_point": [154, 28], "text": "m_env_var(&mut arg_list,"}, {"type": "line_comment", "children": [], "start_byte": 5763, "end_byte": 5815, "start_point": [155, 4], "end_point": [155, 56], "text": "P\");\n    // println!(\"121_main_\u6dfb\u52a0\u73af\u5883\u53d8\u91cf BZIP\");\n\n    f"}, {"type": "let_declaration", "children": [{"type": "let", "children": [], "start_byte": 5820, "end_byte": 5823, "start_point": [156, 4], "end_point": [156, 7], "text": "g i"}, {"type": "mutable_specifier", "children": [], "start_byte": 5824, "end_byte": 5827, "start_point": [156, 8], "end_point": [156, 11], "text": " ar"}, {"type": "identifier", "children": [], "start_byte": 5828, "end_byte": 5836, "start_point": [156, 12], "end_point": [156, 20], "text": "v.iter()"}, {"type": "=", "children": [], "start_byte": 5837, "end_byte": 5838, "start_point": [156, 21], "end_point": [156, 22], "text": "s"}, {"type": "call_expression", "children": [{"type": "identifier", "children": [], "start_byte": 5839, "end_byte": 5843, "start_point": [156, 23], "end_point": [156, 27], "text": "ip(1"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 5843, "end_byte": 5844, "start_point": [156, 27], "end_point": [156, 28], "text": ")"}, {"type": "call_expression", "children": [{"type": "scoped_identifier", "children": [{"type": "identifier", "children": [], "start_byte": 5844, "end_byte": 5847, "start_point": [156, 28], "end_point": [156, 31], "text": " {\n"}, {"type": "::", "children": [], "start_byte": 5847, "end_byte": 5849, "start_point": [156, 31], "end_point": [156, 33], "text": "  "}, {"type": "identifier", "children": [], "start_byte": 5849, "end_byte": 5852, "start_point": [156, 33], "end_point": [156, 36], "text": "   "}], "start_byte": 5844, "end_byte": 5852, "start_point": [156, 28], "end_point": [156, 36], "text": " {\n     "}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 5852, "end_byte": 5853, "start_point": [156, 36], "end_point": [156, 37], "text": " "}, {"type": "call_expression", "children": [{"type": "scoped_identifier", "children": [{"type": "identifier", "children": [], "start_byte": 5853, "end_byte": 5857, "start_point": [156, 37], "end_point": [156, 41], "text": "  //"}, {"type": "::", "children": [], "start_byte": 5857, "end_byte": 5859, "start_point": [156, 41], "end_point": [156, 43], "text": " p"}, {"type": "identifier", "children": [], "start_byte": 5859, "end_byte": 5866, "start_point": [156, 43], "end_point": [156, 50], "text": "rintln!"}], "start_byte": 5853, "end_byte": 5866, "start_point": [156, 37], "end_point": [156, 50], "text": "  // println!"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 5866, "end_byte": 5867, "start_point": [156, 50], "end_point": [156, 51], "text": "("}, {"type": ")", "children": [], "start_byte": 5867, "end_byte": 5868, "start_point": [156, 51], "end_point": [156, 52], "text": "\""}], "start_byte": 5866, "end_byte": 5868, "start_point": [156, 50], "end_point": [156, 52], "text": "(\""}], "start_byte": 5853, "end_byte": 5868, "start_point": [156, 37], "end_point": [156, 52], "text": "  // println!(\""}, {"type": ")", "children": [], "start_byte": 5868, "end_byte": 5869, "start_point": [156, 52], "end_point": [156, 53], "text": "1"}], "start_byte": 5852, "end_byte": 5869, "start_point": [156, 36], "end_point": [156, 53], "text": "   // println!(\"1"}], "start_byte": 5844, "end_byte": 5869, "start_point": [156, 28], "end_point": [156, 53], "text": " {\n        // println!(\"1"}, {"type": ")", "children": [], "start_byte": 5869, "end_byte": 5870, "start_point": [156, 53], "end_point": [156, 54], "text": "2"}], "start_byte": 5843, "end_byte": 5870, "start_point": [156, 27], "end_point": [156, 54], "text": ") {\n        // println!(\"12"}], "start_byte": 5839, "end_byte": 5870, "start_point": [156, 23], "end_point": [156, 54], "text": "ip(1) {\n        // println!(\"12"}, {"type": ";", "children": [], "start_byte": 5870, "end_byte": 5871, "start_point": [156, 54], "end_point": [156, 55], "text": "1"}], "start_byte": 5820, "end_byte": 5871, "start_point": [156, 4], "end_point": [156, 55], "text": "g in argv.iter().skip(1) {\n        // println!(\"121"}, {"type": "expression_statement", "children": [{"type": "call_expression", "children": [{"type": "scoped_identifier", "children": [{"type": "identifier", "children": [], "start_byte": 5876, "end_byte": 5880, "start_point": [157, 4], "end_point": [157, 8], "text": "_\u5904\u7406\u53c2"}, {"type": "::", "children": [], "start_byte": 5880, "end_byte": 5882, "start_point": [157, 8], "end_point": [157, 10], "text": "\u6570:"}, {"type": "identifier", "children": [], "start_byte": 5882, "end_byte": 5904, "start_point": [157, 10], "end_point": [157, 32], "text": " {}\", arg);\n        ar"}], "start_byte": 5876, "end_byte": 5904, "start_point": [157, 4], "end_point": [157, 32], "text": "_\u5904\u7406\u53c2\u6570: {}\", arg);\n        ar"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 5904, "end_byte": 5905, "start_point": [157, 32], "end_point": [157, 33], "text": "g"}, {"type": "reference_expression", "children": [{"type": "&", "children": [], "start_byte": 5905, "end_byte": 5906, "start_point": [157, 33], "end_point": [157, 34], "text": "_"}, {"type": "mutable_specifier", "children": [], "start_byte": 5906, "end_byte": 5909, "start_point": [157, 34], "end_point": [157, 37], "text": "lis"}, {"type": "identifier", "children": [], "start_byte": 5910, "end_byte": 5918, "start_point": [157, 38], "end_point": [157, 46], "text": " = Some("}], "start_byte": 5905, "end_byte": 5918, "start_point": [157, 33], "end_point": [157, 46], "text": "_list = Some("}, {"type": ",", "children": [], "start_byte": 5918, "end_byte": 5919, "start_point": [157, 46], "end_point": [157, 47], "text": "B"}, {"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 5920, "end_byte": 5921, "start_point": [157, 48], "end_point": [157, 49], "text": "x"}, {"type": "\"", "children": [], "start_byte": 5926, "end_byte": 5927, "start_point": [157, 54], "end_point": [157, 55], "text": "("}], "start_byte": 5920, "end_byte": 5927, "start_point": [157, 48], "end_point": [157, 55], "text": "x::new("}, {"type": ")", "children": [], "start_byte": 5927, "end_byte": 5928, "start_point": [157, 55], "end_point": [157, 56], "text": "a"}], "start_byte": 5904, "end_byte": 5928, "start_point": [157, 32], "end_point": [157, 56], "text": "g_list = Some(Box::new(a"}], "start_byte": 5876, "end_byte": 5928, "start_point": [157, 4], "end_point": [157, 56], "text": "_\u5904\u7406\u53c2\u6570: {}\", arg);\n        arg_list = Some(Box::new(a"}, {"type": ";", "children": [], "start_byte": 5928, "end_byte": 5929, "start_point": [157, 56], "end_point": [157, 57], "text": "r"}], "start_byte": 5876, "end_byte": 5929, "start_point": [157, 4], "end_point": [157, 57], "text": "_\u5904\u7406\u53c2\u6570: {}\", arg);\n        arg_list = Some(Box::new(ar"}, {"type": "line_comment", "children": [], "start_byte": 5934, "end_byte": 5983, "start_point": [158, 4], "end_point": [158, 53], "text": "t.take().unwrap_or_else(|| Box::new(Cell::mk_cell"}, {"type": "expression_statement", "children": [{"type": "call_expression", "children": [{"type": "scoped_identifier", "children": [{"type": "identifier", "children": [], "start_byte": 5989, "end_byte": 5993, "start_point": [160, 4], "end_point": [160, 8], "text": "noc_"}, {"type": "::", "children": [], "start_byte": 5993, "end_byte": 5995, "start_point": [160, 8], "end_point": [160, 10], "text": "st"}, {"type": "identifier", "children": [], "start_byte": 5995, "end_byte": 6017, "start_point": [160, 10], "end_point": [160, 32], "text": "ring(arg)));\n    }\n\n  "}], "start_byte": 5989, "end_byte": 6017, "start_point": [160, 4], "end_point": [160, 32], "text": "noc_string(arg)));\n    }\n\n  "}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 6017, "end_byte": 6018, "start_point": [160, 32], "end_point": [160, 33], "text": " "}, {"type": "reference_expression", "children": [{"type": "&", "children": [], "start_byte": 6018, "end_byte": 6019, "start_point": [160, 33], "end_point": [160, 34], "text": " "}, {"type": "mutable_specifier", "children": [], "start_byte": 6019, "end_byte": 6022, "start_point": [160, 34], "end_point": [160, 37], "text": "// "}, {"type": "identifier", "children": [], "start_byte": 6023, "end_byte": 6031, "start_point": [160, 38], "end_point": [160, 46], "text": "rintln!("}], "start_byte": 6018, "end_byte": 6031, "start_point": [160, 33], "end_point": [160, 46], "text": " // println!("}, {"type": ",", "children": [], "start_byte": 6031, "end_byte": 6032, "start_point": [160, 46], "end_point": [160, 47], "text": "\""}, {"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 6033, "end_byte": 6034, "start_point": [160, 48], "end_point": [160, 49], "text": "f"}, {"type": "\"", "children": [], "start_byte": 6038, "end_byte": 6039, "start_point": [160, 53], "end_point": [160, 54], "text": "d"}], "start_byte": 6033, "end_byte": 6039, "start_point": [160, 48], "end_point": [160, 54], "text": "fter d"}, {"type": ")", "children": [], "start_byte": 6039, "end_byte": 6040, "start_point": [160, 54], "end_point": [160, 55], "text": "o"}], "start_byte": 6017, "end_byte": 6040, "start_point": [160, 32], "end_point": [160, 55], "text": "  // println!(\"After do"}], "start_byte": 5989, "end_byte": 6040, "start_point": [160, 4], "end_point": [160, 55], "text": "noc_string(arg)));\n    }\n\n    // println!(\"After do"}, {"type": ";", "children": [], "start_byte": 6040, "end_byte": 6041, "start_point": [160, 55], "end_point": [160, 56], "text": "i"}], "start_byte": 5989, "end_byte": 6041, "start_point": [160, 4], "end_point": [160, 56], "text": "noc_string(arg)));\n    }\n\n    // println!(\"After doi"}, {"type": "line_comment", "children": [], "start_byte": 6046, "end_byte": 6094, "start_point": [161, 4], "end_point": [161, 52], "text": "th arg_list\");\n    if let Some(ref cell) = arg_l"}, {"type": "expression_statement", "children": [{"type": "for_expression", "children": [{"type": "for", "children": [], "start_byte": 6100, "end_byte": 6103, "start_point": [163, 4], "end_point": [163, 7], "text": "   "}, {"type": "identifier", "children": [], "start_byte": 6104, "end_byte": 6107, "start_point": [163, 8], "end_point": [163, 11], "text": "   "}, {"type": "in", "children": [], "start_byte": 6108, "end_byte": 6110, "start_point": [163, 12], "end_point": [163, 14], "text": "ce"}, {"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 6111, "end_byte": 6115, "start_point": [163, 15], "end_point": [163, 19], "text": "l.pr"}, {"type": ".", "children": [], "start_byte": 6115, "end_byte": 6116, "start_point": [163, 19], "end_point": [163, 20], "text": "i"}, {"type": "field_identifier", "children": [], "start_byte": 6116, "end_byte": 6120, "start_point": [163, 20], "end_point": [163, 24], "text": "ntLi"}], "start_byte": 6111, "end_byte": 6120, "start_point": [163, 15], "end_point": [163, 24], "text": "l.printLi"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 6120, "end_byte": 6121, "start_point": [163, 24], "end_point": [163, 25], "text": "n"}, {"type": ")", "children": [], "start_byte": 6121, "end_byte": 6122, "start_point": [163, 25], "end_point": [163, 26], "text": "k"}], "start_byte": 6120, "end_byte": 6122, "start_point": [163, 24], "end_point": [163, 26], "text": "nk"}], "start_byte": 6111, "end_byte": 6122, "start_point": [163, 15], "end_point": [163, 26], "text": "l.printLink"}, {"type": ".", "children": [], "start_byte": 6122, "end_byte": 6123, "start_point": [163, 26], "end_point": [163, 27], "text": "L"}, {"type": "field_identifier", "children": [], "start_byte": 6123, "end_byte": 6127, "start_point": [163, 27], "end_point": [163, 31], "text": "ists"}], "start_byte": 6111, "end_byte": 6127, "start_point": [163, 15], "end_point": [163, 31], "text": "l.printLinkLists"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 6127, "end_byte": 6128, "start_point": [163, 31], "end_point": [163, 32], "text": "("}, {"type": "integer_literal", "children": [], "start_byte": 6128, "end_byte": 6129, "start_point": [163, 32], "end_point": [163, 33], "text": ")"}, {"type": ")", "children": [], "start_byte": 6129, "end_byte": 6130, "start_point": [163, 33], "end_point": [163, 34], "text": ";"}], "start_byte": 6127, "end_byte": 6130, "start_point": [163, 31], "end_point": [163, 34], "text": "();"}], "start_byte": 6111, "end_byte": 6130, "start_point": [163, 15], "end_point": [163, 34], "text": "l.printLinkLists();"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 6131, "end_byte": 6132, "start_point": [163, 35], "end_point": [163, 36], "text": " "}, {"type": "line_comment", "children": [], "start_byte": 6141, "end_byte": 6187, "start_point": [164, 8], "end_point": [164, 54], "text": "// \u4e0b\u9762\u8fdb\u5165arg_list\u7684\u4f7f\u7528\n\n    // let mut arg_list = "}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 6196, "end_byte": 6204, "start_point": [165, 8], "end_point": [165, 16], "text": ");\n    /"}, {"type": "=", "children": [], "start_byte": 6205, "end_byte": 6206, "start_point": [165, 17], "end_point": [165, 18], "text": " "}, {"type": "call_expression", "children": [{"type": "identifier", "children": [], "start_byte": 6207, "end_byte": 6211, "start_point": [165, 19], "end_point": [165, 23], "text": "dd_f"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 6211, "end_byte": 6212, "start_point": [165, 23], "end_point": [165, 24], "text": "l"}, {"type": "call_expression", "children": [{"type": "scoped_identifier", "children": [{"type": "identifier", "children": [], "start_byte": 6212, "end_byte": 6215, "start_point": [165, 24], "end_point": [165, 27], "text": "ags"}, {"type": "::", "children": [], "start_byte": 6215, "end_byte": 6217, "start_point": [165, 27], "end_point": [165, 29], "text": "_f"}, {"type": "identifier", "children": [], "start_byte": 6217, "end_byte": 6220, "start_point": [165, 29], "end_point": [165, 32], "text": "rom"}], "start_byte": 6212, "end_byte": 6220, "start_point": [165, 24], "end_point": [165, 32], "text": "ags_from"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 6220, "end_byte": 6221, "start_point": [165, 32], "end_point": [165, 33], "text": "_"}, {"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 6221, "end_byte": 6229, "start_point": [165, 33], "end_point": [165, 41], "text": "env_var("}, {"type": ".", "children": [], "start_byte": 6229, "end_byte": 6230, "start_point": [165, 41], "end_point": [165, 42], "text": "&"}, {"type": "field_identifier", "children": [], "start_byte": 6230, "end_byte": 6234, "start_point": [165, 42], "end_point": [165, 46], "text": "mut "}], "start_byte": 6221, "end_byte": 6234, "start_point": [165, 33], "end_point": [165, 46], "text": "env_var(&mut "}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 6234, "end_byte": 6235, "start_point": [165, 46], "end_point": [165, 47], "text": "a"}, {"type": ")", "children": [], "start_byte": 6235, "end_byte": 6236, "start_point": [165, 47], "end_point": [165, 48], "text": "r"}], "start_byte": 6234, "end_byte": 6236, "start_point": [165, 46], "end_point": [165, 48], "text": "ar"}], "start_byte": 6221, "end_byte": 6236, "start_point": [165, 33], "end_point": [165, 48], "text": "env_var(&mut ar"}, {"type": ".", "children": [], "start_byte": 6236, "end_byte": 6237, "start_point": [165, 48], "end_point": [165, 49], "text": "g"}, {"type": "field_identifier", "children": [], "start_byte": 6237, "end_byte": 6251, "start_point": [165, 49], "end_point": [165, 63], "text": "_list, \"BZIP2\""}], "start_byte": 6221, "end_byte": 6251, "start_point": [165, 33], "end_point": [165, 63], "text": "env_var(&mut arg_list, \"BZIP2\""}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 6251, "end_byte": 6252, "start_point": [165, 63], "end_point": [165, 64], "text": ")"}, {"type": "closure_expression", "children": [{"type": "closure_parameters", "children": [{"type": "|", "children": [], "start_byte": 6252, "end_byte": 6253, "start_point": [165, 64], "end_point": [165, 65], "text": ";"}, {"type": "|", "children": [], "start_byte": 6253, "end_byte": 6254, "start_point": [165, 65], "end_point": [165, 66], "text": "\n"}], "start_byte": 6252, "end_byte": 6254, "start_point": [165, 64], "end_point": [165, 66], "text": ";\n"}, {"type": "call_expression", "children": [{"type": "scoped_identifier", "children": [{"type": "identifier", "children": [], "start_byte": 6255, "end_byte": 6258, "start_point": [165, 67], "end_point": [165, 70], "text": "   "}, {"type": "::", "children": [], "start_byte": 6258, "end_byte": 6260, "start_point": [165, 70], "end_point": [165, 72], "text": "//"}, {"type": "identifier", "children": [], "start_byte": 6260, "end_byte": 6263, "start_point": [165, 72], "end_point": [165, 75], "text": " ad"}], "start_byte": 6255, "end_byte": 6263, "start_point": [165, 67], "end_point": [165, 75], "text": "   // ad"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 6263, "end_byte": 6264, "start_point": [165, 75], "end_point": [165, 76], "text": "d"}, {"type": "call_expression", "children": [{"type": "scoped_identifier", "children": [{"type": "identifier", "children": [], "start_byte": 6264, "end_byte": 6268, "start_point": [165, 76], "end_point": [165, 80], "text": "_fla"}, {"type": "::", "children": [], "start_byte": 6268, "end_byte": 6270, "start_point": [165, 80], "end_point": [165, 82], "text": "gs"}, {"type": "identifier", "children": [], "start_byte": 6270, "end_byte": 6277, "start_point": [165, 82], "end_point": [165, 89], "text": "_from_e"}], "start_byte": 6264, "end_byte": 6277, "start_point": [165, 76], "end_point": [165, 89], "text": "_flags_from_e"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 6277, "end_byte": 6278, "start_point": [165, 89], "end_point": [165, 90], "text": "n"}, {"type": ")", "children": [], "start_byte": 6278, "end_byte": 6279, "start_point": [165, 90], "end_point": [165, 91], "text": "v"}], "start_byte": 6277, "end_byte": 6279, "start_point": [165, 89], "end_point": [165, 91], "text": "nv"}], "start_byte": 6264, "end_byte": 6279, "start_point": [165, 76], "end_point": [165, 91], "text": "_flags_from_env"}, {"type": ")", "children": [], "start_byte": 6279, "end_byte": 6280, "start_point": [165, 91], "end_point": [165, 92], "text": "_"}], "start_byte": 6263, "end_byte": 6280, "start_point": [165, 75], "end_point": [165, 92], "text": "d_flags_from_env_"}], "start_byte": 6255, "end_byte": 6280, "start_point": [165, 67], "end_point": [165, 92], "text": "   // add_flags_from_env_"}], "start_byte": 6252, "end_byte": 6280, "start_point": [165, 64], "end_point": [165, 92], "text": ";\n    // add_flags_from_env_"}, {"type": ")", "children": [], "start_byte": 6280, "end_byte": 6281, "start_point": [165, 92], "end_point": [165, 93], "text": "v"}], "start_byte": 6251, "end_byte": 6281, "start_point": [165, 63], "end_point": [165, 93], "text": ");\n    // add_flags_from_env_v"}], "start_byte": 6221, "end_byte": 6281, "start_point": [165, 33], "end_point": [165, 93], "text": "env_var(&mut arg_list, \"BZIP2\");\n    // add_flags_from_env_v"}, {"type": ".", "children": [], "start_byte": 6281, "end_byte": 6282, "start_point": [165, 93], "end_point": [165, 94], "text": "a"}, {"type": "field_identifier", "children": [], "start_byte": 6282, "end_byte": 6293, "start_point": [165, 94], "end_point": [165, 105], "text": "r(&mut arg_"}], "start_byte": 6221, "end_byte": 6293, "start_point": [165, 33], "end_point": [165, 105], "text": "env_var(&mut arg_list, \"BZIP2\");\n    // add_flags_from_env_var(&mut arg_"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 6293, "end_byte": 6294, "start_point": [165, 105], "end_point": [165, 106], "text": "l"}, {"type": "identifier", "children": [], "start_byte": 6294, "end_byte": 6297, "start_point": [165, 106], "end_point": [165, 109], "text": "ist"}, {"type": ")", "children": [], "start_byte": 6297, "end_byte": 6298, "start_point": [165, 109], "end_point": [165, 110], "text": ","}], "start_byte": 6293, "end_byte": 6298, "start_point": [165, 105], "end_point": [165, 110], "text": "list,"}], "start_byte": 6221, "end_byte": 6298, "start_point": [165, 33], "end_point": [165, 110], "text": "env_var(&mut arg_list, \"BZIP2\");\n    // add_flags_from_env_var(&mut arg_list,"}, {"type": ")", "children": [], "start_byte": 6298, "end_byte": 6299, "start_point": [165, 110], "end_point": [165, 111], "text": " "}], "start_byte": 6220, "end_byte": 6299, "start_point": [165, 32], "end_point": [165, 111], "text": "_env_var(&mut arg_list, \"BZIP2\");\n    // add_flags_from_env_var(&mut arg_list, "}], "start_byte": 6212, "end_byte": 6299, "start_point": [165, 24], "end_point": [165, 111], "text": "ags_from_env_var(&mut arg_list, \"BZIP2\");\n    // add_flags_from_env_var(&mut arg_list, "}, {"type": ")", "children": [], "start_byte": 6299, "end_byte": 6300, "start_point": [165, 111], "end_point": [165, 112], "text": "\""}], "start_byte": 6211, "end_byte": 6300, "start_point": [165, 23], "end_point": [165, 112], "text": "lags_from_env_var(&mut arg_list, \"BZIP2\");\n    // add_flags_from_env_var(&mut arg_list, \""}], "start_byte": 6207, "end_byte": 6300, "start_point": [165, 19], "end_point": [165, 112], "text": "dd_flags_from_env_var(&mut arg_list, \"BZIP2\");\n    // add_flags_from_env_var(&mut arg_list, \""}], "start_byte": 6196, "end_byte": 6300, "start_point": [165, 8], "end_point": [165, 112], "text": ");\n    // add_flags_from_env_var(&mut arg_list, \"BZIP2\");\n    // add_flags_from_env_var(&mut arg_list, \""}, {"type": ";", "children": [], "start_byte": 6300, "end_byte": 6301, "start_point": [165, 112], "end_point": [165, 113], "text": "B"}], "start_byte": 6196, "end_byte": 6301, "start_point": [165, 8], "end_point": [165, 113], "text": ");\n    // add_flags_from_env_var(&mut arg_list, \"BZIP2\");\n    // add_flags_from_env_var(&mut arg_list, \"B"}, {"type": "}", "children": [], "start_byte": 6306, "end_byte": 6307, "start_point": [166, 4], "end_point": [166, 5], "text": ";"}], "start_byte": 6131, "end_byte": 6307, "start_point": [163, 35], "end_point": [166, 5], "text": "    }\n    // \u4e0b\u9762\u8fdb\u5165arg_list\u7684\u4f7f\u7528\n\n    // let mut arg_list = Vec::new();\n    // add_flags_from_env_var(&mut arg_list, \"BZIP2\");\n    // add_flags_from_env_var(&mut arg_list, \"BZIP\");"}], "start_byte": 6100, "end_byte": 6307, "start_point": [163, 4], "end_point": [166, 5], "text": "        cell.printLinkLists();\n    }\n    // \u4e0b\u9762\u8fdb\u5165arg_list\u7684\u4f7f\u7528\n\n    // let mut arg_list = Vec::new();\n    // add_flags_from_env_var(&mut arg_list, \"BZIP2\");\n    // add_flags_from_env_var(&mut arg_list, \"BZIP\");"}], "start_byte": 6100, "end_byte": 6307, "start_point": [163, 4], "end_point": [166, 5], "text": "        cell.printLinkLists();\n    }\n    // \u4e0b\u9762\u8fdb\u5165arg_list\u7684\u4f7f\u7528\n\n    // let mut arg_list = Vec::new();\n    // add_flags_from_env_var(&mut arg_list, \"BZIP2\");\n    // add_flags_from_env_var(&mut arg_list, \"BZIP\");"}, {"type": "line_comment", "children": [], "start_byte": 6313, "end_byte": 6354, "start_point": [168, 4], "end_point": [168, 45], "text": "/ arg_list.extend(env::args().skip(1));\n "}, {"type": "expression_statement", "children": [{"type": "if_expression", "children": [{"type": "if", "children": [], "start_byte": 6359, "end_byte": 6361, "start_point": [169, 4], "end_point": [169, 6], "text": "sa"}, {"type": "let_condition", "children": [{"type": "let", "children": [], "start_byte": 6362, "end_byte": 6365, "start_point": [169, 7], "end_point": [169, 10], "text": "e {"}, {"type": "tuple_struct_pattern", "children": [{"type": "identifier", "children": [], "start_byte": 6366, "end_byte": 6370, "start_point": [169, 11], "end_point": [169, 15], "text": "    "}, {"type": "(", "children": [], "start_byte": 6370, "end_byte": 6371, "start_point": [169, 15], "end_point": [169, 16], "text": " "}, {"type": "ref_pattern", "children": [{"type": "ref", "children": [], "start_byte": 6371, "end_byte": 6374, "start_point": [169, 16], "end_point": [169, 19], "text": "   "}, {"type": "identifier", "children": [], "start_byte": 6375, "end_byte": 6379, "start_point": [169, 20], "end_point": [169, 24], "text": "ONGE"}], "start_byte": 6371, "end_byte": 6379, "start_point": [169, 16], "end_point": [169, 24], "text": "   LONGE"}, {"type": ")", "children": [], "start_byte": 6379, "end_byte": 6380, "start_point": [169, 24], "end_point": [169, 25], "text": "S"}], "start_byte": 6366, "end_byte": 6380, "start_point": [169, 11], "end_point": [169, 25], "text": "        LONGES"}, {"type": "=", "children": [], "start_byte": 6381, "end_byte": 6382, "start_point": [169, 26], "end_point": [169, 27], "text": "_"}, {"type": "identifier", "children": [], "start_byte": 6383, "end_byte": 6391, "start_point": [169, 28], "end_point": [169, 36], "text": "ILE_NAME"}], "start_byte": 6362, "end_byte": 6391, "start_point": [169, 7], "end_point": [169, 36], "text": "e {\n        LONGEST_FILE_NAME"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 6392, "end_byte": 6393, "start_point": [169, 37], "end_point": [169, 38], "text": "="}, {"type": "expression_statement", "children": [{"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 6402, "end_byte": 6406, "start_point": [170, 8], "end_point": [170, 12], "text": "   N"}, {"type": ".", "children": [], "start_byte": 6406, "end_byte": 6407, "start_point": [170, 12], "end_point": [170, 13], "text": "U"}, {"type": "field_identifier", "children": [], "start_byte": 6407, "end_byte": 6421, "start_point": [170, 13], "end_point": [170, 27], "text": "M_FILE_NAMES ="}], "start_byte": 6402, "end_byte": 6421, "start_point": [170, 8], "end_point": [170, 27], "text": "   NUM_FILE_NAMES ="}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 6421, "end_byte": 6422, "start_point": [170, 27], "end_point": [170, 28], "text": " "}, {"type": ")", "children": [], "start_byte": 6422, "end_byte": 6423, "start_point": [170, 28], "end_point": [170, 29], "text": "0"}], "start_byte": 6421, "end_byte": 6423, "start_point": [170, 27], "end_point": [170, 29], "text": " 0"}], "start_byte": 6402, "end_byte": 6423, "start_point": [170, 8], "end_point": [170, 29], "text": "   NUM_FILE_NAMES = 0"}, {"type": ";", "children": [], "start_byte": 6423, "end_byte": 6424, "start_point": [170, 29], "end_point": [170, 30], "text": ";"}], "start_byte": 6402, "end_byte": 6424, "start_point": [170, 8], "end_point": [170, 30], "text": "   NUM_FILE_NAMES = 0;"}, {"type": "}", "children": [], "start_byte": 6429, "end_byte": 6430, "start_point": [171, 4], "end_point": [171, 5], "text": "}"}], "start_byte": 6392, "end_byte": 6430, "start_point": [169, 37], "end_point": [171, 5], "text": "= 7;\n        NUM_FILE_NAMES = 0;\n    }"}], "start_byte": 6359, "end_byte": 6430, "start_point": [169, 4], "end_point": [171, 5], "text": "safe {\n        LONGEST_FILE_NAME = 7;\n        NUM_FILE_NAMES = 0;\n    }"}], "start_byte": 6359, "end_byte": 6430, "start_point": [169, 4], "end_point": [171, 5], "text": "safe {\n        LONGEST_FILE_NAME = 7;\n        NUM_FILE_NAMES = 0;\n    }"}, {"type": "line_comment", "children": [], "start_byte": 6435, "end_byte": 6467, "start_point": [172, 4], "end_point": [172, 36], "text": "decode = true;\n    // \u9012\u5f52\u904d\u5386 \ud83d\udd25\n   "}, {"type": "line_comment", "children": [], "start_byte": 6473, "end_byte": 6506, "start_point": [174, 4], "end_point": [174, 37], "text": "ss_link_list(&mut arg_list, &mut "}, {"type": "line_comment", "children": [], "start_byte": 6511, "end_byte": 6561, "start_point": [175, 4], "end_point": [175, 54], "text": "e);\n    // for aa in &arg_list {\n    //      // \u89e3\u5f15"}, {"type": "line_comment", "children": [], "start_byte": 6566, "end_byte": 6615, "start_point": [176, 4], "end_point": [176, 53], "text": "x<String>` \u4ee5\u83b7\u53d6 `String` \u7684\u5f15\u7528\n    //     if let Som"}, {"type": "line_comment", "children": [], "start_byte": 6620, "end_byte": 6660, "start_point": [177, 4], "end_point": [177, 44], "text": " name) = aa.name {\n    //         if nam"}, {"type": "expression_statement", "children": [{"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 6665, "end_byte": 6671, "start_point": [178, 4], "end_point": [178, 10], "text": "str() "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 6672, "end_byte": 6673, "start_point": [178, 11], "end_point": [178, 12], "text": "="}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 6682, "end_byte": 6699, "start_point": [179, 8], "end_point": [179, 25], "text": "   //            "}, {"type": "=", "children": [], "start_byte": 6700, "end_byte": 6701, "start_point": [179, 26], "end_point": [179, 27], "text": "d"}, {"type": "integer_literal", "children": [], "start_byte": 6702, "end_byte": 6703, "start_point": [179, 28], "end_point": [179, 29], "text": "c"}], "start_byte": 6682, "end_byte": 6703, "start_point": [179, 8], "end_point": [179, 29], "text": "   //             dec"}, {"type": ";", "children": [], "start_byte": 6703, "end_byte": 6704, "start_point": [179, 29], "end_point": [179, 30], "text": "o"}], "start_byte": 6682, "end_byte": 6704, "start_point": [179, 8], "end_point": [179, 30], "text": "   //             deco"}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 6713, "end_byte": 6727, "start_point": [180, 8], "end_point": [180, 22], "text": "e;\n    //     "}, {"type": "=", "children": [], "start_byte": 6728, "end_byte": 6729, "start_point": [180, 23], "end_point": [180, 24], "text": " "}, {"type": "integer_literal", "children": [], "start_byte": 6730, "end_byte": 6731, "start_point": [180, 25], "end_point": [180, 26], "text": " "}], "start_byte": 6713, "end_byte": 6731, "start_point": [180, 8], "end_point": [180, 26], "text": "e;\n    //         "}, {"type": ";", "children": [], "start_byte": 6731, "end_byte": 6732, "start_point": [180, 26], "end_point": [180, 27], "text": " "}], "start_byte": 6713, "end_byte": 6732, "start_point": [180, 8], "end_point": [180, 27], "text": "e;\n    //          "}, {"type": "}", "children": [], "start_byte": 6737, "end_byte": 6738, "start_point": [181, 4], "end_point": [181, 5], "text": "n"}], "start_byte": 6672, "end_byte": 6738, "start_point": [178, 11], "end_point": [181, 5], "text": "= \"--\" {\n    //             decode = false;\n    //             con"}], "start_byte": 6665, "end_byte": 6738, "start_point": [178, 4], "end_point": [181, 5], "text": "str() == \"--\" {\n    //             decode = false;\n    //             con"}], "start_byte": 6665, "end_byte": 6738, "start_point": [178, 4], "end_point": [181, 5], "text": "str() == \"--\" {\n    //             decode = false;\n    //             con"}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 6743, "end_byte": 6749, "start_point": [182, 4], "end_point": [182, 10], "text": ";\n    "}, {"type": "=", "children": [], "start_byte": 6750, "end_byte": 6751, "start_point": [182, 11], "end_point": [182, 12], "text": "/"}, {"type": "boolean_literal", "children": [{"type": "true", "children": [], "start_byte": 6752, "end_byte": 6756, "start_point": [182, 13], "end_point": [182, 17], "text": "    "}], "start_byte": 6752, "end_byte": 6756, "start_point": [182, 13], "end_point": [182, 17], "text": "    "}], "start_byte": 6743, "end_byte": 6756, "start_point": [182, 4], "end_point": [182, 17], "text": ";\n    //     "}, {"type": ";", "children": [], "start_byte": 6756, "end_byte": 6757, "start_point": [182, 17], "end_point": [182, 18], "text": " "}], "start_byte": 6743, "end_byte": 6757, "start_point": [182, 4], "end_point": [182, 18], "text": ";\n    //      "}, {"type": "line_comment", "children": [], "start_byte": 6762, "end_byte": 6782, "start_point": [183, 4], "end_point": [183, 24], "text": "    //         if na"}, {"type": "expression_statement", "children": [{"type": "call_expression", "children": [{"type": "identifier", "children": [], "start_byte": 6787, "end_byte": 6804, "start_point": [184, 4], "end_point": [184, 21], "text": "arts_with('-') &&"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 6804, "end_byte": 6805, "start_point": [184, 21], "end_point": [184, 22], "text": " "}, {"type": "reference_expression", "children": [{"type": "&", "children": [], "start_byte": 6805, "end_byte": 6806, "start_point": [184, 22], "end_point": [184, 23], "text": "d"}, {"type": "mutable_specifier", "children": [], "start_byte": 6806, "end_byte": 6809, "start_point": [184, 23], "end_point": [184, 26], "text": "eco"}, {"type": "identifier", "children": [], "start_byte": 6810, "end_byte": 6818, "start_point": [184, 27], "end_point": [184, 35], "text": "e {\n    "}], "start_byte": 6805, "end_byte": 6818, "start_point": [184, 22], "end_point": [184, 35], "text": "decode {\n    "}, {"type": ",", "children": [], "start_byte": 6818, "end_byte": 6819, "start_point": [184, 35], "end_point": [184, 36], "text": "/"}, {"type": "reference_expression", "children": [{"type": "&", "children": [], "start_byte": 6820, "end_byte": 6821, "start_point": [184, 37], "end_point": [184, 38], "text": " "}, {"type": "mutable_specifier", "children": [], "start_byte": 6821, "end_byte": 6824, "start_point": [184, 38], "end_point": [184, 41], "text": "   "}, {"type": "identifier", "children": [], "start_byte": 6825, "end_byte": 6831, "start_point": [184, 42], "end_point": [184, 48], "text": "      "}], "start_byte": 6820, "end_byte": 6831, "start_point": [184, 37], "end_point": [184, 48], "text": "           "}, {"type": ")", "children": [], "start_byte": 6831, "end_byte": 6832, "start_point": [184, 48], "end_point": [184, 49], "text": " "}], "start_byte": 6804, "end_byte": 6832, "start_point": [184, 21], "end_point": [184, 49], "text": " decode {\n    //            "}], "start_byte": 6787, "end_byte": 6832, "start_point": [184, 4], "end_point": [184, 49], "text": "arts_with('-') && decode {\n    //            "}, {"type": ";", "children": [], "start_byte": 6832, "end_byte": 6833, "start_point": [184, 49], "end_point": [184, 50], "text": " "}], "start_byte": 6787, "end_byte": 6833, "start_point": [184, 4], "end_point": [184, 50], "text": "arts_with('-') && decode {\n    //             "}, {"type": "line_comment", "children": [], "start_byte": 6838, "end_byte": 6862, "start_point": [185, 4], "end_point": [185, 28], "text": "nue;\n    //         }\n  "}, {"type": "line_comment", "children": [], "start_byte": 6867, "end_byte": 6930, "start_point": [186, 4], "end_point": [186, 67], "text": "        unsafe {\n    //             NUM_FILE_NAMES += 1;\n    //"}, {"type": "line_comment", "children": [], "start_byte": 6935, "end_byte": 6975, "start_point": [187, 4], "end_point": [187, 44], "text": "        LONGEST_FILE_NAME = LONGEST_FILE"}, {"type": "line_comment", "children": [], "start_byte": 6980, "end_byte": 7017, "start_point": [188, 4], "end_point": [188, 41], "text": ".max(name.len() as i32);\n    //      "}, {"type": "line_comment", "children": [], "start_byte": 7022, "end_byte": 7052, "start_point": [189, 4], "end_point": [189, 34], "text": "    //     }\n    // }\n\n    uns"}, {"type": "line_comment", "children": [], "start_byte": 7057, "end_byte": 7081, "start_point": [190, 4], "end_point": [190, 28], "text": "SRC_MODE = if NUM_FILE_N"}, {"type": "line_comment", "children": [], "start_byte": 7086, "end_byte": 7098, "start_point": [191, 4], "end_point": [191, 16], "text": "== 0 { 1 } e"}, {"type": "line_comment", "children": [], "start_byte": 7103, "end_byte": 7150, "start_point": [192, 4], "end_point": [192, 51], "text": " 3 };}\n    unsafe {OP_MODE = 1;}\n    unsafe {\n "}, {"type": "line_comment", "children": [], "start_byte": 7155, "end_byte": 7179, "start_point": [193, 4], "end_point": [193, 28], "text": "  let mut prog_name_str "}, {"type": "line_comment", "children": [], "start_byte": 7184, "end_byte": 7196, "start_point": [194, 4], "end_point": [194, 16], "text": "array_to_str"}, {"type": "line_comment", "children": [], "start_byte": 7201, "end_byte": 7220, "start_point": [195, 4], "end_point": [195, 23], "text": "PROG_NAME);\n       "}, {"type": "line_comment", "children": [], "start_byte": 7225, "end_byte": 7260, "start_point": [196, 4], "end_point": [196, 39], "text": "rog_name_str.contains(\"unzip\") || p"}, {"type": "line_comment", "children": [], "start_byte": 7265, "end_byte": 7341, "start_point": [197, 4], "end_point": [197, 80], "text": "ame_str.contains(\"UNZIP\") {\n            OP_MODE = 2;\n        }\n        if pr"}, {"type": "line_comment", "children": [], "start_byte": 7346, "end_byte": 7358, "start_point": [198, 4], "end_point": [198, 16], "text": "me_str.conta"}, {"type": "line_comment", "children": [], "start_byte": 7363, "end_byte": 7371, "start_point": [199, 4], "end_point": [199, 12], "text": "z2cat\") "}, {"type": "line_comment", "children": [], "start_byte": 7376, "end_byte": 7380, "start_point": [200, 4], "end_point": [200, 8], "text": "og_n"}, {"type": "expression_statement", "children": [{"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 7386, "end_byte": 7392, "start_point": [202, 4], "end_point": [202, 10], "text": "r.cont"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 7393, "end_byte": 7394, "start_point": [202, 11], "end_point": [202, 12], "text": "i"}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 7394, "end_byte": 7402, "start_point": [202, 12], "end_point": [202, 20], "text": "ns(\"Z2CA"}, {"type": "=", "children": [], "start_byte": 7403, "end_byte": 7404, "start_point": [202, 21], "end_point": [202, 22], "text": "\""}, {"type": "if_expression", "children": [{"type": "if", "children": [], "start_byte": 7405, "end_byte": 7407, "start_point": [202, 23], "end_point": [202, 25], "text": " |"}, {"type": "binary_expression", "children": [{"type": "identifier", "children": [], "start_byte": 7408, "end_byte": 7422, "start_point": [202, 26], "end_point": [202, 40], "text": " prog_name_str"}, {"type": "==", "children": [], "start_byte": 7423, "end_byte": 7425, "start_point": [202, 41], "end_point": [202, 43], "text": "co"}, {"type": "integer_literal", "children": [], "start_byte": 7426, "end_byte": 7427, "start_point": [202, 44], "end_point": [202, 45], "text": "t"}], "start_byte": 7408, "end_byte": 7427, "start_point": [202, 26], "end_point": [202, 45], "text": " prog_name_str.cont"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 7428, "end_byte": 7429, "start_point": [202, 46], "end_point": [202, 47], "text": "i"}, {"type": "integer_literal", "children": [], "start_byte": 7430, "end_byte": 7431, "start_point": [202, 48], "end_point": [202, 49], "text": "s"}, {"type": "}", "children": [], "start_byte": 7432, "end_byte": 7433, "start_point": [202, 50], "end_point": [202, 51], "text": "\""}], "start_byte": 7428, "end_byte": 7433, "start_point": [202, 46], "end_point": [202, 51], "text": "ins(\""}, {"type": "else_clause", "children": [{"type": "else", "children": [], "start_byte": 7434, "end_byte": 7438, "start_point": [202, 52], "end_point": [202, 56], "text": "cat\""}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 7439, "end_byte": 7440, "start_point": [202, 57], "end_point": [202, 58], "text": " "}, {"type": "integer_literal", "children": [], "start_byte": 7441, "end_byte": 7442, "start_point": [202, 59], "end_point": [202, 60], "text": "|"}, {"type": "}", "children": [], "start_byte": 7443, "end_byte": 7444, "start_point": [202, 61], "end_point": [202, 62], "text": "p"}], "start_byte": 7439, "end_byte": 7444, "start_point": [202, 57], "end_point": [202, 62], "text": " || p"}], "start_byte": 7434, "end_byte": 7444, "start_point": [202, 52], "end_point": [202, 62], "text": "cat\") || p"}], "start_byte": 7405, "end_byte": 7444, "start_point": [202, 23], "end_point": [202, 62], "text": " || prog_name_str.contains(\"zcat\") || p"}], "start_byte": 7394, "end_byte": 7444, "start_point": [202, 12], "end_point": [202, 62], "text": "ns(\"Z2CAT\") || prog_name_str.contains(\"zcat\") || p"}, {"type": ";", "children": [], "start_byte": 7444, "end_byte": 7445, "start_point": [202, 62], "end_point": [202, 63], "text": "r"}], "start_byte": 7394, "end_byte": 7445, "start_point": [202, 12], "end_point": [202, 63], "text": "ns(\"Z2CAT\") || prog_name_str.contains(\"zcat\") || pr"}, {"type": "}", "children": [], "start_byte": 7445, "end_byte": 7446, "start_point": [202, 63], "end_point": [202, 64], "text": "o"}], "start_byte": 7393, "end_byte": 7446, "start_point": [202, 11], "end_point": [202, 64], "text": "ins(\"Z2CAT\") || prog_name_str.contains(\"zcat\") || pro"}], "start_byte": 7386, "end_byte": 7446, "start_point": [202, 4], "end_point": [202, 64], "text": "r.contains(\"Z2CAT\") || prog_name_str.contains(\"zcat\") || pro"}], "start_byte": 7386, "end_byte": 7446, "start_point": [202, 4], "end_point": [202, 64], "text": "r.contains(\"Z2CAT\") || prog_name_str.contains(\"zcat\") || pro"}, {"type": "expression_statement", "children": [{"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 7451, "end_byte": 7457, "start_point": [203, 4], "end_point": [203, 10], "text": "e_str."}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 7458, "end_byte": 7459, "start_point": [203, 11], "end_point": [203, 12], "text": "o"}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 7459, "end_byte": 7466, "start_point": [203, 12], "end_point": [203, 19], "text": "ntains("}, {"type": "=", "children": [], "start_byte": 7467, "end_byte": 7468, "start_point": [203, 20], "end_point": [203, 21], "text": "Z"}, {"type": "integer_literal", "children": [], "start_byte": 7469, "end_byte": 7470, "start_point": [203, 22], "end_point": [203, 23], "text": "A"}], "start_byte": 7459, "end_byte": 7470, "start_point": [203, 12], "end_point": [203, 23], "text": "ntains(\"ZCA"}, {"type": ";", "children": [], "start_byte": 7470, "end_byte": 7471, "start_point": [203, 23], "end_point": [203, 24], "text": "T"}], "start_byte": 7459, "end_byte": 7471, "start_point": [203, 12], "end_point": [203, 24], "text": "ntains(\"ZCAT"}, {"type": "}", "children": [], "start_byte": 7471, "end_byte": 7472, "start_point": [203, 24], "end_point": [203, 25], "text": "\""}], "start_byte": 7458, "end_byte": 7472, "start_point": [203, 11], "end_point": [203, 25], "text": "ontains(\"ZCAT\""}], "start_byte": 7451, "end_byte": 7472, "start_point": [203, 4], "end_point": [203, 25], "text": "e_str.contains(\"ZCAT\""}], "start_byte": 7451, "end_byte": 7472, "start_point": [203, 4], "end_point": [203, 25], "text": "e_str.contains(\"ZCAT\""}, {"type": "expression_statement", "children": [{"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 7477, "end_byte": 7483, "start_point": [204, 4], "end_point": [204, 10], "text": "      "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 7484, "end_byte": 7485, "start_point": [204, 11], "end_point": [204, 12], "text": " "}, {"type": "let_declaration", "children": [{"type": "let", "children": [], "start_byte": 7494, "end_byte": 7497, "start_point": [205, 8], "end_point": [205, 11], "text": "E ="}, {"type": "mutable_specifier", "children": [], "start_byte": 7498, "end_byte": 7501, "start_point": [205, 12], "end_point": [205, 15], "text": "2;\n"}, {"type": "identifier", "children": [], "start_byte": 7502, "end_byte": 7515, "start_point": [205, 16], "end_point": [205, 29], "text": "       }\n    "}, {"type": "=", "children": [], "start_byte": 7516, "end_byte": 7517, "start_point": [205, 30], "end_point": [205, 31], "text": "\n"}, {"type": "call_expression", "children": [{"type": "identifier", "children": [], "start_byte": 7518, "end_byte": 7536, "start_point": [205, 32], "end_point": [205, 50], "text": "\n    // \u904d\u5386arg_list"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 7536, "end_byte": 7537, "start_point": [205, 50], "end_point": [205, 51], "text": "\u5904"}, {"type": "reference_expression", "children": [{"type": "&", "children": [], "start_byte": 7537, "end_byte": 7538, "start_point": [205, 51], "end_point": [205, 52], "text": "\u7406"}, {"type": "identifier", "children": [], "start_byte": 7538, "end_byte": 7547, "start_point": [205, 52], "end_point": [205, 61], "text": "\u6bcf\u4e2a\u547d\u4ee4\u884c\u53c2\u6570\n "}], "start_byte": 7537, "end_byte": 7547, "start_point": [205, 51], "end_point": [205, 61], "text": "\u7406\u6bcf\u4e2a\u547d\u4ee4\u884c\u53c2\u6570\n "}, {"type": ")", "children": [], "start_byte": 7547, "end_byte": 7548, "start_point": [205, 61], "end_point": [205, 62], "text": " "}], "start_byte": 7536, "end_byte": 7548, "start_point": [205, 50], "end_point": [205, 62], "text": "\u5904\u7406\u6bcf\u4e2a\u547d\u4ee4\u884c\u53c2\u6570\n  "}], "start_byte": 7518, "end_byte": 7548, "start_point": [205, 32], "end_point": [205, 62], "text": "\n    // \u904d\u5386arg_list\u5904\u7406\u6bcf\u4e2a\u547d\u4ee4\u884c\u53c2\u6570\n  "}, {"type": ";", "children": [], "start_byte": 7548, "end_byte": 7549, "start_point": [205, 62], "end_point": [205, 63], "text": " "}], "start_byte": 7494, "end_byte": 7549, "start_point": [205, 8], "end_point": [205, 63], "text": "E = 2;\n        }\n    }\n\n\n    // \u904d\u5386arg_list\u5904\u7406\u6bcf\u4e2a\u547d\u4ee4\u884c\u53c2\u6570\n   "}, {"type": "expression_statement", "children": [{"type": "if_expression", "children": [{"type": "if", "children": [], "start_byte": 7558, "end_byte": 7560, "start_point": [206, 8], "end_point": [206, 10], "text": "aa"}, {"type": "binary_expression", "children": [{"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 7561, "end_byte": 7574, "start_point": [206, 11], "end_point": [206, 24], "text": "= &arg_list;\n"}, {"type": ".", "children": [], "start_byte": 7574, "end_byte": 7575, "start_point": [206, 24], "end_point": [206, 25], "text": " "}, {"type": "field_identifier", "children": [], "start_byte": 7575, "end_byte": 7583, "start_point": [206, 25], "end_point": [206, 33], "text": "   while"}], "start_byte": 7561, "end_byte": 7583, "start_point": [206, 11], "end_point": [206, 33], "text": "= &arg_list;\n    while"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 7583, "end_byte": 7584, "start_point": [206, 33], "end_point": [206, 34], "text": " "}, {"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 7584, "end_byte": 7585, "start_point": [206, 34], "end_point": [206, 35], "text": "l"}, {"type": "\"", "children": [], "start_byte": 7590, "end_byte": 7591, "start_point": [206, 40], "end_point": [206, 41], "text": "m"}], "start_byte": 7584, "end_byte": 7591, "start_point": [206, 34], "end_point": [206, 41], "text": "let Som"}, {"type": ")", "children": [], "start_byte": 7591, "end_byte": 7592, "start_point": [206, 41], "end_point": [206, 42], "text": "e"}], "start_byte": 7583, "end_byte": 7592, "start_point": [206, 33], "end_point": [206, 42], "text": " let Some"}], "start_byte": 7561, "end_byte": 7592, "start_point": [206, 11], "end_point": [206, 42], "text": "= &arg_list;\n    while let Some"}, {"type": "||", "children": [], "start_byte": 7593, "end_byte": 7595, "start_point": [206, 43], "end_point": [206, 45], "text": "ce"}, {"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 7596, "end_byte": 7609, "start_point": [206, 46], "end_point": [206, 59], "text": "l) = aa {\n   "}, {"type": ".", "children": [], "start_byte": 7609, "end_byte": 7610, "start_point": [206, 59], "end_point": [206, 60], "text": " "}, {"type": "field_identifier", "children": [], "start_byte": 7610, "end_byte": 7618, "start_point": [206, 60], "end_point": [206, 68], "text": "    if l"}], "start_byte": 7596, "end_byte": 7618, "start_point": [206, 46], "end_point": [206, 68], "text": "l) = aa {\n        if l"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 7618, "end_byte": 7619, "start_point": [206, 68], "end_point": [206, 69], "text": "e"}, {"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 7619, "end_byte": 7620, "start_point": [206, 69], "end_point": [206, 70], "text": "t"}, {"type": "\"", "children": [], "start_byte": 7625, "end_byte": 7626, "start_point": [206, 75], "end_point": [206, 76], "text": "("}], "start_byte": 7619, "end_byte": 7626, "start_point": [206, 69], "end_point": [206, 76], "text": "t Some("}, {"type": ")", "children": [], "start_byte": 7626, "end_byte": 7627, "start_point": [206, 76], "end_point": [206, 77], "text": "n"}], "start_byte": 7618, "end_byte": 7627, "start_point": [206, 68], "end_point": [206, 77], "text": "et Some(n"}], "start_byte": 7596, "end_byte": 7627, "start_point": [206, 46], "end_point": [206, 77], "text": "l) = aa {\n        if let Some(n"}], "start_byte": 7561, "end_byte": 7627, "start_point": [206, 11], "end_point": [206, 77], "text": "= &arg_list;\n    while let Some(cell) = aa {\n        if let Some(n"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 7628, "end_byte": 7629, "start_point": [206, 78], "end_point": [206, 79], "text": "m"}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 7642, "end_byte": 7649, "start_point": [207, 12], "end_point": [207, 19], "text": "me {\n  "}, {"type": "=", "children": [], "start_byte": 7650, "end_byte": 7651, "start_point": [207, 20], "end_point": [207, 21], "text": " "}, {"type": "integer_literal", "children": [], "start_byte": 7652, "end_byte": 7653, "start_point": [207, 22], "end_point": [207, 23], "text": " "}], "start_byte": 7642, "end_byte": 7653, "start_point": [207, 12], "end_point": [207, 23], "text": "me {\n      "}, {"type": ";", "children": [], "start_byte": 7653, "end_byte": 7654, "start_point": [207, 23], "end_point": [207, 24], "text": " "}], "start_byte": 7642, "end_byte": 7654, "start_point": [207, 12], "end_point": [207, 24], "text": "me {\n       "}, {"type": "}", "children": [], "start_byte": 7663, "end_byte": 7664, "start_point": [208, 8], "end_point": [208, 9], "text": "a"}], "start_byte": 7628, "end_byte": 7664, "start_point": [206, 78], "end_point": [208, 9], "text": "me) = &cell.name {\n            if na"}], "start_byte": 7558, "end_byte": 7664, "start_point": [206, 8], "end_point": [208, 9], "text": "aa = &arg_list;\n    while let Some(cell) = aa {\n        if let Some(name) = &cell.name {\n            if na"}], "start_byte": 7558, "end_byte": 7664, "start_point": [206, 8], "end_point": [208, 9], "text": "aa = &arg_list;\n    while let Some(cell) = aa {\n        if let Some(name) = &cell.name {\n            if na"}, {"type": "expression_statement", "children": [{"type": "if_expression", "children": [{"type": "if", "children": [], "start_byte": 7673, "end_byte": 7675, "start_point": [209, 8], "end_point": [209, 10], "text": "()"}, {"type": "binary_expression", "children": [{"type": "binary_expression", "children": [{"type": "binary_expression", "children": [{"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 7676, "end_byte": 7689, "start_point": [209, 11], "end_point": [209, 24], "text": "== \"--\"  {\n  "}, {"type": ".", "children": [], "start_byte": 7689, "end_byte": 7690, "start_point": [209, 24], "end_point": [209, 25], "text": " "}, {"type": "field_identifier", "children": [], "start_byte": 7690, "end_byte": 7698, "start_point": [209, 25], "end_point": [209, 33], "text": "        "}], "start_byte": 7676, "end_byte": 7698, "start_point": [209, 11], "end_point": [209, 33], "text": "== \"--\"  {\n           "}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 7698, "end_byte": 7699, "start_point": [209, 33], "end_point": [209, 34], "text": " "}, {"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 7699, "end_byte": 7700, "start_point": [209, 34], "end_point": [209, 35], "text": " "}, {"type": "\"", "children": [], "start_byte": 7705, "end_byte": 7706, "start_point": [209, 40], "end_point": [209, 41], "text": "e"}], "start_byte": 7699, "end_byte": 7706, "start_point": [209, 34], "end_point": [209, 41], "text": "    bre"}, {"type": ")", "children": [], "start_byte": 7706, "end_byte": 7707, "start_point": [209, 41], "end_point": [209, 42], "text": "a"}], "start_byte": 7698, "end_byte": 7707, "start_point": [209, 33], "end_point": [209, 42], "text": "     brea"}], "start_byte": 7676, "end_byte": 7707, "start_point": [209, 11], "end_point": [209, 42], "text": "== \"--\"  {\n                brea"}, {"type": "||", "children": [], "start_byte": 7708, "end_byte": 7710, "start_point": [209, 43], "end_point": [209, 45], "text": ";\n"}, {"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 7711, "end_byte": 7724, "start_point": [209, 46], "end_point": [209, 59], "text": "           }\n"}, {"type": ".", "children": [], "start_byte": 7724, "end_byte": 7725, "start_point": [209, 59], "end_point": [209, 60], "text": "\n"}, {"type": "field_identifier", "children": [], "start_byte": 7725, "end_byte": 7733, "start_point": [209, 60], "end_point": [209, 68], "text": "        "}], "start_byte": 7711, "end_byte": 7733, "start_point": [209, 46], "end_point": [209, 68], "text": "           }\n\n        "}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 7733, "end_byte": 7734, "start_point": [209, 68], "end_point": [209, 69], "text": " "}, {"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 7734, "end_byte": 7735, "start_point": [209, 69], "end_point": [209, 70], "text": " "}, {"type": "\"", "children": [], "start_byte": 7740, "end_byte": 7741, "start_point": [209, 75], "end_point": [209, 76], "text": "n"}], "start_byte": 7734, "end_byte": 7741, "start_point": [209, 69], "end_point": [209, 76], "text": "   if n"}, {"type": ")", "children": [], "start_byte": 7741, "end_byte": 7742, "start_point": [209, 76], "end_point": [209, 77], "text": "a"}], "start_byte": 7733, "end_byte": 7742, "start_point": [209, 68], "end_point": [209, 77], "text": "    if na"}], "start_byte": 7711, "end_byte": 7742, "start_point": [209, 46], "end_point": [209, 77], "text": "           }\n\n            if na"}], "start_byte": 7676, "end_byte": 7742, "start_point": [209, 11], "end_point": [209, 77], "text": "== \"--\"  {\n                break;\n            }\n\n            if na"}, {"type": "||", "children": [], "start_byte": 7743, "end_byte": 7745, "start_point": [209, 78], "end_point": [209, 80], "text": "e."}, {"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 7746, "end_byte": 7759, "start_point": [209, 81], "end_point": [209, 94], "text": "tarts_with('-"}, {"type": ".", "children": [], "start_byte": 7759, "end_byte": 7760, "start_point": [209, 94], "end_point": [209, 95], "text": "'"}, {"type": "field_identifier", "children": [], "start_byte": 7760, "end_byte": 7768, "start_point": [209, 95], "end_point": [209, 103], "text": ") && !na"}], "start_byte": 7746, "end_byte": 7768, "start_point": [209, 81], "end_point": [209, 103], "text": "tarts_with('-') && !na"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 7768, "end_byte": 7769, "start_point": [209, 103], "end_point": [209, 104], "text": "m"}, {"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 7769, "end_byte": 7770, "start_point": [209, 104], "end_point": [209, 105], "text": "e"}, {"type": "\"", "children": [], "start_byte": 7774, "end_byte": 7775, "start_point": [209, 109], "end_point": [209, 110], "text": "r"}], "start_byte": 7769, "end_byte": 7775, "start_point": [209, 104], "end_point": [209, 110], "text": "e.star"}, {"type": ")", "children": [], "start_byte": 7775, "end_byte": 7776, "start_point": [209, 110], "end_point": [209, 111], "text": "t"}], "start_byte": 7768, "end_byte": 7776, "start_point": [209, 103], "end_point": [209, 111], "text": "me.start"}], "start_byte": 7746, "end_byte": 7776, "start_point": [209, 81], "end_point": [209, 111], "text": "tarts_with('-') && !name.start"}], "start_byte": 7676, "end_byte": 7776, "start_point": [209, 11], "end_point": [209, 111], "text": "== \"--\"  {\n                break;\n            }\n\n            if name.starts_with('-') && !name.start"}, {"type": "||", "children": [], "start_byte": 7777, "end_byte": 7779, "start_point": [209, 112], "end_point": [209, 114], "text": "_w"}, {"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 7780, "end_byte": 7793, "start_point": [209, 115], "end_point": [209, 128], "text": "th(\"--\") {\n  "}, {"type": ".", "children": [], "start_byte": 7793, "end_byte": 7794, "start_point": [209, 128], "end_point": [209, 129], "text": " "}, {"type": "field_identifier", "children": [], "start_byte": 7794, "end_byte": 7802, "start_point": [209, 129], "end_point": [209, 137], "text": "        "}], "start_byte": 7780, "end_byte": 7802, "start_point": [209, 115], "end_point": [209, 137], "text": "th(\"--\") {\n           "}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 7802, "end_byte": 7803, "start_point": [209, 137], "end_point": [209, 138], "text": " "}, {"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 7803, "end_byte": 7804, "start_point": [209, 138], "end_point": [209, 139], "text": " "}, {"type": "\"", "children": [], "start_byte": 7808, "end_byte": 7809, "start_point": [209, 143], "end_point": [209, 144], "text": "o"}], "start_byte": 7803, "end_byte": 7809, "start_point": [209, 138], "end_point": [209, 144], "text": "    fo"}, {"type": ")", "children": [], "start_byte": 7809, "end_byte": 7810, "start_point": [209, 144], "end_point": [209, 145], "text": "r"}], "start_byte": 7802, "end_byte": 7810, "start_point": [209, 137], "end_point": [209, 145], "text": "     for"}], "start_byte": 7780, "end_byte": 7810, "start_point": [209, 115], "end_point": [209, 145], "text": "th(\"--\") {\n                for"}], "start_byte": 7676, "end_byte": 7810, "start_point": [209, 11], "end_point": [209, 145], "text": "== \"--\"  {\n                break;\n            }\n\n            if name.starts_with('-') && !name.starts_with(\"--\") {\n                for"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 7811, "end_byte": 7812, "start_point": [209, 146], "end_point": [209, 147], "text": "c"}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 7825, "end_byte": 7832, "start_point": [210, 12], "end_point": [210, 19], "text": "rs().sk"}, {"type": "=", "children": [], "start_byte": 7833, "end_byte": 7834, "start_point": [210, 20], "end_point": [210, 21], "text": "p"}, {"type": "integer_literal", "children": [], "start_byte": 7835, "end_byte": 7836, "start_point": [210, 22], "end_point": [210, 23], "text": "1"}], "start_byte": 7825, "end_byte": 7836, "start_point": [210, 12], "end_point": [210, 23], "text": "rs().skip(1"}, {"type": ";", "children": [], "start_byte": 7836, "end_byte": 7837, "start_point": [210, 23], "end_point": [210, 24], "text": ")"}], "start_byte": 7825, "end_byte": 7837, "start_point": [210, 12], "end_point": [210, 24], "text": "rs().skip(1)"}, {"type": "}", "children": [], "start_byte": 7846, "end_byte": 7847, "start_point": [211, 8], "end_point": [211, 9], "text": " "}], "start_byte": 7811, "end_byte": 7847, "start_point": [209, 146], "end_point": [211, 9], "text": "ch in name.chars().skip(1) {\n       "}], "start_byte": 7673, "end_byte": 7847, "start_point": [209, 8], "end_point": [211, 9], "text": "() == \"--\"  {\n                break;\n            }\n\n            if name.starts_with('-') && !name.starts_with(\"--\") {\n                for ch in name.chars().skip(1) {\n       "}], "start_byte": 7673, "end_byte": 7847, "start_point": [209, 8], "end_point": [211, 9], "text": "() == \"--\"  {\n                break;\n            }\n\n            if name.starts_with('-') && !name.starts_with(\"--\") {\n                for ch in name.chars().skip(1) {\n       "}, {"type": "}", "children": [], "start_byte": 7852, "end_byte": 7853, "start_point": [212, 4], "end_point": [212, 5], "text": " "}], "start_byte": 7484, "end_byte": 7853, "start_point": [204, 11], "end_point": [212, 5], "text": "    OP_MODE = 2;\n        }\n    }\n\n\n    // \u904d\u5386arg_list\u5904\u7406\u6bcf\u4e2a\u547d\u4ee4\u884c\u53c2\u6570\n    let mut aa = &arg_list;\n    while let Some(cell) = aa {\n        if let Some(name) = &cell.name {\n            if name.as_str() == \"--\"  {\n                break;\n            }\n\n            if name.starts_with('-') && !name.starts_with(\"--\") {\n                for ch in name.chars().skip(1) {\n             "}], "start_byte": 7477, "end_byte": 7853, "start_point": [204, 4], "end_point": [212, 5], "text": "           OP_MODE = 2;\n        }\n    }\n\n\n    // \u904d\u5386arg_list\u5904\u7406\u6bcf\u4e2a\u547d\u4ee4\u884c\u53c2\u6570\n    let mut aa = &arg_list;\n    while let Some(cell) = aa {\n        if let Some(name) = &cell.name {\n            if name.as_str() == \"--\"  {\n                break;\n            }\n\n            if name.starts_with('-') && !name.starts_with(\"--\") {\n                for ch in name.chars().skip(1) {\n             "}], "start_byte": 7477, "end_byte": 7853, "start_point": [204, 4], "end_point": [212, 5], "text": "           OP_MODE = 2;\n        }\n    }\n\n\n    // \u904d\u5386arg_list\u5904\u7406\u6bcf\u4e2a\u547d\u4ee4\u884c\u53c2\u6570\n    let mut aa = &arg_list;\n    while let Some(cell) = aa {\n        if let Some(name) = &cell.name {\n            if name.as_str() == \"--\"  {\n                break;\n            }\n\n            if name.starts_with('-') && !name.starts_with(\"--\") {\n                for ch in name.chars().skip(1) {\n             "}, {"type": "line_comment", "children": [], "start_byte": 7860, "end_byte": 7904, "start_point": [215, 4], "end_point": [215, 48], "text": "match ch {\n                        'c' => un"}, {"type": "let_declaration", "children": [{"type": "let", "children": [], "start_byte": 7909, "end_byte": 7912, "start_point": [216, 4], "end_point": [216, 7], "text": "{ S"}, {"type": "mutable_specifier", "children": [], "start_byte": 7913, "end_byte": 7916, "start_point": [216, 8], "end_point": [216, 11], "text": "C_M"}, {"type": "identifier", "children": [], "start_byte": 7917, "end_byte": 7919, "start_point": [216, 12], "end_point": [216, 14], "text": "DE"}, {"type": "=", "children": [], "start_byte": 7920, "end_byte": 7921, "start_point": [216, 15], "end_point": [216, 16], "text": "="}, {"type": "reference_expression", "children": [{"type": "&", "children": [], "start_byte": 7922, "end_byte": 7923, "start_point": [216, 17], "end_point": [216, 18], "text": "2"}, {"type": "identifier", "children": [], "start_byte": 7923, "end_byte": 7931, "start_point": [216, 18], "end_point": [216, 26], "text": "; },\n   "}], "start_byte": 7922, "end_byte": 7931, "start_point": [216, 17], "end_point": [216, 26], "text": "2; },\n   "}, {"type": ";", "children": [], "start_byte": 7931, "end_byte": 7932, "start_point": [216, 26], "end_point": [216, 27], "text": " "}], "start_byte": 7909, "end_byte": 7932, "start_point": [216, 4], "end_point": [216, 27], "text": "{ SRC_MODE = 2; },\n    "}, {"type": "expression_statement", "children": [{"type": "while_expression", "children": [{"type": "while", "children": [], "start_byte": 7937, "end_byte": 7942, "start_point": [217, 4], "end_point": [217, 9], "text": "     "}, {"type": "let_condition", "children": [{"type": "let", "children": [], "start_byte": 7943, "end_byte": 7946, "start_point": [217, 10], "end_point": [217, 13], "text": "   "}, {"type": "tuple_struct_pattern", "children": [{"type": "identifier", "children": [], "start_byte": 7947, "end_byte": 7951, "start_point": [217, 14], "end_point": [217, 18], "text": "    "}, {"type": "(", "children": [], "start_byte": 7951, "end_byte": 7952, "start_point": [217, 18], "end_point": [217, 19], "text": " "}, {"type": "identifier", "children": [], "start_byte": 7952, "end_byte": 7956, "start_point": [217, 19], "end_point": [217, 23], "text": "'d' "}, {"type": ")", "children": [], "start_byte": 7956, "end_byte": 7957, "start_point": [217, 23], "end_point": [217, 24], "text": "="}], "start_byte": 7947, "end_byte": 7957, "start_point": [217, 14], "end_point": [217, 24], "text": "     'd' ="}, {"type": "=", "children": [], "start_byte": 7958, "end_byte": 7959, "start_point": [217, 25], "end_point": [217, 26], "text": " "}, {"type": "identifier", "children": [], "start_byte": 7960, "end_byte": 7962, "start_point": [217, 27], "end_point": [217, 29], "text": "ns"}], "start_byte": 7943, "end_byte": 7962, "start_point": [217, 10], "end_point": [217, 29], "text": "         'd' => uns"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 7963, "end_byte": 7964, "start_point": [217, 30], "end_point": [217, 31], "text": "f"}, {"type": "expression_statement", "children": [{"type": "if_expression", "children": [{"type": "if", "children": [], "start_byte": 7973, "end_byte": 7975, "start_point": [218, 8], "end_point": [218, 10], "text": "DE"}, {"type": "let_condition", "children": [{"type": "let", "children": [], "start_byte": 7976, "end_byte": 7979, "start_point": [218, 11], "end_point": [218, 14], "text": "= 2"}, {"type": "tuple_struct_pattern", "children": [{"type": "identifier", "children": [], "start_byte": 7980, "end_byte": 7984, "start_point": [218, 15], "end_point": [218, 19], "text": " },\n"}, {"type": "(", "children": [], "start_byte": 7984, "end_byte": 7985, "start_point": [218, 19], "end_point": [218, 20], "text": " "}, {"type": "identifier", "children": [], "start_byte": 7985, "end_byte": 7989, "start_point": [218, 20], "end_point": [218, 24], "text": "    "}, {"type": ")", "children": [], "start_byte": 7989, "end_byte": 7990, "start_point": [218, 24], "end_point": [218, 25], "text": " "}], "start_byte": 7980, "end_byte": 7990, "start_point": [218, 15], "end_point": [218, 25], "text": " },\n      "}, {"type": "=", "children": [], "start_byte": 7991, "end_byte": 7992, "start_point": [218, 26], "end_point": [218, 27], "text": " "}, {"type": "reference_expression", "children": [{"type": "&", "children": [], "start_byte": 7993, "end_byte": 7994, "start_point": [218, 28], "end_point": [218, 29], "text": " "}, {"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 7994, "end_byte": 7998, "start_point": [218, 29], "end_point": [218, 33], "text": "    "}, {"type": ".", "children": [], "start_byte": 7998, "end_byte": 7999, "start_point": [218, 33], "end_point": [218, 34], "text": " "}, {"type": "field_identifier", "children": [], "start_byte": 7999, "end_byte": 8003, "start_point": [218, 34], "end_point": [218, 38], "text": "    "}], "start_byte": 7994, "end_byte": 8003, "start_point": [218, 29], "end_point": [218, 38], "text": "         "}], "start_byte": 7993, "end_byte": 8003, "start_point": [218, 28], "end_point": [218, 38], "text": "          "}], "start_byte": 7976, "end_byte": 8003, "start_point": [218, 11], "end_point": [218, 38], "text": "= 2; },\n                   "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 8004, "end_byte": 8005, "start_point": [218, 39], "end_point": [218, 40], "text": " "}, {"type": "expression_statement", "children": [{"type": "if_expression", "children": [{"type": "if", "children": [], "start_byte": 8018, "end_byte": 8020, "start_point": [219, 12], "end_point": [219, 14], "text": "af"}, {"type": "binary_expression", "children": [{"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 8021, "end_byte": 8025, "start_point": [219, 15], "end_point": [219, 19], "text": " { O"}, {"type": ".", "children": [], "start_byte": 8025, "end_byte": 8026, "start_point": [219, 19], "end_point": [219, 20], "text": "P"}, {"type": "field_identifier", "children": [], "start_byte": 8026, "end_byte": 8032, "start_point": [219, 20], "end_point": [219, 26], "text": "_MODE "}], "start_byte": 8021, "end_byte": 8032, "start_point": [219, 15], "end_point": [219, 26], "text": " { OP_MODE "}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 8032, "end_byte": 8033, "start_point": [219, 26], "end_point": [219, 27], "text": "="}, {"type": ")", "children": [], "start_byte": 8033, "end_byte": 8034, "start_point": [219, 27], "end_point": [219, 28], "text": " "}], "start_byte": 8032, "end_byte": 8034, "start_point": [219, 26], "end_point": [219, 28], "text": "= "}], "start_byte": 8021, "end_byte": 8034, "start_point": [219, 15], "end_point": [219, 28], "text": " { OP_MODE = "}, {"type": "==", "children": [], "start_byte": 8035, "end_byte": 8037, "start_point": [219, 29], "end_point": [219, 31], "text": "; "}, {"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 8038, "end_byte": 8039, "start_point": [219, 32], "end_point": [219, 33], "text": ","}, {"type": "\"", "children": [], "start_byte": 8041, "end_byte": 8042, "start_point": [219, 35], "end_point": [219, 36], "text": " "}], "start_byte": 8038, "end_byte": 8042, "start_point": [219, 32], "end_point": [219, 36], "text": ",\n  "}], "start_byte": 8021, "end_byte": 8042, "start_point": [219, 15], "end_point": [219, 36], "text": " { OP_MODE = 1; },\n  "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 8044, "end_byte": 8045, "start_point": [219, 38], "end_point": [219, 39], "text": " "}, {"type": "expression_statement", "children": [{"type": "break_expression", "children": [{"type": "break", "children": [], "start_byte": 8062, "end_byte": 8067, "start_point": [220, 16], "end_point": [220, 21], "text": "  'f'"}], "start_byte": 8062, "end_byte": 8067, "start_point": [220, 16], "end_point": [220, 21], "text": "  'f'"}, {"type": ";", "children": [], "start_byte": 8067, "end_byte": 8068, "start_point": [220, 21], "end_point": [220, 22], "text": " "}], "start_byte": 8062, "end_byte": 8068, "start_point": [220, 16], "end_point": [220, 22], "text": "  'f' "}, {"type": "}", "children": [], "start_byte": 8081, "end_byte": 8082, "start_point": [221, 12], "end_point": [221, 13], "text": "O"}], "start_byte": 8044, "end_byte": 8082, "start_point": [219, 38], "end_point": [221, 13], "text": "                    'f' => unsafe { FO"}], "start_byte": 8018, "end_byte": 8082, "start_point": [219, 12], "end_point": [221, 13], "text": "afe { OP_MODE = 1; },\n                        'f' => unsafe { FO"}], "start_byte": 8018, "end_byte": 8082, "start_point": [219, 12], "end_point": [221, 13], "text": "afe { OP_MODE = 1; },\n                        'f' => unsafe { FO"}, {"type": "expression_statement", "children": [{"type": "if_expression", "children": [{"type": "if", "children": [], "start_byte": 8096, "end_byte": 8098, "start_point": [223, 12], "end_point": [223, 14], "text": "= "}, {"type": "binary_expression", "children": [{"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 8099, "end_byte": 8103, "start_point": [223, 15], "end_point": [223, 19], "text": "rue;"}, {"type": ".", "children": [], "start_byte": 8103, "end_byte": 8104, "start_point": [223, 19], "end_point": [223, 20], "text": " "}, {"type": "field_identifier", "children": [], "start_byte": 8104, "end_byte": 8115, "start_point": [223, 20], "end_point": [223, 31], "text": "},\n        "}], "start_byte": 8099, "end_byte": 8115, "start_point": [223, 15], "end_point": [223, 31], "text": "rue; },\n        "}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 8115, "end_byte": 8116, "start_point": [223, 31], "end_point": [223, 32], "text": " "}, {"type": "char_literal", "children": [], "start_byte": 8116, "end_byte": 8119, "start_point": [223, 32], "end_point": [223, 35], "text": "   "}, {"type": ")", "children": [], "start_byte": 8119, "end_byte": 8120, "start_point": [223, 35], "end_point": [223, 36], "text": " "}], "start_byte": 8115, "end_byte": 8120, "start_point": [223, 31], "end_point": [223, 36], "text": "     "}], "start_byte": 8099, "end_byte": 8120, "start_point": [223, 15], "end_point": [223, 36], "text": "rue; },\n             "}, {"type": "&&", "children": [], "start_byte": 8121, "end_byte": 8123, "start_point": [223, 37], "end_point": [223, 39], "text": "  "}, {"type": "unary_expression", "children": [{"type": "!", "children": [], "start_byte": 8124, "end_byte": 8125, "start_point": [223, 40], "end_point": [223, 41], "text": " "}, {"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 8125, "end_byte": 8129, "start_point": [223, 41], "end_point": [223, 45], "text": "    "}, {"type": ".", "children": [], "start_byte": 8129, "end_byte": 8130, "start_point": [223, 45], "end_point": [223, 46], "text": " "}, {"type": "field_identifier", "children": [], "start_byte": 8130, "end_byte": 8141, "start_point": [223, 46], "end_point": [223, 57], "text": " 't' => uns"}], "start_byte": 8125, "end_byte": 8141, "start_point": [223, 41], "end_point": [223, 57], "text": "      't' => uns"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 8141, "end_byte": 8142, "start_point": [223, 57], "end_point": [223, 58], "text": "a"}, {"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 8142, "end_byte": 8143, "start_point": [223, 58], "end_point": [223, 59], "text": "f"}, {"type": "\"", "children": [], "start_byte": 8145, "end_byte": 8146, "start_point": [223, 61], "end_point": [223, 62], "text": "{"}], "start_byte": 8142, "end_byte": 8146, "start_point": [223, 58], "end_point": [223, 62], "text": "fe {"}, {"type": ")", "children": [], "start_byte": 8146, "end_byte": 8147, "start_point": [223, 62], "end_point": [223, 63], "text": " "}], "start_byte": 8141, "end_byte": 8147, "start_point": [223, 57], "end_point": [223, 63], "text": "afe { "}], "start_byte": 8125, "end_byte": 8147, "start_point": [223, 41], "end_point": [223, 63], "text": "      't' => unsafe { "}], "start_byte": 8124, "end_byte": 8147, "start_point": [223, 40], "end_point": [223, 63], "text": "       't' => unsafe { "}], "start_byte": 8099, "end_byte": 8147, "start_point": [223, 15], "end_point": [223, 63], "text": "rue; },\n                        't' => unsafe { "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 8148, "end_byte": 8149, "start_point": [223, 64], "end_point": [223, 65], "text": "P"}, {"type": "expression_statement", "children": [{"type": "for_expression", "children": [{"type": "for", "children": [], "start_byte": 8166, "end_byte": 8169, "start_point": [224, 16], "end_point": [224, 19], "text": "   "}, {"type": "identifier", "children": [], "start_byte": 8170, "end_byte": 8172, "start_point": [224, 20], "end_point": [224, 22], "text": "  "}, {"type": "in", "children": [], "start_byte": 8173, "end_byte": 8175, "start_point": [224, 23], "end_point": [224, 25], "text": "  "}, {"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 8176, "end_byte": 8180, "start_point": [224, 26], "end_point": [224, 30], "text": "    "}, {"type": ".", "children": [], "start_byte": 8180, "end_byte": 8181, "start_point": [224, 30], "end_point": [224, 31], "text": " "}, {"type": "field_identifier", "children": [], "start_byte": 8181, "end_byte": 8186, "start_point": [224, 31], "end_point": [224, 36], "text": "     "}], "start_byte": 8176, "end_byte": 8186, "start_point": [224, 26], "end_point": [224, 36], "text": "          "}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 8186, "end_byte": 8187, "start_point": [224, 36], "end_point": [224, 37], "text": " "}, {"type": ")", "children": [], "start_byte": 8187, "end_byte": 8188, "start_point": [224, 37], "end_point": [224, 38], "text": "'"}], "start_byte": 8186, "end_byte": 8188, "start_point": [224, 36], "end_point": [224, 38], "text": " '"}], "start_byte": 8176, "end_byte": 8188, "start_point": [224, 26], "end_point": [224, 38], "text": "           '"}, {"type": ".", "children": [], "start_byte": 8188, "end_byte": 8189, "start_point": [224, 38], "end_point": [224, 39], "text": "k"}, {"type": "field_identifier", "children": [], "start_byte": 8189, "end_byte": 8193, "start_point": [224, 39], "end_point": [224, 43], "text": "' =>"}], "start_byte": 8176, "end_byte": 8193, "start_point": [224, 26], "end_point": [224, 43], "text": "           'k' =>"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 8193, "end_byte": 8194, "start_point": [224, 43], "end_point": [224, 44], "text": " "}, {"type": "integer_literal", "children": [], "start_byte": 8194, "end_byte": 8195, "start_point": [224, 44], "end_point": [224, 45], "text": "u"}, {"type": ")", "children": [], "start_byte": 8195, "end_byte": 8196, "start_point": [224, 45], "end_point": [224, 46], "text": "n"}], "start_byte": 8193, "end_byte": 8196, "start_point": [224, 43], "end_point": [224, 46], "text": " un"}], "start_byte": 8176, "end_byte": 8196, "start_point": [224, 26], "end_point": [224, 46], "text": "           'k' => un"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 8197, "end_byte": 8198, "start_point": [224, 47], "end_point": [224, 48], "text": "a"}, {"type": "expression_statement", "children": [{"type": "match_expression", "children": [{"type": "match", "children": [], "start_byte": 8219, "end_byte": 8224, "start_point": [225, 20], "end_point": [225, 25], "text": " = tr"}, {"type": "identifier", "children": [], "start_byte": 8225, "end_byte": 8227, "start_point": [225, 26], "end_point": [225, 28], "text": "e;"}, {"type": "match_block", "children": [{"type": "{", "children": [], "start_byte": 8228, "end_byte": 8229, "start_point": [225, 29], "end_point": [225, 30], "text": "}"}, {"type": "match_arm", "children": [{"type": "match_pattern", "children": [{"type": "char_literal", "children": [], "start_byte": 8254, "end_byte": 8257, "start_point": [226, 24], "end_point": [226, 27], "text": " 's"}], "start_byte": 8254, "end_byte": 8257, "start_point": [226, 24], "end_point": [226, 27], "text": " 's"}, {"type": "=>", "children": [], "start_byte": 8258, "end_byte": 8260, "start_point": [226, 28], "end_point": [226, 30], "text": " ="}, {"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 8261, "end_byte": 8267, "start_point": [226, 31], "end_point": [226, 37], "text": " unsaf"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 8268, "end_byte": 8269, "start_point": [226, 38], "end_point": [226, 39], "text": " "}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 8270, "end_byte": 8278, "start_point": [226, 40], "end_point": [226, 48], "text": " SMALL_M"}, {"type": "=", "children": [], "start_byte": 8279, "end_byte": 8280, "start_point": [226, 49], "end_point": [226, 50], "text": "D"}, {"type": "integer_literal", "children": [], "start_byte": 8281, "end_byte": 8282, "start_point": [226, 51], "end_point": [226, 52], "text": " "}], "start_byte": 8270, "end_byte": 8282, "start_point": [226, 40], "end_point": [226, 52], "text": " SMALL_MODE "}, {"type": ";", "children": [], "start_byte": 8282, "end_byte": 8283, "start_point": [226, 52], "end_point": [226, 53], "text": "="}], "start_byte": 8270, "end_byte": 8283, "start_point": [226, 40], "end_point": [226, 53], "text": " SMALL_MODE ="}, {"type": "}", "children": [], "start_byte": 8284, "end_byte": 8285, "start_point": [226, 54], "end_point": [226, 55], "text": "t"}], "start_byte": 8268, "end_byte": 8285, "start_point": [226, 38], "end_point": [226, 55], "text": " { SMALL_MODE = t"}], "start_byte": 8261, "end_byte": 8285, "start_point": [226, 31], "end_point": [226, 55], "text": " unsafe { SMALL_MODE = t"}, {"type": ",", "children": [], "start_byte": 8285, "end_byte": 8286, "start_point": [226, 55], "end_point": [226, 56], "text": "r"}], "start_byte": 8254, "end_byte": 8286, "start_point": [226, 24], "end_point": [226, 56], "text": " 's' => unsafe { SMALL_MODE = tr"}, {"type": "match_arm", "children": [{"type": "match_pattern", "children": [{"type": "char_literal", "children": [], "start_byte": 8311, "end_byte": 8314, "start_point": [227, 24], "end_point": [227, 27], "text": "   "}], "start_byte": 8311, "end_byte": 8314, "start_point": [227, 24], "end_point": [227, 27], "text": "   "}, {"type": "=>", "children": [], "start_byte": 8315, "end_byte": 8317, "start_point": [227, 28], "end_point": [227, 30], "text": "  "}, {"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 8318, "end_byte": 8324, "start_point": [227, 31], "end_point": [227, 37], "text": "q' => "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 8325, "end_byte": 8326, "start_point": [227, 38], "end_point": [227, 39], "text": "n"}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 8327, "end_byte": 8334, "start_point": [227, 40], "end_point": [227, 47], "text": "afe { N"}, {"type": "=", "children": [], "start_byte": 8335, "end_byte": 8336, "start_point": [227, 48], "end_point": [227, 49], "text": "I"}, {"type": "integer_literal", "children": [], "start_byte": 8337, "end_byte": 8338, "start_point": [227, 50], "end_point": [227, 51], "text": "Y"}], "start_byte": 8327, "end_byte": 8338, "start_point": [227, 40], "end_point": [227, 51], "text": "afe { NOISY"}, {"type": ";", "children": [], "start_byte": 8338, "end_byte": 8339, "start_point": [227, 51], "end_point": [227, 52], "text": " "}], "start_byte": 8327, "end_byte": 8339, "start_point": [227, 40], "end_point": [227, 52], "text": "afe { NOISY "}, {"type": "}", "children": [], "start_byte": 8340, "end_byte": 8341, "start_point": [227, 53], "end_point": [227, 54], "text": " "}], "start_byte": 8325, "end_byte": 8341, "start_point": [227, 38], "end_point": [227, 54], "text": "nsafe { NOISY = "}], "start_byte": 8318, "end_byte": 8341, "start_point": [227, 31], "end_point": [227, 54], "text": "q' => unsafe { NOISY = "}, {"type": ",", "children": [], "start_byte": 8341, "end_byte": 8342, "start_point": [227, 54], "end_point": [227, 55], "text": "f"}], "start_byte": 8311, "end_byte": 8342, "start_point": [227, 24], "end_point": [227, 55], "text": "      'q' => unsafe { NOISY = f"}, {"type": "match_arm", "children": [{"type": "match_pattern", "children": [{"type": "char_literal", "children": [], "start_byte": 8367, "end_byte": 8370, "start_point": [228, 24], "end_point": [228, 27], "text": "   "}], "start_byte": 8367, "end_byte": 8370, "start_point": [228, 24], "end_point": [228, 27], "text": "   "}, {"type": "=>", "children": [], "start_byte": 8371, "end_byte": 8373, "start_point": [228, 28], "end_point": [228, 30], "text": "  "}, {"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 8374, "end_byte": 8380, "start_point": [228, 31], "end_point": [228, 37], "text": " '1' ="}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 8381, "end_byte": 8382, "start_point": [228, 38], "end_point": [228, 39], "text": " "}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 8383, "end_byte": 8390, "start_point": [228, 40], "end_point": [228, 47], "text": "nsafe {"}, {"type": "=", "children": [], "start_byte": 8391, "end_byte": 8392, "start_point": [228, 48], "end_point": [228, 49], "text": "b"}, {"type": "integer_literal", "children": [], "start_byte": 8393, "end_byte": 8394, "start_point": [228, 50], "end_point": [228, 51], "text": "o"}], "start_byte": 8383, "end_byte": 8394, "start_point": [228, 40], "end_point": [228, 51], "text": "nsafe { blo"}, {"type": ";", "children": [], "start_byte": 8394, "end_byte": 8395, "start_point": [228, 51], "end_point": [228, 52], "text": "c"}], "start_byte": 8383, "end_byte": 8395, "start_point": [228, 40], "end_point": [228, 52], "text": "nsafe { bloc"}, {"type": "}", "children": [], "start_byte": 8396, "end_byte": 8397, "start_point": [228, 53], "end_point": [228, 54], "text": "S"}], "start_byte": 8381, "end_byte": 8397, "start_point": [228, 38], "end_point": [228, 54], "text": " unsafe { blockS"}], "start_byte": 8374, "end_byte": 8397, "start_point": [228, 31], "end_point": [228, 54], "text": " '1' => unsafe { blockS"}, {"type": ",", "children": [], "start_byte": 8397, "end_byte": 8398, "start_point": [228, 54], "end_point": [228, 55], "text": "i"}], "start_byte": 8367, "end_byte": 8398, "start_point": [228, 24], "end_point": [228, 55], "text": "        '1' => unsafe { blockSi"}, {"type": "match_arm", "children": [{"type": "match_pattern", "children": [{"type": "char_literal", "children": [], "start_byte": 8423, "end_byte": 8426, "start_point": [229, 24], "end_point": [229, 27], "text": "   "}], "start_byte": 8423, "end_byte": 8426, "start_point": [229, 24], "end_point": [229, 27], "text": "   "}, {"type": "=>", "children": [], "start_byte": 8427, "end_byte": 8429, "start_point": [229, 28], "end_point": [229, 30], "text": "  "}, {"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 8430, "end_byte": 8436, "start_point": [229, 31], "end_point": [229, 37], "text": "      "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 8437, "end_byte": 8438, "start_point": [229, 38], "end_point": [229, 39], "text": "'"}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 8439, "end_byte": 8454, "start_point": [229, 40], "end_point": [229, 55], "text": "' => unsafe { b"}, {"type": "=", "children": [], "start_byte": 8455, "end_byte": 8456, "start_point": [229, 56], "end_point": [229, 57], "text": "o"}, {"type": "boolean_literal", "children": [{"type": "true", "children": [], "start_byte": 8457, "end_byte": 8461, "start_point": [229, 58], "end_point": [229, 62], "text": "kSiz"}], "start_byte": 8457, "end_byte": 8461, "start_point": [229, 58], "end_point": [229, 62], "text": "kSiz"}], "start_byte": 8439, "end_byte": 8461, "start_point": [229, 40], "end_point": [229, 62], "text": "' => unsafe { blockSiz"}, {"type": ";", "children": [], "start_byte": 8461, "end_byte": 8462, "start_point": [229, 62], "end_point": [229, 63], "text": "e"}], "start_byte": 8439, "end_byte": 8462, "start_point": [229, 40], "end_point": [229, 63], "text": "' => unsafe { blockSize"}, {"type": "}", "children": [], "start_byte": 8463, "end_byte": 8464, "start_point": [229, 64], "end_point": [229, 65], "text": "0"}], "start_byte": 8437, "end_byte": 8464, "start_point": [229, 38], "end_point": [229, 65], "text": "'2' => unsafe { blockSize10"}], "start_byte": 8430, "end_byte": 8464, "start_point": [229, 31], "end_point": [229, 65], "text": "       '2' => unsafe { blockSize10"}, {"type": ",", "children": [], "start_byte": 8464, "end_byte": 8465, "start_point": [229, 65], "end_point": [229, 66], "text": "0"}], "start_byte": 8423, "end_byte": 8465, "start_point": [229, 24], "end_point": [229, 66], "text": "              '2' => unsafe { blockSize100"}, {"type": "match_arm", "children": [{"type": "match_pattern", "children": [{"type": "char_literal", "children": [], "start_byte": 8490, "end_byte": 8493, "start_point": [230, 24], "end_point": [230, 27], "text": "   "}], "start_byte": 8490, "end_byte": 8493, "start_point": [230, 24], "end_point": [230, 27], "text": "   "}, {"type": "=>", "children": [], "start_byte": 8494, "end_byte": 8496, "start_point": [230, 28], "end_point": [230, 30], "text": "  "}, {"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 8497, "end_byte": 8503, "start_point": [230, 31], "end_point": [230, 37], "text": "  '3' "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 8504, "end_byte": 8505, "start_point": [230, 38], "end_point": [230, 39], "text": ">"}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 8506, "end_byte": 8513, "start_point": [230, 40], "end_point": [230, 47], "text": "unsafe "}, {"type": "=", "children": [], "start_byte": 8514, "end_byte": 8515, "start_point": [230, 48], "end_point": [230, 49], "text": " "}, {"type": "integer_literal", "children": [], "start_byte": 8516, "end_byte": 8517, "start_point": [230, 50], "end_point": [230, 51], "text": "l"}], "start_byte": 8506, "end_byte": 8517, "start_point": [230, 40], "end_point": [230, 51], "text": "unsafe { bl"}, {"type": ";", "children": [], "start_byte": 8517, "end_byte": 8518, "start_point": [230, 51], "end_point": [230, 52], "text": "o"}], "start_byte": 8506, "end_byte": 8518, "start_point": [230, 40], "end_point": [230, 52], "text": "unsafe { blo"}, {"type": "}", "children": [], "start_byte": 8519, "end_byte": 8520, "start_point": [230, 53], "end_point": [230, 54], "text": "k"}], "start_byte": 8504, "end_byte": 8520, "start_point": [230, 38], "end_point": [230, 54], "text": "> unsafe { block"}], "start_byte": 8497, "end_byte": 8520, "start_point": [230, 31], "end_point": [230, 54], "text": "  '3' => unsafe { block"}, {"type": ",", "children": [], "start_byte": 8520, "end_byte": 8521, "start_point": [230, 54], "end_point": [230, 55], "text": "S"}], "start_byte": 8490, "end_byte": 8521, "start_point": [230, 24], "end_point": [230, 55], "text": "         '3' => unsafe { blockS"}, {"type": "match_arm", "children": [{"type": "match_pattern", "children": [{"type": "char_literal", "children": [], "start_byte": 8546, "end_byte": 8549, "start_point": [231, 24], "end_point": [231, 27], "text": "   "}], "start_byte": 8546, "end_byte": 8549, "start_point": [231, 24], "end_point": [231, 27], "text": "   "}, {"type": "=>", "children": [], "start_byte": 8550, "end_byte": 8552, "start_point": [231, 28], "end_point": [231, 30], "text": "  "}, {"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 8553, "end_byte": 8559, "start_point": [231, 31], "end_point": [231, 37], "text": "      "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 8560, "end_byte": 8561, "start_point": [231, 38], "end_point": [231, 39], "text": " "}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 8562, "end_byte": 8578, "start_point": [231, 40], "end_point": [231, 56], "text": "4' => unsafe { b"}, {"type": "=", "children": [], "start_byte": 8579, "end_byte": 8580, "start_point": [231, 57], "end_point": [231, 58], "text": "o"}, {"type": "boolean_literal", "children": [{"type": "true", "children": [], "start_byte": 8581, "end_byte": 8585, "start_point": [231, 59], "end_point": [231, 63], "text": "kSiz"}], "start_byte": 8581, "end_byte": 8585, "start_point": [231, 59], "end_point": [231, 63], "text": "kSiz"}], "start_byte": 8562, "end_byte": 8585, "start_point": [231, 40], "end_point": [231, 63], "text": "4' => unsafe { blockSiz"}, {"type": ";", "children": [], "start_byte": 8585, "end_byte": 8586, "start_point": [231, 63], "end_point": [231, 64], "text": "e"}], "start_byte": 8562, "end_byte": 8586, "start_point": [231, 40], "end_point": [231, 64], "text": "4' => unsafe { blockSize"}, {"type": "}", "children": [], "start_byte": 8587, "end_byte": 8588, "start_point": [231, 65], "end_point": [231, 66], "text": "0"}], "start_byte": 8560, "end_byte": 8588, "start_point": [231, 38], "end_point": [231, 66], "text": " '4' => unsafe { blockSize10"}], "start_byte": 8553, "end_byte": 8588, "start_point": [231, 31], "end_point": [231, 66], "text": "        '4' => unsafe { blockSize10"}, {"type": ",", "children": [], "start_byte": 8588, "end_byte": 8589, "start_point": [231, 66], "end_point": [231, 67], "text": "0"}], "start_byte": 8546, "end_byte": 8589, "start_point": [231, 24], "end_point": [231, 67], "text": "               '4' => unsafe { blockSize100"}, {"type": "match_arm", "children": [{"type": "match_pattern", "children": [{"type": "char_literal", "children": [], "start_byte": 8614, "end_byte": 8617, "start_point": [232, 24], "end_point": [232, 27], "text": "   "}], "start_byte": 8614, "end_byte": 8617, "start_point": [232, 24], "end_point": [232, 27], "text": "   "}, {"type": "=>", "children": [], "start_byte": 8618, "end_byte": 8620, "start_point": [232, 28], "end_point": [232, 30], "text": "  "}, {"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 8621, "end_byte": 8627, "start_point": [232, 31], "end_point": [232, 37], "text": "  '5' "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 8628, "end_byte": 8629, "start_point": [232, 38], "end_point": [232, 39], "text": ">"}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 8630, "end_byte": 8640, "start_point": [232, 40], "end_point": [232, 50], "text": "unsafe { b"}, {"type": "=", "children": [], "start_byte": 8641, "end_byte": 8642, "start_point": [232, 51], "end_point": [232, 52], "text": "o"}, {"type": "boolean_literal", "children": [{"type": "true", "children": [], "start_byte": 8643, "end_byte": 8647, "start_point": [232, 53], "end_point": [232, 57], "text": "kSiz"}], "start_byte": 8643, "end_byte": 8647, "start_point": [232, 53], "end_point": [232, 57], "text": "kSiz"}], "start_byte": 8630, "end_byte": 8647, "start_point": [232, 40], "end_point": [232, 57], "text": "unsafe { blockSiz"}, {"type": ";", "children": [], "start_byte": 8647, "end_byte": 8648, "start_point": [232, 57], "end_point": [232, 58], "text": "e"}], "start_byte": 8630, "end_byte": 8648, "start_point": [232, 40], "end_point": [232, 58], "text": "unsafe { blockSize"}, {"type": "}", "children": [], "start_byte": 8649, "end_byte": 8650, "start_point": [232, 59], "end_point": [232, 60], "text": "0"}], "start_byte": 8628, "end_byte": 8650, "start_point": [232, 38], "end_point": [232, 60], "text": "> unsafe { blockSize10"}], "start_byte": 8621, "end_byte": 8650, "start_point": [232, 31], "end_point": [232, 60], "text": "  '5' => unsafe { blockSize10"}, {"type": ",", "children": [], "start_byte": 8650, "end_byte": 8651, "start_point": [232, 60], "end_point": [232, 61], "text": "0"}], "start_byte": 8614, "end_byte": 8651, "start_point": [232, 24], "end_point": [232, 61], "text": "         '5' => unsafe { blockSize100"}, {"type": "match_arm", "children": [{"type": "match_pattern", "children": [{"type": "char_literal", "children": [], "start_byte": 8676, "end_byte": 8679, "start_point": [233, 24], "end_point": [233, 27], "text": "   "}], "start_byte": 8676, "end_byte": 8679, "start_point": [233, 24], "end_point": [233, 27], "text": "   "}, {"type": "=>", "children": [], "start_byte": 8680, "end_byte": 8682, "start_point": [233, 28], "end_point": [233, 30], "text": "  "}, {"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 8683, "end_byte": 8689, "start_point": [233, 31], "end_point": [233, 37], "text": "  '6' "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 8690, "end_byte": 8691, "start_point": [233, 38], "end_point": [233, 39], "text": ">"}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 8692, "end_byte": 8697, "start_point": [233, 40], "end_point": [233, 45], "text": "unsaf"}, {"type": "=", "children": [], "start_byte": 8698, "end_byte": 8699, "start_point": [233, 46], "end_point": [233, 47], "text": " "}, {"type": "boolean_literal", "children": [{"type": "false", "children": [], "start_byte": 8700, "end_byte": 8705, "start_point": [233, 48], "end_point": [233, 53], "text": " bloc"}], "start_byte": 8700, "end_byte": 8705, "start_point": [233, 48], "end_point": [233, 53], "text": " bloc"}], "start_byte": 8692, "end_byte": 8705, "start_point": [233, 40], "end_point": [233, 53], "text": "unsafe { bloc"}, {"type": ";", "children": [], "start_byte": 8705, "end_byte": 8706, "start_point": [233, 53], "end_point": [233, 54], "text": "k"}], "start_byte": 8692, "end_byte": 8706, "start_point": [233, 40], "end_point": [233, 54], "text": "unsafe { block"}, {"type": "}", "children": [], "start_byte": 8707, "end_byte": 8708, "start_point": [233, 55], "end_point": [233, 56], "text": "i"}], "start_byte": 8690, "end_byte": 8708, "start_point": [233, 38], "end_point": [233, 56], "text": "> unsafe { blockSi"}], "start_byte": 8683, "end_byte": 8708, "start_point": [233, 31], "end_point": [233, 56], "text": "  '6' => unsafe { blockSi"}, {"type": ",", "children": [], "start_byte": 8708, "end_byte": 8709, "start_point": [233, 56], "end_point": [233, 57], "text": "z"}], "start_byte": 8676, "end_byte": 8709, "start_point": [233, 24], "end_point": [233, 57], "text": "         '6' => unsafe { blockSiz"}, {"type": "match_arm", "children": [{"type": "match_pattern", "children": [{"type": "char_literal", "children": [], "start_byte": 8734, "end_byte": 8737, "start_point": [234, 24], "end_point": [234, 27], "text": "   "}], "start_byte": 8734, "end_byte": 8737, "start_point": [234, 24], "end_point": [234, 27], "text": "   "}, {"type": "=>", "children": [], "start_byte": 8738, "end_byte": 8740, "start_point": [234, 28], "end_point": [234, 30], "text": "  "}, {"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 8741, "end_byte": 8747, "start_point": [234, 31], "end_point": [234, 37], "text": "      "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 8748, "end_byte": 8749, "start_point": [234, 38], "end_point": [234, 39], "text": "7"}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 8750, "end_byte": 8763, "start_point": [234, 40], "end_point": [234, 53], "text": " => unsafe { "}, {"type": "=", "children": [], "start_byte": 8764, "end_byte": 8765, "start_point": [234, 54], "end_point": [234, 55], "text": "l"}, {"type": "integer_literal", "children": [], "start_byte": 8766, "end_byte": 8767, "start_point": [234, 56], "end_point": [234, 57], "text": "c"}], "start_byte": 8750, "end_byte": 8767, "start_point": [234, 40], "end_point": [234, 57], "text": " => unsafe { bloc"}, {"type": ";", "children": [], "start_byte": 8767, "end_byte": 8768, "start_point": [234, 57], "end_point": [234, 58], "text": "k"}], "start_byte": 8750, "end_byte": 8768, "start_point": [234, 40], "end_point": [234, 58], "text": " => unsafe { block"}, {"type": "}", "children": [], "start_byte": 8769, "end_byte": 8770, "start_point": [234, 59], "end_point": [234, 60], "text": "i"}], "start_byte": 8748, "end_byte": 8770, "start_point": [234, 38], "end_point": [234, 60], "text": "7' => unsafe { blockSi"}], "start_byte": 8741, "end_byte": 8770, "start_point": [234, 31], "end_point": [234, 60], "text": "      '7' => unsafe { blockSi"}, {"type": ",", "children": [], "start_byte": 8770, "end_byte": 8771, "start_point": [234, 60], "end_point": [234, 61], "text": "z"}], "start_byte": 8734, "end_byte": 8771, "start_point": [234, 24], "end_point": [234, 61], "text": "             '7' => unsafe { blockSiz"}, {"type": "match_arm", "children": [{"type": "match_pattern", "children": [{"type": "char_literal", "children": [], "start_byte": 8796, "end_byte": 8799, "start_point": [235, 24], "end_point": [235, 27], "text": "   "}], "start_byte": 8796, "end_byte": 8799, "start_point": [235, 24], "end_point": [235, 27], "text": "   "}, {"type": "=>", "children": [], "start_byte": 8800, "end_byte": 8802, "start_point": [235, 28], "end_point": [235, 30], "text": "  "}, {"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 8803, "end_byte": 8809, "start_point": [235, 31], "end_point": [235, 37], "text": "      "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 8810, "end_byte": 8811, "start_point": [235, 38], "end_point": [235, 39], "text": "8"}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 8812, "end_byte": 8825, "start_point": [235, 40], "end_point": [235, 53], "text": " => unsafe { "}, {"type": "=", "children": [], "start_byte": 8826, "end_byte": 8827, "start_point": [235, 54], "end_point": [235, 55], "text": "l"}, {"type": "integer_literal", "children": [], "start_byte": 8828, "end_byte": 8829, "start_point": [235, 56], "end_point": [235, 57], "text": "c"}], "start_byte": 8812, "end_byte": 8829, "start_point": [235, 40], "end_point": [235, 57], "text": " => unsafe { bloc"}, {"type": ";", "children": [], "start_byte": 8829, "end_byte": 8830, "start_point": [235, 57], "end_point": [235, 58], "text": "k"}], "start_byte": 8812, "end_byte": 8830, "start_point": [235, 40], "end_point": [235, 58], "text": " => unsafe { block"}, {"type": "}", "children": [], "start_byte": 8831, "end_byte": 8832, "start_point": [235, 59], "end_point": [235, 60], "text": "i"}], "start_byte": 8810, "end_byte": 8832, "start_point": [235, 38], "end_point": [235, 60], "text": "8' => unsafe { blockSi"}], "start_byte": 8803, "end_byte": 8832, "start_point": [235, 31], "end_point": [235, 60], "text": "      '8' => unsafe { blockSi"}, {"type": ",", "children": [], "start_byte": 8832, "end_byte": 8833, "start_point": [235, 60], "end_point": [235, 61], "text": "z"}], "start_byte": 8796, "end_byte": 8833, "start_point": [235, 24], "end_point": [235, 61], "text": "             '8' => unsafe { blockSiz"}, {"type": "match_arm", "children": [{"type": "match_pattern", "children": [{"type": "char_literal", "children": [], "start_byte": 8858, "end_byte": 8861, "start_point": [236, 24], "end_point": [236, 27], "text": "   "}], "start_byte": 8858, "end_byte": 8861, "start_point": [236, 24], "end_point": [236, 27], "text": "   "}, {"type": "=>", "children": [], "start_byte": 8862, "end_byte": 8864, "start_point": [236, 28], "end_point": [236, 30], "text": "  "}, {"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 8865, "end_byte": 8871, "start_point": [236, 31], "end_point": [236, 37], "text": "      "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 8872, "end_byte": 8873, "start_point": [236, 38], "end_point": [236, 39], "text": "9"}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 8874, "end_byte": 8887, "start_point": [236, 40], "end_point": [236, 53], "text": " => unsafe { "}, {"type": "=", "children": [], "start_byte": 8888, "end_byte": 8889, "start_point": [236, 54], "end_point": [236, 55], "text": "l"}, {"type": "integer_literal", "children": [], "start_byte": 8890, "end_byte": 8891, "start_point": [236, 56], "end_point": [236, 57], "text": "c"}], "start_byte": 8874, "end_byte": 8891, "start_point": [236, 40], "end_point": [236, 57], "text": " => unsafe { bloc"}, {"type": ";", "children": [], "start_byte": 8891, "end_byte": 8892, "start_point": [236, 57], "end_point": [236, 58], "text": "k"}], "start_byte": 8874, "end_byte": 8892, "start_point": [236, 40], "end_point": [236, 58], "text": " => unsafe { block"}, {"type": "}", "children": [], "start_byte": 8893, "end_byte": 8894, "start_point": [236, 59], "end_point": [236, 60], "text": "i"}], "start_byte": 8872, "end_byte": 8894, "start_point": [236, 38], "end_point": [236, 60], "text": "9' => unsafe { blockSi"}], "start_byte": 8865, "end_byte": 8894, "start_point": [236, 31], "end_point": [236, 60], "text": "      '9' => unsafe { blockSi"}, {"type": ",", "children": [], "start_byte": 8894, "end_byte": 8895, "start_point": [236, 60], "end_point": [236, 61], "text": "z"}], "start_byte": 8858, "end_byte": 8895, "start_point": [236, 24], "end_point": [236, 61], "text": "             '9' => unsafe { blockSiz"}, {"type": "match_arm", "children": [{"type": "match_pattern", "children": [{"type": "char_literal", "children": [], "start_byte": 8920, "end_byte": 8923, "start_point": [237, 24], "end_point": [237, 27], "text": "   "}], "start_byte": 8920, "end_byte": 8923, "start_point": [237, 24], "end_point": [237, 27], "text": "   "}, {"type": "=>", "children": [], "start_byte": 8924, "end_byte": 8926, "start_point": [237, 28], "end_point": [237, 30], "text": "  "}, {"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 8927, "end_byte": 8933, "start_point": [237, 31], "end_point": [237, 37], "text": "      "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 8934, "end_byte": 8935, "start_point": [237, 38], "end_point": [237, 39], "text": "/"}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 8936, "end_byte": 8949, "start_point": [237, 40], "end_point": [237, 53], "text": "...\u5904\u7406\u5176\u4ed6\u5b57\u7b26...\n"}, {"type": "=", "children": [], "start_byte": 8950, "end_byte": 8951, "start_point": [237, 54], "end_point": [237, 55], "text": " "}, {"type": "integer_literal", "children": [], "start_byte": 8952, "end_byte": 8953, "start_point": [237, 56], "end_point": [237, 57], "text": " "}], "start_byte": 8936, "end_byte": 8953, "start_point": [237, 40], "end_point": [237, 57], "text": "...\u5904\u7406\u5176\u4ed6\u5b57\u7b26...\n    "}, {"type": ";", "children": [], "start_byte": 8953, "end_byte": 8954, "start_point": [237, 57], "end_point": [237, 58], "text": " "}], "start_byte": 8936, "end_byte": 8954, "start_point": [237, 40], "end_point": [237, 58], "text": "...\u5904\u7406\u5176\u4ed6\u5b57\u7b26...\n     "}, {"type": "}", "children": [], "start_byte": 8955, "end_byte": 8956, "start_point": [237, 59], "end_point": [237, 60], "text": " "}], "start_byte": 8934, "end_byte": 8956, "start_point": [237, 38], "end_point": [237, 60], "text": "/ ...\u5904\u7406\u5176\u4ed6\u5b57\u7b26...\n       "}], "start_byte": 8927, "end_byte": 8956, "start_point": [237, 31], "end_point": [237, 60], "text": "      // ...\u5904\u7406\u5176\u4ed6\u5b57\u7b26...\n       "}, {"type": ",", "children": [], "start_byte": 8956, "end_byte": 8957, "start_point": [237, 60], "end_point": [237, 61], "text": " "}], "start_byte": 8920, "end_byte": 8957, "start_point": [237, 24], "end_point": [237, 61], "text": "             // ...\u5904\u7406\u5176\u4ed6\u5b57\u7b26...\n        "}, {"type": "match_arm", "children": [{"type": "match_pattern", "children": [{"type": "char_literal", "children": [], "start_byte": 8982, "end_byte": 8985, "start_point": [238, 24], "end_point": [238, 27], "text": "saf"}], "start_byte": 8982, "end_byte": 8985, "start_point": [238, 24], "end_point": [238, 27], "text": "saf"}, {"type": "=>", "children": [], "start_byte": 8986, "end_byte": 8988, "start_point": [238, 28], "end_point": [238, 30], "text": " {"}, {"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 8989, "end_byte": 8995, "start_point": [238, 31], "end_point": [238, 37], "text": "licens"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 8996, "end_byte": 8997, "start_point": [238, 38], "end_point": [238, 39], "text": "("}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 8998, "end_byte": 9011, "start_point": [238, 40], "end_point": [238, 53], "text": "; },\n        "}, {"type": "=", "children": [], "start_byte": 9012, "end_byte": 9013, "start_point": [238, 54], "end_point": [238, 55], "text": " "}, {"type": "integer_literal", "children": [], "start_byte": 9014, "end_byte": 9015, "start_point": [238, 56], "end_point": [238, 57], "text": " "}], "start_byte": 8998, "end_byte": 9015, "start_point": [238, 40], "end_point": [238, 57], "text": "; },\n            "}, {"type": ";", "children": [], "start_byte": 9015, "end_byte": 9016, "start_point": [238, 57], "end_point": [238, 58], "text": " "}], "start_byte": 8998, "end_byte": 9016, "start_point": [238, 40], "end_point": [238, 58], "text": "; },\n             "}, {"type": "}", "children": [], "start_byte": 9017, "end_byte": 9018, "start_point": [238, 59], "end_point": [238, 60], "text": " "}], "start_byte": 8996, "end_byte": 9018, "start_point": [238, 38], "end_point": [238, 60], "text": "(); },\n               "}], "start_byte": 8989, "end_byte": 9018, "start_point": [238, 31], "end_point": [238, 60], "text": "license(); },\n               "}, {"type": ",", "children": [], "start_byte": 9018, "end_byte": 9019, "start_point": [238, 60], "end_point": [238, 61], "text": " "}], "start_byte": 8982, "end_byte": 9019, "start_point": [238, 24], "end_point": [238, 61], "text": "safe { license(); },\n                "}, {"type": "match_arm", "children": [{"type": "match_pattern", "children": [{"type": "char_literal", "children": [], "start_byte": 9044, "end_byte": 9047, "start_point": [239, 24], "end_point": [239, 27], "text": "ERB"}], "start_byte": 9044, "end_byte": 9047, "start_point": [239, 24], "end_point": [239, 27], "text": "ERB"}, {"type": "=>", "children": [], "start_byte": 9048, "end_byte": 9050, "start_point": [239, 28], "end_point": [239, 30], "text": "SI"}, {"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 9051, "end_byte": 9057, "start_point": [239, 31], "end_point": [239, 37], "text": "Y += 1"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 9058, "end_byte": 9059, "start_point": [239, 38], "end_point": [239, 39], "text": " "}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 9060, "end_byte": 9073, "start_point": [239, 40], "end_point": [239, 53], "text": ",\n           "}, {"type": "=", "children": [], "start_byte": 9074, "end_byte": 9075, "start_point": [239, 54], "end_point": [239, 55], "text": " "}, {"type": "integer_literal", "children": [], "start_byte": 9076, "end_byte": 9077, "start_point": [239, 56], "end_point": [239, 57], "text": " "}], "start_byte": 9060, "end_byte": 9077, "start_point": [239, 40], "end_point": [239, 57], "text": ",\n               "}, {"type": ";", "children": [], "start_byte": 9077, "end_byte": 9078, "start_point": [239, 57], "end_point": [239, 58], "text": " "}], "start_byte": 9060, "end_byte": 9078, "start_point": [239, 40], "end_point": [239, 58], "text": ",\n                "}, {"type": "}", "children": [], "start_byte": 9079, "end_byte": 9080, "start_point": [239, 59], "end_point": [239, 60], "text": " "}], "start_byte": 9058, "end_byte": 9080, "start_point": [239, 38], "end_point": [239, 60], "text": " },\n                  "}], "start_byte": 9051, "end_byte": 9080, "start_point": [239, 31], "end_point": [239, 60], "text": "Y += 1; },\n                  "}, {"type": ",", "children": [], "start_byte": 9080, "end_byte": 9081, "start_point": [239, 60], "end_point": [239, 61], "text": " "}], "start_byte": 9044, "end_byte": 9081, "start_point": [239, 24], "end_point": [239, 61], "text": "ERBOSITY += 1; },\n                   "}, {"type": "match_arm", "children": [{"type": "match_pattern", "children": [{"type": "char_literal", "children": [], "start_byte": 9106, "end_byte": 9109, "start_point": [240, 24], "end_point": [240, 27], "text": "   "}], "start_byte": 9106, "end_byte": 9109, "start_point": [240, 24], "end_point": [240, 27], "text": "   "}, {"type": "=>", "children": [], "start_byte": 9110, "end_byte": 9112, "start_point": [240, 28], "end_point": [240, 30], "text": "  "}, {"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 9113, "end_byte": 9119, "start_point": [240, 31], "end_point": [240, 37], "text": "      "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 9120, "end_byte": 9121, "start_point": [240, 38], "end_point": [240, 39], "text": " "}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 9122, "end_byte": 9135, "start_point": [240, 40], "end_point": [240, 53], "text": " unsafe{\n    "}, {"type": "=", "children": [], "start_byte": 9136, "end_byte": 9137, "start_point": [240, 54], "end_point": [240, 55], "text": " "}, {"type": "integer_literal", "children": [], "start_byte": 9138, "end_byte": 9139, "start_point": [240, 56], "end_point": [240, 57], "text": " "}], "start_byte": 9122, "end_byte": 9139, "start_point": [240, 40], "end_point": [240, 57], "text": " unsafe{\n        "}, {"type": ";", "children": [], "start_byte": 9139, "end_byte": 9140, "start_point": [240, 57], "end_point": [240, 58], "text": " "}], "start_byte": 9122, "end_byte": 9140, "start_point": [240, 40], "end_point": [240, 58], "text": " unsafe{\n         "}, {"type": "}", "children": [], "start_byte": 9141, "end_byte": 9142, "start_point": [240, 59], "end_point": [240, 60], "text": " "}], "start_byte": 9120, "end_byte": 9142, "start_point": [240, 38], "end_point": [240, 60], "text": "   unsafe{\n           "}], "start_byte": 9113, "end_byte": 9142, "start_point": [240, 31], "end_point": [240, 60], "text": "          unsafe{\n           "}, {"type": ",", "children": [], "start_byte": 9142, "end_byte": 9143, "start_point": [240, 60], "end_point": [240, 61], "text": " "}], "start_byte": 9106, "end_byte": 9143, "start_point": [240, 24], "end_point": [240, 61], "text": "                 unsafe{\n            "}, {"type": "match_arm", "children": [{"type": "match_pattern", "children": [{"type": "char_literal", "children": [], "start_byte": 9168, "end_byte": 9171, "start_point": [241, 24], "end_point": [241, 27], "text": "rog"}], "start_byte": 9168, "end_byte": 9171, "start_point": [241, 24], "end_point": [241, 27], "text": "rog"}, {"type": "=>", "children": [], "start_byte": 9172, "end_byte": 9174, "start_point": [241, 28], "end_point": [241, 30], "text": "na"}, {"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 9175, "end_byte": 9181, "start_point": [241, 31], "end_point": [241, 37], "text": "e_str "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 9182, "end_byte": 9183, "start_point": [241, 38], "end_point": [241, 39], "text": " "}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 9184, "end_byte": 9197, "start_point": [241, 40], "end_point": [241, 53], "text": "td::str::from"}, {"type": "=", "children": [], "start_byte": 9198, "end_byte": 9199, "start_point": [241, 54], "end_point": [241, 55], "text": "u"}, {"type": "integer_literal", "children": [], "start_byte": 9200, "end_byte": 9201, "start_point": [241, 56], "end_point": [241, 57], "text": "f"}], "start_byte": 9184, "end_byte": 9201, "start_point": [241, 40], "end_point": [241, 57], "text": "td::str::from_utf"}, {"type": ";", "children": [], "start_byte": 9201, "end_byte": 9202, "start_point": [241, 57], "end_point": [241, 58], "text": "8"}], "start_byte": 9184, "end_byte": 9202, "start_point": [241, 40], "end_point": [241, 58], "text": "td::str::from_utf8"}, {"type": "}", "children": [], "start_byte": 9203, "end_byte": 9204, "start_point": [241, 59], "end_point": [241, 60], "text": "&"}], "start_byte": 9182, "end_byte": 9204, "start_point": [241, 38], "end_point": [241, 60], "text": " std::str::from_utf8(&"}], "start_byte": 9175, "end_byte": 9204, "start_point": [241, 31], "end_point": [241, 60], "text": "e_str = std::str::from_utf8(&"}, {"type": ",", "children": [], "start_byte": 9204, "end_byte": 9205, "start_point": [241, 60], "end_point": [241, 61], "text": "P"}], "start_byte": 9168, "end_byte": 9205, "start_point": [241, 24], "end_point": [241, 61], "text": "rog_name_str = std::str::from_utf8(&P"}, {"type": "match_arm", "children": [{"type": "match_pattern", "children": [{"type": "char_literal", "children": [], "start_byte": 9230, "end_byte": 9233, "start_point": [242, 24], "end_point": [242, 27], "text": "ME "}], "start_byte": 9230, "end_byte": 9233, "start_point": [242, 24], "end_point": [242, 27], "text": "ME "}, {"type": "=>", "children": [], "start_byte": 9234, "end_byte": 9236, "start_point": [242, 28], "end_point": [242, 30], "text": "\u662f\u6709"}, {"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 9237, "end_byte": 9243, "start_point": [242, 31], "end_point": [242, 37], "text": "\u7684 UTF-"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 9244, "end_byte": 9245, "start_point": [242, 38], "end_point": [242, 39], "text": " "}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 9246, "end_byte": 9259, "start_point": [242, 40], "end_point": [242, 53], "text": "\u7b26\u4e32\");\n       "}, {"type": "=", "children": [], "start_byte": 9260, "end_byte": 9261, "start_point": [242, 54], "end_point": [242, 55], "text": " "}, {"type": "integer_literal", "children": [], "start_byte": 9262, "end_byte": 9263, "start_point": [242, 56], "end_point": [242, 57], "text": " "}], "start_byte": 9246, "end_byte": 9263, "start_point": [242, 40], "end_point": [242, 57], "text": "\u7b26\u4e32\");\n           "}, {"type": ";", "children": [], "start_byte": 9263, "end_byte": 9264, "start_point": [242, 57], "end_point": [242, 58], "text": " "}], "start_byte": 9246, "end_byte": 9264, "start_point": [242, 40], "end_point": [242, 58], "text": "\u7b26\u4e32\");\n            "}, {"type": "}", "children": [], "start_byte": 9265, "end_byte": 9266, "start_point": [242, 59], "end_point": [242, 60], "text": " "}], "start_byte": 9244, "end_byte": 9266, "start_point": [242, 38], "end_point": [242, 60], "text": " \u5b57\u7b26\u4e32\");\n              "}], "start_byte": 9237, "end_byte": 9266, "start_point": [242, 31], "end_point": [242, 60], "text": "\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n              "}, {"type": ",", "children": [], "start_byte": 9266, "end_byte": 9267, "start_point": [242, 60], "end_point": [242, 61], "text": " "}], "start_byte": 9230, "end_byte": 9267, "start_point": [242, 24], "end_point": [242, 61], "text": "ME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n               "}, {"type": "line_comment", "children": [], "start_byte": 9292, "end_byte": 9319, "start_point": [243, 24], "end_point": [243, 51], "text": "og_name_str);\n             "}, {"type": "match_arm", "children": [{"type": "match_pattern", "children": [{"type": "char_literal", "children": [], "start_byte": 9344, "end_byte": 9347, "start_point": [244, 24], "end_point": [244, 27], "text": "   "}], "start_byte": 9344, "end_byte": 9347, "start_point": [244, 24], "end_point": [244, 27], "text": "   "}, {"type": "=>", "children": [], "start_byte": 9348, "end_byte": 9350, "start_point": [244, 28], "end_point": [244, 30], "text": "  "}, {"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 9351, "end_byte": 9357, "start_point": [244, 31], "end_point": [244, 37], "text": "      "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 9358, "end_byte": 9359, "start_point": [244, 38], "end_point": [244, 39], "text": " "}, {"type": "expression_statement", "children": [{"type": "call_expression", "children": [{"type": "identifier", "children": [], "start_byte": 9360, "end_byte": 9367, "start_point": [244, 40], "end_point": [244, 47], "text": "    // "}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 9367, "end_byte": 9368, "start_point": [244, 47], "end_point": [244, 48], "text": "p"}, {"type": ")", "children": [], "start_byte": 9368, "end_byte": 9369, "start_point": [244, 48], "end_point": [244, 49], "text": "r"}], "start_byte": 9367, "end_byte": 9369, "start_point": [244, 47], "end_point": [244, 49], "text": "pr"}], "start_byte": 9360, "end_byte": 9369, "start_point": [244, 40], "end_point": [244, 49], "text": "    // pr"}, {"type": ";", "children": [], "start_byte": 9369, "end_byte": 9370, "start_point": [244, 49], "end_point": [244, 50], "text": "o"}], "start_byte": 9360, "end_byte": 9370, "start_point": [244, 40], "end_point": [244, 50], "text": "    // pro"}, {"type": "}", "children": [], "start_byte": 9371, "end_byte": 9372, "start_point": [244, 51], "end_point": [244, 52], "text": "e"}], "start_byte": 9358, "end_byte": 9372, "start_point": [244, 38], "end_point": [244, 52], "text": "      // proce"}], "start_byte": 9351, "end_byte": 9372, "start_point": [244, 31], "end_point": [244, 52], "text": "             // proce"}, {"type": ",", "children": [], "start_byte": 9372, "end_byte": 9373, "start_point": [244, 52], "end_point": [244, 53], "text": "s"}], "start_byte": 9344, "end_byte": 9373, "start_point": [244, 24], "end_point": [244, 53], "text": "                    // proces"}, {"type": "match_arm", "children": [{"type": "match_pattern", "children": [{"type": "char_literal", "children": [], "start_byte": 9398, "end_byte": 9401, "start_point": [245, 24], "end_point": [245, 27], "text": "   "}], "start_byte": 9398, "end_byte": 9401, "start_point": [245, 24], "end_point": [245, 27], "text": "   "}, {"type": "=>", "children": [], "start_byte": 9402, "end_byte": 9404, "start_point": [245, 28], "end_point": [245, 30], "text": "  "}, {"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 9405, "end_byte": 9411, "start_point": [245, 31], "end_point": [245, 37], "text": "    },"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 9412, "end_byte": 9413, "start_point": [245, 38], "end_point": [245, 39], "text": " "}, {"type": "expression_statement", "children": [{"type": "compound_assignment_expr", "children": [{"type": "identifier", "children": [], "start_byte": 9414, "end_byte": 9423, "start_point": [245, 40], "end_point": [245, 49], "text": "         "}, {"type": "+=", "children": [], "start_byte": 9424, "end_byte": 9426, "start_point": [245, 50], "end_point": [245, 52], "text": "  "}, {"type": "integer_literal", "children": [], "start_byte": 9427, "end_byte": 9428, "start_point": [245, 53], "end_point": [245, 54], "text": " "}], "start_byte": 9414, "end_byte": 9428, "start_point": [245, 40], "end_point": [245, 54], "text": "              "}, {"type": ";", "children": [], "start_byte": 9428, "end_byte": 9429, "start_point": [245, 54], "end_point": [245, 55], "text": " "}], "start_byte": 9414, "end_byte": 9429, "start_point": [245, 40], "end_point": [245, 55], "text": "               "}, {"type": "}", "children": [], "start_byte": 9430, "end_byte": 9431, "start_point": [245, 56], "end_point": [245, 57], "text": " "}], "start_byte": 9412, "end_byte": 9431, "start_point": [245, 38], "end_point": [245, 57], "text": "                   "}], "start_byte": 9405, "end_byte": 9431, "start_point": [245, 31], "end_point": [245, 57], "text": "    },\n                   "}, {"type": ",", "children": [], "start_byte": 9431, "end_byte": 9432, "start_point": [245, 57], "end_point": [245, 58], "text": " "}], "start_byte": 9398, "end_byte": 9432, "start_point": [245, 24], "end_point": [245, 58], "text": "           },\n                    "}, {"type": "match_arm", "children": [{"type": "match_pattern", "children": [{"type": "char_literal", "children": [], "start_byte": 9457, "end_byte": 9460, "start_point": [246, 24], "end_point": [246, 27], "text": "   "}], "start_byte": 9457, "end_byte": 9460, "start_point": [246, 24], "end_point": [246, 27], "text": "   "}, {"type": "=>", "children": [], "start_byte": 9461, "end_byte": 9463, "start_point": [246, 28], "end_point": [246, 30], "text": "  "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 9464, "end_byte": 9465, "start_point": [246, 31], "end_point": [246, 32], "text": " "}, {"type": "expression_statement", "children": [{"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 9494, "end_byte": 9500, "start_point": [247, 28], "end_point": [247, 34], "text": "      "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 9500, "end_byte": 9501, "start_point": [247, 34], "end_point": [247, 35], "text": " "}, {"type": "let_declaration", "children": [{"type": "let", "children": [], "start_byte": 9534, "end_byte": 9537, "start_point": [248, 32], "end_point": [248, 35], "text": " fl"}, {"type": "identifier", "children": [], "start_byte": 9538, "end_byte": 9551, "start_point": [248, 36], "end_point": [248, 49], "text": "g `{}`\", Stri"}, {"type": "=", "children": [], "start_byte": 9552, "end_byte": 9553, "start_point": [248, 50], "end_point": [248, 51], "text": "g"}, {"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "call_expression", "children": [{"type": "scoped_identifier", "children": [{"type": "scoped_identifier", "children": [{"type": "identifier", "children": [], "start_byte": 9554, "end_byte": 9557, "start_point": [248, 52], "end_point": [248, 55], "text": ":fr"}, {"type": "::", "children": [], "start_byte": 9557, "end_byte": 9559, "start_point": [248, 55], "end_point": [248, 57], "text": "om"}, {"type": "identifier", "children": [], "start_byte": 9559, "end_byte": 9562, "start_point": [248, 57], "end_point": [248, 60], "text": "_ut"}], "start_byte": 9554, "end_byte": 9562, "start_point": [248, 52], "end_point": [248, 60], "text": ":from_ut"}, {"type": "::", "children": [], "start_byte": 9562, "end_byte": 9564, "start_point": [248, 60], "end_point": [248, 62], "text": "f8"}, {"type": "identifier", "children": [], "start_byte": 9564, "end_byte": 9573, "start_point": [248, 62], "end_point": [248, 71], "text": "_lossy(&P"}], "start_byte": 9554, "end_byte": 9573, "start_point": [248, 52], "end_point": [248, 71], "text": ":from_utf8_lossy(&P"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 9573, "end_byte": 9574, "start_point": [248, 71], "end_point": [248, 72], "text": "R"}, {"type": "reference_expression", "children": [{"type": "&", "children": [], "start_byte": 9574, "end_byte": 9575, "start_point": [248, 72], "end_point": [248, 73], "text": "O"}, {"type": "identifier", "children": [], "start_byte": 9575, "end_byte": 9584, "start_point": [248, 73], "end_point": [248, 82], "text": "G_NAME), "}], "start_byte": 9574, "end_byte": 9584, "start_point": [248, 72], "end_point": [248, 82], "text": "OG_NAME), "}, {"type": ")", "children": [], "start_byte": 9584, "end_byte": 9585, "start_point": [248, 82], "end_point": [248, 83], "text": "n"}], "start_byte": 9573, "end_byte": 9585, "start_point": [248, 71], "end_point": [248, 83], "text": "ROG_NAME), n"}], "start_byte": 9554, "end_byte": 9585, "start_point": [248, 52], "end_point": [248, 83], "text": ":from_utf8_lossy(&PROG_NAME), n"}, {"type": ".", "children": [], "start_byte": 9585, "end_byte": 9586, "start_point": [248, 83], "end_point": [248, 84], "text": "a"}, {"type": "field_identifier", "children": [], "start_byte": 9586, "end_byte": 9592, "start_point": [248, 84], "end_point": [248, 90], "text": "me);\n "}], "start_byte": 9554, "end_byte": 9592, "start_point": [248, 52], "end_point": [248, 90], "text": ":from_utf8_lossy(&PROG_NAME), name);\n "}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 9592, "end_byte": 9593, "start_point": [248, 90], "end_point": [248, 91], "text": " "}, {"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 9593, "end_byte": 9594, "start_point": [248, 91], "end_point": [248, 92], "text": " "}, {"type": "\"", "children": [], "start_byte": 9635, "end_byte": 9636, "start_point": [248, 133], "end_point": [248, 134], "text": "r"}], "start_byte": 9593, "end_byte": 9636, "start_point": [248, 91], "end_point": [248, 134], "text": "                          let prog_name_str"}, {"type": ")", "children": [], "start_byte": 9636, "end_byte": 9637, "start_point": [248, 134], "end_point": [248, 135], "text": " "}], "start_byte": 9592, "end_byte": 9637, "start_point": [248, 90], "end_point": [248, 135], "text": "                           let prog_name_str "}], "start_byte": 9554, "end_byte": 9637, "start_point": [248, 52], "end_point": [248, 135], "text": ":from_utf8_lossy(&PROG_NAME), name);\n                            let prog_name_str "}, {"type": ";", "children": [], "start_byte": 9637, "end_byte": 9638, "start_point": [248, 135], "end_point": [248, 136], "text": "="}], "start_byte": 9534, "end_byte": 9638, "start_point": [248, 32], "end_point": [248, 136], "text": " flag `{}`\", String::from_utf8_lossy(&PROG_NAME), name);\n                            let prog_name_str ="}, {"type": "expression_statement", "children": [{"type": "call_expression", "children": [{"type": "identifier", "children": [], "start_byte": 9671, "end_byte": 9676, "start_point": [249, 32], "end_point": [249, 37], "text": "expec"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 9676, "end_byte": 9677, "start_point": [249, 37], "end_point": [249, 38], "text": "t"}, {"type": "identifier", "children": [], "start_byte": 9677, "end_byte": 9690, "start_point": [249, 38], "end_point": [249, 51], "text": "(\"PROG_NAME \u4e0d"}, {"type": ")", "children": [], "start_byte": 9690, "end_byte": 9691, "start_point": [249, 51], "end_point": [249, 52], "text": "\u662f"}], "start_byte": 9676, "end_byte": 9691, "start_point": [249, 37], "end_point": [249, 52], "text": "t(\"PROG_NAME \u4e0d\u662f"}], "start_byte": 9671, "end_byte": 9691, "start_point": [249, 32], "end_point": [249, 52], "text": "expect(\"PROG_NAME \u4e0d\u662f"}, {"type": ";", "children": [], "start_byte": 9691, "end_byte": 9692, "start_point": [249, 52], "end_point": [249, 53], "text": "\u6709"}], "start_byte": 9671, "end_byte": 9692, "start_point": [249, 32], "end_point": [249, 53], "text": "expect(\"PROG_NAME \u4e0d\u662f\u6709"}, {"type": "}", "children": [], "start_byte": 9721, "end_byte": 9722, "start_point": [250, 28], "end_point": [250, 29], "text": " "}], "start_byte": 9500, "end_byte": 9722, "start_point": [247, 34], "end_point": [250, 29], "text": "        eprintln!(\"\u7b2c\u4e00match {}: Bad flag `{}`\", String::from_utf8_lossy(&PROG_NAME), name);\n                            let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n              "}], "start_byte": 9494, "end_byte": 9722, "start_point": [247, 28], "end_point": [250, 29], "text": "              eprintln!(\"\u7b2c\u4e00match {}: Bad flag `{}`\", String::from_utf8_lossy(&PROG_NAME), name);\n                            let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n              "}], "start_byte": 9494, "end_byte": 9722, "start_point": [247, 28], "end_point": [250, 29], "text": "              eprintln!(\"\u7b2c\u4e00match {}: Bad flag `{}`\", String::from_utf8_lossy(&PROG_NAME), name);\n                            let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n              "}, {"type": "line_comment", "children": [], "start_byte": 9751, "end_byte": 9771, "start_point": [251, 28], "end_point": [251, 48], "text": "name_str);\n         "}, {"type": "}", "children": [], "start_byte": 9796, "end_byte": 9797, "start_point": [252, 24], "end_point": [252, 25], "text": " "}], "start_byte": 9464, "end_byte": 9797, "start_point": [246, 31], "end_point": [252, 25], "text": "       unsafe {\n                            eprintln!(\"\u7b2c\u4e00match {}: Bad flag `{}`\", String::from_utf8_lossy(&PROG_NAME), name);\n                            let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                                usage(prog_name_str);\n                            }\n     "}, {"type": ",", "children": [], "start_byte": 9797, "end_byte": 9798, "start_point": [252, 25], "end_point": [252, 26], "text": " "}], "start_byte": 9457, "end_byte": 9798, "start_point": [246, 24], "end_point": [252, 26], "text": "              unsafe {\n                            eprintln!(\"\u7b2c\u4e00match {}: Bad flag `{}`\", String::from_utf8_lossy(&PROG_NAME), name);\n                            let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                                usage(prog_name_str);\n                            }\n      "}, {"type": "match_arm", "children": [{"type": "match_pattern", "children": [{"type": "_", "children": [], "start_byte": 9823, "end_byte": 9824, "start_point": [253, 24], "end_point": [253, 25], "text": "p"}], "start_byte": 9823, "end_byte": 9824, "start_point": [253, 24], "end_point": [253, 25], "text": "p"}, {"type": "=>", "children": [], "start_byte": 9825, "end_byte": 9827, "start_point": [253, 26], "end_point": [253, 28], "text": "oc"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 9828, "end_byte": 9829, "start_point": [253, 29], "end_point": [253, 30], "text": "s"}, {"type": "expression_statement", "children": [{"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 9858, "end_byte": 9864, "start_point": [254, 28], "end_point": [254, 34], "text": "      "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 9865, "end_byte": 9866, "start_point": [254, 35], "end_point": [254, 36], "text": "}"}, {"type": "expression_statement", "children": [{"type": "macro_invocation", "children": [{"type": "identifier", "children": [], "start_byte": 9895, "end_byte": 9903, "start_point": [255, 28], "end_point": [255, 36], "text": "        "}, {"type": "!", "children": [], "start_byte": 9903, "end_byte": 9904, "start_point": [255, 36], "end_point": [255, 37], "text": " "}, {"type": "token_tree", "children": [{"type": "(", "children": [], "start_byte": 9904, "end_byte": 9905, "start_point": [255, 37], "end_point": [255, 38], "text": " "}, {"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 9905, "end_byte": 9906, "start_point": [255, 38], "end_point": [255, 39], "text": "}"}, {"type": "\"", "children": [], "start_byte": 9935, "end_byte": 9936, "start_point": [255, 68], "end_point": [255, 69], "text": " "}], "start_byte": 9905, "end_byte": 9936, "start_point": [255, 38], "end_point": [255, 69], "text": "}\n            }\n        }\n     "}, {"type": "identifier", "children": [], "start_byte": 9938, "end_byte": 9944, "start_point": [255, 71], "end_point": [255, 77], "text": " aa = "}, {"type": "identifier", "children": [], "start_byte": 9946, "end_byte": 9961, "start_point": [255, 79], "end_point": [255, 94], "text": "ell.link;\n    }"}, {"type": "token_tree", "children": [{"type": "(", "children": [], "start_byte": 9961, "end_byte": 9962, "start_point": [255, 94], "end_point": [255, 95], "text": "\n"}, {"type": "identifier", "children": [], "start_byte": 9963, "end_byte": 9972, "start_point": [255, 96], "end_point": [255, 105], "text": "\n    // \u904d"}, {"type": ")", "children": [], "start_byte": 9972, "end_byte": 9973, "start_point": [255, 105], "end_point": [255, 106], "text": "\u5386"}], "start_byte": 9961, "end_byte": 9973, "start_point": [255, 94], "end_point": [255, 106], "text": "\n\n\n    // \u904d\u5386"}, {"type": "identifier", "children": [], "start_byte": 9975, "end_byte": 9979, "start_point": [255, 108], "end_point": [255, 112], "text": "g_li"}, {"type": ")", "children": [], "start_byte": 9979, "end_byte": 9980, "start_point": [255, 112], "end_point": [255, 113], "text": "s"}], "start_byte": 9904, "end_byte": 9980, "start_point": [255, 37], "end_point": [255, 113], "text": " }\n            }\n        }\n        aa = &cell.link;\n    }\n\n\n    // \u904d\u5386arg_lis"}], "start_byte": 9895, "end_byte": 9980, "start_point": [255, 28], "end_point": [255, 113], "text": "          }\n            }\n        }\n        aa = &cell.link;\n    }\n\n\n    // \u904d\u5386arg_lis"}, {"type": ";", "children": [], "start_byte": 9980, "end_byte": 9981, "start_point": [255, 113], "end_point": [255, 114], "text": "t"}], "start_byte": 9895, "end_byte": 9981, "start_point": [255, 28], "end_point": [255, 114], "text": "          }\n            }\n        }\n        aa = &cell.link;\n    }\n\n\n    // \u904d\u5386arg_list"}, {"type": "let_declaration", "children": [{"type": "let", "children": [], "start_byte": 10010, "end_byte": 10013, "start_point": [256, 28], "end_point": [256, 31], "text": " &a"}, {"type": "identifier", "children": [], "start_byte": 10014, "end_byte": 10027, "start_point": [256, 32], "end_point": [256, 45], "text": "g_list;\n    w"}, {"type": "=", "children": [], "start_byte": 10028, "end_byte": 10029, "start_point": [256, 46], "end_point": [256, 47], "text": "i"}, {"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "call_expression", "children": [{"type": "scoped_identifier", "children": [{"type": "scoped_identifier", "children": [{"type": "identifier", "children": [], "start_byte": 10030, "end_byte": 10033, "start_point": [256, 48], "end_point": [256, 51], "text": "e l"}, {"type": "::", "children": [], "start_byte": 10033, "end_byte": 10035, "start_point": [256, 51], "end_point": [256, 53], "text": "et"}, {"type": "identifier", "children": [], "start_byte": 10035, "end_byte": 10038, "start_point": [256, 53], "end_point": [256, 56], "text": " So"}], "start_byte": 10030, "end_byte": 10038, "start_point": [256, 48], "end_point": [256, 56], "text": "e let So"}, {"type": "::", "children": [], "start_byte": 10038, "end_byte": 10040, "start_point": [256, 56], "end_point": [256, 58], "text": "me"}, {"type": "identifier", "children": [], "start_byte": 10040, "end_byte": 10049, "start_point": [256, 58], "end_point": [256, 67], "text": "(cell) = "}], "start_byte": 10030, "end_byte": 10049, "start_point": [256, 48], "end_point": [256, 67], "text": "e let Some(cell) = "}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 10049, "end_byte": 10050, "start_point": [256, 67], "end_point": [256, 68], "text": "a"}, {"type": "reference_expression", "children": [{"type": "&", "children": [], "start_byte": 10050, "end_byte": 10051, "start_point": [256, 68], "end_point": [256, 69], "text": "a"}, {"type": "identifier", "children": [], "start_byte": 10051, "end_byte": 10060, "start_point": [256, 69], "end_point": [256, 78], "text": " {\n      "}], "start_byte": 10050, "end_byte": 10060, "start_point": [256, 68], "end_point": [256, 78], "text": "a {\n      "}, {"type": ")", "children": [], "start_byte": 10060, "end_byte": 10061, "start_point": [256, 78], "end_point": [256, 79], "text": " "}], "start_byte": 10049, "end_byte": 10061, "start_point": [256, 67], "end_point": [256, 79], "text": "aa {\n       "}], "start_byte": 10030, "end_byte": 10061, "start_point": [256, 48], "end_point": [256, 79], "text": "e let Some(cell) = aa {\n       "}, {"type": ".", "children": [], "start_byte": 10061, "end_byte": 10062, "start_point": [256, 79], "end_point": [256, 80], "text": " "}, {"type": "field_identifier", "children": [], "start_byte": 10062, "end_byte": 10068, "start_point": [256, 80], "end_point": [256, 86], "text": "if let"}], "start_byte": 10030, "end_byte": 10068, "start_point": [256, 48], "end_point": [256, 86], "text": "e let Some(cell) = aa {\n        if let"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 10068, "end_byte": 10069, "start_point": [256, 86], "end_point": [256, 87], "text": " "}, {"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 10069, "end_byte": 10070, "start_point": [256, 87], "end_point": [256, 88], "text": "S"}, {"type": "\"", "children": [], "start_byte": 10111, "end_byte": 10112, "start_point": [256, 129], "end_point": [256, 130], "text": "h"}], "start_byte": 10069, "end_byte": 10112, "start_point": [256, 87], "end_point": [256, 130], "text": "Some(name) = &cell.name {\n            match"}, {"type": ")", "children": [], "start_byte": 10112, "end_byte": 10113, "start_point": [256, 130], "end_point": [256, 131], "text": " "}], "start_byte": 10068, "end_byte": 10113, "start_point": [256, 86], "end_point": [256, 131], "text": " Some(name) = &cell.name {\n            match "}], "start_byte": 10030, "end_byte": 10113, "start_point": [256, 48], "end_point": [256, 131], "text": "e let Some(cell) = aa {\n        if let Some(name) = &cell.name {\n            match "}, {"type": ";", "children": [], "start_byte": 10113, "end_byte": 10114, "start_point": [256, 131], "end_point": [256, 132], "text": "n"}], "start_byte": 10010, "end_byte": 10114, "start_point": [256, 28], "end_point": [256, 132], "text": " &arg_list;\n    while let Some(cell) = aa {\n        if let Some(name) = &cell.name {\n            match n"}, {"type": "expression_statement", "children": [{"type": "call_expression", "children": [{"type": "identifier", "children": [], "start_byte": 10147, "end_byte": 10152, "start_point": [257, 32], "end_point": [257, 37], "text": "-\" =>"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 10152, "end_byte": 10153, "start_point": [257, 37], "end_point": [257, 38], "text": " "}, {"type": "identifier", "children": [], "start_byte": 10153, "end_byte": 10166, "start_point": [257, 38], "end_point": [257, 51], "text": "break,\n      "}, {"type": ")", "children": [], "start_byte": 10166, "end_byte": 10167, "start_point": [257, 51], "end_point": [257, 52], "text": " "}], "start_byte": 10152, "end_byte": 10167, "start_point": [257, 37], "end_point": [257, 52], "text": " break,\n       "}], "start_byte": 10147, "end_byte": 10167, "start_point": [257, 32], "end_point": [257, 52], "text": "-\" => break,\n       "}, {"type": ";", "children": [], "start_byte": 10167, "end_byte": 10168, "start_point": [257, 52], "end_point": [257, 53], "text": " "}], "start_byte": 10147, "end_byte": 10168, "start_point": [257, 32], "end_point": [257, 53], "text": "-\" => break,\n        "}, {"type": "}", "children": [], "start_byte": 10197, "end_byte": 10198, "start_point": [258, 28], "end_point": [258, 29], "text": "{"}], "start_byte": 9865, "end_byte": 10198, "start_point": [254, 35], "end_point": [258, 29], "text": "}\n                    }\n                }\n            }\n        }\n        aa = &cell.link;\n    }\n\n\n    // \u904d\u5386arg_list\u5904\u7406\u6bcf\u4e2a\u957f\u683c\u5f0f\u547d\u4ee4\u884c\u53c2\u6570\n    let mut aa = &arg_list;\n    while let Some(cell) = aa {\n        if let Some(name) = &cell.name {\n            match name.as_str() {\n                \"--\" => break,\n                \"--stdout\" => unsafe {"}], "start_byte": 9858, "end_byte": 10198, "start_point": [254, 28], "end_point": [258, 29], "text": "       }\n                    }\n                }\n            }\n        }\n        aa = &cell.link;\n    }\n\n\n    // \u904d\u5386arg_list\u5904\u7406\u6bcf\u4e2a\u957f\u683c\u5f0f\u547d\u4ee4\u884c\u53c2\u6570\n    let mut aa = &arg_list;\n    while let Some(cell) = aa {\n        if let Some(name) = &cell.name {\n            match name.as_str() {\n                \"--\" => break,\n                \"--stdout\" => unsafe {"}], "start_byte": 9858, "end_byte": 10198, "start_point": [254, 28], "end_point": [258, 29], "text": "       }\n                    }\n                }\n            }\n        }\n        aa = &cell.link;\n    }\n\n\n    // \u904d\u5386arg_list\u5904\u7406\u6bcf\u4e2a\u957f\u683c\u5f0f\u547d\u4ee4\u884c\u53c2\u6570\n    let mut aa = &arg_list;\n    while let Some(cell) = aa {\n        if let Some(name) = &cell.name {\n            match name.as_str() {\n                \"--\" => break,\n                \"--stdout\" => unsafe {"}, {"type": "line_comment", "children": [], "start_byte": 10227, "end_byte": 10247, "start_point": [259, 28], "end_point": [259, 48], "text": "     \"--decompress\" "}, {"type": "}", "children": [], "start_byte": 10272, "end_byte": 10273, "start_point": [260, 24], "end_point": [260, 25], "text": "}"}], "start_byte": 9828, "end_byte": 10273, "start_point": [253, 29], "end_point": [260, 25], "text": "ss::exit(1);\n                        }\n                    }\n                }\n            }\n        }\n        aa = &cell.link;\n    }\n\n\n    // \u904d\u5386arg_list\u5904\u7406\u6bcf\u4e2a\u957f\u683c\u5f0f\u547d\u4ee4\u884c\u53c2\u6570\n    let mut aa = &arg_list;\n    while let Some(cell) = aa {\n        if let Some(name) = &cell.name {\n            match name.as_str() {\n                \"--\" => break,\n                \"--stdout\" => unsafe { SRC_MODE = 2; },\n                \"--decompress\" => unsafe { OP_MODE = 2; }"}], "start_byte": 9823, "end_byte": 10273, "start_point": [253, 24], "end_point": [260, 25], "text": "process::exit(1);\n                        }\n                    }\n                }\n            }\n        }\n        aa = &cell.link;\n    }\n\n\n    // \u904d\u5386arg_list\u5904\u7406\u6bcf\u4e2a\u957f\u683c\u5f0f\u547d\u4ee4\u884c\u53c2\u6570\n    let mut aa = &arg_list;\n    while let Some(cell) = aa {\n        if let Some(name) = &cell.name {\n            match name.as_str() {\n                \"--\" => break,\n                \"--stdout\" => unsafe { SRC_MODE = 2; },\n                \"--decompress\" => unsafe { OP_MODE = 2; }"}, {"type": "}", "children": [], "start_byte": 10294, "end_byte": 10295, "start_point": [261, 20], "end_point": [261, 21], "text": "c"}], "start_byte": 8228, "end_byte": 10295, "start_point": [225, 29], "end_point": [261, 21], "text": "},\n                        's' => unsafe { SMALL_MODE = true; },\n                        'q' => unsafe { NOISY = false; },\n                        '1' => unsafe { blockSize100k = 1; },\n                        '2' => unsafe { blockSize100k = 2; },\n                        '3' => unsafe { blockSize100k = 3; },\n                        '4' => unsafe { blockSize100k = 4; },\n                        '5' => unsafe { blockSize100k = 5; },\n                        '6' => unsafe { blockSize100k = 6; },\n                        '7' => unsafe { blockSize100k = 7; },\n                        '8' => unsafe { blockSize100k = 8; },\n                        '9' => unsafe { blockSize100k = 9; },\n                        // ...\u5904\u7406\u5176\u4ed6\u5b57\u7b26...\n                        'L' => unsafe { license(); },\n                        'v' => unsafe { VERBOSITY += 1; },\n                        'h' => {\n                            unsafe{\n                                let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                                usage(prog_name_str);\n                            }\n                            // process::exit(0);\n                        },\n                        _ => {\n                            unsafe {\n                            eprintln!(\"\u7b2c\u4e00match {}: Bad flag `{}`\", String::from_utf8_lossy(&PROG_NAME), name);\n                            let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                                usage(prog_name_str);\n                            }\n                            // process::exit(1);\n                        }\n                    }\n                }\n            }\n        }\n        aa = &cell.link;\n    }\n\n\n    // \u904d\u5386arg_list\u5904\u7406\u6bcf\u4e2a\u957f\u683c\u5f0f\u547d\u4ee4\u884c\u53c2\u6570\n    let mut aa = &arg_list;\n    while let Some(cell) = aa {\n        if let Some(name) = &cell.name {\n            match name.as_str() {\n                \"--\" => break,\n                \"--stdout\" => unsafe { SRC_MODE = 2; },\n                \"--decompress\" => unsafe { OP_MODE = 2; },\n                \"--c"}], "start_byte": 8219, "end_byte": 10295, "start_point": [225, 20], "end_point": [261, 21], "text": " = true; },\n                        's' => unsafe { SMALL_MODE = true; },\n                        'q' => unsafe { NOISY = false; },\n                        '1' => unsafe { blockSize100k = 1; },\n                        '2' => unsafe { blockSize100k = 2; },\n                        '3' => unsafe { blockSize100k = 3; },\n                        '4' => unsafe { blockSize100k = 4; },\n                        '5' => unsafe { blockSize100k = 5; },\n                        '6' => unsafe { blockSize100k = 6; },\n                        '7' => unsafe { blockSize100k = 7; },\n                        '8' => unsafe { blockSize100k = 8; },\n                        '9' => unsafe { blockSize100k = 9; },\n                        // ...\u5904\u7406\u5176\u4ed6\u5b57\u7b26...\n                        'L' => unsafe { license(); },\n                        'v' => unsafe { VERBOSITY += 1; },\n                        'h' => {\n                            unsafe{\n                                let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                                usage(prog_name_str);\n                            }\n                            // process::exit(0);\n                        },\n                        _ => {\n                            unsafe {\n                            eprintln!(\"\u7b2c\u4e00match {}: Bad flag `{}`\", String::from_utf8_lossy(&PROG_NAME), name);\n                            let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                                usage(prog_name_str);\n                            }\n                            // process::exit(1);\n                        }\n                    }\n                }\n            }\n        }\n        aa = &cell.link;\n    }\n\n\n    // \u904d\u5386arg_list\u5904\u7406\u6bcf\u4e2a\u957f\u683c\u5f0f\u547d\u4ee4\u884c\u53c2\u6570\n    let mut aa = &arg_list;\n    while let Some(cell) = aa {\n        if let Some(name) = &cell.name {\n            match name.as_str() {\n                \"--\" => break,\n                \"--stdout\" => unsafe { SRC_MODE = 2; },\n                \"--decompress\" => unsafe { OP_MODE = 2; },\n                \"--c"}], "start_byte": 8219, "end_byte": 10295, "start_point": [225, 20], "end_point": [261, 21], "text": " = true; },\n                        's' => unsafe { SMALL_MODE = true; },\n                        'q' => unsafe { NOISY = false; },\n                        '1' => unsafe { blockSize100k = 1; },\n                        '2' => unsafe { blockSize100k = 2; },\n                        '3' => unsafe { blockSize100k = 3; },\n                        '4' => unsafe { blockSize100k = 4; },\n                        '5' => unsafe { blockSize100k = 5; },\n                        '6' => unsafe { blockSize100k = 6; },\n                        '7' => unsafe { blockSize100k = 7; },\n                        '8' => unsafe { blockSize100k = 8; },\n                        '9' => unsafe { blockSize100k = 9; },\n                        // ...\u5904\u7406\u5176\u4ed6\u5b57\u7b26...\n                        'L' => unsafe { license(); },\n                        'v' => unsafe { VERBOSITY += 1; },\n                        'h' => {\n                            unsafe{\n                                let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                                usage(prog_name_str);\n                            }\n                            // process::exit(0);\n                        },\n                        _ => {\n                            unsafe {\n                            eprintln!(\"\u7b2c\u4e00match {}: Bad flag `{}`\", String::from_utf8_lossy(&PROG_NAME), name);\n                            let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                                usage(prog_name_str);\n                            }\n                            // process::exit(1);\n                        }\n                    }\n                }\n            }\n        }\n        aa = &cell.link;\n    }\n\n\n    // \u904d\u5386arg_list\u5904\u7406\u6bcf\u4e2a\u957f\u683c\u5f0f\u547d\u4ee4\u884c\u53c2\u6570\n    let mut aa = &arg_list;\n    while let Some(cell) = aa {\n        if let Some(name) = &cell.name {\n            match name.as_str() {\n                \"--\" => break,\n                \"--stdout\" => unsafe { SRC_MODE = 2; },\n                \"--decompress\" => unsafe { OP_MODE = 2; },\n                \"--c"}, {"type": "}", "children": [], "start_byte": 10312, "end_byte": 10313, "start_point": [262, 16], "end_point": [262, 17], "text": "e"}], "start_byte": 8197, "end_byte": 10313, "start_point": [224, 47], "end_point": [262, 17], "text": "afe { KEEP_INPUT_FILES = true; },\n                        's' => unsafe { SMALL_MODE = true; },\n                        'q' => unsafe { NOISY = false; },\n                        '1' => unsafe { blockSize100k = 1; },\n                        '2' => unsafe { blockSize100k = 2; },\n                        '3' => unsafe { blockSize100k = 3; },\n                        '4' => unsafe { blockSize100k = 4; },\n                        '5' => unsafe { blockSize100k = 5; },\n                        '6' => unsafe { blockSize100k = 6; },\n                        '7' => unsafe { blockSize100k = 7; },\n                        '8' => unsafe { blockSize100k = 8; },\n                        '9' => unsafe { blockSize100k = 9; },\n                        // ...\u5904\u7406\u5176\u4ed6\u5b57\u7b26...\n                        'L' => unsafe { license(); },\n                        'v' => unsafe { VERBOSITY += 1; },\n                        'h' => {\n                            unsafe{\n                                let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                                usage(prog_name_str);\n                            }\n                            // process::exit(0);\n                        },\n                        _ => {\n                            unsafe {\n                            eprintln!(\"\u7b2c\u4e00match {}: Bad flag `{}`\", String::from_utf8_lossy(&PROG_NAME), name);\n                            let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                                usage(prog_name_str);\n                            }\n                            // process::exit(1);\n                        }\n                    }\n                }\n            }\n        }\n        aa = &cell.link;\n    }\n\n\n    // \u904d\u5386arg_list\u5904\u7406\u6bcf\u4e2a\u957f\u683c\u5f0f\u547d\u4ee4\u884c\u53c2\u6570\n    let mut aa = &arg_list;\n    while let Some(cell) = aa {\n        if let Some(name) = &cell.name {\n            match name.as_str() {\n                \"--\" => break,\n                \"--stdout\" => unsafe { SRC_MODE = 2; },\n                \"--decompress\" => unsafe { OP_MODE = 2; },\n                \"--compress\" => unsafe"}], "start_byte": 8166, "end_byte": 10313, "start_point": [224, 16], "end_point": [262, 17], "text": "                     'k' => unsafe { KEEP_INPUT_FILES = true; },\n                        's' => unsafe { SMALL_MODE = true; },\n                        'q' => unsafe { NOISY = false; },\n                        '1' => unsafe { blockSize100k = 1; },\n                        '2' => unsafe { blockSize100k = 2; },\n                        '3' => unsafe { blockSize100k = 3; },\n                        '4' => unsafe { blockSize100k = 4; },\n                        '5' => unsafe { blockSize100k = 5; },\n                        '6' => unsafe { blockSize100k = 6; },\n                        '7' => unsafe { blockSize100k = 7; },\n                        '8' => unsafe { blockSize100k = 8; },\n                        '9' => unsafe { blockSize100k = 9; },\n                        // ...\u5904\u7406\u5176\u4ed6\u5b57\u7b26...\n                        'L' => unsafe { license(); },\n                        'v' => unsafe { VERBOSITY += 1; },\n                        'h' => {\n                            unsafe{\n                                let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                                usage(prog_name_str);\n                            }\n                            // process::exit(0);\n                        },\n                        _ => {\n                            unsafe {\n                            eprintln!(\"\u7b2c\u4e00match {}: Bad flag `{}`\", String::from_utf8_lossy(&PROG_NAME), name);\n                            let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                                usage(prog_name_str);\n                            }\n                            // process::exit(1);\n                        }\n                    }\n                }\n            }\n        }\n        aa = &cell.link;\n    }\n\n\n    // \u904d\u5386arg_list\u5904\u7406\u6bcf\u4e2a\u957f\u683c\u5f0f\u547d\u4ee4\u884c\u53c2\u6570\n    let mut aa = &arg_list;\n    while let Some(cell) = aa {\n        if let Some(name) = &cell.name {\n            match name.as_str() {\n                \"--\" => break,\n                \"--stdout\" => unsafe { SRC_MODE = 2; },\n                \"--decompress\" => unsafe { OP_MODE = 2; },\n                \"--compress\" => unsafe"}], "start_byte": 8166, "end_byte": 10313, "start_point": [224, 16], "end_point": [262, 17], "text": "                     'k' => unsafe { KEEP_INPUT_FILES = true; },\n                        's' => unsafe { SMALL_MODE = true; },\n                        'q' => unsafe { NOISY = false; },\n                        '1' => unsafe { blockSize100k = 1; },\n                        '2' => unsafe { blockSize100k = 2; },\n                        '3' => unsafe { blockSize100k = 3; },\n                        '4' => unsafe { blockSize100k = 4; },\n                        '5' => unsafe { blockSize100k = 5; },\n                        '6' => unsafe { blockSize100k = 6; },\n                        '7' => unsafe { blockSize100k = 7; },\n                        '8' => unsafe { blockSize100k = 8; },\n                        '9' => unsafe { blockSize100k = 9; },\n                        // ...\u5904\u7406\u5176\u4ed6\u5b57\u7b26...\n                        'L' => unsafe { license(); },\n                        'v' => unsafe { VERBOSITY += 1; },\n                        'h' => {\n                            unsafe{\n                                let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                                usage(prog_name_str);\n                            }\n                            // process::exit(0);\n                        },\n                        _ => {\n                            unsafe {\n                            eprintln!(\"\u7b2c\u4e00match {}: Bad flag `{}`\", String::from_utf8_lossy(&PROG_NAME), name);\n                            let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                                usage(prog_name_str);\n                            }\n                            // process::exit(1);\n                        }\n                    }\n                }\n            }\n        }\n        aa = &cell.link;\n    }\n\n\n    // \u904d\u5386arg_list\u5904\u7406\u6bcf\u4e2a\u957f\u683c\u5f0f\u547d\u4ee4\u884c\u53c2\u6570\n    let mut aa = &arg_list;\n    while let Some(cell) = aa {\n        if let Some(name) = &cell.name {\n            match name.as_str() {\n                \"--\" => break,\n                \"--stdout\" => unsafe { SRC_MODE = 2; },\n                \"--decompress\" => unsafe { OP_MODE = 2; },\n                \"--compress\" => unsafe"}, {"type": "}", "children": [], "start_byte": 10326, "end_byte": 10327, "start_point": [263, 12], "end_point": [263, 13], "text": "1"}], "start_byte": 8148, "end_byte": 10327, "start_point": [223, 64], "end_point": [263, 13], "text": "P_MODE = 3; },\n                        'k' => unsafe { KEEP_INPUT_FILES = true; },\n                        's' => unsafe { SMALL_MODE = true; },\n                        'q' => unsafe { NOISY = false; },\n                        '1' => unsafe { blockSize100k = 1; },\n                        '2' => unsafe { blockSize100k = 2; },\n                        '3' => unsafe { blockSize100k = 3; },\n                        '4' => unsafe { blockSize100k = 4; },\n                        '5' => unsafe { blockSize100k = 5; },\n                        '6' => unsafe { blockSize100k = 6; },\n                        '7' => unsafe { blockSize100k = 7; },\n                        '8' => unsafe { blockSize100k = 8; },\n                        '9' => unsafe { blockSize100k = 9; },\n                        // ...\u5904\u7406\u5176\u4ed6\u5b57\u7b26...\n                        'L' => unsafe { license(); },\n                        'v' => unsafe { VERBOSITY += 1; },\n                        'h' => {\n                            unsafe{\n                                let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                                usage(prog_name_str);\n                            }\n                            // process::exit(0);\n                        },\n                        _ => {\n                            unsafe {\n                            eprintln!(\"\u7b2c\u4e00match {}: Bad flag `{}`\", String::from_utf8_lossy(&PROG_NAME), name);\n                            let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                                usage(prog_name_str);\n                            }\n                            // process::exit(1);\n                        }\n                    }\n                }\n            }\n        }\n        aa = &cell.link;\n    }\n\n\n    // \u904d\u5386arg_list\u5904\u7406\u6bcf\u4e2a\u957f\u683c\u5f0f\u547d\u4ee4\u884c\u53c2\u6570\n    let mut aa = &arg_list;\n    while let Some(cell) = aa {\n        if let Some(name) = &cell.name {\n            match name.as_str() {\n                \"--\" => break,\n                \"--stdout\" => unsafe { SRC_MODE = 2; },\n                \"--decompress\" => unsafe { OP_MODE = 2; },\n                \"--compress\" => unsafe { OP_MODE = 1"}], "start_byte": 8096, "end_byte": 10327, "start_point": [223, 12], "end_point": [263, 13], "text": "= true; },\n                        't' => unsafe { OP_MODE = 3; },\n                        'k' => unsafe { KEEP_INPUT_FILES = true; },\n                        's' => unsafe { SMALL_MODE = true; },\n                        'q' => unsafe { NOISY = false; },\n                        '1' => unsafe { blockSize100k = 1; },\n                        '2' => unsafe { blockSize100k = 2; },\n                        '3' => unsafe { blockSize100k = 3; },\n                        '4' => unsafe { blockSize100k = 4; },\n                        '5' => unsafe { blockSize100k = 5; },\n                        '6' => unsafe { blockSize100k = 6; },\n                        '7' => unsafe { blockSize100k = 7; },\n                        '8' => unsafe { blockSize100k = 8; },\n                        '9' => unsafe { blockSize100k = 9; },\n                        // ...\u5904\u7406\u5176\u4ed6\u5b57\u7b26...\n                        'L' => unsafe { license(); },\n                        'v' => unsafe { VERBOSITY += 1; },\n                        'h' => {\n                            unsafe{\n                                let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                                usage(prog_name_str);\n                            }\n                            // process::exit(0);\n                        },\n                        _ => {\n                            unsafe {\n                            eprintln!(\"\u7b2c\u4e00match {}: Bad flag `{}`\", String::from_utf8_lossy(&PROG_NAME), name);\n                            let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                                usage(prog_name_str);\n                            }\n                            // process::exit(1);\n                        }\n                    }\n                }\n            }\n        }\n        aa = &cell.link;\n    }\n\n\n    // \u904d\u5386arg_list\u5904\u7406\u6bcf\u4e2a\u957f\u683c\u5f0f\u547d\u4ee4\u884c\u53c2\u6570\n    let mut aa = &arg_list;\n    while let Some(cell) = aa {\n        if let Some(name) = &cell.name {\n            match name.as_str() {\n                \"--\" => break,\n                \"--stdout\" => unsafe { SRC_MODE = 2; },\n                \"--decompress\" => unsafe { OP_MODE = 2; },\n                \"--compress\" => unsafe { OP_MODE = 1"}], "start_byte": 8096, "end_byte": 10327, "start_point": [223, 12], "end_point": [263, 13], "text": "= true; },\n                        't' => unsafe { OP_MODE = 3; },\n                        'k' => unsafe { KEEP_INPUT_FILES = true; },\n                        's' => unsafe { SMALL_MODE = true; },\n                        'q' => unsafe { NOISY = false; },\n                        '1' => unsafe { blockSize100k = 1; },\n                        '2' => unsafe { blockSize100k = 2; },\n                        '3' => unsafe { blockSize100k = 3; },\n                        '4' => unsafe { blockSize100k = 4; },\n                        '5' => unsafe { blockSize100k = 5; },\n                        '6' => unsafe { blockSize100k = 6; },\n                        '7' => unsafe { blockSize100k = 7; },\n                        '8' => unsafe { blockSize100k = 8; },\n                        '9' => unsafe { blockSize100k = 9; },\n                        // ...\u5904\u7406\u5176\u4ed6\u5b57\u7b26...\n                        'L' => unsafe { license(); },\n                        'v' => unsafe { VERBOSITY += 1; },\n                        'h' => {\n                            unsafe{\n                                let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                                usage(prog_name_str);\n                            }\n                            // process::exit(0);\n                        },\n                        _ => {\n                            unsafe {\n                            eprintln!(\"\u7b2c\u4e00match {}: Bad flag `{}`\", String::from_utf8_lossy(&PROG_NAME), name);\n                            let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                                usage(prog_name_str);\n                            }\n                            // process::exit(1);\n                        }\n                    }\n                }\n            }\n        }\n        aa = &cell.link;\n    }\n\n\n    // \u904d\u5386arg_list\u5904\u7406\u6bcf\u4e2a\u957f\u683c\u5f0f\u547d\u4ee4\u884c\u53c2\u6570\n    let mut aa = &arg_list;\n    while let Some(cell) = aa {\n        if let Some(name) = &cell.name {\n            match name.as_str() {\n                \"--\" => break,\n                \"--stdout\" => unsafe { SRC_MODE = 2; },\n                \"--decompress\" => unsafe { OP_MODE = 2; },\n                \"--compress\" => unsafe { OP_MODE = 1"}, {"type": "}", "children": [], "start_byte": 10336, "end_byte": 10337, "start_point": [264, 8], "end_point": [264, 9], "text": " "}], "start_byte": 8004, "end_byte": 10337, "start_point": [218, 39], "end_point": [264, 9], "text": "    'z' => unsafe { OP_MODE = 1; },\n                        'f' => unsafe { FORCE_OVERWRITE = true; },\n                        't' => unsafe { OP_MODE = 3; },\n                        'k' => unsafe { KEEP_INPUT_FILES = true; },\n                        's' => unsafe { SMALL_MODE = true; },\n                        'q' => unsafe { NOISY = false; },\n                        '1' => unsafe { blockSize100k = 1; },\n                        '2' => unsafe { blockSize100k = 2; },\n                        '3' => unsafe { blockSize100k = 3; },\n                        '4' => unsafe { blockSize100k = 4; },\n                        '5' => unsafe { blockSize100k = 5; },\n                        '6' => unsafe { blockSize100k = 6; },\n                        '7' => unsafe { blockSize100k = 7; },\n                        '8' => unsafe { blockSize100k = 8; },\n                        '9' => unsafe { blockSize100k = 9; },\n                        // ...\u5904\u7406\u5176\u4ed6\u5b57\u7b26...\n                        'L' => unsafe { license(); },\n                        'v' => unsafe { VERBOSITY += 1; },\n                        'h' => {\n                            unsafe{\n                                let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                                usage(prog_name_str);\n                            }\n                            // process::exit(0);\n                        },\n                        _ => {\n                            unsafe {\n                            eprintln!(\"\u7b2c\u4e00match {}: Bad flag `{}`\", String::from_utf8_lossy(&PROG_NAME), name);\n                            let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                                usage(prog_name_str);\n                            }\n                            // process::exit(1);\n                        }\n                    }\n                }\n            }\n        }\n        aa = &cell.link;\n    }\n\n\n    // \u904d\u5386arg_list\u5904\u7406\u6bcf\u4e2a\u957f\u683c\u5f0f\u547d\u4ee4\u884c\u53c2\u6570\n    let mut aa = &arg_list;\n    while let Some(cell) = aa {\n        if let Some(name) = &cell.name {\n            match name.as_str() {\n                \"--\" => break,\n                \"--stdout\" => unsafe { SRC_MODE = 2; },\n                \"--decompress\" => unsafe { OP_MODE = 2; },\n                \"--compress\" => unsafe { OP_MODE = 1; },\n     "}], "start_byte": 7973, "end_byte": 10337, "start_point": [218, 8], "end_point": [264, 9], "text": "DE = 2; },\n                        'z' => unsafe { OP_MODE = 1; },\n                        'f' => unsafe { FORCE_OVERWRITE = true; },\n                        't' => unsafe { OP_MODE = 3; },\n                        'k' => unsafe { KEEP_INPUT_FILES = true; },\n                        's' => unsafe { SMALL_MODE = true; },\n                        'q' => unsafe { NOISY = false; },\n                        '1' => unsafe { blockSize100k = 1; },\n                        '2' => unsafe { blockSize100k = 2; },\n                        '3' => unsafe { blockSize100k = 3; },\n                        '4' => unsafe { blockSize100k = 4; },\n                        '5' => unsafe { blockSize100k = 5; },\n                        '6' => unsafe { blockSize100k = 6; },\n                        '7' => unsafe { blockSize100k = 7; },\n                        '8' => unsafe { blockSize100k = 8; },\n                        '9' => unsafe { blockSize100k = 9; },\n                        // ...\u5904\u7406\u5176\u4ed6\u5b57\u7b26...\n                        'L' => unsafe { license(); },\n                        'v' => unsafe { VERBOSITY += 1; },\n                        'h' => {\n                            unsafe{\n                                let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                                usage(prog_name_str);\n                            }\n                            // process::exit(0);\n                        },\n                        _ => {\n                            unsafe {\n                            eprintln!(\"\u7b2c\u4e00match {}: Bad flag `{}`\", String::from_utf8_lossy(&PROG_NAME), name);\n                            let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                                usage(prog_name_str);\n                            }\n                            // process::exit(1);\n                        }\n                    }\n                }\n            }\n        }\n        aa = &cell.link;\n    }\n\n\n    // \u904d\u5386arg_list\u5904\u7406\u6bcf\u4e2a\u957f\u683c\u5f0f\u547d\u4ee4\u884c\u53c2\u6570\n    let mut aa = &arg_list;\n    while let Some(cell) = aa {\n        if let Some(name) = &cell.name {\n            match name.as_str() {\n                \"--\" => break,\n                \"--stdout\" => unsafe { SRC_MODE = 2; },\n                \"--decompress\" => unsafe { OP_MODE = 2; },\n                \"--compress\" => unsafe { OP_MODE = 1; },\n     "}], "start_byte": 7973, "end_byte": 10337, "start_point": [218, 8], "end_point": [264, 9], "text": "DE = 2; },\n                        'z' => unsafe { OP_MODE = 1; },\n                        'f' => unsafe { FORCE_OVERWRITE = true; },\n                        't' => unsafe { OP_MODE = 3; },\n                        'k' => unsafe { KEEP_INPUT_FILES = true; },\n                        's' => unsafe { SMALL_MODE = true; },\n                        'q' => unsafe { NOISY = false; },\n                        '1' => unsafe { blockSize100k = 1; },\n                        '2' => unsafe { blockSize100k = 2; },\n                        '3' => unsafe { blockSize100k = 3; },\n                        '4' => unsafe { blockSize100k = 4; },\n                        '5' => unsafe { blockSize100k = 5; },\n                        '6' => unsafe { blockSize100k = 6; },\n                        '7' => unsafe { blockSize100k = 7; },\n                        '8' => unsafe { blockSize100k = 8; },\n                        '9' => unsafe { blockSize100k = 9; },\n                        // ...\u5904\u7406\u5176\u4ed6\u5b57\u7b26...\n                        'L' => unsafe { license(); },\n                        'v' => unsafe { VERBOSITY += 1; },\n                        'h' => {\n                            unsafe{\n                                let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                                usage(prog_name_str);\n                            }\n                            // process::exit(0);\n                        },\n                        _ => {\n                            unsafe {\n                            eprintln!(\"\u7b2c\u4e00match {}: Bad flag `{}`\", String::from_utf8_lossy(&PROG_NAME), name);\n                            let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                                usage(prog_name_str);\n                            }\n                            // process::exit(1);\n                        }\n                    }\n                }\n            }\n        }\n        aa = &cell.link;\n    }\n\n\n    // \u904d\u5386arg_list\u5904\u7406\u6bcf\u4e2a\u957f\u683c\u5f0f\u547d\u4ee4\u884c\u53c2\u6570\n    let mut aa = &arg_list;\n    while let Some(cell) = aa {\n        if let Some(name) = &cell.name {\n            match name.as_str() {\n                \"--\" => break,\n                \"--stdout\" => unsafe { SRC_MODE = 2; },\n                \"--decompress\" => unsafe { OP_MODE = 2; },\n                \"--compress\" => unsafe { OP_MODE = 1; },\n     "}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 10346, "end_byte": 10348, "start_point": [265, 8], "end_point": [265, 10], "text": "  "}, {"type": "=", "children": [], "start_byte": 10349, "end_byte": 10350, "start_point": [265, 11], "end_point": [265, 12], "text": "-"}, {"type": "reference_expression", "children": [{"type": "&", "children": [], "start_byte": 10351, "end_byte": 10352, "start_point": [265, 13], "end_point": [265, 14], "text": "f"}, {"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 10352, "end_byte": 10356, "start_point": [265, 14], "end_point": [265, 18], "text": "orce"}, {"type": ".", "children": [], "start_byte": 10356, "end_byte": 10357, "start_point": [265, 18], "end_point": [265, 19], "text": "\""}, {"type": "field_identifier", "children": [], "start_byte": 10357, "end_byte": 10361, "start_point": [265, 19], "end_point": [265, 23], "text": " => "}], "start_byte": 10352, "end_byte": 10361, "start_point": [265, 14], "end_point": [265, 23], "text": "orce\" => "}], "start_byte": 10351, "end_byte": 10361, "start_point": [265, 13], "end_point": [265, 23], "text": "force\" => "}], "start_byte": 10346, "end_byte": 10361, "start_point": [265, 8], "end_point": [265, 23], "text": "  \"--force\" => "}, {"type": ";", "children": [], "start_byte": 10361, "end_byte": 10362, "start_point": [265, 23], "end_point": [265, 24], "text": "u"}], "start_byte": 10346, "end_byte": 10362, "start_point": [265, 8], "end_point": [265, 24], "text": "  \"--force\" => u"}, {"type": "}", "children": [], "start_byte": 10367, "end_byte": 10368, "start_point": [266, 4], "end_point": [266, 5], "text": " "}], "start_byte": 7963, "end_byte": 10368, "start_point": [217, 30], "end_point": [266, 5], "text": "fe { OP_MODE = 2; },\n                        'z' => unsafe { OP_MODE = 1; },\n                        'f' => unsafe { FORCE_OVERWRITE = true; },\n                        't' => unsafe { OP_MODE = 3; },\n                        'k' => unsafe { KEEP_INPUT_FILES = true; },\n                        's' => unsafe { SMALL_MODE = true; },\n                        'q' => unsafe { NOISY = false; },\n                        '1' => unsafe { blockSize100k = 1; },\n                        '2' => unsafe { blockSize100k = 2; },\n                        '3' => unsafe { blockSize100k = 3; },\n                        '4' => unsafe { blockSize100k = 4; },\n                        '5' => unsafe { blockSize100k = 5; },\n                        '6' => unsafe { blockSize100k = 6; },\n                        '7' => unsafe { blockSize100k = 7; },\n                        '8' => unsafe { blockSize100k = 8; },\n                        '9' => unsafe { blockSize100k = 9; },\n                        // ...\u5904\u7406\u5176\u4ed6\u5b57\u7b26...\n                        'L' => unsafe { license(); },\n                        'v' => unsafe { VERBOSITY += 1; },\n                        'h' => {\n                            unsafe{\n                                let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                                usage(prog_name_str);\n                            }\n                            // process::exit(0);\n                        },\n                        _ => {\n                            unsafe {\n                            eprintln!(\"\u7b2c\u4e00match {}: Bad flag `{}`\", String::from_utf8_lossy(&PROG_NAME), name);\n                            let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                                usage(prog_name_str);\n                            }\n                            // process::exit(1);\n                        }\n                    }\n                }\n            }\n        }\n        aa = &cell.link;\n    }\n\n\n    // \u904d\u5386arg_list\u5904\u7406\u6bcf\u4e2a\u957f\u683c\u5f0f\u547d\u4ee4\u884c\u53c2\u6570\n    let mut aa = &arg_list;\n    while let Some(cell) = aa {\n        if let Some(name) = &cell.name {\n            match name.as_str() {\n                \"--\" => break,\n                \"--stdout\" => unsafe { SRC_MODE = 2; },\n                \"--decompress\" => unsafe { OP_MODE = 2; },\n                \"--compress\" => unsafe { OP_MODE = 1; },\n                \"--force\" => unsafe "}], "start_byte": 7937, "end_byte": 10368, "start_point": [217, 4], "end_point": [266, 5], "text": "               'd' => unsafe { OP_MODE = 2; },\n                        'z' => unsafe { OP_MODE = 1; },\n                        'f' => unsafe { FORCE_OVERWRITE = true; },\n                        't' => unsafe { OP_MODE = 3; },\n                        'k' => unsafe { KEEP_INPUT_FILES = true; },\n                        's' => unsafe { SMALL_MODE = true; },\n                        'q' => unsafe { NOISY = false; },\n                        '1' => unsafe { blockSize100k = 1; },\n                        '2' => unsafe { blockSize100k = 2; },\n                        '3' => unsafe { blockSize100k = 3; },\n                        '4' => unsafe { blockSize100k = 4; },\n                        '5' => unsafe { blockSize100k = 5; },\n                        '6' => unsafe { blockSize100k = 6; },\n                        '7' => unsafe { blockSize100k = 7; },\n                        '8' => unsafe { blockSize100k = 8; },\n                        '9' => unsafe { blockSize100k = 9; },\n                        // ...\u5904\u7406\u5176\u4ed6\u5b57\u7b26...\n                        'L' => unsafe { license(); },\n                        'v' => unsafe { VERBOSITY += 1; },\n                        'h' => {\n                            unsafe{\n                                let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                                usage(prog_name_str);\n                            }\n                            // process::exit(0);\n                        },\n                        _ => {\n                            unsafe {\n                            eprintln!(\"\u7b2c\u4e00match {}: Bad flag `{}`\", String::from_utf8_lossy(&PROG_NAME), name);\n                            let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                                usage(prog_name_str);\n                            }\n                            // process::exit(1);\n                        }\n                    }\n                }\n            }\n        }\n        aa = &cell.link;\n    }\n\n\n    // \u904d\u5386arg_list\u5904\u7406\u6bcf\u4e2a\u957f\u683c\u5f0f\u547d\u4ee4\u884c\u53c2\u6570\n    let mut aa = &arg_list;\n    while let Some(cell) = aa {\n        if let Some(name) = &cell.name {\n            match name.as_str() {\n                \"--\" => break,\n                \"--stdout\" => unsafe { SRC_MODE = 2; },\n                \"--decompress\" => unsafe { OP_MODE = 2; },\n                \"--compress\" => unsafe { OP_MODE = 1; },\n                \"--force\" => unsafe "}], "start_byte": 7937, "end_byte": 10368, "start_point": [217, 4], "end_point": [266, 5], "text": "               'd' => unsafe { OP_MODE = 2; },\n                        'z' => unsafe { OP_MODE = 1; },\n                        'f' => unsafe { FORCE_OVERWRITE = true; },\n                        't' => unsafe { OP_MODE = 3; },\n                        'k' => unsafe { KEEP_INPUT_FILES = true; },\n                        's' => unsafe { SMALL_MODE = true; },\n                        'q' => unsafe { NOISY = false; },\n                        '1' => unsafe { blockSize100k = 1; },\n                        '2' => unsafe { blockSize100k = 2; },\n                        '3' => unsafe { blockSize100k = 3; },\n                        '4' => unsafe { blockSize100k = 4; },\n                        '5' => unsafe { blockSize100k = 5; },\n                        '6' => unsafe { blockSize100k = 6; },\n                        '7' => unsafe { blockSize100k = 7; },\n                        '8' => unsafe { blockSize100k = 8; },\n                        '9' => unsafe { blockSize100k = 9; },\n                        // ...\u5904\u7406\u5176\u4ed6\u5b57\u7b26...\n                        'L' => unsafe { license(); },\n                        'v' => unsafe { VERBOSITY += 1; },\n                        'h' => {\n                            unsafe{\n                                let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                                usage(prog_name_str);\n                            }\n                            // process::exit(0);\n                        },\n                        _ => {\n                            unsafe {\n                            eprintln!(\"\u7b2c\u4e00match {}: Bad flag `{}`\", String::from_utf8_lossy(&PROG_NAME), name);\n                            let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                                usage(prog_name_str);\n                            }\n                            // process::exit(1);\n                        }\n                    }\n                }\n            }\n        }\n        aa = &cell.link;\n    }\n\n\n    // \u904d\u5386arg_list\u5904\u7406\u6bcf\u4e2a\u957f\u683c\u5f0f\u547d\u4ee4\u884c\u53c2\u6570\n    let mut aa = &arg_list;\n    while let Some(cell) = aa {\n        if let Some(name) = &cell.name {\n            match name.as_str() {\n                \"--\" => break,\n                \"--stdout\" => unsafe { SRC_MODE = 2; },\n                \"--decompress\" => unsafe { OP_MODE = 2; },\n                \"--compress\" => unsafe { OP_MODE = 1; },\n                \"--force\" => unsafe "}, {"type": "line_comment", "children": [], "start_byte": 10375, "end_byte": 10428, "start_point": [269, 4], "end_point": [269, 57], "text": "_OVERWRITE = true; },\n                \"--test\" => uns"}, {"type": "let_declaration", "children": [{"type": "let", "children": [], "start_byte": 10433, "end_byte": 10436, "start_point": [270, 4], "end_point": [270, 7], "text": " OP"}, {"type": "mutable_specifier", "children": [], "start_byte": 10437, "end_byte": 10440, "start_point": [270, 8], "end_point": [270, 11], "text": "MOD"}, {"type": "identifier", "children": [], "start_byte": 10441, "end_byte": 10443, "start_point": [270, 12], "end_point": [270, 14], "text": " ="}, {"type": "=", "children": [], "start_byte": 10444, "end_byte": 10445, "start_point": [270, 15], "end_point": [270, 16], "text": "3"}, {"type": "reference_expression", "children": [{"type": "&", "children": [], "start_byte": 10446, "end_byte": 10447, "start_point": [270, 17], "end_point": [270, 18], "text": " "}, {"type": "identifier", "children": [], "start_byte": 10447, "end_byte": 10455, "start_point": [270, 18], "end_point": [270, 26], "text": "},\n     "}], "start_byte": 10446, "end_byte": 10455, "start_point": [270, 17], "end_point": [270, 26], "text": " },\n     "}, {"type": ";", "children": [], "start_byte": 10455, "end_byte": 10456, "start_point": [270, 26], "end_point": [270, 27], "text": " "}], "start_byte": 10433, "end_byte": 10456, "start_point": [270, 4], "end_point": [270, 27], "text": " OP_MODE = 3; },\n      "}, {"type": "expression_statement", "children": [{"type": "while_expression", "children": [{"type": "while", "children": [], "start_byte": 10461, "end_byte": 10466, "start_point": [271, 4], "end_point": [271, 9], "text": "     "}, {"type": "let_condition", "children": [{"type": "let", "children": [], "start_byte": 10467, "end_byte": 10470, "start_point": [271, 10], "end_point": [271, 13], "text": "--k"}, {"type": "tuple_struct_pattern", "children": [{"type": "identifier", "children": [], "start_byte": 10471, "end_byte": 10475, "start_point": [271, 14], "end_point": [271, 18], "text": "ep\" "}, {"type": "(", "children": [], "start_byte": 10475, "end_byte": 10476, "start_point": [271, 18], "end_point": [271, 19], "text": "="}, {"type": "identifier", "children": [], "start_byte": 10476, "end_byte": 10480, "start_point": [271, 19], "end_point": [271, 23], "text": "> un"}, {"type": ")", "children": [], "start_byte": 10480, "end_byte": 10481, "start_point": [271, 23], "end_point": [271, 24], "text": "s"}], "start_byte": 10471, "end_byte": 10481, "start_point": [271, 14], "end_point": [271, 24], "text": "ep\" => uns"}, {"type": "=", "children": [], "start_byte": 10482, "end_byte": 10483, "start_point": [271, 25], "end_point": [271, 26], "text": "f"}, {"type": "identifier", "children": [], "start_byte": 10484, "end_byte": 10486, "start_point": [271, 27], "end_point": [271, 29], "text": " {"}], "start_byte": 10467, "end_byte": 10486, "start_point": [271, 10], "end_point": [271, 29], "text": "--keep\" => unsafe {"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 10487, "end_byte": 10488, "start_point": [271, 30], "end_point": [271, 31], "text": "K"}, {"type": "expression_statement", "children": [{"type": "if_expression", "children": [{"type": "if", "children": [], "start_byte": 10497, "end_byte": 10499, "start_point": [272, 8], "end_point": [272, 10], "text": "_F"}, {"type": "let_condition", "children": [{"type": "let", "children": [], "start_byte": 10500, "end_byte": 10503, "start_point": [272, 11], "end_point": [272, 14], "text": "LES"}, {"type": "tuple_struct_pattern", "children": [{"type": "identifier", "children": [], "start_byte": 10504, "end_byte": 10508, "start_point": [272, 15], "end_point": [272, 19], "text": "= tr"}, {"type": "(", "children": [], "start_byte": 10508, "end_byte": 10509, "start_point": [272, 19], "end_point": [272, 20], "text": "u"}, {"type": "identifier", "children": [], "start_byte": 10509, "end_byte": 10513, "start_point": [272, 20], "end_point": [272, 24], "text": "e; }"}, {"type": ")", "children": [], "start_byte": 10513, "end_byte": 10514, "start_point": [272, 24], "end_point": [272, 25], "text": ","}], "start_byte": 10504, "end_byte": 10514, "start_point": [272, 15], "end_point": [272, 25], "text": "= true; },"}, {"type": "=", "children": [], "start_byte": 10515, "end_byte": 10516, "start_point": [272, 26], "end_point": [272, 27], "text": " "}, {"type": "reference_expression", "children": [{"type": "&", "children": [], "start_byte": 10517, "end_byte": 10518, "start_point": [272, 28], "end_point": [272, 29], "text": " "}, {"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 10518, "end_byte": 10522, "start_point": [272, 29], "end_point": [272, 33], "text": "    "}, {"type": ".", "children": [], "start_byte": 10522, "end_byte": 10523, "start_point": [272, 33], "end_point": [272, 34], "text": " "}, {"type": "field_identifier", "children": [], "start_byte": 10523, "end_byte": 10527, "start_point": [272, 34], "end_point": [272, 38], "text": "    "}], "start_byte": 10518, "end_byte": 10527, "start_point": [272, 29], "end_point": [272, 38], "text": "         "}], "start_byte": 10517, "end_byte": 10527, "start_point": [272, 28], "end_point": [272, 38], "text": "          "}], "start_byte": 10500, "end_byte": 10527, "start_point": [272, 11], "end_point": [272, 38], "text": "LES = true; },\n            "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 10528, "end_byte": 10529, "start_point": [272, 39], "end_point": [272, 40], "text": " "}, {"type": "expression_statement", "children": [{"type": "match_expression", "children": [{"type": "match", "children": [], "start_byte": 10542, "end_byte": 10547, "start_point": [273, 12], "end_point": [273, 17], "text": "> uns"}, {"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 10548, "end_byte": 10552, "start_point": [273, 18], "end_point": [273, 22], "text": "fe {"}, {"type": ".", "children": [], "start_byte": 10552, "end_byte": 10553, "start_point": [273, 22], "end_point": [273, 23], "text": " "}, {"type": "field_identifier", "children": [], "start_byte": 10553, "end_byte": 10559, "start_point": [273, 23], "end_point": [273, 29], "text": "SMALL_"}], "start_byte": 10548, "end_byte": 10559, "start_point": [273, 18], "end_point": [273, 29], "text": "fe { SMALL_"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 10559, "end_byte": 10560, "start_point": [273, 29], "end_point": [273, 30], "text": "M"}, {"type": ")", "children": [], "start_byte": 10560, "end_byte": 10561, "start_point": [273, 30], "end_point": [273, 31], "text": "O"}], "start_byte": 10559, "end_byte": 10561, "start_point": [273, 29], "end_point": [273, 31], "text": "MO"}], "start_byte": 10548, "end_byte": 10561, "start_point": [273, 18], "end_point": [273, 31], "text": "fe { SMALL_MO"}, {"type": "match_block", "children": [{"type": "{", "children": [], "start_byte": 10562, "end_byte": 10563, "start_point": [273, 32], "end_point": [273, 33], "text": "E"}, {"type": "match_arm", "children": [{"type": "match_pattern", "children": [{"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 10580, "end_byte": 10581, "start_point": [274, 16], "end_point": [274, 17], "text": " "}, {"type": "\"", "children": [], "start_byte": 10583, "end_byte": 10584, "start_point": [274, 19], "end_point": [274, 20], "text": " "}], "start_byte": 10580, "end_byte": 10584, "start_point": [274, 16], "end_point": [274, 20], "text": "    "}], "start_byte": 10580, "end_byte": 10584, "start_point": [274, 16], "end_point": [274, 20], "text": "    "}, {"type": "=>", "children": [], "start_byte": 10585, "end_byte": 10587, "start_point": [274, 21], "end_point": [274, 23], "text": "  "}, {"type": "break_expression", "children": [{"type": "break", "children": [], "start_byte": 10588, "end_byte": 10593, "start_point": [274, 24], "end_point": [274, 29], "text": "   \"-"}], "start_byte": 10588, "end_byte": 10593, "start_point": [274, 24], "end_point": [274, 29], "text": "   \"-"}, {"type": ",", "children": [], "start_byte": 10593, "end_byte": 10594, "start_point": [274, 29], "end_point": [274, 30], "text": "-"}], "start_byte": 10580, "end_byte": 10594, "start_point": [274, 16], "end_point": [274, 30], "text": "           \"--"}, {"type": "match_arm", "children": [{"type": "match_pattern", "children": [{"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 10611, "end_byte": 10612, "start_point": [275, 16], "end_point": [275, 17], "text": "{"}, {"type": "\"", "children": [], "start_byte": 10620, "end_byte": 10621, "start_point": [275, 25], "end_point": [275, 26], "text": " "}], "start_byte": 10611, "end_byte": 10621, "start_point": [275, 16], "end_point": [275, 26], "text": "{ NOISY = "}], "start_byte": 10611, "end_byte": 10621, "start_point": [275, 16], "end_point": [275, 26], "text": "{ NOISY = "}, {"type": "=>", "children": [], "start_byte": 10622, "end_byte": 10624, "start_point": [275, 27], "end_point": [275, 29], "text": "al"}, {"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 10625, "end_byte": 10631, "start_point": [275, 30], "end_point": [275, 36], "text": "e; },\n"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 10632, "end_byte": 10633, "start_point": [275, 37], "end_point": [275, 38], "text": " "}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 10634, "end_byte": 10642, "start_point": [275, 39], "end_point": [275, 47], "text": "        "}, {"type": "=", "children": [], "start_byte": 10643, "end_byte": 10644, "start_point": [275, 48], "end_point": [275, 49], "text": " "}, {"type": "integer_literal", "children": [], "start_byte": 10645, "end_byte": 10646, "start_point": [275, 50], "end_point": [275, 51], "text": " "}], "start_byte": 10634, "end_byte": 10646, "start_point": [275, 39], "end_point": [275, 51], "text": "            "}, {"type": ";", "children": [], "start_byte": 10646, "end_byte": 10647, "start_point": [275, 51], "end_point": [275, 52], "text": " "}], "start_byte": 10634, "end_byte": 10647, "start_point": [275, 39], "end_point": [275, 52], "text": "             "}, {"type": "}", "children": [], "start_byte": 10648, "end_byte": 10649, "start_point": [275, 53], "end_point": [275, 54], "text": "-"}], "start_byte": 10632, "end_byte": 10649, "start_point": [275, 37], "end_point": [275, 54], "text": "               \"-"}], "start_byte": 10625, "end_byte": 10649, "start_point": [275, 30], "end_point": [275, 54], "text": "e; },\n                \"-"}, {"type": ",", "children": [], "start_byte": 10649, "end_byte": 10650, "start_point": [275, 54], "end_point": [275, 55], "text": "-"}], "start_byte": 10611, "end_byte": 10650, "start_point": [275, 16], "end_point": [275, 55], "text": "{ NOISY = false; },\n                \"--"}, {"type": "match_arm", "children": [{"type": "match_pattern", "children": [{"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 10667, "end_byte": 10668, "start_point": [276, 16], "end_point": [276, 17], "text": "e"}, {"type": "\"", "children": [], "start_byte": 10680, "end_byte": 10681, "start_point": [276, 29], "end_point": [276, 30], "text": "n"}], "start_byte": 10667, "end_byte": 10681, "start_point": [276, 16], "end_point": [276, 30], "text": "ense\" => licen"}], "start_byte": 10667, "end_byte": 10681, "start_point": [276, 16], "end_point": [276, 30], "text": "ense\" => licen"}, {"type": "=>", "children": [], "start_byte": 10682, "end_byte": 10684, "start_point": [276, 31], "end_point": [276, 33], "text": "e("}, {"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 10685, "end_byte": 10691, "start_point": [276, 34], "end_point": [276, 40], "text": ",\n    "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 10692, "end_byte": 10693, "start_point": [276, 41], "end_point": [276, 42], "text": " "}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 10694, "end_byte": 10701, "start_point": [276, 43], "end_point": [276, 50], "text": "       "}, {"type": "=", "children": [], "start_byte": 10702, "end_byte": 10703, "start_point": [276, 51], "end_point": [276, 52], "text": " "}, {"type": "integer_literal", "children": [], "start_byte": 10704, "end_byte": 10705, "start_point": [276, 53], "end_point": [276, 54], "text": "-"}], "start_byte": 10694, "end_byte": 10705, "start_point": [276, 43], "end_point": [276, 54], "text": "         \"-"}, {"type": ";", "children": [], "start_byte": 10705, "end_byte": 10706, "start_point": [276, 54], "end_point": [276, 55], "text": "-"}], "start_byte": 10694, "end_byte": 10706, "start_point": [276, 43], "end_point": [276, 55], "text": "         \"--"}, {"type": "}", "children": [], "start_byte": 10707, "end_byte": 10708, "start_point": [276, 56], "end_point": [276, 57], "text": "x"}], "start_byte": 10692, "end_byte": 10708, "start_point": [276, 41], "end_point": [276, 57], "text": "           \"--ex"}], "start_byte": 10685, "end_byte": 10708, "start_point": [276, 34], "end_point": [276, 57], "text": ",\n                \"--ex"}, {"type": ",", "children": [], "start_byte": 10708, "end_byte": 10709, "start_point": [276, 57], "end_point": [276, 58], "text": "p"}], "start_byte": 10667, "end_byte": 10709, "start_point": [276, 16], "end_point": [276, 58], "text": "ense\" => license(),\n                \"--exp"}, {"type": "match_arm", "children": [{"type": "match_pattern", "children": [{"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 10726, "end_byte": 10727, "start_point": [277, 16], "end_point": [277, 17], "text": "f"}, {"type": "\"", "children": [], "start_byte": 10737, "end_byte": 10738, "start_point": [277, 27], "end_point": [277, 28], "text": "A"}], "start_byte": 10726, "end_byte": 10738, "start_point": [277, 16], "end_point": [277, 28], "text": "fe { WORK_FA"}], "start_byte": 10726, "end_byte": 10738, "start_point": [277, 16], "end_point": [277, 28], "text": "fe { WORK_FA"}, {"type": "=>", "children": [], "start_byte": 10739, "end_byte": 10741, "start_point": [277, 29], "end_point": [277, 31], "text": "TO"}, {"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 10742, "end_byte": 10748, "start_point": [277, 32], "end_point": [277, 38], "text": " = 1; "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 10749, "end_byte": 10750, "start_point": [277, 39], "end_point": [277, 40], "text": ","}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 10751, "end_byte": 10758, "start_point": [277, 41], "end_point": [277, 48], "text": "       "}, {"type": "=", "children": [], "start_byte": 10759, "end_byte": 10760, "start_point": [277, 49], "end_point": [277, 50], "text": " "}, {"type": "integer_literal", "children": [], "start_byte": 10761, "end_byte": 10762, "start_point": [277, 51], "end_point": [277, 52], "text": " "}], "start_byte": 10751, "end_byte": 10762, "start_point": [277, 41], "end_point": [277, 52], "text": "           "}, {"type": ";", "children": [], "start_byte": 10762, "end_byte": 10763, "start_point": [277, 52], "end_point": [277, 53], "text": " "}], "start_byte": 10751, "end_byte": 10763, "start_point": [277, 41], "end_point": [277, 53], "text": "            "}, {"type": "}", "children": [], "start_byte": 10764, "end_byte": 10765, "start_point": [277, 54], "end_point": [277, 55], "text": " "}], "start_byte": 10749, "end_byte": 10765, "start_point": [277, 39], "end_point": [277, 55], "text": ",\n              "}], "start_byte": 10742, "end_byte": 10765, "start_point": [277, 32], "end_point": [277, 55], "text": " = 1; },\n              "}, {"type": ",", "children": [], "start_byte": 10765, "end_byte": 10766, "start_point": [277, 55], "end_point": [277, 56], "text": " "}], "start_byte": 10726, "end_byte": 10766, "start_point": [277, 16], "end_point": [277, 56], "text": "fe { WORK_FACTOR = 1; },\n               "}, {"type": "match_arm", "children": [{"type": "match_pattern", "children": [{"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 10783, "end_byte": 10784, "start_point": [278, 16], "end_point": [278, 17], "text": "s"}, {"type": "\"", "children": [], "start_byte": 10791, "end_byte": 10792, "start_point": [278, 24], "end_point": [278, 25], "text": "-"}], "start_byte": 10783, "end_byte": 10792, "start_point": [278, 16], "end_point": [278, 25], "text": "st\" | \"--"}], "start_byte": 10783, "end_byte": 10792, "start_point": [278, 16], "end_point": [278, 25], "text": "st\" | \"--"}, {"type": "=>", "children": [], "start_byte": 10793, "end_byte": 10795, "start_point": [278, 26], "end_point": [278, 28], "text": "ep"}, {"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 10796, "end_byte": 10802, "start_point": [278, 29], "end_point": [278, 35], "text": "titive"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 10803, "end_byte": 10804, "start_point": [278, 36], "end_point": [278, 37], "text": "f"}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 10805, "end_byte": 10820, "start_point": [278, 38], "end_point": [278, 53], "text": "st\" => redundan"}, {"type": "=", "children": [], "start_byte": 10821, "end_byte": 10822, "start_point": [278, 54], "end_point": [278, 55], "text": "("}, {"type": "boolean_literal", "children": [{"type": "true", "children": [], "start_byte": 10823, "end_byte": 10827, "start_point": [278, 56], "end_point": [278, 60], "text": "name"}], "start_byte": 10823, "end_byte": 10827, "start_point": [278, 56], "end_point": [278, 60], "text": "name"}], "start_byte": 10805, "end_byte": 10827, "start_point": [278, 38], "end_point": [278, 60], "text": "st\" => redundant(&name"}, {"type": ";", "children": [], "start_byte": 10827, "end_byte": 10828, "start_point": [278, 60], "end_point": [278, 61], "text": "."}], "start_byte": 10805, "end_byte": 10828, "start_point": [278, 38], "end_point": [278, 61], "text": "st\" => redundant(&name."}, {"type": "}", "children": [], "start_byte": 10829, "end_byte": 10830, "start_point": [278, 62], "end_point": [278, 63], "text": "s"}], "start_byte": 10803, "end_byte": 10830, "start_point": [278, 36], "end_point": [278, 63], "text": "fast\" => redundant(&name.as"}], "start_byte": 10796, "end_byte": 10830, "start_point": [278, 29], "end_point": [278, 63], "text": "titive-fast\" => redundant(&name.as"}, {"type": ",", "children": [], "start_byte": 10830, "end_byte": 10831, "start_point": [278, 63], "end_point": [278, 64], "text": "_"}], "start_byte": 10783, "end_byte": 10831, "start_point": [278, 16], "end_point": [278, 64], "text": "st\" | \"--repetitive-fast\" => redundant(&name.as_"}, {"type": "match_arm", "children": [{"type": "match_pattern", "children": [{"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 10848, "end_byte": 10849, "start_point": [279, 16], "end_point": [279, 17], "text": " "}, {"type": "\"", "children": [], "start_byte": 10855, "end_byte": 10856, "start_point": [279, 23], "end_point": [279, 24], "text": " "}], "start_byte": 10848, "end_byte": 10856, "start_point": [279, 16], "end_point": [279, 24], "text": "        "}], "start_byte": 10848, "end_byte": 10856, "start_point": [279, 16], "end_point": [279, 24], "text": "        "}, {"type": "=>", "children": [], "start_byte": 10857, "end_byte": 10859, "start_point": [279, 25], "end_point": [279, 27], "text": "\"-"}, {"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 10860, "end_byte": 10866, "start_point": [279, 28], "end_point": [279, 34], "text": "fast\" "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 10867, "end_byte": 10868, "start_point": [279, 35], "end_point": [279, 36], "text": ">"}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 10869, "end_byte": 10876, "start_point": [279, 37], "end_point": [279, 44], "text": "unsafe "}, {"type": "=", "children": [], "start_byte": 10877, "end_byte": 10878, "start_point": [279, 45], "end_point": [279, 46], "text": " "}, {"type": "integer_literal", "children": [], "start_byte": 10879, "end_byte": 10880, "start_point": [279, 47], "end_point": [279, 48], "text": "l"}], "start_byte": 10869, "end_byte": 10880, "start_point": [279, 37], "end_point": [279, 48], "text": "unsafe { bl"}, {"type": ";", "children": [], "start_byte": 10880, "end_byte": 10881, "start_point": [279, 48], "end_point": [279, 49], "text": "o"}], "start_byte": 10869, "end_byte": 10881, "start_point": [279, 37], "end_point": [279, 49], "text": "unsafe { blo"}, {"type": "}", "children": [], "start_byte": 10882, "end_byte": 10883, "start_point": [279, 50], "end_point": [279, 51], "text": "k"}], "start_byte": 10867, "end_byte": 10883, "start_point": [279, 35], "end_point": [279, 51], "text": "> unsafe { block"}], "start_byte": 10860, "end_byte": 10883, "start_point": [279, 28], "end_point": [279, 51], "text": "fast\" => unsafe { block"}, {"type": ",", "children": [], "start_byte": 10883, "end_byte": 10884, "start_point": [279, 51], "end_point": [279, 52], "text": "S"}], "start_byte": 10848, "end_byte": 10884, "start_point": [279, 16], "end_point": [279, 52], "text": "         \"--fast\" => unsafe { blockS"}, {"type": "match_arm", "children": [{"type": "match_pattern", "children": [{"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 10901, "end_byte": 10902, "start_point": [280, 16], "end_point": [280, 17], "text": " "}, {"type": "\"", "children": [], "start_byte": 10908, "end_byte": 10909, "start_point": [280, 23], "end_point": [280, 24], "text": " "}], "start_byte": 10901, "end_byte": 10909, "start_point": [280, 16], "end_point": [280, 24], "text": "        "}], "start_byte": 10901, "end_byte": 10909, "start_point": [280, 16], "end_point": [280, 24], "text": "        "}, {"type": "=>", "children": [], "start_byte": 10910, "end_byte": 10912, "start_point": [280, 25], "end_point": [280, 27], "text": "  "}, {"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 10913, "end_byte": 10919, "start_point": [280, 28], "end_point": [280, 34], "text": "   \"--"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 10920, "end_byte": 10921, "start_point": [280, 35], "end_point": [280, 36], "text": "e"}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 10922, "end_byte": 10938, "start_point": [280, 37], "end_point": [280, 53], "text": "t\" => unsafe { b"}, {"type": "=", "children": [], "start_byte": 10939, "end_byte": 10940, "start_point": [280, 54], "end_point": [280, 55], "text": "o"}, {"type": "boolean_literal", "children": [{"type": "true", "children": [], "start_byte": 10941, "end_byte": 10945, "start_point": [280, 56], "end_point": [280, 60], "text": "kSiz"}], "start_byte": 10941, "end_byte": 10945, "start_point": [280, 56], "end_point": [280, 60], "text": "kSiz"}], "start_byte": 10922, "end_byte": 10945, "start_point": [280, 37], "end_point": [280, 60], "text": "t\" => unsafe { blockSiz"}, {"type": ";", "children": [], "start_byte": 10945, "end_byte": 10946, "start_point": [280, 60], "end_point": [280, 61], "text": "e"}], "start_byte": 10922, "end_byte": 10946, "start_point": [280, 37], "end_point": [280, 61], "text": "t\" => unsafe { blockSize"}, {"type": "}", "children": [], "start_byte": 10947, "end_byte": 10948, "start_point": [280, 62], "end_point": [280, 63], "text": "0"}], "start_byte": 10920, "end_byte": 10948, "start_point": [280, 35], "end_point": [280, 63], "text": "est\" => unsafe { blockSize10"}], "start_byte": 10913, "end_byte": 10948, "start_point": [280, 28], "end_point": [280, 63], "text": "   \"--best\" => unsafe { blockSize10"}, {"type": ",", "children": [], "start_byte": 10948, "end_byte": 10949, "start_point": [280, 63], "end_point": [280, 64], "text": "0"}], "start_byte": 10901, "end_byte": 10949, "start_point": [280, 16], "end_point": [280, 64], "text": "               \"--best\" => unsafe { blockSize100"}, {"type": "match_arm", "children": [{"type": "match_pattern", "children": [{"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 10966, "end_byte": 10967, "start_point": [281, 16], "end_point": [281, 17], "text": " "}, {"type": "\"", "children": [], "start_byte": 10974, "end_byte": 10975, "start_point": [281, 24], "end_point": [281, 25], "text": " "}], "start_byte": 10966, "end_byte": 10975, "start_point": [281, 16], "end_point": [281, 25], "text": "         "}], "start_byte": 10966, "end_byte": 10975, "start_point": [281, 16], "end_point": [281, 25], "text": "         "}, {"type": "=>", "children": [], "start_byte": 10976, "end_byte": 10978, "start_point": [281, 26], "end_point": [281, 28], "text": "--"}, {"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 10979, "end_byte": 10985, "start_point": [281, 29], "end_point": [281, 35], "text": "erbose"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 10986, "end_byte": 10987, "start_point": [281, 36], "end_point": [281, 37], "text": " "}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 10988, "end_byte": 10998, "start_point": [281, 38], "end_point": [281, 48], "text": "> unsafe {"}, {"type": "=", "children": [], "start_byte": 10999, "end_byte": 11000, "start_point": [281, 49], "end_point": [281, 50], "text": "V"}, {"type": "boolean_literal", "children": [{"type": "true", "children": [], "start_byte": 11001, "end_byte": 11005, "start_point": [281, 51], "end_point": [281, 55], "text": "RBOS"}], "start_byte": 11001, "end_byte": 11005, "start_point": [281, 51], "end_point": [281, 55], "text": "RBOS"}], "start_byte": 10988, "end_byte": 11005, "start_point": [281, 38], "end_point": [281, 55], "text": "> unsafe { VERBOS"}, {"type": ";", "children": [], "start_byte": 11005, "end_byte": 11006, "start_point": [281, 55], "end_point": [281, 56], "text": "I"}], "start_byte": 10988, "end_byte": 11006, "start_point": [281, 38], "end_point": [281, 56], "text": "> unsafe { VERBOSI"}, {"type": "}", "children": [], "start_byte": 11007, "end_byte": 11008, "start_point": [281, 57], "end_point": [281, 58], "text": "Y"}], "start_byte": 10986, "end_byte": 11008, "start_point": [281, 36], "end_point": [281, 58], "text": " => unsafe { VERBOSITY"}], "start_byte": 10979, "end_byte": 11008, "start_point": [281, 29], "end_point": [281, 58], "text": "erbose\" => unsafe { VERBOSITY"}, {"type": ",", "children": [], "start_byte": 11008, "end_byte": 11009, "start_point": [281, 58], "end_point": [281, 59], "text": " "}], "start_byte": 10966, "end_byte": 11009, "start_point": [281, 16], "end_point": [281, 59], "text": "         \"--verbose\" => unsafe { VERBOSITY "}, {"type": "match_arm", "children": [{"type": "match_pattern", "children": [{"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 11026, "end_byte": 11027, "start_point": [282, 16], "end_point": [282, 17], "text": " "}, {"type": "\"", "children": [], "start_byte": 11034, "end_byte": 11035, "start_point": [282, 24], "end_point": [282, 25], "text": "\""}], "start_byte": 11026, "end_byte": 11035, "start_point": [282, 16], "end_point": [282, 25], "text": "        \""}], "start_byte": 11026, "end_byte": 11035, "start_point": [282, 16], "end_point": [282, 25], "text": "        \""}, {"type": "=>", "children": [], "start_byte": 11036, "end_byte": 11038, "start_point": [282, 26], "end_point": [282, 28], "text": "-h"}, {"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 11039, "end_byte": 11045, "start_point": [282, 29], "end_point": [282, 35], "text": "lp\" =>"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 11046, "end_byte": 11047, "start_point": [282, 36], "end_point": [282, 37], "text": "{"}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 11048, "end_byte": 11053, "start_point": [282, 38], "end_point": [282, 43], "text": "     "}, {"type": "=", "children": [], "start_byte": 11054, "end_byte": 11055, "start_point": [282, 44], "end_point": [282, 45], "text": " "}, {"type": "boolean_literal", "children": [{"type": "false", "children": [], "start_byte": 11056, "end_byte": 11061, "start_point": [282, 46], "end_point": [282, 51], "text": "     "}], "start_byte": 11056, "end_byte": 11061, "start_point": [282, 46], "end_point": [282, 51], "text": "     "}], "start_byte": 11048, "end_byte": 11061, "start_point": [282, 38], "end_point": [282, 51], "text": "             "}, {"type": ";", "children": [], "start_byte": 11061, "end_byte": 11062, "start_point": [282, 51], "end_point": [282, 52], "text": " "}], "start_byte": 11048, "end_byte": 11062, "start_point": [282, 38], "end_point": [282, 52], "text": "              "}, {"type": "}", "children": [], "start_byte": 11063, "end_byte": 11064, "start_point": [282, 53], "end_point": [282, 54], "text": " "}], "start_byte": 11046, "end_byte": 11064, "start_point": [282, 36], "end_point": [282, 54], "text": "{\n                "}], "start_byte": 11039, "end_byte": 11064, "start_point": [282, 29], "end_point": [282, 54], "text": "lp\" => {\n                "}, {"type": ",", "children": [], "start_byte": 11064, "end_byte": 11065, "start_point": [282, 54], "end_point": [282, 55], "text": " "}], "start_byte": 11026, "end_byte": 11065, "start_point": [282, 16], "end_point": [282, 55], "text": "        \"--help\" => {\n                 "}, {"type": "match_arm", "children": [{"type": "match_pattern", "children": [{"type": "or_pattern", "children": [{"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 11082, "end_byte": 11083, "start_point": [283, 16], "end_point": [283, 17], "text": " "}, {"type": "\"", "children": [], "start_byte": 11092, "end_byte": 11093, "start_point": [283, 26], "end_point": [283, 27], "text": " "}], "start_byte": 11082, "end_byte": 11093, "start_point": [283, 16], "end_point": [283, 27], "text": "           "}, {"type": "|", "children": [], "start_byte": 11094, "end_byte": 11095, "start_point": [283, 28], "end_point": [283, 29], "text": " "}, {"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 11096, "end_byte": 11097, "start_point": [283, 30], "end_point": [283, 31], "text": " "}, {"type": "\"", "children": [], "start_byte": 11106, "end_byte": 11107, "start_point": [283, 40], "end_point": [283, 41], "text": "o"}], "start_byte": 11096, "end_byte": 11107, "start_point": [283, 30], "end_point": [283, 41], "text": "    let pro"}], "start_byte": 11082, "end_byte": 11107, "start_point": [283, 16], "end_point": [283, 41], "text": "                  let pro"}], "start_byte": 11082, "end_byte": 11107, "start_point": [283, 16], "end_point": [283, 41], "text": "                  let pro"}, {"type": "=>", "children": [], "start_byte": 11108, "end_byte": 11110, "start_point": [283, 42], "end_point": [283, 44], "text": "_n"}, {"type": "call_expression", "children": [{"type": "identifier", "children": [], "start_byte": 11111, "end_byte": 11118, "start_point": [283, 45], "end_point": [283, 52], "text": "me_str "}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 11118, "end_byte": 11119, "start_point": [283, 52], "end_point": [283, 53], "text": "="}, {"type": ")", "children": [], "start_byte": 11119, "end_byte": 11120, "start_point": [283, 53], "end_point": [283, 54], "text": " "}], "start_byte": 11118, "end_byte": 11120, "start_point": [283, 52], "end_point": [283, 54], "text": "= "}], "start_byte": 11111, "end_byte": 11120, "start_point": [283, 45], "end_point": [283, 54], "text": "me_str = "}, {"type": ",", "children": [], "start_byte": 11120, "end_byte": 11121, "start_point": [283, 54], "end_point": [283, 55], "text": "s"}], "start_byte": 11082, "end_byte": 11121, "start_point": [283, 16], "end_point": [283, 55], "text": "                  let prog_name_str = s"}, {"type": "match_arm", "children": [{"type": "match_pattern", "children": [{"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 11138, "end_byte": 11139, "start_point": [284, 16], "end_point": [284, 17], "text": "8"}, {"type": "\"", "children": [], "start_byte": 11152, "end_byte": 11153, "start_point": [284, 30], "end_point": [284, 31], "text": "e"}], "start_byte": 11138, "end_byte": 11153, "start_point": [284, 16], "end_point": [284, 31], "text": "8(&PROG_NAME).e"}], "start_byte": 11138, "end_byte": 11153, "start_point": [284, 16], "end_point": [284, 31], "text": "8(&PROG_NAME).e"}, {"type": "=>", "children": [], "start_byte": 11154, "end_byte": 11156, "start_point": [284, 32], "end_point": [284, 34], "text": "pe"}, {"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 11157, "end_byte": 11163, "start_point": [284, 35], "end_point": [284, 41], "text": "t(\"PRO"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 11164, "end_byte": 11165, "start_point": [284, 42], "end_point": [284, 43], "text": "_"}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 11166, "end_byte": 11177, "start_point": [284, 44], "end_point": [284, 55], "text": "AME \u4e0d\u662f\u6709\u6548\u7684 U"}, {"type": "=", "children": [], "start_byte": 11178, "end_byte": 11179, "start_point": [284, 56], "end_point": [284, 57], "text": "F"}, {"type": "integer_literal", "children": [], "start_byte": 11180, "end_byte": 11181, "start_point": [284, 58], "end_point": [284, 59], "text": "8"}], "start_byte": 11166, "end_byte": 11181, "start_point": [284, 44], "end_point": [284, 59], "text": "AME \u4e0d\u662f\u6709\u6548\u7684 UTF-8"}, {"type": ";", "children": [], "start_byte": 11181, "end_byte": 11182, "start_point": [284, 59], "end_point": [284, 60], "text": " "}], "start_byte": 11166, "end_byte": 11182, "start_point": [284, 44], "end_point": [284, 60], "text": "AME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 "}, {"type": "}", "children": [], "start_byte": 11183, "end_byte": 11184, "start_point": [284, 61], "end_point": [284, 62], "text": "\u7b26"}], "start_byte": 11164, "end_byte": 11184, "start_point": [284, 42], "end_point": [284, 62], "text": "_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26"}], "start_byte": 11157, "end_byte": 11184, "start_point": [284, 35], "end_point": [284, 62], "text": "t(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26"}, {"type": ",", "children": [], "start_byte": 11184, "end_byte": 11185, "start_point": [284, 62], "end_point": [284, 63], "text": "\u4e32"}], "start_byte": 11138, "end_byte": 11185, "start_point": [284, 16], "end_point": [284, 63], "text": "8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32"}, {"type": "match_arm", "children": [{"type": "match_pattern", "children": [{"type": "or_pattern", "children": [{"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 11202, "end_byte": 11203, "start_point": [285, 16], "end_point": [285, 17], "text": " "}, {"type": "\"", "children": [], "start_byte": 11220, "end_byte": 11221, "start_point": [285, 34], "end_point": [285, 35], "text": "r"}], "start_byte": 11202, "end_byte": 11221, "start_point": [285, 16], "end_point": [285, 35], "text": "           usage(pr"}, {"type": "|", "children": [], "start_byte": 11222, "end_byte": 11223, "start_point": [285, 36], "end_point": [285, 37], "text": "g"}, {"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 11224, "end_byte": 11225, "start_point": [285, 38], "end_point": [285, 39], "text": "n"}, {"type": "\"", "children": [], "start_byte": 11242, "end_byte": 11243, "start_point": [285, 56], "end_point": [285, 57], "text": " "}], "start_byte": 11224, "end_byte": 11243, "start_point": [285, 38], "end_point": [285, 57], "text": "name_str);\n        "}], "start_byte": 11202, "end_byte": 11243, "start_point": [285, 16], "end_point": [285, 57], "text": "           usage(prog_name_str);\n        "}], "start_byte": 11202, "end_byte": 11243, "start_point": [285, 16], "end_point": [285, 57], "text": "           usage(prog_name_str);\n        "}, {"type": "=>", "children": [], "start_byte": 11244, "end_byte": 11246, "start_point": [285, 58], "end_point": [285, 60], "text": "  "}, {"type": "call_expression", "children": [{"type": "identifier", "children": [], "start_byte": 11247, "end_byte": 11256, "start_point": [285, 61], "end_point": [285, 70], "text": "        }"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 11256, "end_byte": 11257, "start_point": [285, 70], "end_point": [285, 71], "text": "\n"}, {"type": "reference_expression", "children": [{"type": "&", "children": [], "start_byte": 11257, "end_byte": 11258, "start_point": [285, 71], "end_point": [285, 72], "text": " "}, {"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 11258, "end_byte": 11262, "start_point": [285, 72], "end_point": [285, 76], "text": "    "}, {"type": ".", "children": [], "start_byte": 11262, "end_byte": 11263, "start_point": [285, 76], "end_point": [285, 77], "text": " "}, {"type": "field_identifier", "children": [], "start_byte": 11263, "end_byte": 11271, "start_point": [285, 77], "end_point": [285, 85], "text": "        "}], "start_byte": 11258, "end_byte": 11271, "start_point": [285, 72], "end_point": [285, 85], "text": "             "}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 11271, "end_byte": 11272, "start_point": [285, 85], "end_point": [285, 86], "text": " "}, {"type": ")", "children": [], "start_byte": 11272, "end_byte": 11273, "start_point": [285, 86], "end_point": [285, 87], "text": " "}], "start_byte": 11271, "end_byte": 11273, "start_point": [285, 85], "end_point": [285, 87], "text": "  "}], "start_byte": 11258, "end_byte": 11273, "start_point": [285, 72], "end_point": [285, 87], "text": "               "}], "start_byte": 11257, "end_byte": 11273, "start_point": [285, 71], "end_point": [285, 87], "text": "                "}, {"type": ")", "children": [], "start_byte": 11273, "end_byte": 11274, "start_point": [285, 87], "end_point": [285, 88], "text": " "}], "start_byte": 11256, "end_byte": 11274, "start_point": [285, 70], "end_point": [285, 88], "text": "\n                 "}], "start_byte": 11247, "end_byte": 11274, "start_point": [285, 61], "end_point": [285, 88], "text": "        }\n                 "}, {"type": ",", "children": [], "start_byte": 11274, "end_byte": 11275, "start_point": [285, 88], "end_point": [285, 89], "text": " "}], "start_byte": 11202, "end_byte": 11275, "start_point": [285, 16], "end_point": [285, 89], "text": "           usage(prog_name_str);\n                    }\n                  "}, {"type": "match_arm", "children": [{"type": "match_pattern", "children": [{"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 11292, "end_byte": 11293, "start_point": [286, 16], "end_point": [286, 17], "text": "t"}, {"type": "\"", "children": [], "start_byte": 11299, "end_byte": 11300, "start_point": [286, 23], "end_point": [286, 24], "text": " "}], "start_byte": 11292, "end_byte": 11300, "start_point": [286, 16], "end_point": [286, 24], "text": "t(0);\n  "}], "start_byte": 11292, "end_byte": 11300, "start_point": [286, 16], "end_point": [286, 24], "text": "t(0);\n  "}, {"type": "=>", "children": [], "start_byte": 11301, "end_byte": 11303, "start_point": [286, 25], "end_point": [286, 27], "text": "  "}, {"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 11304, "end_byte": 11310, "start_point": [286, 28], "end_point": [286, 34], "text": "      "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 11311, "end_byte": 11312, "start_point": [286, 35], "end_point": [286, 36], "text": " "}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 11313, "end_byte": 11326, "start_point": [286, 37], "end_point": [286, 50], "text": " },\n         "}, {"type": "=", "children": [], "start_byte": 11327, "end_byte": 11328, "start_point": [286, 51], "end_point": [286, 52], "text": " "}, {"type": "integer_literal", "children": [], "start_byte": 11329, "end_byte": 11330, "start_point": [286, 53], "end_point": [286, 54], "text": " "}], "start_byte": 11313, "end_byte": 11330, "start_point": [286, 37], "end_point": [286, 54], "text": " },\n             "}, {"type": ";", "children": [], "start_byte": 11330, "end_byte": 11331, "start_point": [286, 54], "end_point": [286, 55], "text": " "}], "start_byte": 11313, "end_byte": 11331, "start_point": [286, 37], "end_point": [286, 55], "text": " },\n              "}, {"type": "}", "children": [], "start_byte": 11332, "end_byte": 11333, "start_point": [286, 56], "end_point": [286, 57], "text": " "}], "start_byte": 11311, "end_byte": 11333, "start_point": [286, 35], "end_point": [286, 57], "text": "   },\n                "}], "start_byte": 11304, "end_byte": 11333, "start_point": [286, 28], "end_point": [286, 57], "text": "          },\n                "}, {"type": ",", "children": [], "start_byte": 11333, "end_byte": 11334, "start_point": [286, 57], "end_point": [286, 58], "text": "_"}], "start_byte": 11292, "end_byte": 11334, "start_point": [286, 16], "end_point": [286, 58], "text": "t(0);\n                },\n                _"}, {"type": "match_arm", "children": [{"type": "match_pattern", "children": [{"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 11351, "end_byte": 11352, "start_point": [287, 16], "end_point": [287, 17], "text": "i"}, {"type": "\"", "children": [], "start_byte": 11358, "end_byte": 11359, "start_point": [287, 23], "end_point": [287, 24], "text": "\""}], "start_byte": 11351, "end_byte": 11359, "start_point": [287, 16], "end_point": [287, 24], "text": "ith(\"--\""}], "start_byte": 11351, "end_byte": 11359, "start_point": [287, 16], "end_point": [287, 24], "text": "ith(\"--\""}, {"type": "=>", "children": [], "start_byte": 11360, "end_byte": 11362, "start_point": [287, 25], "end_point": [287, 27], "text": " ="}, {"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 11363, "end_byte": 11369, "start_point": [287, 28], "end_point": [287, 34], "text": " {\n   "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 11370, "end_byte": 11371, "start_point": [287, 35], "end_point": [287, 36], "text": " "}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 11372, "end_byte": 11385, "start_point": [287, 37], "end_point": [287, 50], "text": "             "}, {"type": "=", "children": [], "start_byte": 11386, "end_byte": 11387, "start_point": [287, 51], "end_point": [287, 52], "text": "u"}, {"type": "integer_literal", "children": [], "start_byte": 11388, "end_byte": 11389, "start_point": [287, 53], "end_point": [287, 54], "text": "s"}], "start_byte": 11372, "end_byte": 11389, "start_point": [287, 37], "end_point": [287, 54], "text": "              uns"}, {"type": ";", "children": [], "start_byte": 11389, "end_byte": 11390, "start_point": [287, 54], "end_point": [287, 55], "text": "a"}], "start_byte": 11372, "end_byte": 11390, "start_point": [287, 37], "end_point": [287, 55], "text": "              unsa"}, {"type": "}", "children": [], "start_byte": 11391, "end_byte": 11392, "start_point": [287, 56], "end_point": [287, 57], "text": "e"}], "start_byte": 11370, "end_byte": 11392, "start_point": [287, 35], "end_point": [287, 57], "text": "                unsafe"}], "start_byte": 11363, "end_byte": 11392, "start_point": [287, 28], "end_point": [287, 57], "text": " {\n                    unsafe"}, {"type": ",", "children": [], "start_byte": 11392, "end_byte": 11393, "start_point": [287, 57], "end_point": [287, 58], "text": "{"}], "start_byte": 11351, "end_byte": 11393, "start_point": [287, 16], "end_point": [287, 58], "text": "ith(\"--\") => {\n                    unsafe{"}, {"type": "match_arm", "children": [{"type": "match_pattern", "children": [{"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 11410, "end_byte": 11411, "start_point": [288, 16], "end_point": [288, 17], "text": " "}, {"type": "\"", "children": [], "start_byte": 11420, "end_byte": 11421, "start_point": [288, 26], "end_point": [288, 27], "text": "p"}], "start_byte": 11410, "end_byte": 11421, "start_point": [288, 16], "end_point": [288, 27], "text": "         ep"}], "start_byte": 11410, "end_byte": 11421, "start_point": [288, 16], "end_point": [288, 27], "text": "         ep"}, {"type": "=>", "children": [], "start_byte": 11422, "end_byte": 11424, "start_point": [288, 28], "end_point": [288, 30], "text": "in"}, {"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 11425, "end_byte": 11431, "start_point": [288, 31], "end_point": [288, 37], "text": "ln!(\"\u7b2c"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 11432, "end_byte": 11433, "start_point": [288, 38], "end_point": [288, 39], "text": "m"}, {"type": "expression_statement", "children": [{"type": "compound_assignment_expr", "children": [{"type": "identifier", "children": [], "start_byte": 11434, "end_byte": 11443, "start_point": [288, 40], "end_point": [288, 49], "text": "tch {}: B"}, {"type": "+=", "children": [], "start_byte": 11444, "end_byte": 11446, "start_point": [288, 50], "end_point": [288, 52], "text": "d "}, {"type": "integer_literal", "children": [], "start_byte": 11447, "end_byte": 11448, "start_point": [288, 53], "end_point": [288, 54], "text": "l"}], "start_byte": 11434, "end_byte": 11448, "start_point": [288, 40], "end_point": [288, 54], "text": "tch {}: Bad fl"}, {"type": ";", "children": [], "start_byte": 11448, "end_byte": 11449, "start_point": [288, 54], "end_point": [288, 55], "text": "a"}], "start_byte": 11434, "end_byte": 11449, "start_point": [288, 40], "end_point": [288, 55], "text": "tch {}: Bad fla"}, {"type": "}", "children": [], "start_byte": 11450, "end_byte": 11451, "start_point": [288, 56], "end_point": [288, 57], "text": " "}], "start_byte": 11432, "end_byte": 11451, "start_point": [288, 38], "end_point": [288, 57], "text": "match {}: Bad flag "}], "start_byte": 11425, "end_byte": 11451, "start_point": [288, 31], "end_point": [288, 57], "text": "ln!(\"\u7b2c\u4e8cmatch {}: Bad flag "}, {"type": ",", "children": [], "start_byte": 11451, "end_byte": 11452, "start_point": [288, 57], "end_point": [288, 58], "text": "`"}], "start_byte": 11410, "end_byte": 11452, "start_point": [288, 16], "end_point": [288, 58], "text": "         eprintln!(\"\u7b2c\u4e8cmatch {}: Bad flag `"}, {"type": "match_arm", "children": [{"type": "match_pattern", "children": [{"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 11469, "end_byte": 11470, "start_point": [289, 16], "end_point": [289, 17], "text": "m"}, {"type": "\"", "children": [], "start_byte": 11476, "end_byte": 11477, "start_point": [289, 23], "end_point": [289, 24], "text": "l"}], "start_byte": 11469, "end_byte": 11477, "start_point": [289, 16], "end_point": [289, 24], "text": "m_utf8_l"}], "start_byte": 11469, "end_byte": 11477, "start_point": [289, 16], "end_point": [289, 24], "text": "m_utf8_l"}, {"type": "=>", "children": [], "start_byte": 11478, "end_byte": 11480, "start_point": [289, 25], "end_point": [289, 27], "text": "ss"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 11481, "end_byte": 11482, "start_point": [289, 28], "end_point": [289, 29], "text": "("}, {"type": "expression_statement", "children": [{"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 11503, "end_byte": 11509, "start_point": [290, 20], "end_point": [290, 26], "text": "      "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 11509, "end_byte": 11510, "start_point": [290, 26], "end_point": [290, 27], "text": " "}, {"type": "let_declaration", "children": [{"type": "let", "children": [], "start_byte": 11535, "end_byte": 11538, "start_point": [291, 24], "end_point": [291, 27], "text": "nam"}, {"type": "identifier", "children": [], "start_byte": 11539, "end_byte": 11552, "start_point": [291, 28], "end_point": [291, 41], "text": "_str = std::s"}, {"type": "=", "children": [], "start_byte": 11553, "end_byte": 11554, "start_point": [291, 42], "end_point": [291, 43], "text": "r"}, {"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "call_expression", "children": [{"type": "scoped_identifier", "children": [{"type": "scoped_identifier", "children": [{"type": "identifier", "children": [], "start_byte": 11555, "end_byte": 11558, "start_point": [291, 44], "end_point": [291, 47], "text": ":fr"}, {"type": "::", "children": [], "start_byte": 11558, "end_byte": 11560, "start_point": [291, 47], "end_point": [291, 49], "text": "om"}, {"type": "identifier", "children": [], "start_byte": 11560, "end_byte": 11563, "start_point": [291, 49], "end_point": [291, 52], "text": "_ut"}], "start_byte": 11555, "end_byte": 11563, "start_point": [291, 44], "end_point": [291, 52], "text": ":from_ut"}, {"type": "::", "children": [], "start_byte": 11563, "end_byte": 11565, "start_point": [291, 52], "end_point": [291, 54], "text": "f8"}, {"type": "identifier", "children": [], "start_byte": 11565, "end_byte": 11574, "start_point": [291, 54], "end_point": [291, 63], "text": "(&PROG_NA"}], "start_byte": 11555, "end_byte": 11574, "start_point": [291, 44], "end_point": [291, 63], "text": ":from_utf8(&PROG_NA"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 11574, "end_byte": 11575, "start_point": [291, 63], "end_point": [291, 64], "text": "M"}, {"type": "reference_expression", "children": [{"type": "&", "children": [], "start_byte": 11575, "end_byte": 11576, "start_point": [291, 64], "end_point": [291, 65], "text": "E"}, {"type": "identifier", "children": [], "start_byte": 11576, "end_byte": 11585, "start_point": [291, 65], "end_point": [291, 74], "text": ").expect("}], "start_byte": 11575, "end_byte": 11585, "start_point": [291, 64], "end_point": [291, 74], "text": "E).expect("}, {"type": ")", "children": [], "start_byte": 11585, "end_byte": 11586, "start_point": [291, 74], "end_point": [291, 75], "text": "\""}], "start_byte": 11574, "end_byte": 11586, "start_point": [291, 63], "end_point": [291, 75], "text": "ME).expect(\""}], "start_byte": 11555, "end_byte": 11586, "start_point": [291, 44], "end_point": [291, 75], "text": ":from_utf8(&PROG_NAME).expect(\""}, {"type": ".", "children": [], "start_byte": 11586, "end_byte": 11587, "start_point": [291, 75], "end_point": [291, 76], "text": "P"}, {"type": "field_identifier", "children": [], "start_byte": 11587, "end_byte": 11593, "start_point": [291, 76], "end_point": [291, 82], "text": "ROG_NA"}], "start_byte": 11555, "end_byte": 11593, "start_point": [291, 44], "end_point": [291, 82], "text": ":from_utf8(&PROG_NAME).expect(\"PROG_NA"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 11593, "end_byte": 11594, "start_point": [291, 82], "end_point": [291, 83], "text": "M"}, {"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 11594, "end_byte": 11595, "start_point": [291, 83], "end_point": [291, 84], "text": "E"}, {"type": "\"", "children": [], "start_byte": 11636, "end_byte": 11637, "start_point": [291, 125], "end_point": [291, 126], "text": " "}], "start_byte": 11594, "end_byte": 11637, "start_point": [291, 83], "end_point": [291, 126], "text": "E \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                      "}, {"type": ")", "children": [], "start_byte": 11637, "end_byte": 11638, "start_point": [291, 126], "end_point": [291, 127], "text": " "}], "start_byte": 11593, "end_byte": 11638, "start_point": [291, 82], "end_point": [291, 127], "text": "ME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                       "}], "start_byte": 11555, "end_byte": 11638, "start_point": [291, 44], "end_point": [291, 127], "text": ":from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                       "}, {"type": ";", "children": [], "start_byte": 11638, "end_byte": 11639, "start_point": [291, 127], "end_point": [291, 128], "text": " "}], "start_byte": 11535, "end_byte": 11639, "start_point": [291, 24], "end_point": [291, 128], "text": "name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                        "}, {"type": "expression_statement", "children": [{"type": "call_expression", "children": [{"type": "identifier", "children": [], "start_byte": 11664, "end_byte": 11669, "start_point": [292, 24], "end_point": [292, 29], "text": "     "}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 11669, "end_byte": 11670, "start_point": [292, 29], "end_point": [292, 30], "text": " "}, {"type": "identifier", "children": [], "start_byte": 11670, "end_byte": 11683, "start_point": [292, 30], "end_point": [292, 43], "text": "           }\n"}, {"type": ")", "children": [], "start_byte": 11683, "end_byte": 11684, "start_point": [292, 43], "end_point": [292, 44], "text": " "}], "start_byte": 11669, "end_byte": 11684, "start_point": [292, 29], "end_point": [292, 44], "text": "            }\n "}], "start_byte": 11664, "end_byte": 11684, "start_point": [292, 24], "end_point": [292, 44], "text": "                 }\n "}, {"type": ";", "children": [], "start_byte": 11684, "end_byte": 11685, "start_point": [292, 44], "end_point": [292, 45], "text": " "}], "start_byte": 11664, "end_byte": 11685, "start_point": [292, 24], "end_point": [292, 45], "text": "                 }\n  "}, {"type": "}", "children": [], "start_byte": 11706, "end_byte": 11707, "start_point": [293, 20], "end_point": [293, 21], "text": "p"}], "start_byte": 11509, "end_byte": 11707, "start_point": [290, 26], "end_point": [293, 21], "text": "                 let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                        usage(prog_name_str);\n                    }\n                    // p"}], "start_byte": 11503, "end_byte": 11707, "start_point": [290, 20], "end_point": [293, 21], "text": "                       let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                        usage(prog_name_str);\n                    }\n                    // p"}], "start_byte": 11503, "end_byte": 11707, "start_point": [290, 20], "end_point": [293, 21], "text": "                       let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                        usage(prog_name_str);\n                    }\n                    // p"}, {"type": "line_comment", "children": [], "start_byte": 11728, "end_byte": 11748, "start_point": [294, 20], "end_point": [294, 40], "text": "            },\n     "}, {"type": "}", "children": [], "start_byte": 11765, "end_byte": 11766, "start_point": [295, 16], "end_point": [295, 17], "text": "}"}], "start_byte": 11481, "end_byte": 11766, "start_point": [289, 28], "end_point": [295, 17], "text": "(&PROG_NAME), name);\n                        let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                        usage(prog_name_str);\n                    }\n                    // process::exit(0);\n                },\n                _ => {}"}, {"type": ",", "children": [], "start_byte": 11766, "end_byte": 11767, "start_point": [295, 17], "end_point": [295, 18], "text": "\n"}], "start_byte": 11469, "end_byte": 11767, "start_point": [289, 16], "end_point": [295, 18], "text": "m_utf8_lossy(&PROG_NAME), name);\n                        let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                        usage(prog_name_str);\n                    }\n                    // process::exit(0);\n                },\n                _ => {}\n"}, {"type": "match_arm", "children": [{"type": "match_pattern", "children": [{"type": "_", "children": [], "start_byte": 11784, "end_byte": 11785, "start_point": [296, 16], "end_point": [296, 17], "text": " "}, {"type": "if", "children": [], "start_byte": 11786, "end_byte": 11788, "start_point": [296, 18], "end_point": [296, 20], "text": "  "}, {"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 11789, "end_byte": 11793, "start_point": [296, 21], "end_point": [296, 25], "text": "}\n  "}, {"type": ".", "children": [], "start_byte": 11793, "end_byte": 11794, "start_point": [296, 25], "end_point": [296, 26], "text": " "}, {"type": "field_identifier", "children": [], "start_byte": 11794, "end_byte": 11805, "start_point": [296, 26], "end_point": [296, 37], "text": "     aa = &"}], "start_byte": 11789, "end_byte": 11805, "start_point": [296, 21], "end_point": [296, 37], "text": "}\n        aa = &"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 11805, "end_byte": 11806, "start_point": [296, 37], "end_point": [296, 38], "text": "c"}, {"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 11806, "end_byte": 11807, "start_point": [296, 38], "end_point": [296, 39], "text": "e"}, {"type": "\"", "children": [], "start_byte": 11809, "end_byte": 11810, "start_point": [296, 41], "end_point": [296, 42], "text": "."}], "start_byte": 11806, "end_byte": 11810, "start_point": [296, 38], "end_point": [296, 42], "text": "ell."}, {"type": ")", "children": [], "start_byte": 11810, "end_byte": 11811, "start_point": [296, 42], "end_point": [296, 43], "text": "l"}], "start_byte": 11805, "end_byte": 11811, "start_point": [296, 37], "end_point": [296, 43], "text": "cell.l"}], "start_byte": 11789, "end_byte": 11811, "start_point": [296, 21], "end_point": [296, 43], "text": "}\n        aa = &cell.l"}], "start_byte": 11784, "end_byte": 11811, "start_point": [296, 16], "end_point": [296, 43], "text": "     }\n        aa = &cell.l"}, {"type": "=>", "children": [], "start_byte": 11812, "end_byte": 11814, "start_point": [296, 44], "end_point": [296, 46], "text": "nk"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 11815, "end_byte": 11816, "start_point": [296, 47], "end_point": [296, 48], "text": "\n"}, {"type": "expression_statement", "children": [{"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 11837, "end_byte": 11843, "start_point": [297, 20], "end_point": [297, 26], "text": "bosity"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 11843, "end_byte": 11844, "start_point": [297, 26], "end_point": [297, 27], "text": "\u9650"}, {"type": "expression_statement", "children": [{"type": "macro_invocation", "children": [{"type": "identifier", "children": [], "start_byte": 11870, "end_byte": 11878, "start_point": [298, 24], "end_point": [298, 32], "text": "VERBOSIT"}, {"type": "!", "children": [], "start_byte": 11878, "end_byte": 11879, "start_point": [298, 32], "end_point": [298, 33], "text": "Y"}, {"type": "token_tree", "children": [{"type": "(", "children": [], "start_byte": 11879, "end_byte": 11880, "start_point": [298, 33], "end_point": [298, 34], "text": " "}, {"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 11880, "end_byte": 11881, "start_point": [298, 34], "end_point": [298, 35], "text": ">"}, {"type": "\"", "children": [], "start_byte": 11910, "end_byte": 11911, "start_point": [298, 64], "end_point": [298, 65], "text": "4"}], "start_byte": 11880, "end_byte": 11911, "start_point": [298, 34], "end_point": [298, 65], "text": "> 4 {\n            VERBOSITY = 4"}, {"type": "identifier", "children": [], "start_byte": 11913, "end_byte": 11919, "start_point": [298, 67], "end_point": [298, 73], "text": "      "}, {"type": "identifier", "children": [], "start_byte": 11921, "end_byte": 11936, "start_point": [298, 75], "end_point": [298, 90], "text": "}\n        if OP"}, {"type": "token_tree", "children": [{"type": "(", "children": [], "start_byte": 11936, "end_byte": 11937, "start_point": [298, 90], "end_point": [298, 91], "text": "_"}, {"type": "identifier", "children": [], "start_byte": 11938, "end_byte": 11947, "start_point": [298, 92], "end_point": [298, 101], "text": "ODE == 1 "}, {"type": ")", "children": [], "start_byte": 11947, "end_byte": 11948, "start_point": [298, 101], "end_point": [298, 102], "text": "&"}], "start_byte": 11936, "end_byte": 11948, "start_point": [298, 90], "end_point": [298, 102], "text": "_MODE == 1 &"}, {"type": "identifier", "children": [], "start_byte": 11950, "end_byte": 11954, "start_point": [298, 104], "end_point": [298, 108], "text": "SMAL"}, {"type": ")", "children": [], "start_byte": 11954, "end_byte": 11955, "start_point": [298, 108], "end_point": [298, 109], "text": "L"}], "start_byte": 11879, "end_byte": 11955, "start_point": [298, 33], "end_point": [298, 109], "text": " > 4 {\n            VERBOSITY = 4;\n        }\n        if OP_MODE == 1 && SMALL"}], "start_byte": 11870, "end_byte": 11955, "start_point": [298, 24], "end_point": [298, 109], "text": "VERBOSITY > 4 {\n            VERBOSITY = 4;\n        }\n        if OP_MODE == 1 && SMALL"}, {"type": ";", "children": [], "start_byte": 11955, "end_byte": 11956, "start_point": [298, 109], "end_point": [298, 110], "text": "_"}], "start_byte": 11870, "end_byte": 11956, "start_point": [298, 24], "end_point": [298, 110], "text": "VERBOSITY > 4 {\n            VERBOSITY = 4;\n        }\n        if OP_MODE == 1 && SMALL_"}, {"type": "let_declaration", "children": [{"type": "let", "children": [], "start_byte": 11981, "end_byte": 11984, "start_point": [299, 24], "end_point": [299, 27], "text": " {\n"}, {"type": "identifier", "children": [], "start_byte": 11985, "end_byte": 11998, "start_point": [299, 28], "end_point": [299, 41], "text": "           un"}, {"type": "=", "children": [], "start_byte": 11999, "end_byte": 12000, "start_point": [299, 42], "end_point": [299, 43], "text": "a"}, {"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "call_expression", "children": [{"type": "scoped_identifier", "children": [{"type": "scoped_identifier", "children": [{"type": "identifier", "children": [], "start_byte": 12001, "end_byte": 12004, "start_point": [299, 44], "end_point": [299, 47], "text": "e {"}, {"type": "::", "children": [], "start_byte": 12004, "end_byte": 12006, "start_point": [299, 47], "end_point": [299, 49], "text": "bl"}, {"type": "identifier", "children": [], "start_byte": 12006, "end_byte": 12009, "start_point": [299, 49], "end_point": [299, 52], "text": "ock"}], "start_byte": 12001, "end_byte": 12009, "start_point": [299, 44], "end_point": [299, 52], "text": "e {block"}, {"type": "::", "children": [], "start_byte": 12009, "end_byte": 12011, "start_point": [299, 52], "end_point": [299, 54], "text": "Si"}, {"type": "identifier", "children": [], "start_byte": 12011, "end_byte": 12020, "start_point": [299, 54], "end_point": [299, 63], "text": "ze100k = "}], "start_byte": 12001, "end_byte": 12020, "start_point": [299, 44], "end_point": [299, 63], "text": "e {blockSize100k = "}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 12020, "end_byte": 12021, "start_point": [299, 63], "end_point": [299, 64], "text": "2"}, {"type": "reference_expression", "children": [{"type": "&", "children": [], "start_byte": 12021, "end_byte": 12022, "start_point": [299, 64], "end_point": [299, 65], "text": ";"}, {"type": "identifier", "children": [], "start_byte": 12022, "end_byte": 12031, "start_point": [299, 65], "end_point": [299, 74], "text": " }\n      "}], "start_byte": 12021, "end_byte": 12031, "start_point": [299, 64], "end_point": [299, 74], "text": "; }\n      "}, {"type": ")", "children": [], "start_byte": 12031, "end_byte": 12032, "start_point": [299, 74], "end_point": [299, 75], "text": " "}], "start_byte": 12020, "end_byte": 12032, "start_point": [299, 63], "end_point": [299, 75], "text": "2; }\n       "}], "start_byte": 12001, "end_byte": 12032, "start_point": [299, 44], "end_point": [299, 75], "text": "e {blockSize100k = 2; }\n       "}, {"type": ".", "children": [], "start_byte": 12032, "end_byte": 12033, "start_point": [299, 75], "end_point": [299, 76], "text": " "}, {"type": "field_identifier", "children": [], "start_byte": 12033, "end_byte": 12039, "start_point": [299, 76], "end_point": [299, 82], "text": "}\n    "}], "start_byte": 12001, "end_byte": 12039, "start_point": [299, 44], "end_point": [299, 82], "text": "e {blockSize100k = 2; }\n        }\n    "}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 12039, "end_byte": 12040, "start_point": [299, 82], "end_point": [299, 83], "text": " "}, {"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 12040, "end_byte": 12041, "start_point": [299, 83], "end_point": [299, 84], "text": " "}, {"type": "\"", "children": [], "start_byte": 12082, "end_byte": 12083, "start_point": [299, 125], "end_point": [299, 126], "text": " "}], "start_byte": 12040, "end_byte": 12083, "start_point": [299, 83], "end_point": [299, 126], "text": "   if OP_MODE == 3 && SRC_MODE == 2 {\n     "}, {"type": ")", "children": [], "start_byte": 12083, "end_byte": 12084, "start_point": [299, 126], "end_point": [299, 127], "text": " "}], "start_byte": 12039, "end_byte": 12084, "start_point": [299, 82], "end_point": [299, 127], "text": "    if OP_MODE == 3 && SRC_MODE == 2 {\n      "}], "start_byte": 12001, "end_byte": 12084, "start_point": [299, 44], "end_point": [299, 127], "text": "e {blockSize100k = 2; }\n        }\n        if OP_MODE == 3 && SRC_MODE == 2 {\n      "}, {"type": ";", "children": [], "start_byte": 12084, "end_byte": 12085, "start_point": [299, 127], "end_point": [299, 128], "text": " "}], "start_byte": 11981, "end_byte": 12085, "start_point": [299, 24], "end_point": [299, 128], "text": " {\n            unsafe {blockSize100k = 2; }\n        }\n        if OP_MODE == 3 && SRC_MODE == 2 {\n       "}, {"type": "expression_statement", "children": [{"type": "call_expression", "children": [{"type": "identifier", "children": [], "start_byte": 12110, "end_byte": 12115, "start_point": [300, 24], "end_point": [300, 29], "text": "}: -c"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 12115, "end_byte": 12116, "start_point": [300, 29], "end_point": [300, 30], "text": " "}, {"type": "identifier", "children": [], "start_byte": 12116, "end_byte": 12129, "start_point": [300, 30], "end_point": [300, 43], "text": "and -t cannot"}, {"type": ")", "children": [], "start_byte": 12129, "end_byte": 12130, "start_point": [300, 43], "end_point": [300, 44], "text": " "}], "start_byte": 12115, "end_byte": 12130, "start_point": [300, 29], "end_point": [300, 44], "text": " and -t cannot "}], "start_byte": 12110, "end_byte": 12130, "start_point": [300, 24], "end_point": [300, 44], "text": "}: -c and -t cannot "}, {"type": ";", "children": [], "start_byte": 12130, "end_byte": 12131, "start_point": [300, 44], "end_point": [300, 45], "text": "b"}], "start_byte": 12110, "end_byte": 12131, "start_point": [300, 24], "end_point": [300, 45], "text": "}: -c and -t cannot b"}, {"type": "}", "children": [], "start_byte": 12152, "end_byte": 12153, "start_point": [301, 20], "end_point": [301, 21], "text": "r"}], "start_byte": 11843, "end_byte": 12153, "start_point": [297, 26], "end_point": [301, 21], "text": "\u9650\u5236\n    unsafe {\n        if VERBOSITY > 4 {\n            VERBOSITY = 4;\n        }\n        if OP_MODE == 1 && SMALL_MODE && blockSize100k > 2 {\n            unsafe {blockSize100k = 2; }\n        }\n        if OP_MODE == 3 && SRC_MODE == 2 {\n            unsafe {eprintln!(\"{}: -c and -t cannot be used together.\", Str"}], "start_byte": 11837, "end_byte": 12153, "start_point": [297, 20], "end_point": [301, 21], "text": "bosity\u9650\u5236\n    unsafe {\n        if VERBOSITY > 4 {\n            VERBOSITY = 4;\n        }\n        if OP_MODE == 1 && SMALL_MODE && blockSize100k > 2 {\n            unsafe {blockSize100k = 2; }\n        }\n        if OP_MODE == 3 && SRC_MODE == 2 {\n            unsafe {eprintln!(\"{}: -c and -t cannot be used together.\", Str"}], "start_byte": 11837, "end_byte": 12153, "start_point": [297, 20], "end_point": [301, 21], "text": "bosity\u9650\u5236\n    unsafe {\n        if VERBOSITY > 4 {\n            VERBOSITY = 4;\n        }\n        if OP_MODE == 1 && SMALL_MODE && blockSize100k > 2 {\n            unsafe {blockSize100k = 2; }\n        }\n        if OP_MODE == 3 && SRC_MODE == 2 {\n            unsafe {eprintln!(\"{}: -c and -t cannot be used together.\", Str"}, {"type": "line_comment", "children": [], "start_byte": 12174, "end_byte": 12194, "start_point": [302, 20], "end_point": [302, 40], "text": "&PROG_NAME));}\n     "}, {"type": "}", "children": [], "start_byte": 12211, "end_byte": 12212, "start_point": [303, 16], "end_point": [303, 17], "text": ":"}], "start_byte": 11815, "end_byte": 12212, "start_point": [296, 47], "end_point": [303, 17], "text": "\n    }\n\n\n\n    // \u8bbe\u7f6everbosity\u9650\u5236\n    unsafe {\n        if VERBOSITY > 4 {\n            VERBOSITY = 4;\n        }\n        if OP_MODE == 1 && SMALL_MODE && blockSize100k > 2 {\n            unsafe {blockSize100k = 2; }\n        }\n        if OP_MODE == 3 && SRC_MODE == 2 {\n            unsafe {eprintln!(\"{}: -c and -t cannot be used together.\", String::from_utf8_lossy(&PROG_NAME));}\n            // process:"}, {"type": ",", "children": [], "start_byte": 12212, "end_byte": 12213, "start_point": [303, 17], "end_point": [303, 18], "text": ":"}], "start_byte": 11784, "end_byte": 12213, "start_point": [296, 16], "end_point": [303, 18], "text": "     }\n        aa = &cell.link;\n    }\n\n\n\n    // \u8bbe\u7f6everbosity\u9650\u5236\n    unsafe {\n        if VERBOSITY > 4 {\n            VERBOSITY = 4;\n        }\n        if OP_MODE == 1 && SMALL_MODE && blockSize100k > 2 {\n            unsafe {blockSize100k = 2; }\n        }\n        if OP_MODE == 3 && SRC_MODE == 2 {\n            unsafe {eprintln!(\"{}: -c and -t cannot be used together.\", String::from_utf8_lossy(&PROG_NAME));}\n            // process::"}, {"type": "match_arm", "children": [{"type": "match_pattern", "children": [{"type": "_", "children": [], "start_byte": 12230, "end_byte": 12231, "start_point": [304, 16], "end_point": [304, 17], "text": "}"}], "start_byte": 12230, "end_byte": 12231, "start_point": [304, 16], "end_point": [304, 17], "text": "}"}, {"type": "=>", "children": [], "start_byte": 12232, "end_byte": 12234, "start_point": [304, 18], "end_point": [304, 20], "text": "  "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 12235, "end_byte": 12236, "start_point": [304, 21], "end_point": [304, 22], "text": " "}, {"type": "}", "children": [], "start_byte": 12236, "end_byte": 12237, "start_point": [304, 22], "end_point": [304, 23], "text": " "}], "start_byte": 12235, "end_byte": 12237, "start_point": [304, 21], "end_point": [304, 23], "text": "  "}], "start_byte": 12230, "end_byte": 12237, "start_point": [304, 16], "end_point": [304, 23], "text": "}\n     "}, {"type": "}", "children": [], "start_byte": 12250, "end_byte": 12251, "start_point": [305, 12], "end_point": [305, 13], "text": "E"}], "start_byte": 10562, "end_byte": 12251, "start_point": [273, 32], "end_point": [305, 13], "text": "E = true; },\n                \"--quiet\" => unsafe { NOISY = false; },\n                \"--version\" | \"--license\" => license(),\n                \"--exponential\" => unsafe { WORK_FACTOR = 1; },\n                \"--repetitive-best\" | \"--repetitive-fast\" => redundant(&name.as_bytes()),\n                \"--fast\" => unsafe { blockSize100k = 1; },\n                \"--best\" => unsafe { blockSize100k = 9; },\n                \"--verbose\" => unsafe { VERBOSITY += 1; },\n                \"--help\" => {\n                    unsafe{\n                        let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                        usage(prog_name_str);\n                    }\n                    // process::exit(0);\n                },\n                _ if name.starts_with(\"--\") => {\n                    unsafe{ \n                        eprintln!(\"\u7b2c\u4e8cmatch {}: Bad flag `{}`\", String::from_utf8_lossy(&PROG_NAME), name);\n                        let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                        usage(prog_name_str);\n                    }\n                    // process::exit(0);\n                },\n                _ => {}\n            }\n        }\n        aa = &cell.link;\n    }\n\n\n\n    // \u8bbe\u7f6everbosity\u9650\u5236\n    unsafe {\n        if VERBOSITY > 4 {\n            VERBOSITY = 4;\n        }\n        if OP_MODE == 1 && SMALL_MODE && blockSize100k > 2 {\n            unsafe {blockSize100k = 2; }\n        }\n        if OP_MODE == 3 && SRC_MODE == 2 {\n            unsafe {eprintln!(\"{}: -c and -t cannot be used together.\", String::from_utf8_lossy(&PROG_NAME));}\n            // process::exit(1);\n        }\n        if SRC_MODE"}], "start_byte": 10542, "end_byte": 12251, "start_point": [273, 12], "end_point": [305, 13], "text": "> unsafe { SMALL_MODE = true; },\n                \"--quiet\" => unsafe { NOISY = false; },\n                \"--version\" | \"--license\" => license(),\n                \"--exponential\" => unsafe { WORK_FACTOR = 1; },\n                \"--repetitive-best\" | \"--repetitive-fast\" => redundant(&name.as_bytes()),\n                \"--fast\" => unsafe { blockSize100k = 1; },\n                \"--best\" => unsafe { blockSize100k = 9; },\n                \"--verbose\" => unsafe { VERBOSITY += 1; },\n                \"--help\" => {\n                    unsafe{\n                        let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                        usage(prog_name_str);\n                    }\n                    // process::exit(0);\n                },\n                _ if name.starts_with(\"--\") => {\n                    unsafe{ \n                        eprintln!(\"\u7b2c\u4e8cmatch {}: Bad flag `{}`\", String::from_utf8_lossy(&PROG_NAME), name);\n                        let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                        usage(prog_name_str);\n                    }\n                    // process::exit(0);\n                },\n                _ => {}\n            }\n        }\n        aa = &cell.link;\n    }\n\n\n\n    // \u8bbe\u7f6everbosity\u9650\u5236\n    unsafe {\n        if VERBOSITY > 4 {\n            VERBOSITY = 4;\n        }\n        if OP_MODE == 1 && SMALL_MODE && blockSize100k > 2 {\n            unsafe {blockSize100k = 2; }\n        }\n        if OP_MODE == 3 && SRC_MODE == 2 {\n            unsafe {eprintln!(\"{}: -c and -t cannot be used together.\", String::from_utf8_lossy(&PROG_NAME));}\n            // process::exit(1);\n        }\n        if SRC_MODE"}], "start_byte": 10542, "end_byte": 12251, "start_point": [273, 12], "end_point": [305, 13], "text": "> unsafe { SMALL_MODE = true; },\n                \"--quiet\" => unsafe { NOISY = false; },\n                \"--version\" | \"--license\" => license(),\n                \"--exponential\" => unsafe { WORK_FACTOR = 1; },\n                \"--repetitive-best\" | \"--repetitive-fast\" => redundant(&name.as_bytes()),\n                \"--fast\" => unsafe { blockSize100k = 1; },\n                \"--best\" => unsafe { blockSize100k = 9; },\n                \"--verbose\" => unsafe { VERBOSITY += 1; },\n                \"--help\" => {\n                    unsafe{\n                        let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                        usage(prog_name_str);\n                    }\n                    // process::exit(0);\n                },\n                _ if name.starts_with(\"--\") => {\n                    unsafe{ \n                        eprintln!(\"\u7b2c\u4e8cmatch {}: Bad flag `{}`\", String::from_utf8_lossy(&PROG_NAME), name);\n                        let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                        usage(prog_name_str);\n                    }\n                    // process::exit(0);\n                },\n                _ => {}\n            }\n        }\n        aa = &cell.link;\n    }\n\n\n\n    // \u8bbe\u7f6everbosity\u9650\u5236\n    unsafe {\n        if VERBOSITY > 4 {\n            VERBOSITY = 4;\n        }\n        if OP_MODE == 1 && SMALL_MODE && blockSize100k > 2 {\n            unsafe {blockSize100k = 2; }\n        }\n        if OP_MODE == 3 && SRC_MODE == 2 {\n            unsafe {eprintln!(\"{}: -c and -t cannot be used together.\", String::from_utf8_lossy(&PROG_NAME));}\n            // process::exit(1);\n        }\n        if SRC_MODE"}, {"type": "}", "children": [], "start_byte": 12260, "end_byte": 12261, "start_point": [306, 8], "end_point": [306, 9], "text": "N"}], "start_byte": 10528, "end_byte": 12261, "start_point": [272, 39], "end_point": [306, 9], "text": "   \"--small\" => unsafe { SMALL_MODE = true; },\n                \"--quiet\" => unsafe { NOISY = false; },\n                \"--version\" | \"--license\" => license(),\n                \"--exponential\" => unsafe { WORK_FACTOR = 1; },\n                \"--repetitive-best\" | \"--repetitive-fast\" => redundant(&name.as_bytes()),\n                \"--fast\" => unsafe { blockSize100k = 1; },\n                \"--best\" => unsafe { blockSize100k = 9; },\n                \"--verbose\" => unsafe { VERBOSITY += 1; },\n                \"--help\" => {\n                    unsafe{\n                        let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                        usage(prog_name_str);\n                    }\n                    // process::exit(0);\n                },\n                _ if name.starts_with(\"--\") => {\n                    unsafe{ \n                        eprintln!(\"\u7b2c\u4e8cmatch {}: Bad flag `{}`\", String::from_utf8_lossy(&PROG_NAME), name);\n                        let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                        usage(prog_name_str);\n                    }\n                    // process::exit(0);\n                },\n                _ => {}\n            }\n        }\n        aa = &cell.link;\n    }\n\n\n\n    // \u8bbe\u7f6everbosity\u9650\u5236\n    unsafe {\n        if VERBOSITY > 4 {\n            VERBOSITY = 4;\n        }\n        if OP_MODE == 1 && SMALL_MODE && blockSize100k > 2 {\n            unsafe {blockSize100k = 2; }\n        }\n        if OP_MODE == 3 && SRC_MODE == 2 {\n            unsafe {eprintln!(\"{}: -c and -t cannot be used together.\", String::from_utf8_lossy(&PROG_NAME));}\n            // process::exit(1);\n        }\n        if SRC_MODE == 2 && N"}], "start_byte": 10497, "end_byte": 12261, "start_point": [272, 8], "end_point": [306, 9], "text": "_FILES = true; },\n                \"--small\" => unsafe { SMALL_MODE = true; },\n                \"--quiet\" => unsafe { NOISY = false; },\n                \"--version\" | \"--license\" => license(),\n                \"--exponential\" => unsafe { WORK_FACTOR = 1; },\n                \"--repetitive-best\" | \"--repetitive-fast\" => redundant(&name.as_bytes()),\n                \"--fast\" => unsafe { blockSize100k = 1; },\n                \"--best\" => unsafe { blockSize100k = 9; },\n                \"--verbose\" => unsafe { VERBOSITY += 1; },\n                \"--help\" => {\n                    unsafe{\n                        let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                        usage(prog_name_str);\n                    }\n                    // process::exit(0);\n                },\n                _ if name.starts_with(\"--\") => {\n                    unsafe{ \n                        eprintln!(\"\u7b2c\u4e8cmatch {}: Bad flag `{}`\", String::from_utf8_lossy(&PROG_NAME), name);\n                        let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                        usage(prog_name_str);\n                    }\n                    // process::exit(0);\n                },\n                _ => {}\n            }\n        }\n        aa = &cell.link;\n    }\n\n\n\n    // \u8bbe\u7f6everbosity\u9650\u5236\n    unsafe {\n        if VERBOSITY > 4 {\n            VERBOSITY = 4;\n        }\n        if OP_MODE == 1 && SMALL_MODE && blockSize100k > 2 {\n            unsafe {blockSize100k = 2; }\n        }\n        if OP_MODE == 3 && SRC_MODE == 2 {\n            unsafe {eprintln!(\"{}: -c and -t cannot be used together.\", String::from_utf8_lossy(&PROG_NAME));}\n            // process::exit(1);\n        }\n        if SRC_MODE == 2 && N"}], "start_byte": 10497, "end_byte": 12261, "start_point": [272, 8], "end_point": [306, 9], "text": "_FILES = true; },\n                \"--small\" => unsafe { SMALL_MODE = true; },\n                \"--quiet\" => unsafe { NOISY = false; },\n                \"--version\" | \"--license\" => license(),\n                \"--exponential\" => unsafe { WORK_FACTOR = 1; },\n                \"--repetitive-best\" | \"--repetitive-fast\" => redundant(&name.as_bytes()),\n                \"--fast\" => unsafe { blockSize100k = 1; },\n                \"--best\" => unsafe { blockSize100k = 9; },\n                \"--verbose\" => unsafe { VERBOSITY += 1; },\n                \"--help\" => {\n                    unsafe{\n                        let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                        usage(prog_name_str);\n                    }\n                    // process::exit(0);\n                },\n                _ if name.starts_with(\"--\") => {\n                    unsafe{ \n                        eprintln!(\"\u7b2c\u4e8cmatch {}: Bad flag `{}`\", String::from_utf8_lossy(&PROG_NAME), name);\n                        let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                        usage(prog_name_str);\n                    }\n                    // process::exit(0);\n                },\n                _ => {}\n            }\n        }\n        aa = &cell.link;\n    }\n\n\n\n    // \u8bbe\u7f6everbosity\u9650\u5236\n    unsafe {\n        if VERBOSITY > 4 {\n            VERBOSITY = 4;\n        }\n        if OP_MODE == 1 && SMALL_MODE && blockSize100k > 2 {\n            unsafe {blockSize100k = 2; }\n        }\n        if OP_MODE == 3 && SRC_MODE == 2 {\n            unsafe {eprintln!(\"{}: -c and -t cannot be used together.\", String::from_utf8_lossy(&PROG_NAME));}\n            // process::exit(1);\n        }\n        if SRC_MODE == 2 && N"}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 12270, "end_byte": 12272, "start_point": [307, 8], "end_point": [307, 10], "text": "AM"}, {"type": "=", "children": [], "start_byte": 12273, "end_byte": 12274, "start_point": [307, 11], "end_point": [307, 12], "text": "S"}, {"type": "reference_expression", "children": [{"type": "&", "children": [], "start_byte": 12275, "end_byte": 12276, "start_point": [307, 13], "end_point": [307, 14], "text": "="}, {"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 12276, "end_byte": 12280, "start_point": [307, 14], "end_point": [307, 18], "text": "= 0 "}, {"type": ".", "children": [], "start_byte": 12280, "end_byte": 12281, "start_point": [307, 18], "end_point": [307, 19], "text": "{"}, {"type": "field_identifier", "children": [], "start_byte": 12281, "end_byte": 12285, "start_point": [307, 19], "end_point": [307, 23], "text": "\n   "}], "start_byte": 12276, "end_byte": 12285, "start_point": [307, 14], "end_point": [307, 23], "text": "= 0 {\n   "}], "start_byte": 12275, "end_byte": 12285, "start_point": [307, 13], "end_point": [307, 23], "text": "== 0 {\n   "}], "start_byte": 12270, "end_byte": 12285, "start_point": [307, 8], "end_point": [307, 23], "text": "AMES == 0 {\n   "}, {"type": ";", "children": [], "start_byte": 12285, "end_byte": 12286, "start_point": [307, 23], "end_point": [307, 24], "text": " "}], "start_byte": 12270, "end_byte": 12286, "start_point": [307, 8], "end_point": [307, 24], "text": "AMES == 0 {\n    "}, {"type": "}", "children": [], "start_byte": 12291, "end_byte": 12292, "start_point": [308, 4], "end_point": [308, 5], "text": " "}], "start_byte": 10487, "end_byte": 12292, "start_point": [271, 30], "end_point": [308, 5], "text": "KEEP_INPUT_FILES = true; },\n                \"--small\" => unsafe { SMALL_MODE = true; },\n                \"--quiet\" => unsafe { NOISY = false; },\n                \"--version\" | \"--license\" => license(),\n                \"--exponential\" => unsafe { WORK_FACTOR = 1; },\n                \"--repetitive-best\" | \"--repetitive-fast\" => redundant(&name.as_bytes()),\n                \"--fast\" => unsafe { blockSize100k = 1; },\n                \"--best\" => unsafe { blockSize100k = 9; },\n                \"--verbose\" => unsafe { VERBOSITY += 1; },\n                \"--help\" => {\n                    unsafe{\n                        let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                        usage(prog_name_str);\n                    }\n                    // process::exit(0);\n                },\n                _ if name.starts_with(\"--\") => {\n                    unsafe{ \n                        eprintln!(\"\u7b2c\u4e8cmatch {}: Bad flag `{}`\", String::from_utf8_lossy(&PROG_NAME), name);\n                        let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                        usage(prog_name_str);\n                    }\n                    // process::exit(0);\n                },\n                _ => {}\n            }\n        }\n        aa = &cell.link;\n    }\n\n\n\n    // \u8bbe\u7f6everbosity\u9650\u5236\n    unsafe {\n        if VERBOSITY > 4 {\n            VERBOSITY = 4;\n        }\n        if OP_MODE == 1 && SMALL_MODE && blockSize100k > 2 {\n            unsafe {blockSize100k = 2; }\n        }\n        if OP_MODE == 3 && SRC_MODE == 2 {\n            unsafe {eprintln!(\"{}: -c and -t cannot be used together.\", String::from_utf8_lossy(&PROG_NAME));}\n            // process::exit(1);\n        }\n        if SRC_MODE == 2 && NUM_FILE_NAMES == 0 {\n          "}], "start_byte": 10461, "end_byte": 12292, "start_point": [271, 4], "end_point": [308, 5], "text": "     \"--keep\" => unsafe { KEEP_INPUT_FILES = true; },\n                \"--small\" => unsafe { SMALL_MODE = true; },\n                \"--quiet\" => unsafe { NOISY = false; },\n                \"--version\" | \"--license\" => license(),\n                \"--exponential\" => unsafe { WORK_FACTOR = 1; },\n                \"--repetitive-best\" | \"--repetitive-fast\" => redundant(&name.as_bytes()),\n                \"--fast\" => unsafe { blockSize100k = 1; },\n                \"--best\" => unsafe { blockSize100k = 9; },\n                \"--verbose\" => unsafe { VERBOSITY += 1; },\n                \"--help\" => {\n                    unsafe{\n                        let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                        usage(prog_name_str);\n                    }\n                    // process::exit(0);\n                },\n                _ if name.starts_with(\"--\") => {\n                    unsafe{ \n                        eprintln!(\"\u7b2c\u4e8cmatch {}: Bad flag `{}`\", String::from_utf8_lossy(&PROG_NAME), name);\n                        let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                        usage(prog_name_str);\n                    }\n                    // process::exit(0);\n                },\n                _ => {}\n            }\n        }\n        aa = &cell.link;\n    }\n\n\n\n    // \u8bbe\u7f6everbosity\u9650\u5236\n    unsafe {\n        if VERBOSITY > 4 {\n            VERBOSITY = 4;\n        }\n        if OP_MODE == 1 && SMALL_MODE && blockSize100k > 2 {\n            unsafe {blockSize100k = 2; }\n        }\n        if OP_MODE == 3 && SRC_MODE == 2 {\n            unsafe {eprintln!(\"{}: -c and -t cannot be used together.\", String::from_utf8_lossy(&PROG_NAME));}\n            // process::exit(1);\n        }\n        if SRC_MODE == 2 && NUM_FILE_NAMES == 0 {\n          "}], "start_byte": 10461, "end_byte": 12292, "start_point": [271, 4], "end_point": [308, 5], "text": "     \"--keep\" => unsafe { KEEP_INPUT_FILES = true; },\n                \"--small\" => unsafe { SMALL_MODE = true; },\n                \"--quiet\" => unsafe { NOISY = false; },\n                \"--version\" | \"--license\" => license(),\n                \"--exponential\" => unsafe { WORK_FACTOR = 1; },\n                \"--repetitive-best\" | \"--repetitive-fast\" => redundant(&name.as_bytes()),\n                \"--fast\" => unsafe { blockSize100k = 1; },\n                \"--best\" => unsafe { blockSize100k = 9; },\n                \"--verbose\" => unsafe { VERBOSITY += 1; },\n                \"--help\" => {\n                    unsafe{\n                        let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                        usage(prog_name_str);\n                    }\n                    // process::exit(0);\n                },\n                _ if name.starts_with(\"--\") => {\n                    unsafe{ \n                        eprintln!(\"\u7b2c\u4e8cmatch {}: Bad flag `{}`\", String::from_utf8_lossy(&PROG_NAME), name);\n                        let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                        usage(prog_name_str);\n                    }\n                    // process::exit(0);\n                },\n                _ => {}\n            }\n        }\n        aa = &cell.link;\n    }\n\n\n\n    // \u8bbe\u7f6everbosity\u9650\u5236\n    unsafe {\n        if VERBOSITY > 4 {\n            VERBOSITY = 4;\n        }\n        if OP_MODE == 1 && SMALL_MODE && blockSize100k > 2 {\n            unsafe {blockSize100k = 2; }\n        }\n        if OP_MODE == 3 && SRC_MODE == 2 {\n            unsafe {eprintln!(\"{}: -c and -t cannot be used together.\", String::from_utf8_lossy(&PROG_NAME));}\n            // process::exit(1);\n        }\n        if SRC_MODE == 2 && NUM_FILE_NAMES == 0 {\n          "}, {"type": "line_comment", "children": [], "start_byte": 12300, "end_byte": 12324, "start_point": [312, 4], "end_point": [312, 28], "text": "DE = 1;\n        }\n      "}, {"type": "expression_statement", "children": [{"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 12329, "end_byte": 12335, "start_point": [313, 4], "end_point": [313, 10], "text": "OP_MOD"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 12336, "end_byte": 12337, "start_point": [313, 11], "end_point": [313, 12], "text": " "}, {"type": "expression_statement", "children": [{"type": "if_expression", "children": [{"type": "if", "children": [], "start_byte": 12346, "end_byte": 12348, "start_point": [314, 8], "end_point": [314, 10], "text": "  "}, {"type": "binary_expression", "children": [{"type": "identifier", "children": [], "start_byte": 12349, "end_byte": 12358, "start_point": [314, 11], "end_point": [314, 20], "text": "       un"}, {"type": ">", "children": [], "start_byte": 12359, "end_byte": 12360, "start_point": [314, 21], "end_point": [314, 22], "text": "a"}, {"type": "integer_literal", "children": [], "start_byte": 12361, "end_byte": 12362, "start_point": [314, 23], "end_point": [314, 24], "text": "e"}], "start_byte": 12349, "end_byte": 12362, "start_point": [314, 11], "end_point": [314, 24], "text": "       unsafe"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 12363, "end_byte": 12364, "start_point": [314, 25], "end_point": [314, 26], "text": "{"}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 12377, "end_byte": 12386, "start_point": [315, 12], "end_point": [315, 21], "text": " = 0; }\n "}, {"type": "=", "children": [], "start_byte": 12387, "end_byte": 12388, "start_point": [315, 22], "end_point": [315, 23], "text": " "}, {"type": "integer_literal", "children": [], "start_byte": 12389, "end_byte": 12390, "start_point": [315, 24], "end_point": [315, 25], "text": " "}], "start_byte": 12377, "end_byte": 12390, "start_point": [315, 12], "end_point": [315, 25], "text": " = 0; }\n     "}, {"type": ";", "children": [], "start_byte": 12390, "end_byte": 12391, "start_point": [315, 25], "end_point": [315, 26], "text": " "}], "start_byte": 12377, "end_byte": 12391, "start_point": [315, 12], "end_point": [315, 26], "text": " = 0; }\n      "}, {"type": "}", "children": [], "start_byte": 12400, "end_byte": 12401, "start_point": [316, 8], "end_point": [316, 9], "text": "\n"}], "start_byte": 12363, "end_byte": 12401, "start_point": [314, 25], "end_point": [316, 9], "text": "{blockSize100k = 0; }\n        }\n    }\n"}], "start_byte": 12346, "end_byte": 12401, "start_point": [314, 8], "end_point": [316, 9], "text": "          unsafe {blockSize100k = 0; }\n        }\n    }\n"}], "start_byte": 12346, "end_byte": 12401, "start_point": [314, 8], "end_point": [316, 9], "text": "          unsafe {blockSize100k = 0; }\n        }\n    }\n"}, {"type": "expression_statement", "children": [{"type": "if_expression", "children": [{"type": "if", "children": [], "start_byte": 12410, "end_byte": 12412, "start_point": [317, 8], "end_point": [317, 10], "text": "\u64cd\u4f5c"}, {"type": "binary_expression", "children": [{"type": "binary_expression", "children": [{"type": "binary_expression", "children": [{"type": "identifier", "children": [], "start_byte": 12413, "end_byte": 12420, "start_point": [317, 11], "end_point": [317, 18], "text": "\u5f0f\u6267\u884c\u76f8\u5e94\u7684\u64cd"}, {"type": "==", "children": [], "start_byte": 12421, "end_byte": 12423, "start_point": [317, 19], "end_point": [317, 21], "text": "\n "}, {"type": "integer_literal", "children": [], "start_byte": 12424, "end_byte": 12425, "start_point": [317, 22], "end_point": [317, 23], "text": " "}], "start_byte": 12413, "end_byte": 12425, "start_point": [317, 11], "end_point": [317, 23], "text": "\u5f0f\u6267\u884c\u76f8\u5e94\u7684\u64cd\u4f5c\n   "}, {"type": "&&", "children": [], "start_byte": 12426, "end_byte": 12428, "start_point": [317, 24], "end_point": [317, 26], "text": "un"}, {"type": "identifier", "children": [], "start_byte": 12429, "end_byte": 12439, "start_point": [317, 27], "end_point": [317, 37], "text": "afe {\n    "}], "start_byte": 12413, "end_byte": 12439, "start_point": [317, 11], "end_point": [317, 37], "text": "\u5f0f\u6267\u884c\u76f8\u5e94\u7684\u64cd\u4f5c\n    unsafe {\n    "}, {"type": "&&", "children": [], "start_byte": 12440, "end_byte": 12442, "start_point": [317, 38], "end_point": [317, 40], "text": "  "}, {"type": "binary_expression", "children": [{"type": "identifier", "children": [], "start_byte": 12443, "end_byte": 12456, "start_point": [317, 41], "end_point": [317, 54], "text": "// println!(\""}, {"type": ">", "children": [], "start_byte": 12457, "end_byte": 12458, "start_point": [317, 55], "end_point": [317, 56], "text": "P"}, {"type": "integer_literal", "children": [], "start_byte": 12459, "end_byte": 12460, "start_point": [317, 57], "end_point": [317, 58], "text": "M"}], "start_byte": 12443, "end_byte": 12460, "start_point": [317, 41], "end_point": [317, 58], "text": "// println!(\"OP_M"}], "start_byte": 12413, "end_byte": 12460, "start_point": [317, 11], "end_point": [317, 58], "text": "\u5f0f\u6267\u884c\u76f8\u5e94\u7684\u64cd\u4f5c\n    unsafe {\n        // println!(\"OP_M"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 12461, "end_byte": 12462, "start_point": [317, 59], "end_point": [317, 60], "text": "D"}, {"type": "expression_statement", "children": [{"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 12475, "end_byte": 12481, "start_point": [318, 12], "end_point": [318, 18], "text": "DE);\n "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 12482, "end_byte": 12483, "start_point": [318, 19], "end_point": [318, 20], "text": " "}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 12483, "end_byte": 12496, "start_point": [318, 20], "end_point": [318, 33], "text": "     // print"}, {"type": "=", "children": [], "start_byte": 12497, "end_byte": 12498, "start_point": [318, 34], "end_point": [318, 35], "text": "n"}, {"type": "integer_literal", "children": [], "start_byte": 12499, "end_byte": 12500, "start_point": [318, 36], "end_point": [318, 37], "text": "("}], "start_byte": 12483, "end_byte": 12500, "start_point": [318, 20], "end_point": [318, 37], "text": "     // println!("}, {"type": ";", "children": [], "start_byte": 12500, "end_byte": 12501, "start_point": [318, 37], "end_point": [318, 38], "text": "\""}], "start_byte": 12483, "end_byte": 12501, "start_point": [318, 20], "end_point": [318, 38], "text": "     // println!(\""}, {"type": "}", "children": [], "start_byte": 12502, "end_byte": 12503, "start_point": [318, 39], "end_point": [318, 40], "text": "R"}], "start_byte": 12482, "end_byte": 12503, "start_point": [318, 19], "end_point": [318, 40], "text": "      // println!(\"SR"}], "start_byte": 12475, "end_byte": 12503, "start_point": [318, 12], "end_point": [318, 40], "text": "DE);\n        // println!(\"SR"}], "start_byte": 12475, "end_byte": 12503, "start_point": [318, 12], "end_point": [318, 40], "text": "DE);\n        // println!(\"SR"}, {"type": "}", "children": [], "start_byte": 12512, "end_byte": 12513, "start_point": [319, 8], "end_point": [319, 9], "text": "}"}], "start_byte": 12461, "end_byte": 12513, "start_point": [317, 59], "end_point": [319, 9], "text": "DE: {}\", OP_MODE);\n        // println!(\"SRC_MODE: {}"}], "start_byte": 12410, "end_byte": 12513, "start_point": [317, 8], "end_point": [319, 9], "text": "\u64cd\u4f5c\u6a21\u5f0f\u6267\u884c\u76f8\u5e94\u7684\u64cd\u4f5c\n    unsafe {\n        // println!(\"OP_MODE: {}\", OP_MODE);\n        // println!(\"SRC_MODE: {}"}], "start_byte": 12410, "end_byte": 12513, "start_point": [317, 8], "end_point": [319, 9], "text": "\u64cd\u4f5c\u6a21\u5f0f\u6267\u884c\u76f8\u5e94\u7684\u64cd\u4f5c\n    unsafe {\n        // println!(\"OP_MODE: {}\", OP_MODE);\n        // println!(\"SRC_MODE: {}"}, {"type": "expression_statement", "children": [{"type": "if_expression", "children": [{"type": "if", "children": [], "start_byte": 12522, "end_byte": 12524, "start_point": [320, 8], "end_point": [320, 10], "text": "DE"}, {"type": "binary_expression", "children": [{"type": "binary_expression", "children": [{"type": "identifier", "children": [], "start_byte": 12525, "end_byte": 12532, "start_point": [320, 11], "end_point": [320, 18], "text": ";\n     "}, {"type": "==", "children": [], "start_byte": 12533, "end_byte": 12535, "start_point": [320, 19], "end_point": [320, 21], "text": "  "}, {"type": "integer_literal", "children": [], "start_byte": 12536, "end_byte": 12537, "start_point": [320, 22], "end_point": [320, 23], "text": "a"}], "start_byte": 12525, "end_byte": 12537, "start_point": [320, 11], "end_point": [320, 23], "text": ";\n        ma"}, {"type": "&&", "children": [], "start_byte": 12538, "end_byte": 12540, "start_point": [320, 24], "end_point": [320, 26], "text": "ch"}, {"type": "binary_expression", "children": [{"type": "identifier", "children": [], "start_byte": 12541, "end_byte": 12549, "start_point": [320, 27], "end_point": [320, 35], "text": "OP_MODE "}, {"type": "==", "children": [], "start_byte": 12550, "end_byte": 12552, "start_point": [320, 36], "end_point": [320, 38], "text": "\n "}, {"type": "integer_literal", "children": [], "start_byte": 12553, "end_byte": 12554, "start_point": [320, 39], "end_point": [320, 40], "text": " "}], "start_byte": 12541, "end_byte": 12554, "start_point": [320, 27], "end_point": [320, 40], "text": "OP_MODE {\n   "}], "start_byte": 12525, "end_byte": 12554, "start_point": [320, 11], "end_point": [320, 40], "text": ";\n        match OP_MODE {\n   "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 12555, "end_byte": 12556, "start_point": [320, 41], "end_point": [320, 42], "text": " "}, {"type": "expression_statement", "children": [{"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 12569, "end_byte": 12575, "start_point": [321, 12], "end_point": [321, 18], "text": "\n     "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 12576, "end_byte": 12577, "start_point": [321, 19], "end_point": [321, 20], "text": " "}, {"type": "expression_statement", "children": [{"type": "macro_invocation", "children": [{"type": "identifier", "children": [], "start_byte": 12577, "end_byte": 12585, "start_point": [321, 20], "end_point": [321, 28], "text": "        "}, {"type": "!", "children": [], "start_byte": 12585, "end_byte": 12586, "start_point": [321, 28], "end_point": [321, 29], "text": " "}, {"type": "token_tree", "children": [{"type": "(", "children": [], "start_byte": 12586, "end_byte": 12587, "start_point": [321, 29], "end_point": [321, 30], "text": "i"}, {"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 12587, "end_byte": 12588, "start_point": [321, 30], "end_point": [321, 31], "text": "f"}, {"type": "\"", "children": [], "start_byte": 12626, "end_byte": 12627, "start_point": [321, 69], "end_point": [321, 70], "text": "o"}], "start_byte": 12587, "end_byte": 12627, "start_point": [321, 30], "end_point": [321, 70], "text": "f SRC_MODE == 1 {\n                    co"}, {"type": "identifier", "children": [], "start_byte": 12629, "end_byte": 12635, "start_point": [321, 72], "end_point": [321, 78], "text": "ress(N"}, {"type": "identifier", "children": [], "start_byte": 12637, "end_byte": 12652, "start_point": [321, 80], "end_point": [321, 95], "text": "e)?;\n          "}, {"type": "token_tree", "children": [{"type": "(", "children": [], "start_byte": 12652, "end_byte": 12653, "start_point": [321, 95], "end_point": [321, 96], "text": " "}, {"type": "identifier", "children": [], "start_byte": 12654, "end_byte": 12663, "start_point": [321, 97], "end_point": [321, 106], "text": "    } els"}, {"type": ")", "children": [], "start_byte": 12663, "end_byte": 12664, "start_point": [321, 106], "end_point": [321, 107], "text": "e"}], "start_byte": 12652, "end_byte": 12664, "start_point": [321, 95], "end_point": [321, 107], "text": "      } else"}, {"type": ")", "children": [], "start_byte": 12664, "end_byte": 12665, "start_point": [321, 107], "end_point": [321, 108], "text": " "}], "start_byte": 12586, "end_byte": 12665, "start_point": [321, 29], "end_point": [321, 108], "text": "if SRC_MODE == 1 {\n                    compress(None)?;\n                } else "}], "start_byte": 12577, "end_byte": 12665, "start_point": [321, 20], "end_point": [321, 108], "text": "         if SRC_MODE == 1 {\n                    compress(None)?;\n                } else "}, {"type": ";", "children": [], "start_byte": 12665, "end_byte": 12666, "start_point": [321, 108], "end_point": [321, 109], "text": "{"}], "start_byte": 12577, "end_byte": 12666, "start_point": [321, 20], "end_point": [321, 109], "text": "         if SRC_MODE == 1 {\n                    compress(None)?;\n                } else {"}, {"type": "}", "children": [], "start_byte": 12666, "end_byte": 12667, "start_point": [321, 109], "end_point": [321, 110], "text": "\n"}], "start_byte": 12576, "end_byte": 12667, "start_point": [321, 19], "end_point": [321, 110], "text": "          if SRC_MODE == 1 {\n                    compress(None)?;\n                } else {\n"}], "start_byte": 12569, "end_byte": 12667, "start_point": [321, 12], "end_point": [321, 110], "text": "\n                if SRC_MODE == 1 {\n                    compress(None)?;\n                } else {\n"}], "start_byte": 12569, "end_byte": 12667, "start_point": [321, 12], "end_point": [321, 110], "text": "\n                if SRC_MODE == 1 {\n                    compress(None)?;\n                } else {\n"}, {"type": "line_comment", "children": [], "start_byte": 12680, "end_byte": 12700, "start_point": [322, 12], "end_point": [322, 32], "text": "       decode = true"}, {"type": "}", "children": [], "start_byte": 12709, "end_byte": 12710, "start_point": [323, 8], "end_point": [323, 9], "text": " "}], "start_byte": 12555, "end_byte": 12710, "start_point": [320, 41], "end_point": [323, 9], "text": "        1 => {\n                if SRC_MODE == 1 {\n                    compress(None)?;\n                } else {\n                    decode = true;\n        "}], "start_byte": 12522, "end_byte": 12710, "start_point": [320, 8], "end_point": [323, 9], "text": "DE);\n        match OP_MODE {\n            1 => {\n                if SRC_MODE == 1 {\n                    compress(None)?;\n                } else {\n                    decode = true;\n        "}], "start_byte": 12522, "end_byte": 12710, "start_point": [320, 8], "end_point": [323, 9], "text": "DE);\n        match OP_MODE {\n            1 => {\n                if SRC_MODE == 1 {\n                    compress(None)?;\n                } else {\n                    decode = true;\n        "}, {"type": "expression_statement", "children": [{"type": "if_expression", "children": [{"type": "if", "children": [], "start_byte": 12719, "end_byte": 12721, "start_point": [324, 8], "end_point": [324, 10], "text": "  "}, {"type": "binary_expression", "children": [{"type": "binary_expression", "children": [{"type": "identifier", "children": [], "start_byte": 12722, "end_byte": 12730, "start_point": [324, 11], "end_point": [324, 19], "text": "process_"}, {"type": "==", "children": [], "start_byte": 12731, "end_byte": 12733, "start_point": [324, 20], "end_point": [324, 22], "text": "el"}, {"type": "integer_literal", "children": [], "start_byte": 12734, "end_byte": 12735, "start_point": [324, 23], "end_point": [324, 24], "text": "s"}], "start_byte": 12722, "end_byte": 12735, "start_point": [324, 11], "end_point": [324, 24], "text": "process_cells"}, {"type": "&&", "children": [], "start_byte": 12736, "end_byte": 12738, "start_point": [324, 25], "end_point": [324, 27], "text": "&a"}, {"type": "binary_expression", "children": [{"type": "identifier", "children": [], "start_byte": 12739, "end_byte": 12753, "start_point": [324, 28], "end_point": [324, 42], "text": "g_list, &mut d"}, {"type": "==", "children": [], "start_byte": 12754, "end_byte": 12756, "start_point": [324, 43], "end_point": [324, 45], "text": "co"}, {"type": "integer_literal", "children": [], "start_byte": 12757, "end_byte": 12758, "start_point": [324, 46], "end_point": [324, 47], "text": "e"}], "start_byte": 12739, "end_byte": 12758, "start_point": [324, 28], "end_point": [324, 47], "text": "g_list, &mut decode"}], "start_byte": 12722, "end_byte": 12758, "start_point": [324, 11], "end_point": [324, 47], "text": "process_cells(&arg_list, &mut decode"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 12759, "end_byte": 12760, "start_point": [324, 48], "end_point": [324, 49], "text": ";"}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 12773, "end_byte": 12781, "start_point": [325, 12], "end_point": [325, 20], "text": "    }\n  "}, {"type": "=", "children": [], "start_byte": 12782, "end_byte": 12783, "start_point": [325, 21], "end_point": [325, 22], "text": " "}, {"type": "integer_literal", "children": [], "start_byte": 12784, "end_byte": 12785, "start_point": [325, 23], "end_point": [325, 24], "text": " "}], "start_byte": 12773, "end_byte": 12785, "start_point": [325, 12], "end_point": [325, 24], "text": "    }\n      "}, {"type": ";", "children": [], "start_byte": 12785, "end_byte": 12786, "start_point": [325, 24], "end_point": [325, 25], "text": " "}], "start_byte": 12773, "end_byte": 12786, "start_point": [325, 12], "end_point": [325, 25], "text": "    }\n       "}, {"type": "}", "children": [], "start_byte": 12795, "end_byte": 12796, "start_point": [326, 8], "end_point": [326, 9], "text": " "}], "start_byte": 12759, "end_byte": 12796, "start_point": [324, 48], "end_point": [326, 9], "text": ";\n                }\n            },\n  "}], "start_byte": 12719, "end_byte": 12796, "start_point": [324, 8], "end_point": [326, 9], "text": "   process_cells(&arg_list, &mut decode);\n                }\n            },\n  "}], "start_byte": 12719, "end_byte": 12796, "start_point": [324, 8], "end_point": [326, 9], "text": "   process_cells(&arg_list, &mut decode);\n                }\n            },\n  "}, {"type": "expression_statement", "children": [{"type": "if_expression", "children": [{"type": "if", "children": [], "start_byte": 12805, "end_byte": 12807, "start_point": [327, 8], "end_point": [327, 10], "text": " 2"}, {"type": "binary_expression", "children": [{"type": "identifier", "children": [], "start_byte": 12808, "end_byte": 12815, "start_point": [327, 11], "end_point": [327, 18], "text": "=> {\n  "}, {"type": "!=", "children": [], "start_byte": 12816, "end_byte": 12818, "start_point": [327, 19], "end_point": [327, 21], "text": "  "}, {"type": "integer_literal", "children": [], "start_byte": 12819, "end_byte": 12820, "start_point": [327, 22], "end_point": [327, 23], "text": " "}], "start_byte": 12808, "end_byte": 12820, "start_point": [327, 11], "end_point": [327, 23], "text": "=> {\n       "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 12821, "end_byte": 12822, "start_point": [327, 24], "end_point": [327, 25], "text": " "}, {"type": "expression_statement", "children": [{"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 12835, "end_byte": 12841, "start_point": [328, 12], "end_point": [328, 18], "text": "ILS_EX"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 12842, "end_byte": 12843, "start_point": [328, 19], "end_point": [328, 20], "text": "S"}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 12843, "end_byte": 12856, "start_point": [328, 20], "end_point": [328, 33], "text": "T = false;\n  "}, {"type": "=", "children": [], "start_byte": 12857, "end_byte": 12858, "start_point": [328, 34], "end_point": [328, 35], "text": " "}, {"type": "integer_literal", "children": [], "start_byte": 12859, "end_byte": 12860, "start_point": [328, 36], "end_point": [328, 37], "text": " "}], "start_byte": 12843, "end_byte": 12860, "start_point": [328, 20], "end_point": [328, 37], "text": "T = false;\n      "}, {"type": ";", "children": [], "start_byte": 12860, "end_byte": 12861, "start_point": [328, 37], "end_point": [328, 38], "text": " "}], "start_byte": 12843, "end_byte": 12861, "start_point": [328, 20], "end_point": [328, 38], "text": "T = false;\n       "}, {"type": "}", "children": [], "start_byte": 12862, "end_byte": 12863, "start_point": [328, 39], "end_point": [328, 40], "text": " "}], "start_byte": 12842, "end_byte": 12863, "start_point": [328, 19], "end_point": [328, 40], "text": "ST = false;\n         "}], "start_byte": 12835, "end_byte": 12863, "start_point": [328, 12], "end_point": [328, 40], "text": "ILS_EXIST = false;\n         "}], "start_byte": 12835, "end_byte": 12863, "start_point": [328, 12], "end_point": [328, 40], "text": "ILS_EXIST = false;\n         "}, {"type": "}", "children": [], "start_byte": 12872, "end_byte": 12873, "start_point": [329, 8], "end_point": [329, 9], "text": " "}], "start_byte": 12821, "end_byte": 12873, "start_point": [327, 24], "end_point": [329, 9], "text": "        UNZ_FAILS_EXIST = false;\n                if "}], "start_byte": 12805, "end_byte": 12873, "start_point": [327, 8], "end_point": [329, 9], "text": " 2 => {\n                UNZ_FAILS_EXIST = false;\n                if "}], "start_byte": 12805, "end_byte": 12873, "start_point": [327, 8], "end_point": [329, 9], "text": " 2 => {\n                UNZ_FAILS_EXIST = false;\n                if "}, {"type": "}", "children": [], "start_byte": 12878, "end_byte": 12879, "start_point": [330, 4], "end_point": [330, 5], "text": "O"}], "start_byte": 12336, "end_byte": 12879, "start_point": [313, 11], "end_point": [330, 5], "text": " != 1 {\n            unsafe {blockSize100k = 0; }\n        }\n    }\n    // \u6839\u636e\u64cd\u4f5c\u6a21\u5f0f\u6267\u884c\u76f8\u5e94\u7684\u64cd\u4f5c\n    unsafe {\n        // println!(\"OP_MODE: {}\", OP_MODE);\n        // println!(\"SRC_MODE: {}\", SRC_MODE);\n        match OP_MODE {\n            1 => {\n                if SRC_MODE == 1 {\n                    compress(None)?;\n                } else {\n                    decode = true;\n                    process_cells(&arg_list, &mut decode);\n                }\n            },\n            2 => {\n                UNZ_FAILS_EXIST = false;\n                if SRC_MO"}], "start_byte": 12329, "end_byte": 12879, "start_point": [313, 4], "end_point": [330, 5], "text": "OP_MODE != 1 {\n            unsafe {blockSize100k = 0; }\n        }\n    }\n    // \u6839\u636e\u64cd\u4f5c\u6a21\u5f0f\u6267\u884c\u76f8\u5e94\u7684\u64cd\u4f5c\n    unsafe {\n        // println!(\"OP_MODE: {}\", OP_MODE);\n        // println!(\"SRC_MODE: {}\", SRC_MODE);\n        match OP_MODE {\n            1 => {\n                if SRC_MODE == 1 {\n                    compress(None)?;\n                } else {\n                    decode = true;\n                    process_cells(&arg_list, &mut decode);\n                }\n            },\n            2 => {\n                UNZ_FAILS_EXIST = false;\n                if SRC_MO"}], "start_byte": 12329, "end_byte": 12879, "start_point": [313, 4], "end_point": [330, 5], "text": "OP_MODE != 1 {\n            unsafe {blockSize100k = 0; }\n        }\n    }\n    // \u6839\u636e\u64cd\u4f5c\u6a21\u5f0f\u6267\u884c\u76f8\u5e94\u7684\u64cd\u4f5c\n    unsafe {\n        // println!(\"OP_MODE: {}\", OP_MODE);\n        // println!(\"SRC_MODE: {}\", SRC_MODE);\n        match OP_MODE {\n            1 => {\n                if SRC_MODE == 1 {\n                    compress(None)?;\n                } else {\n                    decode = true;\n                    process_cells(&arg_list, &mut decode);\n                }\n            },\n            2 => {\n                UNZ_FAILS_EXIST = false;\n                if SRC_MO"}, {"type": "line_comment", "children": [], "start_byte": 12884, "end_byte": 12926, "start_point": [331, 4], "end_point": [331, 46], "text": " 1 {\n                    uncompress(None);"}, {"type": "expression_statement", "children": [{"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 12931, "end_byte": 12937, "start_point": [332, 4], "end_point": [332, 10], "text": "      "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 12938, "end_byte": 12939, "start_point": [332, 11], "end_point": [332, 12], "text": " "}, {"type": "line_comment", "children": [], "start_byte": 12948, "end_byte": 12984, "start_point": [333, 8], "end_point": [333, 44], "text": "e {\n                    decode = tru"}, {"type": "line_comment", "children": [], "start_byte": 12993, "end_byte": 13031, "start_point": [334, 8], "end_point": [334, 46], "text": "              for cell in &arg_list {\n"}, {"type": "expression_statement", "children": [{"type": "match_expression", "children": [{"type": "match", "children": [], "start_byte": 13040, "end_byte": 13045, "start_point": [335, 8], "end_point": [335, 13], "text": "     "}, {"type": "identifier", "children": [], "start_byte": 13046, "end_byte": 13053, "start_point": [335, 14], "end_point": [335, 21], "text": "       "}, {"type": "match_block", "children": [{"type": "{", "children": [], "start_byte": 13054, "end_byte": 13055, "start_point": [335, 22], "end_point": [335, 23], "text": " "}, {"type": "match_arm", "children": [{"type": "match_pattern", "children": [{"type": "integer_literal", "children": [], "start_byte": 13068, "end_byte": 13069, "start_point": [336, 12], "end_point": [336, 13], "text": "a"}], "start_byte": 13068, "end_byte": 13069, "start_point": [336, 12], "end_point": [336, 13], "text": "a"}, {"type": "=>", "children": [], "start_byte": 13070, "end_byte": 13072, "start_point": [336, 14], "end_point": [336, 16], "text": "e)"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 13073, "end_byte": 13074, "start_point": [336, 17], "end_point": [336, 18], "text": "="}, {"type": "expression_statement", "children": [{"type": "if_expression", "children": [{"type": "if", "children": [], "start_byte": 13091, "end_byte": 13093, "start_point": [337, 16], "end_point": [337, 18], "text": "  "}, {"type": "binary_expression", "children": [{"type": "identifier", "children": [], "start_byte": 13094, "end_byte": 13102, "start_point": [337, 19], "end_point": [337, 27], "text": "        "}, {"type": "==", "children": [], "start_byte": 13103, "end_byte": 13105, "start_point": [337, 28], "end_point": [337, 30], "text": "  "}, {"type": "integer_literal", "children": [], "start_byte": 13106, "end_byte": 13107, "start_point": [337, 31], "end_point": [337, 32], "text": " "}], "start_byte": 13094, "end_byte": 13107, "start_point": [337, 19], "end_point": [337, 32], "text": "             "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 13108, "end_byte": 13109, "start_point": [337, 33], "end_point": [337, 34], "text": " "}, {"type": "expression_statement", "children": [{"type": "try_expression", "children": [{"type": "call_expression", "children": [{"type": "identifier", "children": [], "start_byte": 13130, "end_byte": 13138, "start_point": [338, 20], "end_point": [338, 28], "text": "() == \"-"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 13138, "end_byte": 13139, "start_point": [338, 28], "end_point": [338, 29], "text": "-"}, {"type": "identifier", "children": [], "start_byte": 13139, "end_byte": 13143, "start_point": [338, 29], "end_point": [338, 33], "text": "\"  {"}, {"type": ")", "children": [], "start_byte": 13143, "end_byte": 13144, "start_point": [338, 33], "end_point": [338, 34], "text": "\n"}], "start_byte": 13138, "end_byte": 13144, "start_point": [338, 28], "end_point": [338, 34], "text": "-\"  {\n"}], "start_byte": 13130, "end_byte": 13144, "start_point": [338, 20], "end_point": [338, 34], "text": "() == \"--\"  {\n"}, {"type": "?", "children": [], "start_byte": 13144, "end_byte": 13145, "start_point": [338, 34], "end_point": [338, 35], "text": " "}], "start_byte": 13130, "end_byte": 13145, "start_point": [338, 20], "end_point": [338, 35], "text": "() == \"--\"  {\n "}, {"type": ";", "children": [], "start_byte": 13145, "end_byte": 13146, "start_point": [338, 35], "end_point": [338, 36], "text": " "}], "start_byte": 13130, "end_byte": 13146, "start_point": [338, 20], "end_point": [338, 36], "text": "() == \"--\"  {\n  "}, {"type": "}", "children": [], "start_byte": 13163, "end_byte": 13164, "start_point": [339, 16], "end_point": [339, 17], "text": " "}], "start_byte": 13108, "end_byte": 13164, "start_point": [337, 33], "end_point": [339, 17], "text": "        if name.as_str() == \"--\"  {\n                    "}, {"type": "else_clause", "children": [{"type": "else", "children": [], "start_byte": 13165, "end_byte": 13169, "start_point": [339, 18], "end_point": [339, 22], "text": "    "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 13170, "end_byte": 13171, "start_point": [339, 23], "end_point": [339, 24], "text": " "}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 13192, "end_byte": 13198, "start_point": [340, 20], "end_point": [340, 26], "text": "      "}, {"type": "=", "children": [], "start_byte": 13199, "end_byte": 13200, "start_point": [340, 27], "end_point": [340, 28], "text": " "}, {"type": "boolean_literal", "children": [{"type": "true", "children": [], "start_byte": 13201, "end_byte": 13205, "start_point": [340, 29], "end_point": [340, 33], "text": "    "}], "start_byte": 13201, "end_byte": 13205, "start_point": [340, 29], "end_point": [340, 33], "text": "    "}], "start_byte": 13192, "end_byte": 13205, "start_point": [340, 20], "end_point": [340, 33], "text": "             "}, {"type": ";", "children": [], "start_byte": 13205, "end_byte": 13206, "start_point": [340, 33], "end_point": [340, 34], "text": " "}], "start_byte": 13192, "end_byte": 13206, "start_point": [340, 20], "end_point": [340, 34], "text": "              "}, {"type": "expression_statement", "children": [{"type": "call_expression", "children": [{"type": "identifier", "children": [], "start_byte": 13227, "end_byte": 13240, "start_point": [341, 20], "end_point": [341, 33], "text": "tinue;\n      "}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 13240, "end_byte": 13241, "start_point": [341, 33], "end_point": [341, 34], "text": " "}, {"type": "reference_expression", "children": [{"type": "&", "children": [], "start_byte": 13241, "end_byte": 13242, "start_point": [341, 34], "end_point": [341, 35], "text": " "}, {"type": "identifier", "children": [], "start_byte": 13242, "end_byte": 13250, "start_point": [341, 35], "end_point": [341, 43], "text": "        "}], "start_byte": 13241, "end_byte": 13250, "start_point": [341, 34], "end_point": [341, 43], "text": "         "}, {"type": ",", "children": [], "start_byte": 13250, "end_byte": 13251, "start_point": [341, 43], "end_point": [341, 44], "text": " "}, {"type": "reference_expression", "children": [{"type": "&", "children": [], "start_byte": 13252, "end_byte": 13253, "start_point": [341, 45], "end_point": [341, 46], "text": " "}, {"type": "mutable_specifier", "children": [], "start_byte": 13253, "end_byte": 13256, "start_point": [341, 46], "end_point": [341, 49], "text": "   "}, {"type": "identifier", "children": [], "start_byte": 13257, "end_byte": 13263, "start_point": [341, 50], "end_point": [341, 56], "text": "     }"}], "start_byte": 13252, "end_byte": 13263, "start_point": [341, 45], "end_point": [341, 56], "text": "          }"}, {"type": ")", "children": [], "start_byte": 13263, "end_byte": 13264, "start_point": [341, 56], "end_point": [341, 57], "text": "\n"}], "start_byte": 13240, "end_byte": 13264, "start_point": [341, 33], "end_point": [341, 57], "text": "                      }\n"}], "start_byte": 13227, "end_byte": 13264, "start_point": [341, 20], "end_point": [341, 57], "text": "tinue;\n                            }\n"}, {"type": ";", "children": [], "start_byte": 13264, "end_byte": 13265, "start_point": [341, 57], "end_point": [341, 58], "text": " "}], "start_byte": 13227, "end_byte": 13265, "start_point": [341, 20], "end_point": [341, 58], "text": "tinue;\n                            }\n "}, {"type": "}", "children": [], "start_byte": 13282, "end_byte": 13283, "start_point": [342, 16], "end_point": [342, 17], "text": " "}], "start_byte": 13170, "end_byte": 13283, "start_point": [339, 23], "end_point": [342, 17], "text": "      decode = false;\n                                continue;\n                            }\n                   "}], "start_byte": 13165, "end_byte": 13283, "start_point": [339, 18], "end_point": [342, 17], "text": "           decode = false;\n                                continue;\n                            }\n                   "}], "start_byte": 13091, "end_byte": 13283, "start_point": [337, 16], "end_point": [342, 17], "text": "                         if name.as_str() == \"--\"  {\n                                decode = false;\n                                continue;\n                            }\n                   "}], "start_byte": 13091, "end_byte": 13283, "start_point": [337, 16], "end_point": [342, 17], "text": "                         if name.as_str() == \"--\"  {\n                                decode = false;\n                                continue;\n                            }\n                   "}, {"type": "}", "children": [], "start_byte": 13296, "end_byte": 13297, "start_point": [343, 12], "end_point": [343, 13], "text": "a"}], "start_byte": 13073, "end_byte": 13297, "start_point": [336, 17], "end_point": [343, 13], "text": "= &cell.name {\n                            if name.as_str() == \"--\"  {\n                                decode = false;\n                                continue;\n                            }\n                            if na"}, {"type": ",", "children": [], "start_byte": 13297, "end_byte": 13298, "start_point": [343, 13], "end_point": [343, 14], "text": "m"}], "start_byte": 13068, "end_byte": 13298, "start_point": [336, 12], "end_point": [343, 14], "text": "ame) = &cell.name {\n                            if name.as_str() == \"--\"  {\n                                decode = false;\n                                continue;\n                            }\n                            if nam"}, {"type": "match_arm", "children": [{"type": "match_pattern", "children": [{"type": "integer_literal", "children": [], "start_byte": 13311, "end_byte": 13312, "start_point": [344, 12], "end_point": [344, 13], "text": "("}], "start_byte": 13311, "end_byte": 13312, "start_point": [344, 12], "end_point": [344, 13], "text": "("}, {"type": "=>", "children": [], "start_byte": 13313, "end_byte": 13315, "start_point": [344, 14], "end_point": [344, 16], "text": "-'"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 13316, "end_byte": 13317, "start_point": [344, 17], "end_point": [344, 18], "text": " "}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 13334, "end_byte": 13349, "start_point": [345, 16], "end_point": [345, 31], "text": "               "}, {"type": "=", "children": [], "start_byte": 13350, "end_byte": 13351, "start_point": [345, 32], "end_point": [345, 33], "text": " "}, {"type": "boolean_literal", "children": [{"type": "false", "children": [], "start_byte": 13352, "end_byte": 13357, "start_point": [345, 34], "end_point": [345, 39], "text": "     "}], "start_byte": 13352, "end_byte": 13357, "start_point": [345, 34], "end_point": [345, 39], "text": "     "}], "start_byte": 13334, "end_byte": 13357, "start_point": [345, 16], "end_point": [345, 39], "text": "                       "}, {"type": ";", "children": [], "start_byte": 13357, "end_byte": 13358, "start_point": [345, 39], "end_point": [345, 40], "text": " "}], "start_byte": 13334, "end_byte": 13358, "start_point": [345, 16], "end_point": [345, 40], "text": "                        "}, {"type": "expression_statement", "children": [{"type": "if_expression", "children": [{"type": "if", "children": [], "start_byte": 13375, "end_byte": 13377, "start_point": [346, 16], "end_point": [346, 18], "text": "  "}, {"type": "binary_expression", "children": [{"type": "identifier", "children": [], "start_byte": 13378, "end_byte": 13386, "start_point": [346, 19], "end_point": [346, 27], "text": "        "}, {"type": "==", "children": [], "start_byte": 13387, "end_byte": 13389, "start_point": [346, 28], "end_point": [346, 30], "text": "  "}, {"type": "integer_literal", "children": [], "start_byte": 13390, "end_byte": 13391, "start_point": [346, 31], "end_point": [346, 32], "text": " "}], "start_byte": 13378, "end_byte": 13391, "start_point": [346, 19], "end_point": [346, 32], "text": "             "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 13392, "end_byte": 13393, "start_point": [346, 33], "end_point": [346, 34], "text": " "}, {"type": "expression_statement", "children": [{"type": "call_expression", "children": [{"type": "identifier", "children": [], "start_byte": 13414, "end_byte": 13424, "start_point": [347, 20], "end_point": [347, 30], "text": "          "}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 13424, "end_byte": 13425, "start_point": [347, 30], "end_point": [347, 31], "text": " "}, {"type": "identifier", "children": [], "start_byte": 13425, "end_byte": 13429, "start_point": [347, 31], "end_point": [347, 35], "text": "    "}, {"type": ")", "children": [], "start_byte": 13429, "end_byte": 13430, "start_point": [347, 35], "end_point": [347, 36], "text": "u"}], "start_byte": 13424, "end_byte": 13430, "start_point": [347, 30], "end_point": [347, 36], "text": "     u"}], "start_byte": 13414, "end_byte": 13430, "start_point": [347, 20], "end_point": [347, 36], "text": "               u"}, {"type": ";", "children": [], "start_byte": 13430, "end_byte": 13431, "start_point": [347, 36], "end_point": [347, 37], "text": "n"}], "start_byte": 13414, "end_byte": 13431, "start_point": [347, 20], "end_point": [347, 37], "text": "               un"}, {"type": "}", "children": [], "start_byte": 13448, "end_byte": 13449, "start_point": [348, 16], "end_point": [348, 17], "text": "M"}], "start_byte": 13392, "end_byte": 13449, "start_point": [346, 33], "end_point": [348, 17], "text": "       }\n                            unsafe {NUM_FILE_NAM"}, {"type": "else_clause", "children": [{"type": "else", "children": [], "start_byte": 13450, "end_byte": 13454, "start_point": [348, 18], "end_point": [348, 22], "text": "S +="}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 13455, "end_byte": 13456, "start_point": [348, 23], "end_point": [348, 24], "text": "1"}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 13477, "end_byte": 13483, "start_point": [349, 20], "end_point": [349, 26], "text": "      "}, {"type": "=", "children": [], "start_byte": 13484, "end_byte": 13485, "start_point": [349, 27], "end_point": [349, 28], "text": " "}, {"type": "boolean_literal", "children": [{"type": "true", "children": [], "start_byte": 13486, "end_byte": 13490, "start_point": [349, 29], "end_point": [349, 33], "text": " unc"}], "start_byte": 13486, "end_byte": 13490, "start_point": [349, 29], "end_point": [349, 33], "text": " unc"}], "start_byte": 13477, "end_byte": 13490, "start_point": [349, 20], "end_point": [349, 33], "text": "          unc"}, {"type": ";", "children": [], "start_byte": 13490, "end_byte": 13491, "start_point": [349, 33], "end_point": [349, 34], "text": "o"}], "start_byte": 13477, "end_byte": 13491, "start_point": [349, 20], "end_point": [349, 34], "text": "          unco"}, {"type": "expression_statement", "children": [{"type": "for_expression", "children": [{"type": "for", "children": [], "start_byte": 13512, "end_byte": 13515, "start_point": [350, 20], "end_point": [350, 23], "text": "   "}, {"type": "identifier", "children": [], "start_byte": 13516, "end_byte": 13520, "start_point": [350, 24], "end_point": [350, 28], "text": "    "}, {"type": "in", "children": [], "start_byte": 13521, "end_byte": 13523, "start_point": [350, 29], "end_point": [350, 31], "text": "  "}, {"type": "reference_expression", "children": [{"type": "&", "children": [], "start_byte": 13524, "end_byte": 13525, "start_point": [350, 32], "end_point": [350, 33], "text": " "}, {"type": "identifier", "children": [], "start_byte": 13525, "end_byte": 13533, "start_point": [350, 33], "end_point": [350, 41], "text": "        "}], "start_byte": 13524, "end_byte": 13533, "start_point": [350, 32], "end_point": [350, 41], "text": "         "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 13534, "end_byte": 13535, "start_point": [350, 42], "end_point": [350, 43], "text": " "}, {"type": "expression_statement", "children": [{"type": "if_expression", "children": [{"type": "if", "children": [], "start_byte": 13560, "end_byte": 13562, "start_point": [351, 24], "end_point": [351, 26], "text": "  "}, {"type": "let_condition", "children": [{"type": "let", "children": [], "start_byte": 13563, "end_byte": 13566, "start_point": [351, 27], "end_point": [351, 30], "text": "   "}, {"type": "tuple_struct_pattern", "children": [{"type": "identifier", "children": [], "start_byte": 13567, "end_byte": 13571, "start_point": [351, 31], "end_point": [351, 35], "text": "    "}, {"type": "(", "children": [], "start_byte": 13571, "end_byte": 13572, "start_point": [351, 35], "end_point": [351, 36], "text": " "}, {"type": "identifier", "children": [], "start_byte": 13572, "end_byte": 13576, "start_point": [351, 36], "end_point": [351, 40], "text": "   }"}, {"type": ")", "children": [], "start_byte": 13576, "end_byte": 13577, "start_point": [351, 40], "end_point": [351, 41], "text": "\n"}], "start_byte": 13567, "end_byte": 13577, "start_point": [351, 31], "end_point": [351, 41], "text": "        }\n"}, {"type": "=", "children": [], "start_byte": 13578, "end_byte": 13579, "start_point": [351, 42], "end_point": [351, 43], "text": " "}, {"type": "reference_expression", "children": [{"type": "&", "children": [], "start_byte": 13580, "end_byte": 13581, "start_point": [351, 44], "end_point": [351, 45], "text": " "}, {"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 13581, "end_byte": 13585, "start_point": [351, 45], "end_point": [351, 49], "text": "    "}, {"type": ".", "children": [], "start_byte": 13585, "end_byte": 13586, "start_point": [351, 49], "end_point": [351, 50], "text": " "}, {"type": "field_identifier", "children": [], "start_byte": 13586, "end_byte": 13590, "start_point": [351, 50], "end_point": [351, 54], "text": "    "}], "start_byte": 13581, "end_byte": 13590, "start_point": [351, 45], "end_point": [351, 54], "text": "         "}], "start_byte": 13580, "end_byte": 13590, "start_point": [351, 44], "end_point": [351, 54], "text": "          "}], "start_byte": 13563, "end_byte": 13590, "start_point": [351, 27], "end_point": [351, 54], "text": "            }\n             "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 13591, "end_byte": 13592, "start_point": [351, 55], "end_point": [351, 56], "text": " "}, {"type": "expression_statement", "children": [{"type": "if_expression", "children": [{"type": "if", "children": [], "start_byte": 13621, "end_byte": 13623, "start_point": [352, 28], "end_point": [352, 30], "text": "  "}, {"type": "binary_expression", "children": [{"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 13624, "end_byte": 13628, "start_point": [352, 31], "end_point": [352, 35], "text": "    "}, {"type": ".", "children": [], "start_byte": 13628, "end_byte": 13629, "start_point": [352, 35], "end_point": [352, 36], "text": " "}, {"type": "field_identifier", "children": [], "start_byte": 13629, "end_byte": 13635, "start_point": [352, 36], "end_point": [352, 42], "text": "     s"}], "start_byte": 13624, "end_byte": 13635, "start_point": [352, 31], "end_point": [352, 42], "text": "          s"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 13635, "end_byte": 13636, "start_point": [352, 42], "end_point": [352, 43], "text": "e"}, {"type": ")", "children": [], "start_byte": 13636, "end_byte": 13637, "start_point": [352, 43], "end_point": [352, 44], "text": "t"}], "start_byte": 13635, "end_byte": 13637, "start_point": [352, 42], "end_point": [352, 44], "text": "et"}], "start_byte": 13624, "end_byte": 13637, "start_point": [352, 31], "end_point": [352, 44], "text": "          set"}, {"type": "==", "children": [], "start_byte": 13638, "end_byte": 13640, "start_point": [352, 45], "end_point": [352, 47], "text": "ex"}, {"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 13641, "end_byte": 13642, "start_point": [352, 48], "end_point": [352, 49], "text": "t"}, {"type": "\"", "children": [], "start_byte": 13644, "end_byte": 13645, "start_point": [352, 51], "end_point": [352, 52], "text": ")"}], "start_byte": 13641, "end_byte": 13645, "start_point": [352, 48], "end_point": [352, 52], "text": "t(2)"}], "start_byte": 13624, "end_byte": 13645, "start_point": [352, 31], "end_point": [352, 52], "text": "          set_exit(2)"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 13647, "end_byte": 13648, "start_point": [352, 54], "end_point": [352, 55], "text": " "}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 13681, "end_byte": 13687, "start_point": [353, 32], "end_point": [353, 38], "text": "it(EXI"}, {"type": "=", "children": [], "start_byte": 13688, "end_byte": 13689, "start_point": [353, 39], "end_point": [353, 40], "text": "_"}, {"type": "boolean_literal", "children": [{"type": "false", "children": [], "start_byte": 13690, "end_byte": 13695, "start_point": [353, 41], "end_point": [353, 46], "text": "ALUE)"}], "start_byte": 13690, "end_byte": 13695, "start_point": [353, 41], "end_point": [353, 46], "text": "ALUE)"}], "start_byte": 13681, "end_byte": 13695, "start_point": [353, 32], "end_point": [353, 46], "text": "it(EXIT_VALUE)"}, {"type": ";", "children": [], "start_byte": 13695, "end_byte": 13696, "start_point": [353, 46], "end_point": [353, 47], "text": ";"}], "start_byte": 13681, "end_byte": 13696, "start_point": [353, 32], "end_point": [353, 47], "text": "it(EXIT_VALUE);"}, {"type": "expression_statement", "children": [{"type": "continue_expression", "children": [{"type": "continue", "children": [], "start_byte": 13729, "end_byte": 13737, "start_point": [354, 32], "end_point": [354, 40], "text": "\n       "}], "start_byte": 13729, "end_byte": 13737, "start_point": [354, 32], "end_point": [354, 40], "text": "\n       "}, {"type": ";", "children": [], "start_byte": 13737, "end_byte": 13738, "start_point": [354, 40], "end_point": [354, 41], "text": " "}], "start_byte": 13729, "end_byte": 13738, "start_point": [354, 32], "end_point": [354, 41], "text": "\n        "}, {"type": "}", "children": [], "start_byte": 13767, "end_byte": 13768, "start_point": [355, 28], "end_point": [355, 29], "text": " "}], "start_byte": 13647, "end_byte": 13768, "start_point": [352, 54], "end_point": [355, 29], "text": "                    // process::exit(EXIT_VALUE);\n                }\n            },\n            _ => {\n                // "}], "start_byte": 13621, "end_byte": 13768, "start_point": [352, 28], "end_point": [355, 29], "text": "             set_exit(2);\n                    // process::exit(EXIT_VALUE);\n                }\n            },\n            _ => {\n                // "}], "start_byte": 13621, "end_byte": 13768, "start_point": [352, 28], "end_point": [355, 29], "text": "             set_exit(2);\n                    // process::exit(EXIT_VALUE);\n                }\n            },\n            _ => {\n                // "}, {"type": "expression_statement", "children": [{"type": "if_expression", "children": [{"type": "if", "children": [], "start_byte": 13797, "end_byte": 13799, "start_point": [356, 28], "end_point": [356, 30], "text": "\n "}, {"type": "binary_expression", "children": [{"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 13800, "end_byte": 13804, "start_point": [356, 31], "end_point": [356, 35], "text": "    "}, {"type": ".", "children": [], "start_byte": 13804, "end_byte": 13805, "start_point": [356, 35], "end_point": [356, 36], "text": " "}, {"type": "field_identifier", "children": [], "start_byte": 13805, "end_byte": 13816, "start_point": [356, 36], "end_point": [356, 47], "text": "     },\n   "}], "start_byte": 13800, "end_byte": 13816, "start_point": [356, 31], "end_point": [356, 47], "text": "          },\n   "}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 13816, "end_byte": 13817, "start_point": [356, 47], "end_point": [356, 48], "text": " "}, {"type": "char_literal", "children": [], "start_byte": 13817, "end_byte": 13820, "start_point": [356, 48], "end_point": [356, 51], "text": "   "}, {"type": ")", "children": [], "start_byte": 13820, "end_byte": 13821, "start_point": [356, 51], "end_point": [356, 52], "text": " "}], "start_byte": 13816, "end_byte": 13821, "start_point": [356, 47], "end_point": [356, 52], "text": "     "}], "start_byte": 13800, "end_byte": 13821, "start_point": [356, 31], "end_point": [356, 52], "text": "          },\n        "}, {"type": "&&", "children": [], "start_byte": 13822, "end_byte": 13824, "start_point": [356, 53], "end_point": [356, 55], "text": "\n "}, {"type": "identifier", "children": [], "start_byte": 13825, "end_byte": 13831, "start_point": [356, 56], "end_point": [356, 62], "text": "  }\n\n "}], "start_byte": 13800, "end_byte": 13831, "start_point": [356, 31], "end_point": [356, 62], "text": "          },\n        }\n    }\n\n "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 13832, "end_byte": 13833, "start_point": [356, 63], "end_point": [356, 64], "text": " "}, {"type": "expression_statement", "children": [{"type": "continue_expression", "children": [{"type": "continue", "children": [], "start_byte": 13866, "end_byte": 13874, "start_point": [357, 32], "end_point": [357, 40], "text": "\u6210\");\n   "}], "start_byte": 13866, "end_byte": 13874, "start_point": [357, 32], "end_point": [357, 40], "text": "\u6210\");\n   "}, {"type": ";", "children": [], "start_byte": 13874, "end_byte": 13875, "start_point": [357, 40], "end_point": [357, 41], "text": " "}], "start_byte": 13866, "end_byte": 13875, "start_point": [357, 32], "end_point": [357, 41], "text": "\u6210\");\n    "}, {"type": "}", "children": [], "start_byte": 13904, "end_byte": 13905, "start_point": [358, 28], "end_point": [358, 29], "text": "s"}], "start_byte": 13832, "end_byte": 13905, "start_point": [356, 63], "end_point": [358, 29], "text": "  // println!(\"121_main_\u6240\u6709\u547d\u4ee4\u884c\u53c2\u6570\u5904\u7406\u5b8c\u6210\");\n    Ok(())\n}\n\n#[cfg(test)]\nmod tes"}], "start_byte": 13797, "end_byte": 13905, "start_point": [356, 28], "end_point": [358, 29], "text": "\n            },\n        }\n    }\n\n    // println!(\"121_main_\u6240\u6709\u547d\u4ee4\u884c\u53c2\u6570\u5904\u7406\u5b8c\u6210\");\n    Ok(())\n}\n\n#[cfg(test)]\nmod tes"}], "start_byte": 13797, "end_byte": 13905, "start_point": [356, 28], "end_point": [358, 29], "text": "\n            },\n        }\n    }\n\n    // println!(\"121_main_\u6240\u6709\u547d\u4ee4\u884c\u53c2\u6570\u5904\u7406\u5b8c\u6210\");\n    Ok(())\n}\n\n#[cfg(test)]\nmod tes"}, {"type": "expression_statement", "children": [{"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 13934, "end_byte": 13940, "start_point": [359, 28], "end_point": [359, 34], "text": "[test]"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 13941, "end_byte": 13942, "start_point": [359, 35], "end_point": [359, 36], "text": " "}, {"type": "expression_statement", "children": [{"type": "compound_assignment_expr", "children": [{"type": "identifier", "children": [], "start_byte": 13942, "end_byte": 13956, "start_point": [359, 36], "end_point": [359, 50], "text": "   fn test_mai"}, {"type": "+=", "children": [], "start_byte": 13957, "end_byte": 13959, "start_point": [359, 51], "end_point": [359, 53], "text": "()"}, {"type": "integer_literal", "children": [], "start_byte": 13960, "end_byte": 13961, "start_point": [359, 54], "end_point": [359, 55], "text": "{"}], "start_byte": 13942, "end_byte": 13961, "start_point": [359, 36], "end_point": [359, 55], "text": "   fn test_main() {"}, {"type": ";", "children": [], "start_byte": 13961, "end_byte": 13962, "start_point": [359, 55], "end_point": [359, 56], "text": "\n"}], "start_byte": 13942, "end_byte": 13962, "start_point": [359, 36], "end_point": [359, 56], "text": "   fn test_main() {\n"}, {"type": "}", "children": [], "start_byte": 13962, "end_byte": 13963, "start_point": [359, 56], "end_point": [359, 57], "text": " "}], "start_byte": 13941, "end_byte": 13963, "start_point": [359, 35], "end_point": [359, 57], "text": "    fn test_main() {\n "}], "start_byte": 13934, "end_byte": 13963, "start_point": [359, 28], "end_point": [359, 57], "text": "[test]\n    fn test_main() {\n "}], "start_byte": 13934, "end_byte": 13963, "start_point": [359, 28], "end_point": [359, 57], "text": "[test]\n    fn test_main() {\n "}, {"type": "expression_statement", "children": [{"type": "call_expression", "children": [{"type": "identifier", "children": [], "start_byte": 13992, "end_byte": 14002, "start_point": [360, 28], "end_point": [360, 38], "text": " simulated"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 14002, "end_byte": 14003, "start_point": [360, 38], "end_point": [360, 39], "text": "_"}, {"type": "call_expression", "children": [{"type": "identifier", "children": [], "start_byte": 14003, "end_byte": 14007, "start_point": [360, 39], "end_point": [360, 43], "text": "args"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 14007, "end_byte": 14008, "start_point": [360, 43], "end_point": [360, 44], "text": " "}, {"type": "identifier", "children": [], "start_byte": 14008, "end_byte": 14012, "start_point": [360, 44], "end_point": [360, 48], "text": "= ve"}, {"type": ")", "children": [], "start_byte": 14012, "end_byte": 14013, "start_point": [360, 48], "end_point": [360, 49], "text": "c"}], "start_byte": 14007, "end_byte": 14013, "start_point": [360, 43], "end_point": [360, 49], "text": " = vec"}], "start_byte": 14003, "end_byte": 14013, "start_point": [360, 39], "end_point": [360, 49], "text": "args = vec"}, {"type": ")", "children": [], "start_byte": 14013, "end_byte": 14014, "start_point": [360, 49], "end_point": [360, 50], "text": "!"}], "start_byte": 14002, "end_byte": 14014, "start_point": [360, 38], "end_point": [360, 50], "text": "_args = vec!"}], "start_byte": 13992, "end_byte": 14014, "start_point": [360, 28], "end_point": [360, 50], "text": " simulated_args = vec!"}, {"type": ";", "children": [], "start_byte": 14014, "end_byte": 14015, "start_point": [360, 50], "end_point": [360, 51], "text": "["}], "start_byte": 13992, "end_byte": 14015, "start_point": [360, 28], "end_point": [360, 51], "text": " simulated_args = vec!["}, {"type": "}", "children": [], "start_byte": 14040, "end_byte": 14041, "start_point": [361, 24], "end_point": [361, 25], "text": "("}], "start_byte": 13591, "end_byte": 14041, "start_point": [351, 55], "end_point": [361, 25], "text": "  if UNZ_FAILS_EXIST {\n                    set_exit(2);\n                    // process::exit(EXIT_VALUE);\n                }\n            },\n            _ => {\n                // \u5904\u7406\u6d4b\u8bd5\u6a21\u5f0f\n                // ...\n            },\n        }\n    }\n\n    // println!(\"121_main_\u6240\u6709\u547d\u4ee4\u884c\u53c2\u6570\u5904\u7406\u5b8c\u6210\");\n    Ok(())\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_main() {\n        // \u6a21\u62df\u547d\u4ee4\u884c\u53c2\u6570\n        let simulated_args = vec![\n            String::from("}], "start_byte": 13560, "end_byte": 14041, "start_point": [351, 24], "end_point": [361, 25], "text": "               }\n                if UNZ_FAILS_EXIST {\n                    set_exit(2);\n                    // process::exit(EXIT_VALUE);\n                }\n            },\n            _ => {\n                // \u5904\u7406\u6d4b\u8bd5\u6a21\u5f0f\n                // ...\n            },\n        }\n    }\n\n    // println!(\"121_main_\u6240\u6709\u547d\u4ee4\u884c\u53c2\u6570\u5904\u7406\u5b8c\u6210\");\n    Ok(())\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_main() {\n        // \u6a21\u62df\u547d\u4ee4\u884c\u53c2\u6570\n        let simulated_args = vec![\n            String::from("}], "start_byte": 13560, "end_byte": 14041, "start_point": [351, 24], "end_point": [361, 25], "text": "               }\n                if UNZ_FAILS_EXIST {\n                    set_exit(2);\n                    // process::exit(EXIT_VALUE);\n                }\n            },\n            _ => {\n                // \u5904\u7406\u6d4b\u8bd5\u6a21\u5f0f\n                // ...\n            },\n        }\n    }\n\n    // println!(\"121_main_\u6240\u6709\u547d\u4ee4\u884c\u53c2\u6570\u5904\u7406\u5b8c\u6210\");\n    Ok(())\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_main() {\n        // \u6a21\u62df\u547d\u4ee4\u884c\u53c2\u6570\n        let simulated_args = vec![\n            String::from("}, {"type": "}", "children": [], "start_byte": 14062, "end_byte": 14063, "start_point": [362, 20], "end_point": [362, 21], "text": " "}], "start_byte": 13534, "end_byte": 14063, "start_point": [350, 42], "end_point": [362, 21], "text": " }\n                    }\n                }\n                if UNZ_FAILS_EXIST {\n                    set_exit(2);\n                    // process::exit(EXIT_VALUE);\n                }\n            },\n            _ => {\n                // \u5904\u7406\u6d4b\u8bd5\u6a21\u5f0f\n                // ...\n            },\n        }\n    }\n\n    // println!(\"121_main_\u6240\u6709\u547d\u4ee4\u884c\u53c2\u6570\u5904\u7406\u5b8c\u6210\");\n    Ok(())\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_main() {\n        // \u6a21\u62df\u547d\u4ee4\u884c\u53c2\u6570\n        let simulated_args = vec![\n            String::from(\"./bzip2\"),\n          "}], "start_byte": 13512, "end_byte": 14063, "start_point": [350, 20], "end_point": [362, 21], "text": "                       }\n                    }\n                }\n                if UNZ_FAILS_EXIST {\n                    set_exit(2);\n                    // process::exit(EXIT_VALUE);\n                }\n            },\n            _ => {\n                // \u5904\u7406\u6d4b\u8bd5\u6a21\u5f0f\n                // ...\n            },\n        }\n    }\n\n    // println!(\"121_main_\u6240\u6709\u547d\u4ee4\u884c\u53c2\u6570\u5904\u7406\u5b8c\u6210\");\n    Ok(())\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_main() {\n        // \u6a21\u62df\u547d\u4ee4\u884c\u53c2\u6570\n        let simulated_args = vec![\n            String::from(\"./bzip2\"),\n          "}], "start_byte": 13512, "end_byte": 14063, "start_point": [350, 20], "end_point": [362, 21], "text": "                       }\n                    }\n                }\n                if UNZ_FAILS_EXIST {\n                    set_exit(2);\n                    // process::exit(EXIT_VALUE);\n                }\n            },\n            _ => {\n                // \u5904\u7406\u6d4b\u8bd5\u6a21\u5f0f\n                // ...\n            },\n        }\n    }\n\n    // println!(\"121_main_\u6240\u6709\u547d\u4ee4\u884c\u53c2\u6570\u5904\u7406\u5b8c\u6210\");\n    Ok(())\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_main() {\n        // \u6a21\u62df\u547d\u4ee4\u884c\u53c2\u6570\n        let simulated_args = vec![\n            String::from(\"./bzip2\"),\n          "}, {"type": "}", "children": [], "start_byte": 14080, "end_byte": 14081, "start_point": [363, 16], "end_point": [363, 17], "text": "k"}], "start_byte": 13455, "end_byte": 14081, "start_point": [348, 23], "end_point": [363, 17], "text": "1;}\n                            uncompress(Some(name));\n                        }\n                    }\n                }\n                if UNZ_FAILS_EXIST {\n                    set_exit(2);\n                    // process::exit(EXIT_VALUE);\n                }\n            },\n            _ => {\n                // \u5904\u7406\u6d4b\u8bd5\u6a21\u5f0f\n                // ...\n            },\n        }\n    }\n\n    // println!(\"121_main_\u6240\u6709\u547d\u4ee4\u884c\u53c2\u6570\u5904\u7406\u5b8c\u6210\");\n    Ok(())\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_main() {\n        // \u6a21\u62df\u547d\u4ee4\u884c\u53c2\u6570\n        let simulated_args = vec![\n            String::from(\"./bzip2\"),\n            String::from(\"-k"}], "start_byte": 13450, "end_byte": 14081, "start_point": [348, 18], "end_point": [363, 17], "text": "S += 1;}\n                            uncompress(Some(name));\n                        }\n                    }\n                }\n                if UNZ_FAILS_EXIST {\n                    set_exit(2);\n                    // process::exit(EXIT_VALUE);\n                }\n            },\n            _ => {\n                // \u5904\u7406\u6d4b\u8bd5\u6a21\u5f0f\n                // ...\n            },\n        }\n    }\n\n    // println!(\"121_main_\u6240\u6709\u547d\u4ee4\u884c\u53c2\u6570\u5904\u7406\u5b8c\u6210\");\n    Ok(())\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_main() {\n        // \u6a21\u62df\u547d\u4ee4\u884c\u53c2\u6570\n        let simulated_args = vec![\n            String::from(\"./bzip2\"),\n            String::from(\"-k"}], "start_byte": 13375, "end_byte": 14081, "start_point": [346, 16], "end_point": [363, 17], "text": "                        }\n                            unsafe {NUM_FILE_NAMES += 1;}\n                            uncompress(Some(name));\n                        }\n                    }\n                }\n                if UNZ_FAILS_EXIST {\n                    set_exit(2);\n                    // process::exit(EXIT_VALUE);\n                }\n            },\n            _ => {\n                // \u5904\u7406\u6d4b\u8bd5\u6a21\u5f0f\n                // ...\n            },\n        }\n    }\n\n    // println!(\"121_main_\u6240\u6709\u547d\u4ee4\u884c\u53c2\u6570\u5904\u7406\u5b8c\u6210\");\n    Ok(())\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_main() {\n        // \u6a21\u62df\u547d\u4ee4\u884c\u53c2\u6570\n        let simulated_args = vec![\n            String::from(\"./bzip2\"),\n            String::from(\"-k"}], "start_byte": 13375, "end_byte": 14081, "start_point": [346, 16], "end_point": [363, 17], "text": "                        }\n                            unsafe {NUM_FILE_NAMES += 1;}\n                            uncompress(Some(name));\n                        }\n                    }\n                }\n                if UNZ_FAILS_EXIST {\n                    set_exit(2);\n                    // process::exit(EXIT_VALUE);\n                }\n            },\n            _ => {\n                // \u5904\u7406\u6d4b\u8bd5\u6a21\u5f0f\n                // ...\n            },\n        }\n    }\n\n    // println!(\"121_main_\u6240\u6709\u547d\u4ee4\u884c\u53c2\u6570\u5904\u7406\u5b8c\u6210\");\n    Ok(())\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_main() {\n        // \u6a21\u62df\u547d\u4ee4\u884c\u53c2\u6570\n        let simulated_args = vec![\n            String::from(\"./bzip2\"),\n            String::from(\"-k"}, {"type": "expression_statement", "children": [{"type": "if_expression", "children": [{"type": "if", "children": [], "start_byte": 14098, "end_byte": 14100, "start_point": [364, 16], "end_point": [364, 18], "text": "tr"}, {"type": "identifier", "children": [], "start_byte": 14101, "end_byte": 14116, "start_point": [364, 19], "end_point": [364, 34], "text": "ng::from(\"/root"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 14117, "end_byte": 14118, "start_point": [364, 35], "end_point": [364, 36], "text": "c"}, {"type": "expression_statement", "children": [{"type": "call_expression", "children": [{"type": "identifier", "children": [], "start_byte": 14139, "end_byte": 14147, "start_point": [365, 20], "end_point": [365, 28], "text": "t/11Nov."}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 14147, "end_byte": 14148, "start_point": [365, 28], "end_point": [365, 29], "text": "t"}, {"type": "integer_literal", "children": [], "start_byte": 14148, "end_byte": 14149, "start_point": [365, 29], "end_point": [365, 30], "text": "x"}, {"type": ")", "children": [], "start_byte": 14149, "end_byte": 14150, "start_point": [365, 30], "end_point": [365, 31], "text": "t"}], "start_byte": 14147, "end_byte": 14150, "start_point": [365, 28], "end_point": [365, 31], "text": "txt"}], "start_byte": 14139, "end_byte": 14150, "start_point": [365, 20], "end_point": [365, 31], "text": "t/11Nov.txt"}, {"type": ";", "children": [], "start_byte": 14150, "end_byte": 14151, "start_point": [365, 31], "end_point": [365, 32], "text": "\""}], "start_byte": 14139, "end_byte": 14151, "start_point": [365, 20], "end_point": [365, 32], "text": "t/11Nov.txt\""}, {"type": "line_comment", "children": [], "start_byte": 14172, "end_byte": 14201, "start_point": [366, 20], "end_point": [366, 49], "text": "ing::from(\"/root/crown-rust/b"}, {"type": "}", "children": [], "start_byte": 14218, "end_byte": 14219, "start_point": [367, 16], "end_point": [367, 17], "text": "e"}], "start_byte": 14117, "end_byte": 14219, "start_point": [364, 35], "end_point": [367, 17], "text": "crown-rust/bzip2_rs_gpt/11Nov.txt\"),\n            // String::from(\"/root/crown-rust/bzip2_rs_gpt/sample"}], "start_byte": 14098, "end_byte": 14219, "start_point": [364, 16], "end_point": [367, 17], "text": "tring::from(\"/root/crown-rust/bzip2_rs_gpt/11Nov.txt\"),\n            // String::from(\"/root/crown-rust/bzip2_rs_gpt/sample"}], "start_byte": 14098, "end_byte": 14219, "start_point": [364, 16], "end_point": [367, 17], "text": "tring::from(\"/root/crown-rust/bzip2_rs_gpt/11Nov.txt\"),\n            // String::from(\"/root/crown-rust/bzip2_rs_gpt/sample"}, {"type": "}", "children": [], "start_byte": 14232, "end_byte": 14233, "start_point": [368, 12], "end_point": [368, 13], "text": " "}], "start_byte": 13316, "end_byte": 14233, "start_point": [344, 17], "end_point": [368, 13], "text": " && decode {\n                                continue;\n                            }\n                            unsafe {NUM_FILE_NAMES += 1;}\n                            uncompress(Some(name));\n                        }\n                    }\n                }\n                if UNZ_FAILS_EXIST {\n                    set_exit(2);\n                    // process::exit(EXIT_VALUE);\n                }\n            },\n            _ => {\n                // \u5904\u7406\u6d4b\u8bd5\u6a21\u5f0f\n                // ...\n            },\n        }\n    }\n\n    // println!(\"121_main_\u6240\u6709\u547d\u4ee4\u884c\u53c2\u6570\u5904\u7406\u5b8c\u6210\");\n    Ok(())\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_main() {\n        // \u6a21\u62df\u547d\u4ee4\u884c\u53c2\u6570\n        let simulated_args = vec![\n            String::from(\"./bzip2\"),\n            String::from(\"-k\"),\n            String::from(\"/root/crown-rust/bzip2_rs_gpt/11Nov.txt\"),\n            // String::from(\"/root/crown-rust/bzip2_rs_gpt/sample1.ref\"),\n     "}, {"type": ",", "children": [], "start_byte": 14233, "end_byte": 14234, "start_point": [368, 13], "end_point": [368, 14], "text": " "}], "start_byte": 13311, "end_byte": 14234, "start_point": [344, 12], "end_point": [368, 14], "text": "('-') && decode {\n                                continue;\n                            }\n                            unsafe {NUM_FILE_NAMES += 1;}\n                            uncompress(Some(name));\n                        }\n                    }\n                }\n                if UNZ_FAILS_EXIST {\n                    set_exit(2);\n                    // process::exit(EXIT_VALUE);\n                }\n            },\n            _ => {\n                // \u5904\u7406\u6d4b\u8bd5\u6a21\u5f0f\n                // ...\n            },\n        }\n    }\n\n    // println!(\"121_main_\u6240\u6709\u547d\u4ee4\u884c\u53c2\u6570\u5904\u7406\u5b8c\u6210\");\n    Ok(())\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_main() {\n        // \u6a21\u62df\u547d\u4ee4\u884c\u53c2\u6570\n        let simulated_args = vec![\n            String::from(\"./bzip2\"),\n            String::from(\"-k\"),\n            String::from(\"/root/crown-rust/bzip2_rs_gpt/11Nov.txt\"),\n            // String::from(\"/root/crown-rust/bzip2_rs_gpt/sample1.ref\"),\n      "}, {"type": "match_arm", "children": [{"type": "match_pattern", "children": [{"type": "_", "children": [], "start_byte": 14247, "end_byte": 14248, "start_point": [369, 12], "end_point": [369, 13], "text": "n"}], "start_byte": 14247, "end_byte": 14248, "start_point": [369, 12], "end_point": [369, 13], "text": "n"}, {"type": "=>", "children": [], "start_byte": 14249, "end_byte": 14251, "start_point": [369, 14], "end_point": [369, 16], "text": "::"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 14252, "end_byte": 14253, "start_point": [369, 17], "end_point": [369, 18], "text": "r"}, {"type": "line_comment", "children": [], "start_byte": 14270, "end_byte": 14291, "start_point": [370, 16], "end_point": [370, 37], "text": "ust/bzip2_rs_gpt/abc."}, {"type": "line_comment", "children": [], "start_byte": 14308, "end_byte": 14314, "start_point": [371, 16], "end_point": [371, 22], "text": "\n     "}, {"type": "}", "children": [], "start_byte": 14327, "end_byte": 14328, "start_point": [372, 12], "end_point": [372, 13], "text": "i"}], "start_byte": 14252, "end_byte": 14328, "start_point": [369, 17], "end_point": [372, 13], "text": "rom(\"/root/crown-rust/bzip2_rs_gpt/abc.txt\"),\n        ];\n            // Stri"}, {"type": ",", "children": [], "start_byte": 14328, "end_byte": 14329, "start_point": [372, 13], "end_point": [372, 14], "text": "n"}], "start_byte": 14247, "end_byte": 14329, "start_point": [369, 12], "end_point": [372, 14], "text": "ng::from(\"/root/crown-rust/bzip2_rs_gpt/abc.txt\"),\n        ];\n            // Strin"}, {"type": "}", "children": [], "start_byte": 14338, "end_byte": 14339, "start_point": [373, 8], "end_point": [373, 9], "text": "-"}], "start_byte": 13054, "end_byte": 14339, "start_point": [335, 22], "end_point": [373, 9], "text": " if let Some(name) = &cell.name {\n                            if name.as_str() == \"--\"  {\n                                decode = false;\n                                continue;\n                            }\n                            if name.starts_with('-') && decode {\n                                continue;\n                            }\n                            unsafe {NUM_FILE_NAMES += 1;}\n                            uncompress(Some(name));\n                        }\n                    }\n                }\n                if UNZ_FAILS_EXIST {\n                    set_exit(2);\n                    // process::exit(EXIT_VALUE);\n                }\n            },\n            _ => {\n                // \u5904\u7406\u6d4b\u8bd5\u6a21\u5f0f\n                // ...\n            },\n        }\n    }\n\n    // println!(\"121_main_\u6240\u6709\u547d\u4ee4\u884c\u53c2\u6570\u5904\u7406\u5b8c\u6210\");\n    Ok(())\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_main() {\n        // \u6a21\u62df\u547d\u4ee4\u884c\u53c2\u6570\n        let simulated_args = vec![\n            String::from(\"./bzip2\"),\n            String::from(\"-k\"),\n            String::from(\"/root/crown-rust/bzip2_rs_gpt/11Nov.txt\"),\n            // String::from(\"/root/crown-rust/bzip2_rs_gpt/sample1.ref\"),\n            // String::from(\"/root/crown-rust/bzip2_rs_gpt/abc.txt\"),\n        ];\n            // String::from(\"-"}], "start_byte": 13040, "end_byte": 14339, "start_point": [335, 8], "end_point": [373, 9], "text": "               if let Some(name) = &cell.name {\n                            if name.as_str() == \"--\"  {\n                                decode = false;\n                                continue;\n                            }\n                            if name.starts_with('-') && decode {\n                                continue;\n                            }\n                            unsafe {NUM_FILE_NAMES += 1;}\n                            uncompress(Some(name));\n                        }\n                    }\n                }\n                if UNZ_FAILS_EXIST {\n                    set_exit(2);\n                    // process::exit(EXIT_VALUE);\n                }\n            },\n            _ => {\n                // \u5904\u7406\u6d4b\u8bd5\u6a21\u5f0f\n                // ...\n            },\n        }\n    }\n\n    // println!(\"121_main_\u6240\u6709\u547d\u4ee4\u884c\u53c2\u6570\u5904\u7406\u5b8c\u6210\");\n    Ok(())\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_main() {\n        // \u6a21\u62df\u547d\u4ee4\u884c\u53c2\u6570\n        let simulated_args = vec![\n            String::from(\"./bzip2\"),\n            String::from(\"-k\"),\n            String::from(\"/root/crown-rust/bzip2_rs_gpt/11Nov.txt\"),\n            // String::from(\"/root/crown-rust/bzip2_rs_gpt/sample1.ref\"),\n            // String::from(\"/root/crown-rust/bzip2_rs_gpt/abc.txt\"),\n        ];\n            // String::from(\"-"}], "start_byte": 13040, "end_byte": 14339, "start_point": [335, 8], "end_point": [373, 9], "text": "               if let Some(name) = &cell.name {\n                            if name.as_str() == \"--\"  {\n                                decode = false;\n                                continue;\n                            }\n                            if name.starts_with('-') && decode {\n                                continue;\n                            }\n                            unsafe {NUM_FILE_NAMES += 1;}\n                            uncompress(Some(name));\n                        }\n                    }\n                }\n                if UNZ_FAILS_EXIST {\n                    set_exit(2);\n                    // process::exit(EXIT_VALUE);\n                }\n            },\n            _ => {\n                // \u5904\u7406\u6d4b\u8bd5\u6a21\u5f0f\n                // ...\n            },\n        }\n    }\n\n    // println!(\"121_main_\u6240\u6709\u547d\u4ee4\u884c\u53c2\u6570\u5904\u7406\u5b8c\u6210\");\n    Ok(())\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_main() {\n        // \u6a21\u62df\u547d\u4ee4\u884c\u53c2\u6570\n        let simulated_args = vec![\n            String::from(\"./bzip2\"),\n            String::from(\"-k\"),\n            String::from(\"/root/crown-rust/bzip2_rs_gpt/11Nov.txt\"),\n            // String::from(\"/root/crown-rust/bzip2_rs_gpt/sample1.ref\"),\n            // String::from(\"/root/crown-rust/bzip2_rs_gpt/abc.txt\"),\n        ];\n            // String::from(\"-"}, {"type": "}", "children": [], "start_byte": 14344, "end_byte": 14345, "start_point": [374, 4], "end_point": [374, 5], "text": " "}], "start_byte": 12938, "end_byte": 14345, "start_point": [332, 11], "end_point": [374, 5], "text": "     } else {\n                    decode = true;\n                    for cell in &arg_list {\n                        if let Some(name) = &cell.name {\n                            if name.as_str() == \"--\"  {\n                                decode = false;\n                                continue;\n                            }\n                            if name.starts_with('-') && decode {\n                                continue;\n                            }\n                            unsafe {NUM_FILE_NAMES += 1;}\n                            uncompress(Some(name));\n                        }\n                    }\n                }\n                if UNZ_FAILS_EXIST {\n                    set_exit(2);\n                    // process::exit(EXIT_VALUE);\n                }\n            },\n            _ => {\n                // \u5904\u7406\u6d4b\u8bd5\u6a21\u5f0f\n                // ...\n            },\n        }\n    }\n\n    // println!(\"121_main_\u6240\u6709\u547d\u4ee4\u884c\u53c2\u6570\u5904\u7406\u5b8c\u6210\");\n    Ok(())\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_main() {\n        // \u6a21\u62df\u547d\u4ee4\u884c\u53c2\u6570\n        let simulated_args = vec![\n            String::from(\"./bzip2\"),\n            String::from(\"-k\"),\n            String::from(\"/root/crown-rust/bzip2_rs_gpt/11Nov.txt\"),\n            // String::from(\"/root/crown-rust/bzip2_rs_gpt/sample1.ref\"),\n            // String::from(\"/root/crown-rust/bzip2_rs_gpt/abc.txt\"),\n        ];\n            // String::from(\"-1\"),\n "}], "start_byte": 12931, "end_byte": 14345, "start_point": [332, 4], "end_point": [374, 5], "text": "            } else {\n                    decode = true;\n                    for cell in &arg_list {\n                        if let Some(name) = &cell.name {\n                            if name.as_str() == \"--\"  {\n                                decode = false;\n                                continue;\n                            }\n                            if name.starts_with('-') && decode {\n                                continue;\n                            }\n                            unsafe {NUM_FILE_NAMES += 1;}\n                            uncompress(Some(name));\n                        }\n                    }\n                }\n                if UNZ_FAILS_EXIST {\n                    set_exit(2);\n                    // process::exit(EXIT_VALUE);\n                }\n            },\n            _ => {\n                // \u5904\u7406\u6d4b\u8bd5\u6a21\u5f0f\n                // ...\n            },\n        }\n    }\n\n    // println!(\"121_main_\u6240\u6709\u547d\u4ee4\u884c\u53c2\u6570\u5904\u7406\u5b8c\u6210\");\n    Ok(())\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_main() {\n        // \u6a21\u62df\u547d\u4ee4\u884c\u53c2\u6570\n        let simulated_args = vec![\n            String::from(\"./bzip2\"),\n            String::from(\"-k\"),\n            String::from(\"/root/crown-rust/bzip2_rs_gpt/11Nov.txt\"),\n            // String::from(\"/root/crown-rust/bzip2_rs_gpt/sample1.ref\"),\n            // String::from(\"/root/crown-rust/bzip2_rs_gpt/abc.txt\"),\n        ];\n            // String::from(\"-1\"),\n "}], "start_byte": 12931, "end_byte": 14345, "start_point": [332, 4], "end_point": [374, 5], "text": "            } else {\n                    decode = true;\n                    for cell in &arg_list {\n                        if let Some(name) = &cell.name {\n                            if name.as_str() == \"--\"  {\n                                decode = false;\n                                continue;\n                            }\n                            if name.starts_with('-') && decode {\n                                continue;\n                            }\n                            unsafe {NUM_FILE_NAMES += 1;}\n                            uncompress(Some(name));\n                        }\n                    }\n                }\n                if UNZ_FAILS_EXIST {\n                    set_exit(2);\n                    // process::exit(EXIT_VALUE);\n                }\n            },\n            _ => {\n                // \u5904\u7406\u6d4b\u8bd5\u6a21\u5f0f\n                // ...\n            },\n        }\n    }\n\n    // println!(\"121_main_\u6240\u6709\u547d\u4ee4\u884c\u53c2\u6570\u5904\u7406\u5b8c\u6210\");\n    Ok(())\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_main() {\n        // \u6a21\u62df\u547d\u4ee4\u884c\u53c2\u6570\n        let simulated_args = vec![\n            String::from(\"./bzip2\"),\n            String::from(\"-k\"),\n            String::from(\"/root/crown-rust/bzip2_rs_gpt/11Nov.txt\"),\n            // String::from(\"/root/crown-rust/bzip2_rs_gpt/sample1.ref\"),\n            // String::from(\"/root/crown-rust/bzip2_rs_gpt/abc.txt\"),\n        ];\n            // String::from(\"-1\"),\n "}, {"type": "line_comment", "children": [], "start_byte": 14351, "end_byte": 14409, "start_point": [376, 4], "end_point": [376, 62], "text": "     // String::from(\"< sample1.ref\"),\n            // Stri"}, {"type": "call_expression", "children": [{"type": "identifier", "children": [], "start_byte": 14414, "end_byte": 14416, "start_point": [377, 4], "end_point": [377, 6], "text": "ro"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 14416, "end_byte": 14417, "start_point": [377, 6], "end_point": [377, 7], "text": "m"}, {"type": "unit_expression", "children": [{"type": "(", "children": [], "start_byte": 14417, "end_byte": 14418, "start_point": [377, 7], "end_point": [377, 8], "text": "("}, {"type": ")", "children": [], "start_byte": 14418, "end_byte": 14419, "start_point": [377, 8], "end_point": [377, 9], "text": "\""}], "start_byte": 14417, "end_byte": 14419, "start_point": [377, 7], "end_point": [377, 9], "text": "(\""}, {"type": ")", "children": [], "start_byte": 14419, "end_byte": 14420, "start_point": [377, 9], "end_point": [377, 10], "text": ">"}], "start_byte": 14416, "end_byte": 14420, "start_point": [377, 6], "end_point": [377, 10], "text": "m(\">"}], "start_byte": 14414, "end_byte": 14420, "start_point": [377, 4], "end_point": [377, 10], "text": "rom(\">"}, {"type": "}", "children": [], "start_byte": 14421, "end_byte": 14422, "start_point": [378, 0], "end_point": [378, 1], "text": "s"}], "start_byte": 4081, "end_byte": 14422, "start_point": [99, 71], "end_point": [378, 1], "text": "     SMALL_MODE = false;\n        KEEP_INPUT_FILES = false;\n        FORCE_OVERWRITE = false;\n        NOISY = true;\n        verbosity = 0;\n        blockSize100k = 9;\n        TEST_FAILS_EXIST = false;\n        UNZ_FAILS_EXIST = false;\n        NUM_FILE_NAMES = 0;\n        NUM_FILES_PROCESSED = 0;\n        workFactor = 30;\n        DELETE_OUTPUT_ON_INTERRUPT = false;\n        EXIT_VALUE = 0;\n        OP_MODE = 1;\n        LONGEST_FILE_NAME = 7;\n        \n    }\n\n    let mut i = 0;\n    let mut j = 0;\n\n    decode = true;\n\n    // let mut in_name = String::from(\"(none)\");\n    // let mut out_name = String::from(\"(none)\");\n    // let mut prog_name_really = argv[0].clone();\n    // let prog_name = &prog_name_really;\n\n    // \u786e\u4fdd\u7c7b\u578b\u5927\u5c0f\u6b63\u786e\n    // // println!(\"121_main_\u68c0\u67e5\u6570\u636e\u7c7b\u578b\u5927\u5c0f\");\n    // if std::mem::size_of::<i32>() != 4 || std::mem::size_of::<u16>() != 2 || std::mem::size_of::<char>() != 1 {\n    //     // println!(\"121_main_\u6570\u636e\u7c7b\u578b\u5927\u5c0f\u9519\u8bef\");\n    //     config_error();\n    //     return Err(io::Error::new(io::ErrorKind::Other, \"\u914d\u7f6e\u9519\u8bef\"));\n    // }\n\n\n    unsafe {\n        let prog_name_str = env::args().nth(0).unwrap_or_else(|| String::from(\"(unknown)\"));\n        PROG_NAME_REALLY = string_to_u8_array_1034(prog_name_str.clone());\n        let p_str = Path::new(&prog_name_str)\n            .file_name()\n            .unwrap()\n            .to_str()\n            .unwrap();\n        PROG_NAME = string_to_u8_array_2000(p_str.to_string());\n    }\n\n    // \u5904\u7406\u547d\u4ee4\u884c\u53c2\u6570\n    // println!(\"121_main_\u5f00\u59cb\u5904\u7406\u547d\u4ee4\u884c\u53c2\u6570\");\n    let mut arg_list = Some(Box::new(Cell::mk_cell()));\n    Cell::add_flags_from_env_var(&mut arg_list, \"BZIP2\");\n    // println!(\"121_main_\u6dfb\u52a0\u73af\u5883\u53d8\u91cf BZIP2\");\n\n    Cell::add_flags_from_env_var(&mut arg_list, \"BZIP\");\n    // println!(\"121_main_\u6dfb\u52a0\u73af\u5883\u53d8\u91cf BZIP\");\n\n    for arg in argv.iter().skip(1) {\n        // println!(\"121_main_\u5904\u7406\u53c2\u6570: {}\", arg);\n        arg_list = Some(Box::new(arg_list.take().unwrap_or_else(|| Box::new(Cell::mk_cell())).snoc_string(arg)));\n    }\n\n    // println!(\"After doing with arg_list\");\n    if let Some(ref cell) = arg_list {\n        cell.printLinkLists();\n    }\n    // \u4e0b\u9762\u8fdb\u5165arg_list\u7684\u4f7f\u7528\n\n    // let mut arg_list = Vec::new();\n    // add_flags_from_env_var(&mut arg_list, \"BZIP2\");\n    // add_flags_from_env_var(&mut arg_list, \"BZIP\");\n    // arg_list.extend(env::args().skip(1));\n    unsafe {\n        LONGEST_FILE_NAME = 7;\n        NUM_FILE_NAMES = 0;\n    }\n    decode = true;\n    // \u9012\u5f52\u904d\u5386 \ud83d\udd25\n    process_link_list(&mut arg_list, &mut decode);\n    // for aa in &arg_list {\n    //      // \u89e3\u5f15\u7528 `Box<String>` \u4ee5\u83b7\u53d6 `String` \u7684\u5f15\u7528\n    //     if let Some(ref name) = aa.name {\n    //         if name.as_str() == \"--\" {\n    //             decode = false;\n    //             continue;\n    //         }\n    //         if name.starts_with('-') && decode {\n    //             continue;\n    //         }\n    //         unsafe {\n    //             NUM_FILE_NAMES += 1;\n    //             LONGEST_FILE_NAME = LONGEST_FILE_NAME.max(name.len() as i32);\n    //         }\n    //     }\n    // }\n\n    unsafe {SRC_MODE = if NUM_FILE_NAMES == 0 { 1 } else { 3 };}\n    unsafe {OP_MODE = 1;}\n    unsafe {\n        let mut prog_name_str = u8_array_to_string(&PROG_NAME);\n        if prog_name_str.contains(\"unzip\") || prog_name_str.contains(\"UNZIP\") {\n            OP_MODE = 2;\n        }\n        if prog_name_str.contains(\"z2cat\") || prog_name_str.contains(\"Z2CAT\") || prog_name_str.contains(\"zcat\") || prog_name_str.contains(\"ZCAT\") {\n            OP_MODE = 2;\n        }\n    }\n\n\n    // \u904d\u5386arg_list\u5904\u7406\u6bcf\u4e2a\u547d\u4ee4\u884c\u53c2\u6570\n    let mut aa = &arg_list;\n    while let Some(cell) = aa {\n        if let Some(name) = &cell.name {\n            if name.as_str() == \"--\"  {\n                break;\n            }\n\n            if name.starts_with('-') && !name.starts_with(\"--\") {\n                for ch in name.chars().skip(1) {\n                    match ch {\n                        'c' => unsafe { SRC_MODE = 2; },\n                        'd' => unsafe { OP_MODE = 2; },\n                        'z' => unsafe { OP_MODE = 1; },\n                        'f' => unsafe { FORCE_OVERWRITE = true; },\n                        't' => unsafe { OP_MODE = 3; },\n                        'k' => unsafe { KEEP_INPUT_FILES = true; },\n                        's' => unsafe { SMALL_MODE = true; },\n                        'q' => unsafe { NOISY = false; },\n                        '1' => unsafe { blockSize100k = 1; },\n                        '2' => unsafe { blockSize100k = 2; },\n                        '3' => unsafe { blockSize100k = 3; },\n                        '4' => unsafe { blockSize100k = 4; },\n                        '5' => unsafe { blockSize100k = 5; },\n                        '6' => unsafe { blockSize100k = 6; },\n                        '7' => unsafe { blockSize100k = 7; },\n                        '8' => unsafe { blockSize100k = 8; },\n                        '9' => unsafe { blockSize100k = 9; },\n                        // ...\u5904\u7406\u5176\u4ed6\u5b57\u7b26...\n                        'L' => unsafe { license(); },\n                        'v' => unsafe { VERBOSITY += 1; },\n                        'h' => {\n                            unsafe{\n                                let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                                usage(prog_name_str);\n                            }\n                            // process::exit(0);\n                        },\n                        _ => {\n                            unsafe {\n                            eprintln!(\"\u7b2c\u4e00match {}: Bad flag `{}`\", String::from_utf8_lossy(&PROG_NAME), name);\n                            let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                                usage(prog_name_str);\n                            }\n                            // process::exit(1);\n                        }\n                    }\n                }\n            }\n        }\n        aa = &cell.link;\n    }\n\n\n    // \u904d\u5386arg_list\u5904\u7406\u6bcf\u4e2a\u957f\u683c\u5f0f\u547d\u4ee4\u884c\u53c2\u6570\n    let mut aa = &arg_list;\n    while let Some(cell) = aa {\n        if let Some(name) = &cell.name {\n            match name.as_str() {\n                \"--\" => break,\n                \"--stdout\" => unsafe { SRC_MODE = 2; },\n                \"--decompress\" => unsafe { OP_MODE = 2; },\n                \"--compress\" => unsafe { OP_MODE = 1; },\n                \"--force\" => unsafe { FORCE_OVERWRITE = true; },\n                \"--test\" => unsafe { OP_MODE = 3; },\n                \"--keep\" => unsafe { KEEP_INPUT_FILES = true; },\n                \"--small\" => unsafe { SMALL_MODE = true; },\n                \"--quiet\" => unsafe { NOISY = false; },\n                \"--version\" | \"--license\" => license(),\n                \"--exponential\" => unsafe { WORK_FACTOR = 1; },\n                \"--repetitive-best\" | \"--repetitive-fast\" => redundant(&name.as_bytes()),\n                \"--fast\" => unsafe { blockSize100k = 1; },\n                \"--best\" => unsafe { blockSize100k = 9; },\n                \"--verbose\" => unsafe { VERBOSITY += 1; },\n                \"--help\" => {\n                    unsafe{\n                        let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                        usage(prog_name_str);\n                    }\n                    // process::exit(0);\n                },\n                _ if name.starts_with(\"--\") => {\n                    unsafe{ \n                        eprintln!(\"\u7b2c\u4e8cmatch {}: Bad flag `{}`\", String::from_utf8_lossy(&PROG_NAME), name);\n                        let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                        usage(prog_name_str);\n                    }\n                    // process::exit(0);\n                },\n                _ => {}\n            }\n        }\n        aa = &cell.link;\n    }\n\n\n\n    // \u8bbe\u7f6everbosity\u9650\u5236\n    unsafe {\n        if VERBOSITY > 4 {\n            VERBOSITY = 4;\n        }\n        if OP_MODE == 1 && SMALL_MODE && blockSize100k > 2 {\n            unsafe {blockSize100k = 2; }\n        }\n        if OP_MODE == 3 && SRC_MODE == 2 {\n            unsafe {eprintln!(\"{}: -c and -t cannot be used together.\", String::from_utf8_lossy(&PROG_NAME));}\n            // process::exit(1);\n        }\n        if SRC_MODE == 2 && NUM_FILE_NAMES == 0 {\n            SRC_MODE = 1;\n        }\n        if OP_MODE != 1 {\n            unsafe {blockSize100k = 0; }\n        }\n    }\n    // \u6839\u636e\u64cd\u4f5c\u6a21\u5f0f\u6267\u884c\u76f8\u5e94\u7684\u64cd\u4f5c\n    unsafe {\n        // println!(\"OP_MODE: {}\", OP_MODE);\n        // println!(\"SRC_MODE: {}\", SRC_MODE);\n        match OP_MODE {\n            1 => {\n                if SRC_MODE == 1 {\n                    compress(None)?;\n                } else {\n                    decode = true;\n                    process_cells(&arg_list, &mut decode);\n                }\n            },\n            2 => {\n                UNZ_FAILS_EXIST = false;\n                if SRC_MODE == 1 {\n                    uncompress(None);\n                } else {\n                    decode = true;\n                    for cell in &arg_list {\n                        if let Some(name) = &cell.name {\n                            if name.as_str() == \"--\"  {\n                                decode = false;\n                                continue;\n                            }\n                            if name.starts_with('-') && decode {\n                                continue;\n                            }\n                            unsafe {NUM_FILE_NAMES += 1;}\n                            uncompress(Some(name));\n                        }\n                    }\n                }\n                if UNZ_FAILS_EXIST {\n                    set_exit(2);\n                    // process::exit(EXIT_VALUE);\n                }\n            },\n            _ => {\n                // \u5904\u7406\u6d4b\u8bd5\u6a21\u5f0f\n                // ...\n            },\n        }\n    }\n\n    // println!(\"121_main_\u6240\u6709\u547d\u4ee4\u884c\u53c2\u6570\u5904\u7406\u5b8c\u6210\");\n    Ok(())\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_main() {\n        // \u6a21\u62df\u547d\u4ee4\u884c\u53c2\u6570\n        let simulated_args = vec![\n            String::from(\"./bzip2\"),\n            String::from(\"-k\"),\n            String::from(\"/root/crown-rust/bzip2_rs_gpt/11Nov.txt\"),\n            // String::from(\"/root/crown-rust/bzip2_rs_gpt/sample1.ref\"),\n            // String::from(\"/root/crown-rust/bzip2_rs_gpt/abc.txt\"),\n        ];\n            // String::from(\"-1\"),\n            // String::from(\"< sample1.ref\"),\n            // String::from(\"> s"}], "start_byte": 4010, "end_byte": 14422, "start_point": [99, 0], "end_point": [378, 1], "text": "ou.len() as i32;\n    let mut decode: bool;\n    // \u521d\u59cb\u5316\u53d8\u91cf\n    unsafe{\n        SMALL_MODE = false;\n        KEEP_INPUT_FILES = false;\n        FORCE_OVERWRITE = false;\n        NOISY = true;\n        verbosity = 0;\n        blockSize100k = 9;\n        TEST_FAILS_EXIST = false;\n        UNZ_FAILS_EXIST = false;\n        NUM_FILE_NAMES = 0;\n        NUM_FILES_PROCESSED = 0;\n        workFactor = 30;\n        DELETE_OUTPUT_ON_INTERRUPT = false;\n        EXIT_VALUE = 0;\n        OP_MODE = 1;\n        LONGEST_FILE_NAME = 7;\n        \n    }\n\n    let mut i = 0;\n    let mut j = 0;\n\n    decode = true;\n\n    // let mut in_name = String::from(\"(none)\");\n    // let mut out_name = String::from(\"(none)\");\n    // let mut prog_name_really = argv[0].clone();\n    // let prog_name = &prog_name_really;\n\n    // \u786e\u4fdd\u7c7b\u578b\u5927\u5c0f\u6b63\u786e\n    // // println!(\"121_main_\u68c0\u67e5\u6570\u636e\u7c7b\u578b\u5927\u5c0f\");\n    // if std::mem::size_of::<i32>() != 4 || std::mem::size_of::<u16>() != 2 || std::mem::size_of::<char>() != 1 {\n    //     // println!(\"121_main_\u6570\u636e\u7c7b\u578b\u5927\u5c0f\u9519\u8bef\");\n    //     config_error();\n    //     return Err(io::Error::new(io::ErrorKind::Other, \"\u914d\u7f6e\u9519\u8bef\"));\n    // }\n\n\n    unsafe {\n        let prog_name_str = env::args().nth(0).unwrap_or_else(|| String::from(\"(unknown)\"));\n        PROG_NAME_REALLY = string_to_u8_array_1034(prog_name_str.clone());\n        let p_str = Path::new(&prog_name_str)\n            .file_name()\n            .unwrap()\n            .to_str()\n            .unwrap();\n        PROG_NAME = string_to_u8_array_2000(p_str.to_string());\n    }\n\n    // \u5904\u7406\u547d\u4ee4\u884c\u53c2\u6570\n    // println!(\"121_main_\u5f00\u59cb\u5904\u7406\u547d\u4ee4\u884c\u53c2\u6570\");\n    let mut arg_list = Some(Box::new(Cell::mk_cell()));\n    Cell::add_flags_from_env_var(&mut arg_list, \"BZIP2\");\n    // println!(\"121_main_\u6dfb\u52a0\u73af\u5883\u53d8\u91cf BZIP2\");\n\n    Cell::add_flags_from_env_var(&mut arg_list, \"BZIP\");\n    // println!(\"121_main_\u6dfb\u52a0\u73af\u5883\u53d8\u91cf BZIP\");\n\n    for arg in argv.iter().skip(1) {\n        // println!(\"121_main_\u5904\u7406\u53c2\u6570: {}\", arg);\n        arg_list = Some(Box::new(arg_list.take().unwrap_or_else(|| Box::new(Cell::mk_cell())).snoc_string(arg)));\n    }\n\n    // println!(\"After doing with arg_list\");\n    if let Some(ref cell) = arg_list {\n        cell.printLinkLists();\n    }\n    // \u4e0b\u9762\u8fdb\u5165arg_list\u7684\u4f7f\u7528\n\n    // let mut arg_list = Vec::new();\n    // add_flags_from_env_var(&mut arg_list, \"BZIP2\");\n    // add_flags_from_env_var(&mut arg_list, \"BZIP\");\n    // arg_list.extend(env::args().skip(1));\n    unsafe {\n        LONGEST_FILE_NAME = 7;\n        NUM_FILE_NAMES = 0;\n    }\n    decode = true;\n    // \u9012\u5f52\u904d\u5386 \ud83d\udd25\n    process_link_list(&mut arg_list, &mut decode);\n    // for aa in &arg_list {\n    //      // \u89e3\u5f15\u7528 `Box<String>` \u4ee5\u83b7\u53d6 `String` \u7684\u5f15\u7528\n    //     if let Some(ref name) = aa.name {\n    //         if name.as_str() == \"--\" {\n    //             decode = false;\n    //             continue;\n    //         }\n    //         if name.starts_with('-') && decode {\n    //             continue;\n    //         }\n    //         unsafe {\n    //             NUM_FILE_NAMES += 1;\n    //             LONGEST_FILE_NAME = LONGEST_FILE_NAME.max(name.len() as i32);\n    //         }\n    //     }\n    // }\n\n    unsafe {SRC_MODE = if NUM_FILE_NAMES == 0 { 1 } else { 3 };}\n    unsafe {OP_MODE = 1;}\n    unsafe {\n        let mut prog_name_str = u8_array_to_string(&PROG_NAME);\n        if prog_name_str.contains(\"unzip\") || prog_name_str.contains(\"UNZIP\") {\n            OP_MODE = 2;\n        }\n        if prog_name_str.contains(\"z2cat\") || prog_name_str.contains(\"Z2CAT\") || prog_name_str.contains(\"zcat\") || prog_name_str.contains(\"ZCAT\") {\n            OP_MODE = 2;\n        }\n    }\n\n\n    // \u904d\u5386arg_list\u5904\u7406\u6bcf\u4e2a\u547d\u4ee4\u884c\u53c2\u6570\n    let mut aa = &arg_list;\n    while let Some(cell) = aa {\n        if let Some(name) = &cell.name {\n            if name.as_str() == \"--\"  {\n                break;\n            }\n\n            if name.starts_with('-') && !name.starts_with(\"--\") {\n                for ch in name.chars().skip(1) {\n                    match ch {\n                        'c' => unsafe { SRC_MODE = 2; },\n                        'd' => unsafe { OP_MODE = 2; },\n                        'z' => unsafe { OP_MODE = 1; },\n                        'f' => unsafe { FORCE_OVERWRITE = true; },\n                        't' => unsafe { OP_MODE = 3; },\n                        'k' => unsafe { KEEP_INPUT_FILES = true; },\n                        's' => unsafe { SMALL_MODE = true; },\n                        'q' => unsafe { NOISY = false; },\n                        '1' => unsafe { blockSize100k = 1; },\n                        '2' => unsafe { blockSize100k = 2; },\n                        '3' => unsafe { blockSize100k = 3; },\n                        '4' => unsafe { blockSize100k = 4; },\n                        '5' => unsafe { blockSize100k = 5; },\n                        '6' => unsafe { blockSize100k = 6; },\n                        '7' => unsafe { blockSize100k = 7; },\n                        '8' => unsafe { blockSize100k = 8; },\n                        '9' => unsafe { blockSize100k = 9; },\n                        // ...\u5904\u7406\u5176\u4ed6\u5b57\u7b26...\n                        'L' => unsafe { license(); },\n                        'v' => unsafe { VERBOSITY += 1; },\n                        'h' => {\n                            unsafe{\n                                let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                                usage(prog_name_str);\n                            }\n                            // process::exit(0);\n                        },\n                        _ => {\n                            unsafe {\n                            eprintln!(\"\u7b2c\u4e00match {}: Bad flag `{}`\", String::from_utf8_lossy(&PROG_NAME), name);\n                            let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                                usage(prog_name_str);\n                            }\n                            // process::exit(1);\n                        }\n                    }\n                }\n            }\n        }\n        aa = &cell.link;\n    }\n\n\n    // \u904d\u5386arg_list\u5904\u7406\u6bcf\u4e2a\u957f\u683c\u5f0f\u547d\u4ee4\u884c\u53c2\u6570\n    let mut aa = &arg_list;\n    while let Some(cell) = aa {\n        if let Some(name) = &cell.name {\n            match name.as_str() {\n                \"--\" => break,\n                \"--stdout\" => unsafe { SRC_MODE = 2; },\n                \"--decompress\" => unsafe { OP_MODE = 2; },\n                \"--compress\" => unsafe { OP_MODE = 1; },\n                \"--force\" => unsafe { FORCE_OVERWRITE = true; },\n                \"--test\" => unsafe { OP_MODE = 3; },\n                \"--keep\" => unsafe { KEEP_INPUT_FILES = true; },\n                \"--small\" => unsafe { SMALL_MODE = true; },\n                \"--quiet\" => unsafe { NOISY = false; },\n                \"--version\" | \"--license\" => license(),\n                \"--exponential\" => unsafe { WORK_FACTOR = 1; },\n                \"--repetitive-best\" | \"--repetitive-fast\" => redundant(&name.as_bytes()),\n                \"--fast\" => unsafe { blockSize100k = 1; },\n                \"--best\" => unsafe { blockSize100k = 9; },\n                \"--verbose\" => unsafe { VERBOSITY += 1; },\n                \"--help\" => {\n                    unsafe{\n                        let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                        usage(prog_name_str);\n                    }\n                    // process::exit(0);\n                },\n                _ if name.starts_with(\"--\") => {\n                    unsafe{ \n                        eprintln!(\"\u7b2c\u4e8cmatch {}: Bad flag `{}`\", String::from_utf8_lossy(&PROG_NAME), name);\n                        let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                        usage(prog_name_str);\n                    }\n                    // process::exit(0);\n                },\n                _ => {}\n            }\n        }\n        aa = &cell.link;\n    }\n\n\n\n    // \u8bbe\u7f6everbosity\u9650\u5236\n    unsafe {\n        if VERBOSITY > 4 {\n            VERBOSITY = 4;\n        }\n        if OP_MODE == 1 && SMALL_MODE && blockSize100k > 2 {\n            unsafe {blockSize100k = 2; }\n        }\n        if OP_MODE == 3 && SRC_MODE == 2 {\n            unsafe {eprintln!(\"{}: -c and -t cannot be used together.\", String::from_utf8_lossy(&PROG_NAME));}\n            // process::exit(1);\n        }\n        if SRC_MODE == 2 && NUM_FILE_NAMES == 0 {\n            SRC_MODE = 1;\n        }\n        if OP_MODE != 1 {\n            unsafe {blockSize100k = 0; }\n        }\n    }\n    // \u6839\u636e\u64cd\u4f5c\u6a21\u5f0f\u6267\u884c\u76f8\u5e94\u7684\u64cd\u4f5c\n    unsafe {\n        // println!(\"OP_MODE: {}\", OP_MODE);\n        // println!(\"SRC_MODE: {}\", SRC_MODE);\n        match OP_MODE {\n            1 => {\n                if SRC_MODE == 1 {\n                    compress(None)?;\n                } else {\n                    decode = true;\n                    process_cells(&arg_list, &mut decode);\n                }\n            },\n            2 => {\n                UNZ_FAILS_EXIST = false;\n                if SRC_MODE == 1 {\n                    uncompress(None);\n                } else {\n                    decode = true;\n                    for cell in &arg_list {\n                        if let Some(name) = &cell.name {\n                            if name.as_str() == \"--\"  {\n                                decode = false;\n                                continue;\n                            }\n                            if name.starts_with('-') && decode {\n                                continue;\n                            }\n                            unsafe {NUM_FILE_NAMES += 1;}\n                            uncompress(Some(name));\n                        }\n                    }\n                }\n                if UNZ_FAILS_EXIST {\n                    set_exit(2);\n                    // process::exit(EXIT_VALUE);\n                }\n            },\n            _ => {\n                // \u5904\u7406\u6d4b\u8bd5\u6a21\u5f0f\n                // ...\n            },\n        }\n    }\n\n    // println!(\"121_main_\u6240\u6709\u547d\u4ee4\u884c\u53c2\u6570\u5904\u7406\u5b8c\u6210\");\n    Ok(())\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_main() {\n        // \u6a21\u62df\u547d\u4ee4\u884c\u53c2\u6570\n        let simulated_args = vec![\n            String::from(\"./bzip2\"),\n            String::from(\"-k\"),\n            String::from(\"/root/crown-rust/bzip2_rs_gpt/11Nov.txt\"),\n            // String::from(\"/root/crown-rust/bzip2_rs_gpt/sample1.ref\"),\n            // String::from(\"/root/crown-rust/bzip2_rs_gpt/abc.txt\"),\n        ];\n            // String::from(\"-1\"),\n            // String::from(\"< sample1.ref\"),\n            // String::from(\"> s"}, {"type": "attribute_item", "children": [{"type": "#", "children": [], "start_byte": 14424, "end_byte": 14425, "start_point": [380, 0], "end_point": [380, 1], "text": "p"}, {"type": "[", "children": [], "start_byte": 14425, "end_byte": 14426, "start_point": [380, 1], "end_point": [380, 2], "text": "l"}, {"type": "attribute", "children": [{"type": "identifier", "children": [], "start_byte": 14426, "end_byte": 14429, "start_point": [380, 2], "end_point": [380, 5], "text": "e1m"}, {"type": "token_tree", "children": [{"type": "(", "children": [], "start_byte": 14429, "end_byte": 14430, "start_point": [380, 5], "end_point": [380, 6], "text": "a"}, {"type": "identifier", "children": [], "start_byte": 14430, "end_byte": 14434, "start_point": [380, 6], "end_point": [380, 10], "text": "o.rb"}, {"type": ")", "children": [], "start_byte": 14434, "end_byte": 14435, "start_point": [380, 10], "end_point": [380, 11], "text": "2"}], "start_byte": 14429, "end_byte": 14435, "start_point": [380, 5], "end_point": [380, 11], "text": "ao.rb2"}], "start_byte": 14426, "end_byte": 14435, "start_point": [380, 2], "end_point": [380, 11], "text": "e1mao.rb2"}, {"type": "]", "children": [], "start_byte": 14435, "end_byte": 14436, "start_point": [380, 11], "end_point": [380, 12], "text": "\""}], "start_byte": 14424, "end_byte": 14436, "start_point": [380, 0], "end_point": [380, 12], "text": "ple1mao.rb2\""}, {"type": "mod_item", "children": [{"type": "mod", "children": [], "start_byte": 14437, "end_byte": 14440, "start_point": [381, 0], "end_point": [381, 3], "text": ",\n "}, {"type": "identifier", "children": [], "start_byte": 14441, "end_byte": 14446, "start_point": [381, 4], "end_point": [381, 9], "text": " \n\n  "}, {"type": "declaration_list", "children": [{"type": "{", "children": [], "start_byte": 14447, "end_byte": 14448, "start_point": [381, 10], "end_point": [381, 11], "text": " "}, {"type": "use_declaration", "children": [{"type": "use", "children": [], "start_byte": 14453, "end_byte": 14456, "start_point": [382, 4], "end_point": [382, 7], "text": "/ \u8c03"}, {"type": "use_wildcard", "children": [{"type": "super", "children": [], "start_byte": 14457, "end_byte": 14462, "start_point": [382, 8], "end_point": [382, 13], "text": " main"}, {"type": "::", "children": [], "start_byte": 14462, "end_byte": 14464, "start_point": [382, 13], "end_point": [382, 15], "text": " \u51fd"}, {"type": "*", "children": [], "start_byte": 14464, "end_byte": 14465, "start_point": [382, 15], "end_point": [382, 16], "text": "\u6570"}], "start_byte": 14457, "end_byte": 14465, "start_point": [382, 8], "end_point": [382, 16], "text": " main \u51fd\u6570"}, {"type": ";", "children": [], "start_byte": 14465, "end_byte": 14466, "start_point": [382, 16], "end_point": [382, 17], "text": "\n"}], "start_byte": 14453, "end_byte": 14466, "start_point": [382, 4], "end_point": [382, 17], "text": "/ \u8c03\u7528 main \u51fd\u6570\n"}, {"type": "attribute_item", "children": [{"type": "#", "children": [], "start_byte": 14472, "end_byte": 14473, "start_point": [384, 4], "end_point": [384, 5], "text": " "}, {"type": "[", "children": [], "start_byte": 14473, "end_byte": 14474, "start_point": [384, 5], "end_point": [384, 6], "text": " "}, {"type": "attribute", "children": [{"type": "identifier", "children": [], "start_byte": 14474, "end_byte": 14478, "start_point": [384, 6], "end_point": [384, 10], "text": "let "}], "start_byte": 14474, "end_byte": 14478, "start_point": [384, 6], "end_point": [384, 10], "text": "let "}, {"type": "]", "children": [], "start_byte": 14478, "end_byte": 14479, "start_point": [384, 10], "end_point": [384, 11], "text": "r"}], "start_byte": 14472, "end_byte": 14479, "start_point": [384, 4], "end_point": [384, 11], "text": "  let r"}, {"type": "function_item", "children": [{"type": "fn", "children": [], "start_byte": 14484, "end_byte": 14486, "start_point": [385, 4], "end_point": [385, 6], "text": " ="}, {"type": "identifier", "children": [], "start_byte": 14487, "end_byte": 14496, "start_point": [385, 7], "end_point": [385, 16], "text": "main(&sim"}, {"type": "parameters", "children": [{"type": "(", "children": [], "start_byte": 14496, "end_byte": 14497, "start_point": [385, 16], "end_point": [385, 17], "text": "u"}, {"type": ")", "children": [], "start_byte": 14497, "end_byte": 14498, "start_point": [385, 17], "end_point": [385, 18], "text": "l"}], "start_byte": 14496, "end_byte": 14498, "start_point": [385, 16], "end_point": [385, 18], "text": "ul"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 14499, "end_byte": 14500, "start_point": [385, 19], "end_point": [385, 20], "text": "t"}, {"type": "line_comment", "children": [], "start_byte": 14509, "end_byte": 14533, "start_point": [386, 8], "end_point": [386, 32], "text": "simulated_args.clone());"}, {"type": "let_declaration", "children": [{"type": "let", "children": [], "start_byte": 14542, "end_byte": 14545, "start_point": [387, 8], "end_point": [387, 11], "text": "// "}, {"type": "identifier", "children": [], "start_byte": 14546, "end_byte": 14560, "start_point": [387, 12], "end_point": [387, 26], "text": "ssert!(result."}, {"type": "=", "children": [], "start_byte": 14561, "end_byte": 14562, "start_point": [387, 27], "end_point": [387, 28], "text": "s"}, {"type": "macro_invocation", "children": [{"type": "identifier", "children": [], "start_byte": 14563, "end_byte": 14566, "start_point": [387, 29], "end_point": [387, 32], "text": "ok("}, {"type": "!", "children": [], "start_byte": 14566, "end_byte": 14567, "start_point": [387, 32], "end_point": [387, 33], "text": ")"}, {"type": "token_tree", "children": [{"type": "[", "children": [], "start_byte": 14567, "end_byte": 14568, "start_point": [387, 33], "end_point": [387, 34], "text": ")"}, {"type": "identifier", "children": [], "start_byte": 14581, "end_byte": 14587, "start_point": [388, 12], "end_point": [388, 18], "text": ""}, {"type": "identifier", "children": [], "start_byte": 14589, "end_byte": 14593, "start_point": [388, 20], "end_point": [388, 24], "text": ""}, {"type": "token_tree", "children": [{"type": "(", "children": [], "start_byte": 14593, "end_byte": 14594, "start_point": [388, 24], "end_point": [388, 25], "text": ""}, {"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 14594, "end_byte": 14595, "start_point": [388, 25], "end_point": [388, 26], "text": ""}, {"type": "\"", "children": [], "start_byte": 14602, "end_byte": 14603, "start_point": [388, 33], "end_point": [388, 34], "text": ""}], "start_byte": 14594, "end_byte": 14603, "start_point": [388, 25], "end_point": [388, 34], "text": ""}, {"type": ")", "children": [], "start_byte": 14603, "end_byte": 14604, "start_point": [388, 34], "end_point": [388, 35], "text": ""}], "start_byte": 14593, "end_byte": 14604, "start_point": [388, 24], "end_point": [388, 35], "text": ""}, {"type": "identifier", "children": [], "start_byte": 14618, "end_byte": 14624, "start_point": [389, 12], "end_point": [389, 18], "text": ""}, {"type": "identifier", "children": [], "start_byte": 14626, "end_byte": 14630, "start_point": [389, 20], "end_point": [389, 24], "text": ""}, {"type": "token_tree", "children": [{"type": "(", "children": [], "start_byte": 14630, "end_byte": 14631, "start_point": [389, 24], "end_point": [389, 25], "text": ""}, {"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 14631, "end_byte": 14632, "start_point": [389, 25], "end_point": [389, 26], "text": ""}, {"type": "\"", "children": [], "start_byte": 14634, "end_byte": 14635, "start_point": [389, 28], "end_point": [389, 29], "text": ""}], "start_byte": 14631, "end_byte": 14635, "start_point": [389, 25], "end_point": [389, 29], "text": ""}, {"type": ")", "children": [], "start_byte": 14635, "end_byte": 14636, "start_point": [389, 29], "end_point": [389, 30], "text": ""}], "start_byte": 14630, "end_byte": 14636, "start_point": [389, 24], "end_point": [389, 30], "text": ""}, {"type": "identifier", "children": [], "start_byte": 14650, "end_byte": 14656, "start_point": [390, 12], "end_point": [390, 18], "text": ""}, {"type": "identifier", "children": [], "start_byte": 14658, "end_byte": 14662, "start_point": [390, 20], "end_point": [390, 24], "text": ""}, {"type": "token_tree", "children": [{"type": "(", "children": [], "start_byte": 14662, "end_byte": 14663, "start_point": [390, 24], "end_point": [390, 25], "text": ""}, {"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 14663, "end_byte": 14664, "start_point": [390, 25], "end_point": [390, 26], "text": ""}, {"type": "\"", "children": [], "start_byte": 14703, "end_byte": 14704, "start_point": [390, 65], "end_point": [390, 66], "text": ""}], "start_byte": 14663, "end_byte": 14704, "start_point": [390, 25], "end_point": [390, 66], "text": ""}, {"type": ")", "children": [], "start_byte": 14704, "end_byte": 14705, "start_point": [390, 66], "end_point": [390, 67], "text": ""}], "start_byte": 14662, "end_byte": 14705, "start_point": [390, 24], "end_point": [390, 67], "text": ""}, {"type": "line_comment", "children": [], "start_byte": 14719, "end_byte": 14780, "start_point": [391, 12], "end_point": [391, 73], "text": ""}, {"type": "line_comment", "children": [], "start_byte": 14793, "end_byte": 14850, "start_point": [392, 12], "end_point": [392, 69], "text": ""}, {"type": "]", "children": [], "start_byte": 14859, "end_byte": 14860, "start_point": [393, 8], "end_point": [393, 9], "text": ""}], "start_byte": 14567, "end_byte": 14860, "start_point": [387, 33], "end_point": [393, 9], "text": ");\n    }\n}"}], "start_byte": 14563, "end_byte": 14860, "start_point": [387, 29], "end_point": [393, 9], "text": "ok());\n    }\n}"}, {"type": ";", "children": [], "start_byte": 14860, "end_byte": 14861, "start_point": [393, 9], "end_point": [393, 10], "text": ""}], "start_byte": 14542, "end_byte": 14861, "start_point": [387, 8], "end_point": [393, 10], "text": "// assert!(result.is_ok());\n    }\n}"}, {"type": "line_comment", "children": [], "start_byte": 14874, "end_byte": 14896, "start_point": [394, 12], "end_point": [394, 34], "text": ""}, {"type": "line_comment", "children": [], "start_byte": 14909, "end_byte": 14942, "start_point": [395, 12], "end_point": [395, 45], "text": ""}, {"type": "line_comment", "children": [], "start_byte": 14955, "end_byte": 14991, "start_point": [396, 12], "end_point": [396, 48], "text": ""}, {"type": "line_comment", "children": [], "start_byte": 15005, "end_byte": 15026, "start_point": [399, 8], "end_point": [399, 29], "text": ""}, {"type": "let_declaration", "children": [{"type": "let", "children": [], "start_byte": 15035, "end_byte": 15038, "start_point": [400, 8], "end_point": [400, 11], "text": ""}, {"type": "identifier", "children": [], "start_byte": 15039, "end_byte": 15045, "start_point": [400, 12], "end_point": [400, 18], "text": ""}, {"type": "=", "children": [], "start_byte": 15046, "end_byte": 15047, "start_point": [400, 19], "end_point": [400, 20], "text": ""}, {"type": "call_expression", "children": [{"type": "identifier", "children": [], "start_byte": 15048, "end_byte": 15052, "start_point": [400, 21], "end_point": [400, 25], "text": ""}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 15052, "end_byte": 15053, "start_point": [400, 25], "end_point": [400, 26], "text": ""}, {"type": "reference_expression", "children": [{"type": "&", "children": [], "start_byte": 15053, "end_byte": 15054, "start_point": [400, 26], "end_point": [400, 27], "text": ""}, {"type": "identifier", "children": [], "start_byte": 15054, "end_byte": 15068, "start_point": [400, 27], "end_point": [400, 41], "text": ""}], "start_byte": 15053, "end_byte": 15068, "start_point": [400, 26], "end_point": [400, 41], "text": ""}, {"type": ",", "children": [], "start_byte": 15068, "end_byte": 15069, "start_point": [400, 41], "end_point": [400, 42], "text": ""}, {"type": "reference_expression", "children": [{"type": "&", "children": [], "start_byte": 15069, "end_byte": 15070, "start_point": [400, 42], "end_point": [400, 43], "text": ""}, {"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 15070, "end_byte": 15084, "start_point": [400, 43], "end_point": [400, 57], "text": ""}, {"type": ".", "children": [], "start_byte": 15084, "end_byte": 15085, "start_point": [400, 57], "end_point": [400, 58], "text": ""}, {"type": "field_identifier", "children": [], "start_byte": 15085, "end_byte": 15090, "start_point": [400, 58], "end_point": [400, 63], "text": ""}], "start_byte": 15070, "end_byte": 15090, "start_point": [400, 43], "end_point": [400, 63], "text": ""}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 15090, "end_byte": 15091, "start_point": [400, 63], "end_point": [400, 64], "text": ""}, {"type": ")", "children": [], "start_byte": 15091, "end_byte": 15092, "start_point": [400, 64], "end_point": [400, 65], "text": ""}], "start_byte": 15090, "end_byte": 15092, "start_point": [400, 63], "end_point": [400, 65], "text": ""}], "start_byte": 15070, "end_byte": 15092, "start_point": [400, 43], "end_point": [400, 65], "text": ""}], "start_byte": 15069, "end_byte": 15092, "start_point": [400, 42], "end_point": [400, 65], "text": ""}, {"type": ")", "children": [], "start_byte": 15092, "end_byte": 15093, "start_point": [400, 65], "end_point": [400, 66], "text": ""}], "start_byte": 15052, "end_byte": 15093, "start_point": [400, 25], "end_point": [400, 66], "text": ""}], "start_byte": 15048, "end_byte": 15093, "start_point": [400, 21], "end_point": [400, 66], "text": ""}, {"type": ";", "children": [], "start_byte": 15093, "end_byte": 15094, "start_point": [400, 66], "end_point": [400, 67], "text": ""}], "start_byte": 15035, "end_byte": 15094, "start_point": [400, 8], "end_point": [400, 67], "text": ""}, {"type": "line_comment", "children": [], "start_byte": 15103, "end_byte": 15130, "start_point": [401, 8], "end_point": [401, 35], "text": ""}, {"type": "}", "children": [], "start_byte": 15135, "end_byte": 15136, "start_point": [402, 4], "end_point": [402, 5], "text": ""}], "start_byte": 14499, "end_byte": 15136, "start_point": [385, 19], "end_point": [402, 5], "text": "ted_args,&simulated_args.clone());\n        // assert!(result.is_ok());\n    }\n}"}], "start_byte": 14484, "end_byte": 15136, "start_point": [385, 4], "end_point": [402, 5], "text": " = main(&simulated_args,&simulated_args.clone());\n        // assert!(result.is_ok());\n    }\n}"}, {"type": "}", "children": [], "start_byte": 15137, "end_byte": 15138, "start_point": [403, 0], "end_point": [403, 1], "text": ""}], "start_byte": 14447, "end_byte": 15138, "start_point": [381, 10], "end_point": [403, 1], "text": "     // \u8c03\u7528 main \u51fd\u6570\n        let result = main(&simulated_args,&simulated_args.clone());\n        // assert!(result.is_ok());\n    }\n}"}], "start_byte": 14437, "end_byte": 15138, "start_point": [381, 0], "end_point": [403, 1], "text": ",\n   \n\n        // \u8c03\u7528 main \u51fd\u6570\n        let result = main(&simulated_args,&simulated_args.clone());\n        // assert!(result.is_ok());\n    }\n}"}], "start_byte": 0, "end_byte": 15138, "start_point": [0, 0], "end_point": [403, 1], "text": "use crate::bzip2::scc_119_compress::SRC_MODE;\nuse crate::global_vars::bzip2_c5::OP_MODE;\nuse crate::bzip2::scc_78_usage::*;\nuse crate::bzip2::scc_118_uncompress::*;\n// use crate::bzip2::scc_120_root_57_signal::*;\n// use crate::bzip2::scc_105_copyFileName::*;\n// use crate::bzip2recover::scc_115_root_56_strcmp::*;\n// use crate::bzip2recover::scc_114_root_55_strstr::*;\n// use crate::bzip2::scc_79_license::*;\n// use crate::bzip2::scc_78_usage::*;\n// use crate::bzip2::scc_113_root_54_redundant::*;\n// use crate::bzip2recover::scc_112_root_53_strncmp::*;\n// use crate::bzip2recover::scc_121_main::*;\n// use crate::bzip2::scc_110_compressStream::*;\n// use crate::bzip2::scc_109_uncompressStream::*;\n// use crate::bzlib::scc_86_root_49_fopen::*;\n// use crate::bzip2recover::scc_8_bsOpenReadStream::*;\n// use crate::bzip2recover::scc_5_bsGetBit::*;\n// use crate::bzip2recover::scc_85_root_48_tooManyBlocks::*;\n// use crate::bzip2recover::scc_2_bsPutBit::*;\n// use crate::bzip2recover::scc_84_root_47_strrchr::*;\n// use crate::bzip2recover::scc_82_root_45_strcat::*;\n// use crate::bzip2recover::scc_81_root_44_endsInBz2::*;\n// use crate::bzip2::scc_103_addFlagsFromEnvVar::*;\n// use crate::bzip2::scc_116_hasSuffix::*;\n// use crate::bzip2::scc_90_root_52_setExit::*;\n// use crate::bzip2recover::scc_89_root_51_strncpy::*;\n// use crate::compress::scc_73_BZ2_compressBlock::*;\n// use crate::bzip2recover::scc_35_bsPutUChar::*;\n// use crate::bzip2recover::scc_34_bsPutUInt32::*;\n// use crate::bzip2::scc_108_testStream::*;\n// use crate::bzip2::scc_106_mySIGSEGVorSIGBUScatcher::*;\n// use crate::bzip2recover::scc_83_root_46_sprintf::*;\n// use crate::bzip2::scc_87_fileExists::*;\n// use crate::bzip2::scc_91_cleanUpAndFail::*;\n// use crate::global_vars::bzip2_c2::{bEnd, bStart, inFileName, outFileName, progName, rbEnd, rbStart, FILE, BitStream};\nuse crate::global_vars::bzip2_c1::*;\nuse crate::global_vars::bzip2_c2::*;\nuse crate::global_vars::bzip2_c5::*;\nuse std::{env, process, io};\nuse crate::bzip2::scc_101_mkCell_102_snoc_string_103_add_flags_from_env_var::*;\nuse crate::bzip2::scc_113_root_54_redundant::*;\nuse crate::bzip2::scc_79_license::*;\nuse crate::bzip2::scc_119_compress::*;\nuse crate::bzip2::scc_90_root_52_setExit::*;\nuse crate::global_vars::conversion::*;\nuse std::path::Path;\n\nfn process_link_list(cell_option: &mut Option<Box<Cell>>, decode: &mut bool) {\n    if let Some(cell) = cell_option {\n        if let Some(ref name) = cell.name {\n            if name.as_str() == \"--\" {\n                *decode = false;\n                return;\n            } else if name.starts_with('-') && *decode {\n                // \u5982\u679c\u53c2\u6570\u4ee5 '-' \u5f00\u5934\uff0c\u5e76\u4e14 continue_evaluation \u4e3a true\n                // \u5219\u8df3\u8fc7\u6b64\u8282\u70b9\u7684\u5904\u7406\n                // println!(\"\u8df3\u8fc7\u53c2\u6570: {}\", name);  // \u793a\u4f8b: \u6253\u5370\u4fe1\u606f\n                // ... \u5176\u4ed6\u8df3\u8fc7\u8282\u70b9\u65f6\u7684\u5904\u7406\u903b\u8f91 ...\n            } else {\n                unsafe {\n                    NUM_FILE_NAMES += 1;\n                    LONGEST_FILE_NAME = LONGEST_FILE_NAME.max(name.len() as i32);\n                }\n            }\n        }\n\n        // \u9012\u5f52\u8c03\u7528\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9\n        if cell.link.is_some() {\n            process_link_list(&mut cell.link, decode);\n        }\n    }\n}\n\nfn process_cells(cell: &Option<Box<Cell>>, decode: &mut bool) {\n    if let Some(cell) = cell {\n        if let Some(name) = &cell.name {\n            if name.as_str() == \"--\" {\n                *decode = false;\n                return;\n            }\n            if name.starts_with('-') && *decode {\n                // \u9012\u5f52\u8c03\u7528\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9\n                process_cells(&cell.link, decode);\n                return;\n            }\n            unsafe { NUM_FILES_PROCESSED += 1; }\n            // println!(\"cell.name: {}\", name);\n            if let Err(e) = compress(Some(name)) {\n                eprintln!(\"\u538b\u7f29\u8fc7\u7a0b\u4e2d\u51fa\u9519: {}\", e);\n            }\n        }\n        // \u9012\u5f52\u8c03\u7528\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9\n        process_cells(&cell.link, decode);\n    }\n}\n\n\n\npub fn main(argv: &[String], gou: &[String])  -> Result<(), io::Error> {\n    // let argv: Vec<String> = env::args().collect();\n    let argv = argv;\n    let argc = gou.len() as i32;\n    let mut decode: bool;\n    // \u521d\u59cb\u5316\u53d8\u91cf\n    unsafe{\n        SMALL_MODE = false;\n        KEEP_INPUT_FILES = false;\n        FORCE_OVERWRITE = false;\n        NOISY = true;\n        verbosity = 0;\n        blockSize100k = 9;\n        TEST_FAILS_EXIST = false;\n        UNZ_FAILS_EXIST = false;\n        NUM_FILE_NAMES = 0;\n        NUM_FILES_PROCESSED = 0;\n        workFactor = 30;\n        DELETE_OUTPUT_ON_INTERRUPT = false;\n        EXIT_VALUE = 0;\n        OP_MODE = 1;\n        LONGEST_FILE_NAME = 7;\n        \n    }\n\n    let mut i = 0;\n    let mut j = 0;\n\n    decode = true;\n\n    // let mut in_name = String::from(\"(none)\");\n    // let mut out_name = String::from(\"(none)\");\n    // let mut prog_name_really = argv[0].clone();\n    // let prog_name = &prog_name_really;\n\n    // \u786e\u4fdd\u7c7b\u578b\u5927\u5c0f\u6b63\u786e\n    // // println!(\"121_main_\u68c0\u67e5\u6570\u636e\u7c7b\u578b\u5927\u5c0f\");\n    // if std::mem::size_of::<i32>() != 4 || std::mem::size_of::<u16>() != 2 || std::mem::size_of::<char>() != 1 {\n    //     // println!(\"121_main_\u6570\u636e\u7c7b\u578b\u5927\u5c0f\u9519\u8bef\");\n    //     config_error();\n    //     return Err(io::Error::new(io::ErrorKind::Other, \"\u914d\u7f6e\u9519\u8bef\"));\n    // }\n\n\n    unsafe {\n        let prog_name_str = env::args().nth(0).unwrap_or_else(|| String::from(\"(unknown)\"));\n        PROG_NAME_REALLY = string_to_u8_array_1034(prog_name_str.clone());\n        let p_str = Path::new(&prog_name_str)\n            .file_name()\n            .unwrap()\n            .to_str()\n            .unwrap();\n        PROG_NAME = string_to_u8_array_2000(p_str.to_string());\n    }\n\n    // \u5904\u7406\u547d\u4ee4\u884c\u53c2\u6570\n    // println!(\"121_main_\u5f00\u59cb\u5904\u7406\u547d\u4ee4\u884c\u53c2\u6570\");\n    let mut arg_list = Some(Box::new(Cell::mk_cell()));\n    Cell::add_flags_from_env_var(&mut arg_list, \"BZIP2\");\n    // println!(\"121_main_\u6dfb\u52a0\u73af\u5883\u53d8\u91cf BZIP2\");\n\n    Cell::add_flags_from_env_var(&mut arg_list, \"BZIP\");\n    // println!(\"121_main_\u6dfb\u52a0\u73af\u5883\u53d8\u91cf BZIP\");\n\n    for arg in argv.iter().skip(1) {\n        // println!(\"121_main_\u5904\u7406\u53c2\u6570: {}\", arg);\n        arg_list = Some(Box::new(arg_list.take().unwrap_or_else(|| Box::new(Cell::mk_cell())).snoc_string(arg)));\n    }\n\n    // println!(\"After doing with arg_list\");\n    if let Some(ref cell) = arg_list {\n        cell.printLinkLists();\n    }\n    // \u4e0b\u9762\u8fdb\u5165arg_list\u7684\u4f7f\u7528\n\n    // let mut arg_list = Vec::new();\n    // add_flags_from_env_var(&mut arg_list, \"BZIP2\");\n    // add_flags_from_env_var(&mut arg_list, \"BZIP\");\n    // arg_list.extend(env::args().skip(1));\n    unsafe {\n        LONGEST_FILE_NAME = 7;\n        NUM_FILE_NAMES = 0;\n    }\n    decode = true;\n    // \u9012\u5f52\u904d\u5386 \ud83d\udd25\n    process_link_list(&mut arg_list, &mut decode);\n    // for aa in &arg_list {\n    //      // \u89e3\u5f15\u7528 `Box<String>` \u4ee5\u83b7\u53d6 `String` \u7684\u5f15\u7528\n    //     if let Some(ref name) = aa.name {\n    //         if name.as_str() == \"--\" {\n    //             decode = false;\n    //             continue;\n    //         }\n    //         if name.starts_with('-') && decode {\n    //             continue;\n    //         }\n    //         unsafe {\n    //             NUM_FILE_NAMES += 1;\n    //             LONGEST_FILE_NAME = LONGEST_FILE_NAME.max(name.len() as i32);\n    //         }\n    //     }\n    // }\n\n    unsafe {SRC_MODE = if NUM_FILE_NAMES == 0 { 1 } else { 3 };}\n    unsafe {OP_MODE = 1;}\n    unsafe {\n        let mut prog_name_str = u8_array_to_string(&PROG_NAME);\n        if prog_name_str.contains(\"unzip\") || prog_name_str.contains(\"UNZIP\") {\n            OP_MODE = 2;\n        }\n        if prog_name_str.contains(\"z2cat\") || prog_name_str.contains(\"Z2CAT\") || prog_name_str.contains(\"zcat\") || prog_name_str.contains(\"ZCAT\") {\n            OP_MODE = 2;\n        }\n    }\n\n\n    // \u904d\u5386arg_list\u5904\u7406\u6bcf\u4e2a\u547d\u4ee4\u884c\u53c2\u6570\n    let mut aa = &arg_list;\n    while let Some(cell) = aa {\n        if let Some(name) = &cell.name {\n            if name.as_str() == \"--\"  {\n                break;\n            }\n\n            if name.starts_with('-') && !name.starts_with(\"--\") {\n                for ch in name.chars().skip(1) {\n                    match ch {\n                        'c' => unsafe { SRC_MODE = 2; },\n                        'd' => unsafe { OP_MODE = 2; },\n                        'z' => unsafe { OP_MODE = 1; },\n                        'f' => unsafe { FORCE_OVERWRITE = true; },\n                        't' => unsafe { OP_MODE = 3; },\n                        'k' => unsafe { KEEP_INPUT_FILES = true; },\n                        's' => unsafe { SMALL_MODE = true; },\n                        'q' => unsafe { NOISY = false; },\n                        '1' => unsafe { blockSize100k = 1; },\n                        '2' => unsafe { blockSize100k = 2; },\n                        '3' => unsafe { blockSize100k = 3; },\n                        '4' => unsafe { blockSize100k = 4; },\n                        '5' => unsafe { blockSize100k = 5; },\n                        '6' => unsafe { blockSize100k = 6; },\n                        '7' => unsafe { blockSize100k = 7; },\n                        '8' => unsafe { blockSize100k = 8; },\n                        '9' => unsafe { blockSize100k = 9; },\n                        // ...\u5904\u7406\u5176\u4ed6\u5b57\u7b26...\n                        'L' => unsafe { license(); },\n                        'v' => unsafe { VERBOSITY += 1; },\n                        'h' => {\n                            unsafe{\n                                let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                                usage(prog_name_str);\n                            }\n                            // process::exit(0);\n                        },\n                        _ => {\n                            unsafe {\n                            eprintln!(\"\u7b2c\u4e00match {}: Bad flag `{}`\", String::from_utf8_lossy(&PROG_NAME), name);\n                            let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                                usage(prog_name_str);\n                            }\n                            // process::exit(1);\n                        }\n                    }\n                }\n            }\n        }\n        aa = &cell.link;\n    }\n\n\n    // \u904d\u5386arg_list\u5904\u7406\u6bcf\u4e2a\u957f\u683c\u5f0f\u547d\u4ee4\u884c\u53c2\u6570\n    let mut aa = &arg_list;\n    while let Some(cell) = aa {\n        if let Some(name) = &cell.name {\n            match name.as_str() {\n                \"--\" => break,\n                \"--stdout\" => unsafe { SRC_MODE = 2; },\n                \"--decompress\" => unsafe { OP_MODE = 2; },\n                \"--compress\" => unsafe { OP_MODE = 1; },\n                \"--force\" => unsafe { FORCE_OVERWRITE = true; },\n                \"--test\" => unsafe { OP_MODE = 3; },\n                \"--keep\" => unsafe { KEEP_INPUT_FILES = true; },\n                \"--small\" => unsafe { SMALL_MODE = true; },\n                \"--quiet\" => unsafe { NOISY = false; },\n                \"--version\" | \"--license\" => license(),\n                \"--exponential\" => unsafe { WORK_FACTOR = 1; },\n                \"--repetitive-best\" | \"--repetitive-fast\" => redundant(&name.as_bytes()),\n                \"--fast\" => unsafe { blockSize100k = 1; },\n                \"--best\" => unsafe { blockSize100k = 9; },\n                \"--verbose\" => unsafe { VERBOSITY += 1; },\n                \"--help\" => {\n                    unsafe{\n                        let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                        usage(prog_name_str);\n                    }\n                    // process::exit(0);\n                },\n                _ if name.starts_with(\"--\") => {\n                    unsafe{ \n                        eprintln!(\"\u7b2c\u4e8cmatch {}: Bad flag `{}`\", String::from_utf8_lossy(&PROG_NAME), name);\n                        let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                        usage(prog_name_str);\n                    }\n                    // process::exit(0);\n                },\n                _ => {}\n            }\n        }\n        aa = &cell.link;\n    }\n\n\n\n    // \u8bbe\u7f6everbosity\u9650\u5236\n    unsafe {\n        if VERBOSITY > 4 {\n            VERBOSITY = 4;\n        }\n        if OP_MODE == 1 && SMALL_MODE && blockSize100k > 2 {\n            unsafe {blockSize100k = 2; }\n        }\n        if OP_MODE == 3 && SRC_MODE == 2 {\n            unsafe {eprintln!(\"{}: -c and -t cannot be used together.\", String::from_utf8_lossy(&PROG_NAME));}\n            // process::exit(1);\n        }\n        if SRC_MODE == 2 && NUM_FILE_NAMES == 0 {\n            SRC_MODE = 1;\n        }\n        if OP_MODE != 1 {\n            unsafe {blockSize100k = 0; }\n        }\n    }\n    // \u6839\u636e\u64cd\u4f5c\u6a21\u5f0f\u6267\u884c\u76f8\u5e94\u7684\u64cd\u4f5c\n    unsafe {\n        // println!(\"OP_MODE: {}\", OP_MODE);\n        // println!(\"SRC_MODE: {}\", SRC_MODE);\n        match OP_MODE {\n            1 => {\n                if SRC_MODE == 1 {\n                    compress(None)?;\n                } else {\n                    decode = true;\n                    process_cells(&arg_list, &mut decode);\n                }\n            },\n            2 => {\n                UNZ_FAILS_EXIST = false;\n                if SRC_MODE == 1 {\n                    uncompress(None);\n                } else {\n                    decode = true;\n                    for cell in &arg_list {\n                        if let Some(name) = &cell.name {\n                            if name.as_str() == \"--\"  {\n                                decode = false;\n                                continue;\n                            }\n                            if name.starts_with('-') && decode {\n                                continue;\n                            }\n                            unsafe {NUM_FILE_NAMES += 1;}\n                            uncompress(Some(name));\n                        }\n                    }\n                }\n                if UNZ_FAILS_EXIST {\n                    set_exit(2);\n                    // process::exit(EXIT_VALUE);\n                }\n            },\n            _ => {\n                // \u5904\u7406\u6d4b\u8bd5\u6a21\u5f0f\n                // ...\n            },\n        }\n    }\n\n    // println!(\"121_main_\u6240\u6709\u547d\u4ee4\u884c\u53c2\u6570\u5904\u7406\u5b8c\u6210\");\n    Ok(())\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_main() {\n        // \u6a21\u62df\u547d\u4ee4\u884c\u53c2\u6570\n        let simulated_args = vec![\n            String::from(\"./bzip2\"),\n            String::from(\"-k\"),\n            String::from(\"/root/crown-rust/bzip2_rs_gpt/11Nov.txt\"),\n            // String::from(\"/root/crown-rust/bzip2_rs_gpt/sample1.ref\"),\n            // String::from(\"/root/crown-rust/bzip2_rs_gpt/abc.txt\"),\n        ];\n            // String::from(\"-1\"),\n            // String::from(\"< sample1.ref\"),\n            // String::from(\"> sample1mao.rb2\"),\n   \n\n        // \u8c03\u7528 main \u51fd\u6570\n        let result = main(&simulated_args,&simulated_args.clone());\n        // assert!(result.is_ok());\n    }\n}"}{"type": "source_file", "children": [{"type": "use_declaration", "children": [{"type": "use", "children": [], "start_byte": 0, "end_byte": 3, "start_point": [0, 0], "end_point": [0, 3], "text": "use"}, {"type": "scoped_identifier", "children": [{"type": "scoped_identifier", "children": [{"type": "scoped_identifier", "children": [{"type": "crate", "children": [], "start_byte": 4, "end_byte": 9, "start_point": [0, 4], "end_point": [0, 9], "text": "crate"}, {"type": "::", "children": [], "start_byte": 9, "end_byte": 11, "start_point": [0, 9], "end_point": [0, 11], "text": "::"}, {"type": "identifier", "children": [], "start_byte": 11, "end_byte": 16, "start_point": [0, 11], "end_point": [0, 16], "text": "bzip2"}], "start_byte": 4, "end_byte": 16, "start_point": [0, 4], "end_point": [0, 16], "text": "crate::bzip2"}, {"type": "::", "children": [], "start_byte": 16, "end_byte": 18, "start_point": [0, 16], "end_point": [0, 18], "text": "::"}, {"type": "identifier", "children": [], "start_byte": 18, "end_byte": 34, "start_point": [0, 18], "end_point": [0, 34], "text": "scc_119_compress"}], "start_byte": 4, "end_byte": 34, "start_point": [0, 4], "end_point": [0, 34], "text": "crate::bzip2::scc_119_compress"}, {"type": "::", "children": [], "start_byte": 34, "end_byte": 36, "start_point": [0, 34], "end_point": [0, 36], "text": "::"}, {"type": "identifier", "children": [], "start_byte": 36, "end_byte": 44, "start_point": [0, 36], "end_point": [0, 44], "text": "SRC_MODE"}], "start_byte": 4, "end_byte": 44, "start_point": [0, 4], "end_point": [0, 44], "text": "crate::bzip2::scc_119_compress::SRC_MODE"}, {"type": ";", "children": [], "start_byte": 44, "end_byte": 45, "start_point": [0, 44], "end_point": [0, 45], "text": ";"}], "start_byte": 0, "end_byte": 45, "start_point": [0, 0], "end_point": [0, 45], "text": "use crate::bzip2::scc_119_compress::SRC_MODE;"}, {"type": "use_declaration", "children": [{"type": "use", "children": [], "start_byte": 46, "end_byte": 49, "start_point": [1, 0], "end_point": [1, 3], "text": "use"}, {"type": "scoped_identifier", "children": [{"type": "scoped_identifier", "children": [{"type": "scoped_identifier", "children": [{"type": "crate", "children": [], "start_byte": 50, "end_byte": 55, "start_point": [1, 4], "end_point": [1, 9], "text": "crate"}, {"type": "::", "children": [], "start_byte": 55, "end_byte": 57, "start_point": [1, 9], "end_point": [1, 11], "text": "::"}, {"type": "identifier", "children": [], "start_byte": 57, "end_byte": 68, "start_point": [1, 11], "end_point": [1, 22], "text": "global_vars"}], "start_byte": 50, "end_byte": 68, "start_point": [1, 4], "end_point": [1, 22], "text": "crate::global_vars"}, {"type": "::", "children": [], "start_byte": 68, "end_byte": 70, "start_point": [1, 22], "end_point": [1, 24], "text": "::"}, {"type": "identifier", "children": [], "start_byte": 70, "end_byte": 78, "start_point": [1, 24], "end_point": [1, 32], "text": "bzip2_c5"}], "start_byte": 50, "end_byte": 78, "start_point": [1, 4], "end_point": [1, 32], "text": "crate::global_vars::bzip2_c5"}, {"type": "::", "children": [], "start_byte": 78, "end_byte": 80, "start_point": [1, 32], "end_point": [1, 34], "text": "::"}, {"type": "identifier", "children": [], "start_byte": 80, "end_byte": 87, "start_point": [1, 34], "end_point": [1, 41], "text": "OP_MODE"}], "start_byte": 50, "end_byte": 87, "start_point": [1, 4], "end_point": [1, 41], "text": "crate::global_vars::bzip2_c5::OP_MODE"}, {"type": ";", "children": [], "start_byte": 87, "end_byte": 88, "start_point": [1, 41], "end_point": [1, 42], "text": ";"}], "start_byte": 46, "end_byte": 88, "start_point": [1, 0], "end_point": [1, 42], "text": "use crate::global_vars::bzip2_c5::OP_MODE;"}, {"type": "use_declaration", "children": [{"type": "use", "children": [], "start_byte": 89, "end_byte": 92, "start_point": [2, 0], "end_point": [2, 3], "text": "use"}, {"type": "use_wildcard", "children": [{"type": "scoped_identifier", "children": [{"type": "scoped_identifier", "children": [{"type": "crate", "children": [], "start_byte": 93, "end_byte": 98, "start_point": [2, 4], "end_point": [2, 9], "text": "crate"}, {"type": "::", "children": [], "start_byte": 98, "end_byte": 100, "start_point": [2, 9], "end_point": [2, 11], "text": "::"}, {"type": "identifier", "children": [], "start_byte": 100, "end_byte": 105, "start_point": [2, 11], "end_point": [2, 16], "text": "bzip2"}], "start_byte": 93, "end_byte": 105, "start_point": [2, 4], "end_point": [2, 16], "text": "crate::bzip2"}, {"type": "::", "children": [], "start_byte": 105, "end_byte": 107, "start_point": [2, 16], "end_point": [2, 18], "text": "::"}, {"type": "identifier", "children": [], "start_byte": 107, "end_byte": 119, "start_point": [2, 18], "end_point": [2, 30], "text": "scc_78_usage"}], "start_byte": 93, "end_byte": 119, "start_point": [2, 4], "end_point": [2, 30], "text": "crate::bzip2::scc_78_usage"}, {"type": "::", "children": [], "start_byte": 119, "end_byte": 121, "start_point": [2, 30], "end_point": [2, 32], "text": "::"}, {"type": "*", "children": [], "start_byte": 121, "end_byte": 122, "start_point": [2, 32], "end_point": [2, 33], "text": "*"}], "start_byte": 93, "end_byte": 122, "start_point": [2, 4], "end_point": [2, 33], "text": "crate::bzip2::scc_78_usage::*"}, {"type": ";", "children": [], "start_byte": 122, "end_byte": 123, "start_point": [2, 33], "end_point": [2, 34], "text": ";"}], "start_byte": 89, "end_byte": 123, "start_point": [2, 0], "end_point": [2, 34], "text": "use crate::bzip2::scc_78_usage::*;"}, {"type": "use_declaration", "children": [{"type": "use", "children": [], "start_byte": 124, "end_byte": 127, "start_point": [3, 0], "end_point": [3, 3], "text": "use"}, {"type": "use_wildcard", "children": [{"type": "scoped_identifier", "children": [{"type": "scoped_identifier", "children": [{"type": "crate", "children": [], "start_byte": 128, "end_byte": 133, "start_point": [3, 4], "end_point": [3, 9], "text": "crate"}, {"type": "::", "children": [], "start_byte": 133, "end_byte": 135, "start_point": [3, 9], "end_point": [3, 11], "text": "::"}, {"type": "identifier", "children": [], "start_byte": 135, "end_byte": 140, "start_point": [3, 11], "end_point": [3, 16], "text": "bzip2"}], "start_byte": 128, "end_byte": 140, "start_point": [3, 4], "end_point": [3, 16], "text": "crate::bzip2"}, {"type": "::", "children": [], "start_byte": 140, "end_byte": 142, "start_point": [3, 16], "end_point": [3, 18], "text": "::"}, {"type": "identifier", "children": [], "start_byte": 142, "end_byte": 160, "start_point": [3, 18], "end_point": [3, 36], "text": "scc_118_uncompress"}], "start_byte": 128, "end_byte": 160, "start_point": [3, 4], "end_point": [3, 36], "text": "crate::bzip2::scc_118_uncompress"}, {"type": "::", "children": [], "start_byte": 160, "end_byte": 162, "start_point": [3, 36], "end_point": [3, 38], "text": "::"}, {"type": "*", "children": [], "start_byte": 162, "end_byte": 163, "start_point": [3, 38], "end_point": [3, 39], "text": "*"}], "start_byte": 128, "end_byte": 163, "start_point": [3, 4], "end_point": [3, 39], "text": "crate::bzip2::scc_118_uncompress::*"}, {"type": ";", "children": [], "start_byte": 163, "end_byte": 164, "start_point": [3, 39], "end_point": [3, 40], "text": ";"}], "start_byte": 124, "end_byte": 164, "start_point": [3, 0], "end_point": [3, 40], "text": "use crate::bzip2::scc_118_uncompress::*;"}, {"type": "line_comment", "children": [], "start_byte": 165, "end_byte": 212, "start_point": [4, 0], "end_point": [4, 47], "text": "// use crate::bzip2::scc_120_root_57_signal::*;"}, {"type": "line_comment", "children": [], "start_byte": 213, "end_byte": 258, "start_point": [5, 0], "end_point": [5, 45], "text": "// use crate::bzip2::scc_105_copyFileName::*;"}, {"type": "line_comment", "children": [], "start_byte": 259, "end_byte": 313, "start_point": [6, 0], "end_point": [6, 54], "text": "// use crate::bzip2recover::scc_115_root_56_strcmp::*;"}, {"type": "line_comment", "children": [], "start_byte": 314, "end_byte": 368, "start_point": [7, 0], "end_point": [7, 54], "text": "// use crate::bzip2recover::scc_114_root_55_strstr::*;"}, {"type": "line_comment", "children": [], "start_byte": 369, "end_byte": 408, "start_point": [8, 0], "end_point": [8, 39], "text": "// use crate::bzip2::scc_79_license::*;"}, {"type": "line_comment", "children": [], "start_byte": 409, "end_byte": 446, "start_point": [9, 0], "end_point": [9, 37], "text": "// use crate::bzip2::scc_78_usage::*;"}, {"type": "line_comment", "children": [], "start_byte": 447, "end_byte": 497, "start_point": [10, 0], "end_point": [10, 50], "text": "// use crate::bzip2::scc_113_root_54_redundant::*;"}, {"type": "line_comment", "children": [], "start_byte": 498, "end_byte": 553, "start_point": [11, 0], "end_point": [11, 55], "text": "// use crate::bzip2recover::scc_112_root_53_strncmp::*;"}, {"type": "line_comment", "children": [], "start_byte": 554, "end_byte": 598, "start_point": [12, 0], "end_point": [12, 44], "text": "// use crate::bzip2recover::scc_121_main::*;"}, {"type": "line_comment", "children": [], "start_byte": 599, "end_byte": 646, "start_point": [13, 0], "end_point": [13, 47], "text": "// use crate::bzip2::scc_110_compressStream::*;"}, {"type": "line_comment", "children": [], "start_byte": 647, "end_byte": 696, "start_point": [14, 0], "end_point": [14, 49], "text": "// use crate::bzip2::scc_109_uncompressStream::*;"}, {"type": "line_comment", "children": [], "start_byte": 697, "end_byte": 742, "start_point": [15, 0], "end_point": [15, 45], "text": "// use crate::bzlib::scc_86_root_49_fopen::*;"}, {"type": "line_comment", "children": [], "start_byte": 743, "end_byte": 797, "start_point": [16, 0], "end_point": [16, 54], "text": "// use crate::bzip2recover::scc_8_bsOpenReadStream::*;"}, {"type": "line_comment", "children": [], "start_byte": 798, "end_byte": 844, "start_point": [17, 0], "end_point": [17, 46], "text": "// use crate::bzip2recover::scc_5_bsGetBit::*;"}, {"type": "line_comment", "children": [], "start_byte": 845, "end_byte": 905, "start_point": [18, 0], "end_point": [18, 60], "text": "// use crate::bzip2recover::scc_85_root_48_tooManyBlocks::*;"}, {"type": "line_comment", "children": [], "start_byte": 906, "end_byte": 952, "start_point": [19, 0], "end_point": [19, 46], "text": "// use crate::bzip2recover::scc_2_bsPutBit::*;"}, {"type": "line_comment", "children": [], "start_byte": 953, "end_byte": 1007, "start_point": [20, 0], "end_point": [20, 54], "text": "// use crate::bzip2recover::scc_84_root_47_strrchr::*;"}, {"type": "line_comment", "children": [], "start_byte": 1008, "end_byte": 1061, "start_point": [21, 0], "end_point": [21, 53], "text": "// use crate::bzip2recover::scc_82_root_45_strcat::*;"}, {"type": "line_comment", "children": [], "start_byte": 1062, "end_byte": 1118, "start_point": [22, 0], "end_point": [22, 56], "text": "// use crate::bzip2recover::scc_81_root_44_endsInBz2::*;"}, {"type": "line_comment", "children": [], "start_byte": 1119, "end_byte": 1170, "start_point": [23, 0], "end_point": [23, 51], "text": "// use crate::bzip2::scc_103_addFlagsFromEnvVar::*;"}, {"type": "line_comment", "children": [], "start_byte": 1171, "end_byte": 1213, "start_point": [24, 0], "end_point": [24, 42], "text": "// use crate::bzip2::scc_116_hasSuffix::*;"}, {"type": "line_comment", "children": [], "start_byte": 1214, "end_byte": 1261, "start_point": [25, 0], "end_point": [25, 47], "text": "// use crate::bzip2::scc_90_root_52_setExit::*;"}, {"type": "line_comment", "children": [], "start_byte": 1262, "end_byte": 1316, "start_point": [26, 0], "end_point": [26, 54], "text": "// use crate::bzip2recover::scc_89_root_51_strncpy::*;"}, {"type": "line_comment", "children": [], "start_byte": 1317, "end_byte": 1369, "start_point": [27, 0], "end_point": [27, 52], "text": "// use crate::compress::scc_73_BZ2_compressBlock::*;"}, {"type": "line_comment", "children": [], "start_byte": 1370, "end_byte": 1419, "start_point": [28, 0], "end_point": [28, 49], "text": "// use crate::bzip2recover::scc_35_bsPutUChar::*;"}, {"type": "line_comment", "children": [], "start_byte": 1420, "end_byte": 1470, "start_point": [29, 0], "end_point": [29, 50], "text": "// use crate::bzip2recover::scc_34_bsPutUInt32::*;"}, {"type": "line_comment", "children": [], "start_byte": 1471, "end_byte": 1514, "start_point": [30, 0], "end_point": [30, 43], "text": "// use crate::bzip2::scc_108_testStream::*;"}, {"type": "line_comment", "children": [], "start_byte": 1515, "end_byte": 1572, "start_point": [31, 0], "end_point": [31, 57], "text": "// use crate::bzip2::scc_106_mySIGSEGVorSIGBUScatcher::*;"}, {"type": "line_comment", "children": [], "start_byte": 1573, "end_byte": 1627, "start_point": [32, 0], "end_point": [32, 54], "text": "// use crate::bzip2recover::scc_83_root_46_sprintf::*;"}, {"type": "line_comment", "children": [], "start_byte": 1628, "end_byte": 1670, "start_point": [33, 0], "end_point": [33, 42], "text": "// use crate::bzip2::scc_87_fileExists::*;"}, {"type": "line_comment", "children": [], "start_byte": 1671, "end_byte": 1717, "start_point": [34, 0], "end_point": [34, 46], "text": "// use crate::bzip2::scc_91_cleanUpAndFail::*;"}, {"type": "line_comment", "children": [], "start_byte": 1718, "end_byte": 1838, "start_point": [35, 0], "end_point": [35, 120], "text": "// use crate::global_vars::bzip2_c2::{bEnd, bStart, inFileName, outFileName, progName, rbEnd, rbStart, FILE, BitStream};"}, {"type": "use_declaration", "children": [{"type": "use", "children": [], "start_byte": 1839, "end_byte": 1842, "start_point": [36, 0], "end_point": [36, 3], "text": "use"}, {"type": "use_wildcard", "children": [{"type": "scoped_identifier", "children": [{"type": "scoped_identifier", "children": [{"type": "crate", "children": [], "start_byte": 1843, "end_byte": 1848, "start_point": [36, 4], "end_point": [36, 9], "text": "crate"}, {"type": "::", "children": [], "start_byte": 1848, "end_byte": 1850, "start_point": [36, 9], "end_point": [36, 11], "text": "::"}, {"type": "identifier", "children": [], "start_byte": 1850, "end_byte": 1861, "start_point": [36, 11], "end_point": [36, 22], "text": "global_vars"}], "start_byte": 1843, "end_byte": 1861, "start_point": [36, 4], "end_point": [36, 22], "text": "crate::global_vars"}, {"type": "::", "children": [], "start_byte": 1861, "end_byte": 1863, "start_point": [36, 22], "end_point": [36, 24], "text": "::"}, {"type": "identifier", "children": [], "start_byte": 1863, "end_byte": 1871, "start_point": [36, 24], "end_point": [36, 32], "text": "bzip2_c1"}], "start_byte": 1843, "end_byte": 1871, "start_point": [36, 4], "end_point": [36, 32], "text": "crate::global_vars::bzip2_c1"}, {"type": "::", "children": [], "start_byte": 1871, "end_byte": 1873, "start_point": [36, 32], "end_point": [36, 34], "text": "::"}, {"type": "*", "children": [], "start_byte": 1873, "end_byte": 1874, "start_point": [36, 34], "end_point": [36, 35], "text": "*"}], "start_byte": 1843, "end_byte": 1874, "start_point": [36, 4], "end_point": [36, 35], "text": "crate::global_vars::bzip2_c1::*"}, {"type": ";", "children": [], "start_byte": 1874, "end_byte": 1875, "start_point": [36, 35], "end_point": [36, 36], "text": ";"}], "start_byte": 1839, "end_byte": 1875, "start_point": [36, 0], "end_point": [36, 36], "text": "use crate::global_vars::bzip2_c1::*;"}, {"type": "use_declaration", "children": [{"type": "use", "children": [], "start_byte": 1876, "end_byte": 1879, "start_point": [37, 0], "end_point": [37, 3], "text": "use"}, {"type": "use_wildcard", "children": [{"type": "scoped_identifier", "children": [{"type": "scoped_identifier", "children": [{"type": "crate", "children": [], "start_byte": 1880, "end_byte": 1885, "start_point": [37, 4], "end_point": [37, 9], "text": "crate"}, {"type": "::", "children": [], "start_byte": 1885, "end_byte": 1887, "start_point": [37, 9], "end_point": [37, 11], "text": "::"}, {"type": "identifier", "children": [], "start_byte": 1887, "end_byte": 1898, "start_point": [37, 11], "end_point": [37, 22], "text": "global_vars"}], "start_byte": 1880, "end_byte": 1898, "start_point": [37, 4], "end_point": [37, 22], "text": "crate::global_vars"}, {"type": "::", "children": [], "start_byte": 1898, "end_byte": 1900, "start_point": [37, 22], "end_point": [37, 24], "text": "::"}, {"type": "identifier", "children": [], "start_byte": 1900, "end_byte": 1908, "start_point": [37, 24], "end_point": [37, 32], "text": "bzip2_c2"}], "start_byte": 1880, "end_byte": 1908, "start_point": [37, 4], "end_point": [37, 32], "text": "crate::global_vars::bzip2_c2"}, {"type": "::", "children": [], "start_byte": 1908, "end_byte": 1910, "start_point": [37, 32], "end_point": [37, 34], "text": "::"}, {"type": "*", "children": [], "start_byte": 1910, "end_byte": 1911, "start_point": [37, 34], "end_point": [37, 35], "text": "*"}], "start_byte": 1880, "end_byte": 1911, "start_point": [37, 4], "end_point": [37, 35], "text": "crate::global_vars::bzip2_c2::*"}, {"type": ";", "children": [], "start_byte": 1911, "end_byte": 1912, "start_point": [37, 35], "end_point": [37, 36], "text": ";"}], "start_byte": 1876, "end_byte": 1912, "start_point": [37, 0], "end_point": [37, 36], "text": "use crate::global_vars::bzip2_c2::*;"}, {"type": "use_declaration", "children": [{"type": "use", "children": [], "start_byte": 1913, "end_byte": 1916, "start_point": [38, 0], "end_point": [38, 3], "text": "use"}, {"type": "use_wildcard", "children": [{"type": "scoped_identifier", "children": [{"type": "scoped_identifier", "children": [{"type": "crate", "children": [], "start_byte": 1917, "end_byte": 1922, "start_point": [38, 4], "end_point": [38, 9], "text": "crate"}, {"type": "::", "children": [], "start_byte": 1922, "end_byte": 1924, "start_point": [38, 9], "end_point": [38, 11], "text": "::"}, {"type": "identifier", "children": [], "start_byte": 1924, "end_byte": 1935, "start_point": [38, 11], "end_point": [38, 22], "text": "global_vars"}], "start_byte": 1917, "end_byte": 1935, "start_point": [38, 4], "end_point": [38, 22], "text": "crate::global_vars"}, {"type": "::", "children": [], "start_byte": 1935, "end_byte": 1937, "start_point": [38, 22], "end_point": [38, 24], "text": "::"}, {"type": "identifier", "children": [], "start_byte": 1937, "end_byte": 1945, "start_point": [38, 24], "end_point": [38, 32], "text": "bzip2_c5"}], "start_byte": 1917, "end_byte": 1945, "start_point": [38, 4], "end_point": [38, 32], "text": "crate::global_vars::bzip2_c5"}, {"type": "::", "children": [], "start_byte": 1945, "end_byte": 1947, "start_point": [38, 32], "end_point": [38, 34], "text": "::"}, {"type": "*", "children": [], "start_byte": 1947, "end_byte": 1948, "start_point": [38, 34], "end_point": [38, 35], "text": "*"}], "start_byte": 1917, "end_byte": 1948, "start_point": [38, 4], "end_point": [38, 35], "text": "crate::global_vars::bzip2_c5::*"}, {"type": ";", "children": [], "start_byte": 1948, "end_byte": 1949, "start_point": [38, 35], "end_point": [38, 36], "text": ";"}], "start_byte": 1913, "end_byte": 1949, "start_point": [38, 0], "end_point": [38, 36], "text": "use crate::global_vars::bzip2_c5::*;"}, {"type": "use_declaration", "children": [{"type": "use", "children": [], "start_byte": 1950, "end_byte": 1953, "start_point": [39, 0], "end_point": [39, 3], "text": "use"}, {"type": "scoped_use_list", "children": [{"type": "identifier", "children": [], "start_byte": 1954, "end_byte": 1957, "start_point": [39, 4], "end_point": [39, 7], "text": "std"}, {"type": "::", "children": [], "start_byte": 1957, "end_byte": 1959, "start_point": [39, 7], "end_point": [39, 9], "text": "::"}, {"type": "use_list", "children": [{"type": "{", "children": [], "start_byte": 1959, "end_byte": 1960, "start_point": [39, 9], "end_point": [39, 10], "text": "{"}, {"type": "identifier", "children": [], "start_byte": 1960, "end_byte": 1963, "start_point": [39, 10], "end_point": [39, 13], "text": "env"}, {"type": ",", "children": [], "start_byte": 1963, "end_byte": 1964, "start_point": [39, 13], "end_point": [39, 14], "text": ","}, {"type": "identifier", "children": [], "start_byte": 1965, "end_byte": 1972, "start_point": [39, 15], "end_point": [39, 22], "text": "process"}, {"type": ",", "children": [], "start_byte": 1972, "end_byte": 1973, "start_point": [39, 22], "end_point": [39, 23], "text": ","}, {"type": "identifier", "children": [], "start_byte": 1974, "end_byte": 1976, "start_point": [39, 24], "end_point": [39, 26], "text": "io"}, {"type": "}", "children": [], "start_byte": 1976, "end_byte": 1977, "start_point": [39, 26], "end_point": [39, 27], "text": "}"}], "start_byte": 1959, "end_byte": 1977, "start_point": [39, 9], "end_point": [39, 27], "text": "{env, process, io}"}], "start_byte": 1954, "end_byte": 1977, "start_point": [39, 4], "end_point": [39, 27], "text": "std::{env, process, io}"}, {"type": ";", "children": [], "start_byte": 1977, "end_byte": 1978, "start_point": [39, 27], "end_point": [39, 28], "text": ";"}], "start_byte": 1950, "end_byte": 1978, "start_point": [39, 0], "end_point": [39, 28], "text": "use std::{env, process, io};"}, {"type": "use_declaration", "children": [{"type": "use", "children": [], "start_byte": 1979, "end_byte": 1982, "start_point": [40, 0], "end_point": [40, 3], "text": "use"}, {"type": "use_wildcard", "children": [{"type": "scoped_identifier", "children": [{"type": "scoped_identifier", "children": [{"type": "crate", "children": [], "start_byte": 1983, "end_byte": 1988, "start_point": [40, 4], "end_point": [40, 9], "text": "crate"}, {"type": "::", "children": [], "start_byte": 1988, "end_byte": 1990, "start_point": [40, 9], "end_point": [40, 11], "text": "::"}, {"type": "identifier", "children": [], "start_byte": 1990, "end_byte": 1995, "start_point": [40, 11], "end_point": [40, 16], "text": "bzip2"}], "start_byte": 1983, "end_byte": 1995, "start_point": [40, 4], "end_point": [40, 16], "text": "crate::bzip2"}, {"type": "::", "children": [], "start_byte": 1995, "end_byte": 1997, "start_point": [40, 16], "end_point": [40, 18], "text": "::"}, {"type": "identifier", "children": [], "start_byte": 1997, "end_byte": 2054, "start_point": [40, 18], "end_point": [40, 75], "text": "scc_101_mkCell_102_snoc_string_103_add_flags_from_env_var"}], "start_byte": 1983, "end_byte": 2054, "start_point": [40, 4], "end_point": [40, 75], "text": "crate::bzip2::scc_101_mkCell_102_snoc_string_103_add_flags_from_env_var"}, {"type": "::", "children": [], "start_byte": 2054, "end_byte": 2056, "start_point": [40, 75], "end_point": [40, 77], "text": "::"}, {"type": "*", "children": [], "start_byte": 2056, "end_byte": 2057, "start_point": [40, 77], "end_point": [40, 78], "text": "*"}], "start_byte": 1983, "end_byte": 2057, "start_point": [40, 4], "end_point": [40, 78], "text": "crate::bzip2::scc_101_mkCell_102_snoc_string_103_add_flags_from_env_var::*"}, {"type": ";", "children": [], "start_byte": 2057, "end_byte": 2058, "start_point": [40, 78], "end_point": [40, 79], "text": ";"}], "start_byte": 1979, "end_byte": 2058, "start_point": [40, 0], "end_point": [40, 79], "text": "use crate::bzip2::scc_101_mkCell_102_snoc_string_103_add_flags_from_env_var::*;"}, {"type": "use_declaration", "children": [{"type": "use", "children": [], "start_byte": 2059, "end_byte": 2062, "start_point": [41, 0], "end_point": [41, 3], "text": "use"}, {"type": "use_wildcard", "children": [{"type": "scoped_identifier", "children": [{"type": "scoped_identifier", "children": [{"type": "crate", "children": [], "start_byte": 2063, "end_byte": 2068, "start_point": [41, 4], "end_point": [41, 9], "text": "crate"}, {"type": "::", "children": [], "start_byte": 2068, "end_byte": 2070, "start_point": [41, 9], "end_point": [41, 11], "text": "::"}, {"type": "identifier", "children": [], "start_byte": 2070, "end_byte": 2075, "start_point": [41, 11], "end_point": [41, 16], "text": "bzip2"}], "start_byte": 2063, "end_byte": 2075, "start_point": [41, 4], "end_point": [41, 16], "text": "crate::bzip2"}, {"type": "::", "children": [], "start_byte": 2075, "end_byte": 2077, "start_point": [41, 16], "end_point": [41, 18], "text": "::"}, {"type": "identifier", "children": [], "start_byte": 2077, "end_byte": 2102, "start_point": [41, 18], "end_point": [41, 43], "text": "scc_113_root_54_redundant"}], "start_byte": 2063, "end_byte": 2102, "start_point": [41, 4], "end_point": [41, 43], "text": "crate::bzip2::scc_113_root_54_redundant"}, {"type": "::", "children": [], "start_byte": 2102, "end_byte": 2104, "start_point": [41, 43], "end_point": [41, 45], "text": "::"}, {"type": "*", "children": [], "start_byte": 2104, "end_byte": 2105, "start_point": [41, 45], "end_point": [41, 46], "text": "*"}], "start_byte": 2063, "end_byte": 2105, "start_point": [41, 4], "end_point": [41, 46], "text": "crate::bzip2::scc_113_root_54_redundant::*"}, {"type": ";", "children": [], "start_byte": 2105, "end_byte": 2106, "start_point": [41, 46], "end_point": [41, 47], "text": ";"}], "start_byte": 2059, "end_byte": 2106, "start_point": [41, 0], "end_point": [41, 47], "text": "use crate::bzip2::scc_113_root_54_redundant::*;"}, {"type": "use_declaration", "children": [{"type": "use", "children": [], "start_byte": 2107, "end_byte": 2110, "start_point": [42, 0], "end_point": [42, 3], "text": "use"}, {"type": "use_wildcard", "children": [{"type": "scoped_identifier", "children": [{"type": "scoped_identifier", "children": [{"type": "crate", "children": [], "start_byte": 2111, "end_byte": 2116, "start_point": [42, 4], "end_point": [42, 9], "text": "crate"}, {"type": "::", "children": [], "start_byte": 2116, "end_byte": 2118, "start_point": [42, 9], "end_point": [42, 11], "text": "::"}, {"type": "identifier", "children": [], "start_byte": 2118, "end_byte": 2123, "start_point": [42, 11], "end_point": [42, 16], "text": "bzip2"}], "start_byte": 2111, "end_byte": 2123, "start_point": [42, 4], "end_point": [42, 16], "text": "crate::bzip2"}, {"type": "::", "children": [], "start_byte": 2123, "end_byte": 2125, "start_point": [42, 16], "end_point": [42, 18], "text": "::"}, {"type": "identifier", "children": [], "start_byte": 2125, "end_byte": 2139, "start_point": [42, 18], "end_point": [42, 32], "text": "scc_79_license"}], "start_byte": 2111, "end_byte": 2139, "start_point": [42, 4], "end_point": [42, 32], "text": "crate::bzip2::scc_79_license"}, {"type": "::", "children": [], "start_byte": 2139, "end_byte": 2141, "start_point": [42, 32], "end_point": [42, 34], "text": "::"}, {"type": "*", "children": [], "start_byte": 2141, "end_byte": 2142, "start_point": [42, 34], "end_point": [42, 35], "text": "*"}], "start_byte": 2111, "end_byte": 2142, "start_point": [42, 4], "end_point": [42, 35], "text": "crate::bzip2::scc_79_license::*"}, {"type": ";", "children": [], "start_byte": 2142, "end_byte": 2143, "start_point": [42, 35], "end_point": [42, 36], "text": ";"}], "start_byte": 2107, "end_byte": 2143, "start_point": [42, 0], "end_point": [42, 36], "text": "use crate::bzip2::scc_79_license::*;"}, {"type": "use_declaration", "children": [{"type": "use", "children": [], "start_byte": 2144, "end_byte": 2147, "start_point": [43, 0], "end_point": [43, 3], "text": "use"}, {"type": "use_wildcard", "children": [{"type": "scoped_identifier", "children": [{"type": "scoped_identifier", "children": [{"type": "crate", "children": [], "start_byte": 2148, "end_byte": 2153, "start_point": [43, 4], "end_point": [43, 9], "text": "crate"}, {"type": "::", "children": [], "start_byte": 2153, "end_byte": 2155, "start_point": [43, 9], "end_point": [43, 11], "text": "::"}, {"type": "identifier", "children": [], "start_byte": 2155, "end_byte": 2160, "start_point": [43, 11], "end_point": [43, 16], "text": "bzip2"}], "start_byte": 2148, "end_byte": 2160, "start_point": [43, 4], "end_point": [43, 16], "text": "crate::bzip2"}, {"type": "::", "children": [], "start_byte": 2160, "end_byte": 2162, "start_point": [43, 16], "end_point": [43, 18], "text": "::"}, {"type": "identifier", "children": [], "start_byte": 2162, "end_byte": 2178, "start_point": [43, 18], "end_point": [43, 34], "text": "scc_119_compress"}], "start_byte": 2148, "end_byte": 2178, "start_point": [43, 4], "end_point": [43, 34], "text": "crate::bzip2::scc_119_compress"}, {"type": "::", "children": [], "start_byte": 2178, "end_byte": 2180, "start_point": [43, 34], "end_point": [43, 36], "text": "::"}, {"type": "*", "children": [], "start_byte": 2180, "end_byte": 2181, "start_point": [43, 36], "end_point": [43, 37], "text": "*"}], "start_byte": 2148, "end_byte": 2181, "start_point": [43, 4], "end_point": [43, 37], "text": "crate::bzip2::scc_119_compress::*"}, {"type": ";", "children": [], "start_byte": 2181, "end_byte": 2182, "start_point": [43, 37], "end_point": [43, 38], "text": ";"}], "start_byte": 2144, "end_byte": 2182, "start_point": [43, 0], "end_point": [43, 38], "text": "use crate::bzip2::scc_119_compress::*;"}, {"type": "use_declaration", "children": [{"type": "use", "children": [], "start_byte": 2183, "end_byte": 2186, "start_point": [44, 0], "end_point": [44, 3], "text": "use"}, {"type": "use_wildcard", "children": [{"type": "scoped_identifier", "children": [{"type": "scoped_identifier", "children": [{"type": "crate", "children": [], "start_byte": 2187, "end_byte": 2192, "start_point": [44, 4], "end_point": [44, 9], "text": "crate"}, {"type": "::", "children": [], "start_byte": 2192, "end_byte": 2194, "start_point": [44, 9], "end_point": [44, 11], "text": "::"}, {"type": "identifier", "children": [], "start_byte": 2194, "end_byte": 2199, "start_point": [44, 11], "end_point": [44, 16], "text": "bzip2"}], "start_byte": 2187, "end_byte": 2199, "start_point": [44, 4], "end_point": [44, 16], "text": "crate::bzip2"}, {"type": "::", "children": [], "start_byte": 2199, "end_byte": 2201, "start_point": [44, 16], "end_point": [44, 18], "text": "::"}, {"type": "identifier", "children": [], "start_byte": 2201, "end_byte": 2223, "start_point": [44, 18], "end_point": [44, 40], "text": "scc_90_root_52_setExit"}], "start_byte": 2187, "end_byte": 2223, "start_point": [44, 4], "end_point": [44, 40], "text": "crate::bzip2::scc_90_root_52_setExit"}, {"type": "::", "children": [], "start_byte": 2223, "end_byte": 2225, "start_point": [44, 40], "end_point": [44, 42], "text": "::"}, {"type": "*", "children": [], "start_byte": 2225, "end_byte": 2226, "start_point": [44, 42], "end_point": [44, 43], "text": "*"}], "start_byte": 2187, "end_byte": 2226, "start_point": [44, 4], "end_point": [44, 43], "text": "crate::bzip2::scc_90_root_52_setExit::*"}, {"type": ";", "children": [], "start_byte": 2226, "end_byte": 2227, "start_point": [44, 43], "end_point": [44, 44], "text": ";"}], "start_byte": 2183, "end_byte": 2227, "start_point": [44, 0], "end_point": [44, 44], "text": "use crate::bzip2::scc_90_root_52_setExit::*;"}, {"type": "use_declaration", "children": [{"type": "use", "children": [], "start_byte": 2228, "end_byte": 2231, "start_point": [45, 0], "end_point": [45, 3], "text": "use"}, {"type": "use_wildcard", "children": [{"type": "scoped_identifier", "children": [{"type": "scoped_identifier", "children": [{"type": "crate", "children": [], "start_byte": 2232, "end_byte": 2237, "start_point": [45, 4], "end_point": [45, 9], "text": "crate"}, {"type": "::", "children": [], "start_byte": 2237, "end_byte": 2239, "start_point": [45, 9], "end_point": [45, 11], "text": "::"}, {"type": "identifier", "children": [], "start_byte": 2239, "end_byte": 2250, "start_point": [45, 11], "end_point": [45, 22], "text": "global_vars"}], "start_byte": 2232, "end_byte": 2250, "start_point": [45, 4], "end_point": [45, 22], "text": "crate::global_vars"}, {"type": "::", "children": [], "start_byte": 2250, "end_byte": 2252, "start_point": [45, 22], "end_point": [45, 24], "text": "::"}, {"type": "identifier", "children": [], "start_byte": 2252, "end_byte": 2262, "start_point": [45, 24], "end_point": [45, 34], "text": "conversion"}], "start_byte": 2232, "end_byte": 2262, "start_point": [45, 4], "end_point": [45, 34], "text": "crate::global_vars::conversion"}, {"type": "::", "children": [], "start_byte": 2262, "end_byte": 2264, "start_point": [45, 34], "end_point": [45, 36], "text": "::"}, {"type": "*", "children": [], "start_byte": 2264, "end_byte": 2265, "start_point": [45, 36], "end_point": [45, 37], "text": "*"}], "start_byte": 2232, "end_byte": 2265, "start_point": [45, 4], "end_point": [45, 37], "text": "crate::global_vars::conversion::*"}, {"type": ";", "children": [], "start_byte": 2265, "end_byte": 2266, "start_point": [45, 37], "end_point": [45, 38], "text": ";"}], "start_byte": 2228, "end_byte": 2266, "start_point": [45, 0], "end_point": [45, 38], "text": "use crate::global_vars::conversion::*;"}, {"type": "use_declaration", "children": [{"type": "use", "children": [], "start_byte": 2267, "end_byte": 2270, "start_point": [46, 0], "end_point": [46, 3], "text": "use"}, {"type": "scoped_identifier", "children": [{"type": "scoped_identifier", "children": [{"type": "identifier", "children": [], "start_byte": 2271, "end_byte": 2274, "start_point": [46, 4], "end_point": [46, 7], "text": "std"}, {"type": "::", "children": [], "start_byte": 2274, "end_byte": 2276, "start_point": [46, 7], "end_point": [46, 9], "text": "::"}, {"type": "identifier", "children": [], "start_byte": 2276, "end_byte": 2280, "start_point": [46, 9], "end_point": [46, 13], "text": "path"}], "start_byte": 2271, "end_byte": 2280, "start_point": [46, 4], "end_point": [46, 13], "text": "std::path"}, {"type": "::", "children": [], "start_byte": 2280, "end_byte": 2282, "start_point": [46, 13], "end_point": [46, 15], "text": "::"}, {"type": "identifier", "children": [], "start_byte": 2282, "end_byte": 2286, "start_point": [46, 15], "end_point": [46, 19], "text": "Path"}], "start_byte": 2271, "end_byte": 2286, "start_point": [46, 4], "end_point": [46, 19], "text": "std::path::Path"}, {"type": ";", "children": [], "start_byte": 2286, "end_byte": 2287, "start_point": [46, 19], "end_point": [46, 20], "text": ";"}], "start_byte": 2267, "end_byte": 2287, "start_point": [46, 0], "end_point": [46, 20], "text": "use std::path::Path;"}, {"type": "function_item", "children": [{"type": "fn", "children": [], "start_byte": 2289, "end_byte": 2291, "start_point": [48, 0], "end_point": [48, 2], "text": "fn"}, {"type": "identifier", "children": [], "start_byte": 2292, "end_byte": 2309, "start_point": [48, 3], "end_point": [48, 20], "text": "process_link_list"}, {"type": "parameters", "children": [{"type": "(", "children": [], "start_byte": 2309, "end_byte": 2310, "start_point": [48, 20], "end_point": [48, 21], "text": "("}, {"type": "parameter", "children": [{"type": "identifier", "children": [], "start_byte": 2310, "end_byte": 2321, "start_point": [48, 21], "end_point": [48, 32], "text": "cell_option"}, {"type": ":", "children": [], "start_byte": 2321, "end_byte": 2322, "start_point": [48, 32], "end_point": [48, 33], "text": ":"}, {"type": "reference_type", "children": [{"type": "&", "children": [], "start_byte": 2323, "end_byte": 2324, "start_point": [48, 34], "end_point": [48, 35], "text": "&"}, {"type": "mutable_specifier", "children": [], "start_byte": 2324, "end_byte": 2327, "start_point": [48, 35], "end_point": [48, 38], "text": "mut"}, {"type": "generic_type", "children": [{"type": "type_identifier", "children": [], "start_byte": 2328, "end_byte": 2334, "start_point": [48, 39], "end_point": [48, 45], "text": "Option"}, {"type": "type_arguments", "children": [{"type": "<", "children": [], "start_byte": 2334, "end_byte": 2335, "start_point": [48, 45], "end_point": [48, 46], "text": "<"}, {"type": "generic_type", "children": [{"type": "type_identifier", "children": [], "start_byte": 2335, "end_byte": 2338, "start_point": [48, 46], "end_point": [48, 49], "text": "Box"}, {"type": "type_arguments", "children": [{"type": "<", "children": [], "start_byte": 2338, "end_byte": 2339, "start_point": [48, 49], "end_point": [48, 50], "text": "<"}, {"type": "type_identifier", "children": [], "start_byte": 2339, "end_byte": 2343, "start_point": [48, 50], "end_point": [48, 54], "text": "Cell"}, {"type": ">", "children": [], "start_byte": 2343, "end_byte": 2344, "start_point": [48, 54], "end_point": [48, 55], "text": ">"}], "start_byte": 2338, "end_byte": 2344, "start_point": [48, 49], "end_point": [48, 55], "text": "<Cell>"}], "start_byte": 2335, "end_byte": 2344, "start_point": [48, 46], "end_point": [48, 55], "text": "Box<Cell>"}, {"type": ">", "children": [], "start_byte": 2344, "end_byte": 2345, "start_point": [48, 55], "end_point": [48, 56], "text": ">"}], "start_byte": 2334, "end_byte": 2345, "start_point": [48, 45], "end_point": [48, 56], "text": "<Box<Cell>>"}], "start_byte": 2328, "end_byte": 2345, "start_point": [48, 39], "end_point": [48, 56], "text": "Option<Box<Cell>>"}], "start_byte": 2323, "end_byte": 2345, "start_point": [48, 34], "end_point": [48, 56], "text": "&mut Option<Box<Cell>>"}], "start_byte": 2310, "end_byte": 2345, "start_point": [48, 21], "end_point": [48, 56], "text": "cell_option: &mut Option<Box<Cell>>"}, {"type": ",", "children": [], "start_byte": 2345, "end_byte": 2346, "start_point": [48, 56], "end_point": [48, 57], "text": ","}, {"type": "parameter", "children": [{"type": "identifier", "children": [], "start_byte": 2347, "end_byte": 2353, "start_point": [48, 58], "end_point": [48, 64], "text": "decode"}, {"type": ":", "children": [], "start_byte": 2353, "end_byte": 2354, "start_point": [48, 64], "end_point": [48, 65], "text": ":"}, {"type": "reference_type", "children": [{"type": "&", "children": [], "start_byte": 2355, "end_byte": 2356, "start_point": [48, 66], "end_point": [48, 67], "text": "&"}, {"type": "mutable_specifier", "children": [], "start_byte": 2356, "end_byte": 2359, "start_point": [48, 67], "end_point": [48, 70], "text": "mut"}, {"type": "primitive_type", "children": [], "start_byte": 2360, "end_byte": 2364, "start_point": [48, 71], "end_point": [48, 75], "text": "bool"}], "start_byte": 2355, "end_byte": 2364, "start_point": [48, 66], "end_point": [48, 75], "text": "&mut bool"}], "start_byte": 2347, "end_byte": 2364, "start_point": [48, 58], "end_point": [48, 75], "text": "decode: &mut bool"}, {"type": ")", "children": [], "start_byte": 2364, "end_byte": 2365, "start_point": [48, 75], "end_point": [48, 76], "text": ")"}], "start_byte": 2309, "end_byte": 2365, "start_point": [48, 20], "end_point": [48, 76], "text": "(cell_option: &mut Option<Box<Cell>>, decode: &mut bool)"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 2366, "end_byte": 2367, "start_point": [48, 77], "end_point": [48, 78], "text": "{"}, {"type": "expression_statement", "children": [{"type": "if_expression", "children": [{"type": "if", "children": [], "start_byte": 2372, "end_byte": 2374, "start_point": [49, 4], "end_point": [49, 6], "text": "if"}, {"type": "let_condition", "children": [{"type": "let", "children": [], "start_byte": 2375, "end_byte": 2378, "start_point": [49, 7], "end_point": [49, 10], "text": "let"}, {"type": "tuple_struct_pattern", "children": [{"type": "identifier", "children": [], "start_byte": 2379, "end_byte": 2383, "start_point": [49, 11], "end_point": [49, 15], "text": "Some"}, {"type": "(", "children": [], "start_byte": 2383, "end_byte": 2384, "start_point": [49, 15], "end_point": [49, 16], "text": "("}, {"type": "identifier", "children": [], "start_byte": 2384, "end_byte": 2388, "start_point": [49, 16], "end_point": [49, 20], "text": "cell"}, {"type": ")", "children": [], "start_byte": 2388, "end_byte": 2389, "start_point": [49, 20], "end_point": [49, 21], "text": ")"}], "start_byte": 2379, "end_byte": 2389, "start_point": [49, 11], "end_point": [49, 21], "text": "Some(cell)"}, {"type": "=", "children": [], "start_byte": 2390, "end_byte": 2391, "start_point": [49, 22], "end_point": [49, 23], "text": "="}, {"type": "identifier", "children": [], "start_byte": 2392, "end_byte": 2403, "start_point": [49, 24], "end_point": [49, 35], "text": "cell_option"}], "start_byte": 2375, "end_byte": 2403, "start_point": [49, 7], "end_point": [49, 35], "text": "let Some(cell) = cell_option"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 2404, "end_byte": 2405, "start_point": [49, 36], "end_point": [49, 37], "text": "{"}, {"type": "expression_statement", "children": [{"type": "if_expression", "children": [{"type": "if", "children": [], "start_byte": 2414, "end_byte": 2416, "start_point": [50, 8], "end_point": [50, 10], "text": "if"}, {"type": "let_condition", "children": [{"type": "let", "children": [], "start_byte": 2417, "end_byte": 2420, "start_point": [50, 11], "end_point": [50, 14], "text": "let"}, {"type": "tuple_struct_pattern", "children": [{"type": "identifier", "children": [], "start_byte": 2421, "end_byte": 2425, "start_point": [50, 15], "end_point": [50, 19], "text": "Some"}, {"type": "(", "children": [], "start_byte": 2425, "end_byte": 2426, "start_point": [50, 19], "end_point": [50, 20], "text": "("}, {"type": "ref_pattern", "children": [{"type": "ref", "children": [], "start_byte": 2426, "end_byte": 2429, "start_point": [50, 20], "end_point": [50, 23], "text": "ref"}, {"type": "identifier", "children": [], "start_byte": 2430, "end_byte": 2434, "start_point": [50, 24], "end_point": [50, 28], "text": "name"}], "start_byte": 2426, "end_byte": 2434, "start_point": [50, 20], "end_point": [50, 28], "text": "ref name"}, {"type": ")", "children": [], "start_byte": 2434, "end_byte": 2435, "start_point": [50, 28], "end_point": [50, 29], "text": ")"}], "start_byte": 2421, "end_byte": 2435, "start_point": [50, 15], "end_point": [50, 29], "text": "Some(ref name)"}, {"type": "=", "children": [], "start_byte": 2436, "end_byte": 2437, "start_point": [50, 30], "end_point": [50, 31], "text": "="}, {"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 2438, "end_byte": 2442, "start_point": [50, 32], "end_point": [50, 36], "text": "cell"}, {"type": ".", "children": [], "start_byte": 2442, "end_byte": 2443, "start_point": [50, 36], "end_point": [50, 37], "text": "."}, {"type": "field_identifier", "children": [], "start_byte": 2443, "end_byte": 2447, "start_point": [50, 37], "end_point": [50, 41], "text": "name"}], "start_byte": 2438, "end_byte": 2447, "start_point": [50, 32], "end_point": [50, 41], "text": "cell.name"}], "start_byte": 2417, "end_byte": 2447, "start_point": [50, 11], "end_point": [50, 41], "text": "let Some(ref name) = cell.name"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 2448, "end_byte": 2449, "start_point": [50, 42], "end_point": [50, 43], "text": "{"}, {"type": "expression_statement", "children": [{"type": "if_expression", "children": [{"type": "if", "children": [], "start_byte": 2462, "end_byte": 2464, "start_point": [51, 12], "end_point": [51, 14], "text": "if"}, {"type": "binary_expression", "children": [{"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 2465, "end_byte": 2469, "start_point": [51, 15], "end_point": [51, 19], "text": "name"}, {"type": ".", "children": [], "start_byte": 2469, "end_byte": 2470, "start_point": [51, 19], "end_point": [51, 20], "text": "."}, {"type": "field_identifier", "children": [], "start_byte": 2470, "end_byte": 2476, "start_point": [51, 20], "end_point": [51, 26], "text": "as_str"}], "start_byte": 2465, "end_byte": 2476, "start_point": [51, 15], "end_point": [51, 26], "text": "name.as_str"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 2476, "end_byte": 2477, "start_point": [51, 26], "end_point": [51, 27], "text": "("}, {"type": ")", "children": [], "start_byte": 2477, "end_byte": 2478, "start_point": [51, 27], "end_point": [51, 28], "text": ")"}], "start_byte": 2476, "end_byte": 2478, "start_point": [51, 26], "end_point": [51, 28], "text": "()"}], "start_byte": 2465, "end_byte": 2478, "start_point": [51, 15], "end_point": [51, 28], "text": "name.as_str()"}, {"type": "==", "children": [], "start_byte": 2479, "end_byte": 2481, "start_point": [51, 29], "end_point": [51, 31], "text": "=="}, {"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 2482, "end_byte": 2483, "start_point": [51, 32], "end_point": [51, 33], "text": "\""}, {"type": "\"", "children": [], "start_byte": 2485, "end_byte": 2486, "start_point": [51, 35], "end_point": [51, 36], "text": "\""}], "start_byte": 2482, "end_byte": 2486, "start_point": [51, 32], "end_point": [51, 36], "text": "\"--\""}], "start_byte": 2465, "end_byte": 2486, "start_point": [51, 15], "end_point": [51, 36], "text": "name.as_str() == \"--\""}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 2487, "end_byte": 2488, "start_point": [51, 37], "end_point": [51, 38], "text": "{"}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "unary_expression", "children": [{"type": "*", "children": [], "start_byte": 2505, "end_byte": 2506, "start_point": [52, 16], "end_point": [52, 17], "text": "*"}, {"type": "identifier", "children": [], "start_byte": 2506, "end_byte": 2512, "start_point": [52, 17], "end_point": [52, 23], "text": "decode"}], "start_byte": 2505, "end_byte": 2512, "start_point": [52, 16], "end_point": [52, 23], "text": "*decode"}, {"type": "=", "children": [], "start_byte": 2513, "end_byte": 2514, "start_point": [52, 24], "end_point": [52, 25], "text": "="}, {"type": "boolean_literal", "children": [{"type": "false", "children": [], "start_byte": 2515, "end_byte": 2520, "start_point": [52, 26], "end_point": [52, 31], "text": "false"}], "start_byte": 2515, "end_byte": 2520, "start_point": [52, 26], "end_point": [52, 31], "text": "false"}], "start_byte": 2505, "end_byte": 2520, "start_point": [52, 16], "end_point": [52, 31], "text": "*decode = false"}, {"type": ";", "children": [], "start_byte": 2520, "end_byte": 2521, "start_point": [52, 31], "end_point": [52, 32], "text": ";"}], "start_byte": 2505, "end_byte": 2521, "start_point": [52, 16], "end_point": [52, 32], "text": "*decode = false;"}, {"type": "expression_statement", "children": [{"type": "return_expression", "children": [{"type": "return", "children": [], "start_byte": 2538, "end_byte": 2544, "start_point": [53, 16], "end_point": [53, 22], "text": "return"}], "start_byte": 2538, "end_byte": 2544, "start_point": [53, 16], "end_point": [53, 22], "text": "return"}, {"type": ";", "children": [], "start_byte": 2544, "end_byte": 2545, "start_point": [53, 22], "end_point": [53, 23], "text": ";"}], "start_byte": 2538, "end_byte": 2545, "start_point": [53, 16], "end_point": [53, 23], "text": "return;"}, {"type": "}", "children": [], "start_byte": 2558, "end_byte": 2559, "start_point": [54, 12], "end_point": [54, 13], "text": "}"}], "start_byte": 2487, "end_byte": 2559, "start_point": [51, 37], "end_point": [54, 13], "text": "{\n                *decode = false;\n                return;\n            }"}, {"type": "else_clause", "children": [{"type": "else", "children": [], "start_byte": 2560, "end_byte": 2564, "start_point": [54, 14], "end_point": [54, 18], "text": "else"}, {"type": "if_expression", "children": [{"type": "if", "children": [], "start_byte": 2565, "end_byte": 2567, "start_point": [54, 19], "end_point": [54, 21], "text": "if"}, {"type": "binary_expression", "children": [{"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 2568, "end_byte": 2572, "start_point": [54, 22], "end_point": [54, 26], "text": "name"}, {"type": ".", "children": [], "start_byte": 2572, "end_byte": 2573, "start_point": [54, 26], "end_point": [54, 27], "text": "."}, {"type": "field_identifier", "children": [], "start_byte": 2573, "end_byte": 2584, "start_point": [54, 27], "end_point": [54, 38], "text": "starts_with"}], "start_byte": 2568, "end_byte": 2584, "start_point": [54, 22], "end_point": [54, 38], "text": "name.starts_with"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 2584, "end_byte": 2585, "start_point": [54, 38], "end_point": [54, 39], "text": "("}, {"type": "char_literal", "children": [], "start_byte": 2585, "end_byte": 2588, "start_point": [54, 39], "end_point": [54, 42], "text": "'-'"}, {"type": ")", "children": [], "start_byte": 2588, "end_byte": 2589, "start_point": [54, 42], "end_point": [54, 43], "text": ")"}], "start_byte": 2584, "end_byte": 2589, "start_point": [54, 38], "end_point": [54, 43], "text": "('-')"}], "start_byte": 2568, "end_byte": 2589, "start_point": [54, 22], "end_point": [54, 43], "text": "name.starts_with('-')"}, {"type": "&&", "children": [], "start_byte": 2590, "end_byte": 2592, "start_point": [54, 44], "end_point": [54, 46], "text": "&&"}, {"type": "unary_expression", "children": [{"type": "*", "children": [], "start_byte": 2593, "end_byte": 2594, "start_point": [54, 47], "end_point": [54, 48], "text": "*"}, {"type": "identifier", "children": [], "start_byte": 2594, "end_byte": 2600, "start_point": [54, 48], "end_point": [54, 54], "text": "decode"}], "start_byte": 2593, "end_byte": 2600, "start_point": [54, 47], "end_point": [54, 54], "text": "*decode"}], "start_byte": 2568, "end_byte": 2600, "start_point": [54, 22], "end_point": [54, 54], "text": "name.starts_with('-') && *decode"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 2601, "end_byte": 2602, "start_point": [54, 55], "end_point": [54, 56], "text": "{"}, {"type": "line_comment", "children": [], "start_byte": 2619, "end_byte": 2686, "start_point": [55, 16], "end_point": [55, 83], "text": "// \u5982\u679c\u53c2\u6570\u4ee5 '-' \u5f00\u5934\uff0c\u5e76\u4e14 continue_evaluation \u4e3a true\n                // \u5219\u8df3"}, {"type": "line_comment", "children": [], "start_byte": 2703, "end_byte": 2733, "start_point": [56, 16], "end_point": [56, 46], "text": "       // println!(\"\u8df3\u8fc7\u53c2\u6570: {}\","}, {"type": "line_comment", "children": [], "start_byte": 2750, "end_byte": 2813, "start_point": [57, 16], "end_point": [57, 79], "text": "\u5370\u4fe1\u606f\n                // ... \u5176\u4ed6\u8df3\u8fc7\u8282\u70b9\u65f6\u7684\u5904\u7406\u903b\u8f91 ...\n            } else "}, {"type": "line_comment", "children": [], "start_byte": 2830, "end_byte": 2877, "start_point": [58, 16], "end_point": [58, 63], "text": " unsafe {\n                    NUM_FILE_NAMES +="}, {"type": "}", "children": [], "start_byte": 2890, "end_byte": 2891, "start_point": [59, 12], "end_point": [59, 13], "text": " "}], "start_byte": 2601, "end_byte": 2891, "start_point": [54, 55], "end_point": [59, 13], "text": "{\n                // \u5982\u679c\u53c2\u6570\u4ee5 '-' \u5f00\u5934\uff0c\u5e76\u4e14 continue_evaluation \u4e3a true\n                // \u5219\u8df3\u8fc7\u6b64\u8282\u70b9\u7684\u5904\u7406\n                // println!(\"\u8df3\u8fc7\u53c2\u6570: {}\", name);  // \u793a\u4f8b: \u6253\u5370\u4fe1\u606f\n                // ... \u5176\u4ed6\u8df3\u8fc7\u8282\u70b9\u65f6\u7684\u5904\u7406\u903b\u8f91 ...\n            } else {\n                unsafe {\n                    NUM_FILE_NAMES += 1;\n          "}, {"type": "else_clause", "children": [{"type": "else", "children": [], "start_byte": 2892, "end_byte": 2896, "start_point": [59, 14], "end_point": [59, 18], "text": "    "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 2897, "end_byte": 2898, "start_point": [59, 19], "end_point": [59, 20], "text": " "}, {"type": "expression_statement", "children": [{"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 2915, "end_byte": 2921, "start_point": [60, 16], "end_point": [60, 22], "text": "AME = "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 2922, "end_byte": 2923, "start_point": [60, 23], "end_point": [60, 24], "text": "O"}, {"type": "expression_statement", "children": [{"type": "compound_assignment_expr", "children": [{"type": "identifier", "children": [], "start_byte": 2944, "end_byte": 2958, "start_point": [61, 20], "end_point": [61, 34], "text": "ame.len() as i"}, {"type": "+=", "children": [], "start_byte": 2959, "end_byte": 2961, "start_point": [61, 35], "end_point": [61, 37], "text": "2)"}, {"type": "integer_literal", "children": [], "start_byte": 2962, "end_byte": 2963, "start_point": [61, 38], "end_point": [61, 39], "text": "\n"}], "start_byte": 2944, "end_byte": 2963, "start_point": [61, 20], "end_point": [61, 39], "text": "ame.len() as i32);\n"}, {"type": ";", "children": [], "start_byte": 2963, "end_byte": 2964, "start_point": [61, 39], "end_point": [61, 40], "text": " "}], "start_byte": 2944, "end_byte": 2964, "start_point": [61, 20], "end_point": [61, 40], "text": "ame.len() as i32);\n "}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 2985, "end_byte": 3002, "start_point": [62, 20], "end_point": [62, 37], "text": "        }\n       "}, {"type": "=", "children": [], "start_byte": 3003, "end_byte": 3004, "start_point": [62, 38], "end_point": [62, 39], "text": "}"}, {"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 3005, "end_byte": 3022, "start_point": [62, 40], "end_point": [62, 57], "text": "\n        // \u9012\u5f52\u8c03\u7528\u5904"}, {"type": ".", "children": [], "start_byte": 3022, "end_byte": 3023, "start_point": [62, 57], "end_point": [62, 58], "text": "\u7406"}, {"type": "field_identifier", "children": [], "start_byte": 3023, "end_byte": 3026, "start_point": [62, 58], "end_point": [62, 61], "text": "\u4e0b\u4e00\u4e2a"}], "start_byte": 3005, "end_byte": 3026, "start_point": [62, 40], "end_point": [62, 61], "text": "\n        // \u9012\u5f52\u8c03\u7528\u5904\u7406\u4e0b\u4e00\u4e2a"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 3026, "end_byte": 3027, "start_point": [62, 61], "end_point": [62, 62], "text": "\u8282"}, {"type": "type_cast_expression", "children": [{"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 3027, "end_byte": 3031, "start_point": [62, 62], "end_point": [62, 66], "text": "\u70b9\n  "}, {"type": ".", "children": [], "start_byte": 3031, "end_byte": 3032, "start_point": [62, 66], "end_point": [62, 67], "text": " "}, {"type": "field_identifier", "children": [], "start_byte": 3032, "end_byte": 3035, "start_point": [62, 67], "end_point": [62, 70], "text": "   "}], "start_byte": 3027, "end_byte": 3035, "start_point": [62, 62], "end_point": [62, 70], "text": "\u70b9\n      "}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 3035, "end_byte": 3036, "start_point": [62, 70], "end_point": [62, 71], "text": " "}, {"type": ")", "children": [], "start_byte": 3036, "end_byte": 3037, "start_point": [62, 71], "end_point": [62, 72], "text": " "}], "start_byte": 3035, "end_byte": 3037, "start_point": [62, 70], "end_point": [62, 72], "text": "  "}], "start_byte": 3027, "end_byte": 3037, "start_point": [62, 62], "end_point": [62, 72], "text": "\u70b9\n        "}, {"type": "as", "children": [], "start_byte": 3038, "end_byte": 3040, "start_point": [62, 73], "end_point": [62, 75], "text": "f "}, {"type": "primitive_type", "children": [], "start_byte": 3041, "end_byte": 3044, "start_point": [62, 76], "end_point": [62, 79], "text": "ell"}], "start_byte": 3027, "end_byte": 3044, "start_point": [62, 62], "end_point": [62, 79], "text": "\u70b9\n        if cell"}, {"type": ")", "children": [], "start_byte": 3044, "end_byte": 3045, "start_point": [62, 79], "end_point": [62, 80], "text": "."}], "start_byte": 3026, "end_byte": 3045, "start_point": [62, 61], "end_point": [62, 80], "text": "\u8282\u70b9\n        if cell."}], "start_byte": 3005, "end_byte": 3045, "start_point": [62, 40], "end_point": [62, 80], "text": "\n        // \u9012\u5f52\u8c03\u7528\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9\n        if cell."}], "start_byte": 2985, "end_byte": 3045, "start_point": [62, 20], "end_point": [62, 80], "text": "        }\n        }\n\n        // \u9012\u5f52\u8c03\u7528\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9\n        if cell."}, {"type": ";", "children": [], "start_byte": 3045, "end_byte": 3046, "start_point": [62, 80], "end_point": [62, 81], "text": "l"}], "start_byte": 2985, "end_byte": 3046, "start_point": [62, 20], "end_point": [62, 81], "text": "        }\n        }\n\n        // \u9012\u5f52\u8c03\u7528\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9\n        if cell.l"}, {"type": "}", "children": [], "start_byte": 3063, "end_byte": 3064, "start_point": [63, 16], "end_point": [63, 17], "text": " "}], "start_byte": 2922, "end_byte": 3064, "start_point": [60, 23], "end_point": [63, 17], "text": "ONGEST_FILE_NAME.max(name.len() as i32);\n                }\n            }\n        }\n\n        // \u9012\u5f52\u8c03\u7528\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9\n        if cell.link.is_some() {\n  "}], "start_byte": 2915, "end_byte": 3064, "start_point": [60, 16], "end_point": [63, 17], "text": "AME = LONGEST_FILE_NAME.max(name.len() as i32);\n                }\n            }\n        }\n\n        // \u9012\u5f52\u8c03\u7528\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9\n        if cell.link.is_some() {\n  "}], "start_byte": 2915, "end_byte": 3064, "start_point": [60, 16], "end_point": [63, 17], "text": "AME = LONGEST_FILE_NAME.max(name.len() as i32);\n                }\n            }\n        }\n\n        // \u9012\u5f52\u8c03\u7528\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9\n        if cell.link.is_some() {\n  "}, {"type": "}", "children": [], "start_byte": 3077, "end_byte": 3078, "start_point": [64, 12], "end_point": [64, 13], "text": "c"}], "start_byte": 2897, "end_byte": 3078, "start_point": [59, 19], "end_point": [64, 13], "text": "    LONGEST_FILE_NAME = LONGEST_FILE_NAME.max(name.len() as i32);\n                }\n            }\n        }\n\n        // \u9012\u5f52\u8c03\u7528\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9\n        if cell.link.is_some() {\n            proc"}], "start_byte": 2892, "end_byte": 3078, "start_point": [59, 14], "end_point": [64, 13], "text": "         LONGEST_FILE_NAME = LONGEST_FILE_NAME.max(name.len() as i32);\n                }\n            }\n        }\n\n        // \u9012\u5f52\u8c03\u7528\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9\n        if cell.link.is_some() {\n            proc"}], "start_byte": 2565, "end_byte": 3078, "start_point": [54, 19], "end_point": [64, 13], "text": "if name.starts_with('-') && *decode {\n                // \u5982\u679c\u53c2\u6570\u4ee5 '-' \u5f00\u5934\uff0c\u5e76\u4e14 continue_evaluation \u4e3a true\n                // \u5219\u8df3\u8fc7\u6b64\u8282\u70b9\u7684\u5904\u7406\n                // println!(\"\u8df3\u8fc7\u53c2\u6570: {}\", name);  // \u793a\u4f8b: \u6253\u5370\u4fe1\u606f\n                // ... \u5176\u4ed6\u8df3\u8fc7\u8282\u70b9\u65f6\u7684\u5904\u7406\u903b\u8f91 ...\n            } else {\n                unsafe {\n                    NUM_FILE_NAMES += 1;\n                    LONGEST_FILE_NAME = LONGEST_FILE_NAME.max(name.len() as i32);\n                }\n            }\n        }\n\n        // \u9012\u5f52\u8c03\u7528\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9\n        if cell.link.is_some() {\n            proc"}], "start_byte": 2560, "end_byte": 3078, "start_point": [54, 14], "end_point": [64, 13], "text": "else if name.starts_with('-') && *decode {\n                // \u5982\u679c\u53c2\u6570\u4ee5 '-' \u5f00\u5934\uff0c\u5e76\u4e14 continue_evaluation \u4e3a true\n                // \u5219\u8df3\u8fc7\u6b64\u8282\u70b9\u7684\u5904\u7406\n                // println!(\"\u8df3\u8fc7\u53c2\u6570: {}\", name);  // \u793a\u4f8b: \u6253\u5370\u4fe1\u606f\n                // ... \u5176\u4ed6\u8df3\u8fc7\u8282\u70b9\u65f6\u7684\u5904\u7406\u903b\u8f91 ...\n            } else {\n                unsafe {\n                    NUM_FILE_NAMES += 1;\n                    LONGEST_FILE_NAME = LONGEST_FILE_NAME.max(name.len() as i32);\n                }\n            }\n        }\n\n        // \u9012\u5f52\u8c03\u7528\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9\n        if cell.link.is_some() {\n            proc"}], "start_byte": 2462, "end_byte": 3078, "start_point": [51, 12], "end_point": [64, 13], "text": "if name.as_str() == \"--\" {\n                *decode = false;\n                return;\n            } else if name.starts_with('-') && *decode {\n                // \u5982\u679c\u53c2\u6570\u4ee5 '-' \u5f00\u5934\uff0c\u5e76\u4e14 continue_evaluation \u4e3a true\n                // \u5219\u8df3\u8fc7\u6b64\u8282\u70b9\u7684\u5904\u7406\n                // println!(\"\u8df3\u8fc7\u53c2\u6570: {}\", name);  // \u793a\u4f8b: \u6253\u5370\u4fe1\u606f\n                // ... \u5176\u4ed6\u8df3\u8fc7\u8282\u70b9\u65f6\u7684\u5904\u7406\u903b\u8f91 ...\n            } else {\n                unsafe {\n                    NUM_FILE_NAMES += 1;\n                    LONGEST_FILE_NAME = LONGEST_FILE_NAME.max(name.len() as i32);\n                }\n            }\n        }\n\n        // \u9012\u5f52\u8c03\u7528\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9\n        if cell.link.is_some() {\n            proc"}], "start_byte": 2462, "end_byte": 3078, "start_point": [51, 12], "end_point": [64, 13], "text": "if name.as_str() == \"--\" {\n                *decode = false;\n                return;\n            } else if name.starts_with('-') && *decode {\n                // \u5982\u679c\u53c2\u6570\u4ee5 '-' \u5f00\u5934\uff0c\u5e76\u4e14 continue_evaluation \u4e3a true\n                // \u5219\u8df3\u8fc7\u6b64\u8282\u70b9\u7684\u5904\u7406\n                // println!(\"\u8df3\u8fc7\u53c2\u6570: {}\", name);  // \u793a\u4f8b: \u6253\u5370\u4fe1\u606f\n                // ... \u5176\u4ed6\u8df3\u8fc7\u8282\u70b9\u65f6\u7684\u5904\u7406\u903b\u8f91 ...\n            } else {\n                unsafe {\n                    NUM_FILE_NAMES += 1;\n                    LONGEST_FILE_NAME = LONGEST_FILE_NAME.max(name.len() as i32);\n                }\n            }\n        }\n\n        // \u9012\u5f52\u8c03\u7528\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9\n        if cell.link.is_some() {\n            proc"}, {"type": "}", "children": [], "start_byte": 3087, "end_byte": 3088, "start_point": [65, 8], "end_point": [65, 9], "text": "l"}], "start_byte": 2448, "end_byte": 3088, "start_point": [50, 42], "end_point": [65, 9], "text": "{\n            if name.as_str() == \"--\" {\n                *decode = false;\n                return;\n            } else if name.starts_with('-') && *decode {\n                // \u5982\u679c\u53c2\u6570\u4ee5 '-' \u5f00\u5934\uff0c\u5e76\u4e14 continue_evaluation \u4e3a true\n                // \u5219\u8df3\u8fc7\u6b64\u8282\u70b9\u7684\u5904\u7406\n                // println!(\"\u8df3\u8fc7\u53c2\u6570: {}\", name);  // \u793a\u4f8b: \u6253\u5370\u4fe1\u606f\n                // ... \u5176\u4ed6\u8df3\u8fc7\u8282\u70b9\u65f6\u7684\u5904\u7406\u903b\u8f91 ...\n            } else {\n                unsafe {\n                    NUM_FILE_NAMES += 1;\n                    LONGEST_FILE_NAME = LONGEST_FILE_NAME.max(name.len() as i32);\n                }\n            }\n        }\n\n        // \u9012\u5f52\u8c03\u7528\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9\n        if cell.link.is_some() {\n            process_link_l"}], "start_byte": 2414, "end_byte": 3088, "start_point": [50, 8], "end_point": [65, 9], "text": "if let Some(ref name) = cell.name {\n            if name.as_str() == \"--\" {\n                *decode = false;\n                return;\n            } else if name.starts_with('-') && *decode {\n                // \u5982\u679c\u53c2\u6570\u4ee5 '-' \u5f00\u5934\uff0c\u5e76\u4e14 continue_evaluation \u4e3a true\n                // \u5219\u8df3\u8fc7\u6b64\u8282\u70b9\u7684\u5904\u7406\n                // println!(\"\u8df3\u8fc7\u53c2\u6570: {}\", name);  // \u793a\u4f8b: \u6253\u5370\u4fe1\u606f\n                // ... \u5176\u4ed6\u8df3\u8fc7\u8282\u70b9\u65f6\u7684\u5904\u7406\u903b\u8f91 ...\n            } else {\n                unsafe {\n                    NUM_FILE_NAMES += 1;\n                    LONGEST_FILE_NAME = LONGEST_FILE_NAME.max(name.len() as i32);\n                }\n            }\n        }\n\n        // \u9012\u5f52\u8c03\u7528\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9\n        if cell.link.is_some() {\n            process_link_l"}], "start_byte": 2414, "end_byte": 3088, "start_point": [50, 8], "end_point": [65, 9], "text": "if let Some(ref name) = cell.name {\n            if name.as_str() == \"--\" {\n                *decode = false;\n                return;\n            } else if name.starts_with('-') && *decode {\n                // \u5982\u679c\u53c2\u6570\u4ee5 '-' \u5f00\u5934\uff0c\u5e76\u4e14 continue_evaluation \u4e3a true\n                // \u5219\u8df3\u8fc7\u6b64\u8282\u70b9\u7684\u5904\u7406\n                // println!(\"\u8df3\u8fc7\u53c2\u6570: {}\", name);  // \u793a\u4f8b: \u6253\u5370\u4fe1\u606f\n                // ... \u5176\u4ed6\u8df3\u8fc7\u8282\u70b9\u65f6\u7684\u5904\u7406\u903b\u8f91 ...\n            } else {\n                unsafe {\n                    NUM_FILE_NAMES += 1;\n                    LONGEST_FILE_NAME = LONGEST_FILE_NAME.max(name.len() as i32);\n                }\n            }\n        }\n\n        // \u9012\u5f52\u8c03\u7528\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9\n        if cell.link.is_some() {\n            process_link_l"}, {"type": "line_comment", "children": [], "start_byte": 3098, "end_byte": 3134, "start_point": [67, 8], "end_point": [67, 44], "text": "ell.link, decode);\n        }\n    }\n}"}, {"type": "expression_statement", "children": [{"type": "if_expression", "children": [{"type": "if", "children": [], "start_byte": 3143, "end_byte": 3145, "start_point": [68, 8], "end_point": [68, 10], "text": "es"}, {"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 3146, "end_byte": 3150, "start_point": [68, 11], "end_point": [68, 15], "text": "_cel"}, {"type": ".", "children": [], "start_byte": 3150, "end_byte": 3151, "start_point": [68, 15], "end_point": [68, 16], "text": "l"}, {"type": "field_identifier", "children": [], "start_byte": 3151, "end_byte": 3155, "start_point": [68, 16], "end_point": [68, 20], "text": "s(ce"}], "start_byte": 3146, "end_byte": 3155, "start_point": [68, 11], "end_point": [68, 20], "text": "_cells(ce"}, {"type": ".", "children": [], "start_byte": 3155, "end_byte": 3156, "start_point": [68, 20], "end_point": [68, 21], "text": "l"}, {"type": "field_identifier", "children": [], "start_byte": 3156, "end_byte": 3163, "start_point": [68, 21], "end_point": [68, 28], "text": "l: &Opt"}], "start_byte": 3146, "end_byte": 3163, "start_point": [68, 11], "end_point": [68, 28], "text": "_cells(cell: &Opt"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 3163, "end_byte": 3164, "start_point": [68, 28], "end_point": [68, 29], "text": "i"}, {"type": ")", "children": [], "start_byte": 3164, "end_byte": 3165, "start_point": [68, 29], "end_point": [68, 30], "text": "o"}], "start_byte": 3163, "end_byte": 3165, "start_point": [68, 28], "end_point": [68, 30], "text": "io"}], "start_byte": 3146, "end_byte": 3165, "start_point": [68, 11], "end_point": [68, 30], "text": "_cells(cell: &Optio"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 3166, "end_byte": 3167, "start_point": [68, 31], "end_point": [68, 32], "text": "<"}, {"type": "expression_statement", "children": [{"type": "call_expression", "children": [{"type": "identifier", "children": [], "start_byte": 3180, "end_byte": 3197, "start_point": [69, 12], "end_point": [69, 29], "text": "ecode: &mut bool)"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 3197, "end_byte": 3198, "start_point": [69, 29], "end_point": [69, 30], "text": " "}, {"type": "reference_expression", "children": [{"type": "&", "children": [], "start_byte": 3198, "end_byte": 3199, "start_point": [69, 30], "end_point": [69, 31], "text": "{"}, {"type": "mutable_specifier", "children": [], "start_byte": 3199, "end_byte": 3202, "start_point": [69, 31], "end_point": [69, 34], "text": "\n  "}, {"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 3203, "end_byte": 3207, "start_point": [69, 35], "end_point": [69, 39], "text": " if "}, {"type": ".", "children": [], "start_byte": 3207, "end_byte": 3208, "start_point": [69, 39], "end_point": [69, 40], "text": "l"}, {"type": "field_identifier", "children": [], "start_byte": 3208, "end_byte": 3212, "start_point": [69, 40], "end_point": [69, 44], "text": "et S"}], "start_byte": 3203, "end_byte": 3212, "start_point": [69, 35], "end_point": [69, 44], "text": " if let S"}], "start_byte": 3198, "end_byte": 3212, "start_point": [69, 30], "end_point": [69, 44], "text": "{\n    if let S"}, {"type": ",", "children": [], "start_byte": 3212, "end_byte": 3213, "start_point": [69, 44], "end_point": [69, 45], "text": "o"}, {"type": "identifier", "children": [], "start_byte": 3214, "end_byte": 3220, "start_point": [69, 46], "end_point": [69, 52], "text": "e(cell"}, {"type": ")", "children": [], "start_byte": 3220, "end_byte": 3221, "start_point": [69, 52], "end_point": [69, 53], "text": ")"}], "start_byte": 3197, "end_byte": 3221, "start_point": [69, 29], "end_point": [69, 53], "text": " {\n    if let Some(cell)"}], "start_byte": 3180, "end_byte": 3221, "start_point": [69, 12], "end_point": [69, 53], "text": "ecode: &mut bool) {\n    if let Some(cell)"}, {"type": ";", "children": [], "start_byte": 3221, "end_byte": 3222, "start_point": [69, 53], "end_point": [69, 54], "text": " "}], "start_byte": 3180, "end_byte": 3222, "start_point": [69, 12], "end_point": [69, 54], "text": "ecode: &mut bool) {\n    if let Some(cell) "}, {"type": "}", "children": [], "start_byte": 3231, "end_byte": 3232, "start_point": [70, 8], "end_point": [70, 9], "text": " "}], "start_byte": 3166, "end_byte": 3232, "start_point": [68, 31], "end_point": [70, 9], "text": "<Box<Cell>>, decode: &mut bool) {\n    if let Some(cell) = cell {\n "}], "start_byte": 3143, "end_byte": 3232, "start_point": [68, 8], "end_point": [70, 9], "text": "ess_cells(cell: &Option<Box<Cell>>, decode: &mut bool) {\n    if let Some(cell) = cell {\n "}], "start_byte": 3143, "end_byte": 3232, "start_point": [68, 8], "end_point": [70, 9], "text": "ess_cells(cell: &Option<Box<Cell>>, decode: &mut bool) {\n    if let Some(cell) = cell {\n "}, {"type": "}", "children": [], "start_byte": 3237, "end_byte": 3238, "start_point": [71, 4], "end_point": [71, 5], "text": " "}], "start_byte": 2404, "end_byte": 3238, "start_point": [49, 36], "end_point": [71, 5], "text": "{\n        if let Some(ref name) = cell.name {\n            if name.as_str() == \"--\" {\n                *decode = false;\n                return;\n            } else if name.starts_with('-') && *decode {\n                // \u5982\u679c\u53c2\u6570\u4ee5 '-' \u5f00\u5934\uff0c\u5e76\u4e14 continue_evaluation \u4e3a true\n                // \u5219\u8df3\u8fc7\u6b64\u8282\u70b9\u7684\u5904\u7406\n                // println!(\"\u8df3\u8fc7\u53c2\u6570: {}\", name);  // \u793a\u4f8b: \u6253\u5370\u4fe1\u606f\n                // ... \u5176\u4ed6\u8df3\u8fc7\u8282\u70b9\u65f6\u7684\u5904\u7406\u903b\u8f91 ...\n            } else {\n                unsafe {\n                    NUM_FILE_NAMES += 1;\n                    LONGEST_FILE_NAME = LONGEST_FILE_NAME.max(name.len() as i32);\n                }\n            }\n        }\n\n        // \u9012\u5f52\u8c03\u7528\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9\n        if cell.link.is_some() {\n            process_link_list(&mut cell.link, decode);\n        }\n    }\n}\n\nfn process_cells(cell: &Option<Box<Cell>>, decode: &mut bool) {\n    if let Some(cell) = cell {\n       "}], "start_byte": 2372, "end_byte": 3238, "start_point": [49, 4], "end_point": [71, 5], "text": "if let Some(cell) = cell_option {\n        if let Some(ref name) = cell.name {\n            if name.as_str() == \"--\" {\n                *decode = false;\n                return;\n            } else if name.starts_with('-') && *decode {\n                // \u5982\u679c\u53c2\u6570\u4ee5 '-' \u5f00\u5934\uff0c\u5e76\u4e14 continue_evaluation \u4e3a true\n                // \u5219\u8df3\u8fc7\u6b64\u8282\u70b9\u7684\u5904\u7406\n                // println!(\"\u8df3\u8fc7\u53c2\u6570: {}\", name);  // \u793a\u4f8b: \u6253\u5370\u4fe1\u606f\n                // ... \u5176\u4ed6\u8df3\u8fc7\u8282\u70b9\u65f6\u7684\u5904\u7406\u903b\u8f91 ...\n            } else {\n                unsafe {\n                    NUM_FILE_NAMES += 1;\n                    LONGEST_FILE_NAME = LONGEST_FILE_NAME.max(name.len() as i32);\n                }\n            }\n        }\n\n        // \u9012\u5f52\u8c03\u7528\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9\n        if cell.link.is_some() {\n            process_link_list(&mut cell.link, decode);\n        }\n    }\n}\n\nfn process_cells(cell: &Option<Box<Cell>>, decode: &mut bool) {\n    if let Some(cell) = cell {\n       "}], "start_byte": 2372, "end_byte": 3238, "start_point": [49, 4], "end_point": [71, 5], "text": "if let Some(cell) = cell_option {\n        if let Some(ref name) = cell.name {\n            if name.as_str() == \"--\" {\n                *decode = false;\n                return;\n            } else if name.starts_with('-') && *decode {\n                // \u5982\u679c\u53c2\u6570\u4ee5 '-' \u5f00\u5934\uff0c\u5e76\u4e14 continue_evaluation \u4e3a true\n                // \u5219\u8df3\u8fc7\u6b64\u8282\u70b9\u7684\u5904\u7406\n                // println!(\"\u8df3\u8fc7\u53c2\u6570: {}\", name);  // \u793a\u4f8b: \u6253\u5370\u4fe1\u606f\n                // ... \u5176\u4ed6\u8df3\u8fc7\u8282\u70b9\u65f6\u7684\u5904\u7406\u903b\u8f91 ...\n            } else {\n                unsafe {\n                    NUM_FILE_NAMES += 1;\n                    LONGEST_FILE_NAME = LONGEST_FILE_NAME.max(name.len() as i32);\n                }\n            }\n        }\n\n        // \u9012\u5f52\u8c03\u7528\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9\n        if cell.link.is_some() {\n            process_link_list(&mut cell.link, decode);\n        }\n    }\n}\n\nfn process_cells(cell: &Option<Box<Cell>>, decode: &mut bool) {\n    if let Some(cell) = cell {\n       "}, {"type": "}", "children": [], "start_byte": 3239, "end_byte": 3240, "start_point": [72, 0], "end_point": [72, 1], "text": "i"}], "start_byte": 2366, "end_byte": 3240, "start_point": [48, 77], "end_point": [72, 1], "text": "{\n    if let Some(cell) = cell_option {\n        if let Some(ref name) = cell.name {\n            if name.as_str() == \"--\" {\n                *decode = false;\n                return;\n            } else if name.starts_with('-') && *decode {\n                // \u5982\u679c\u53c2\u6570\u4ee5 '-' \u5f00\u5934\uff0c\u5e76\u4e14 continue_evaluation \u4e3a true\n                // \u5219\u8df3\u8fc7\u6b64\u8282\u70b9\u7684\u5904\u7406\n                // println!(\"\u8df3\u8fc7\u53c2\u6570: {}\", name);  // \u793a\u4f8b: \u6253\u5370\u4fe1\u606f\n                // ... \u5176\u4ed6\u8df3\u8fc7\u8282\u70b9\u65f6\u7684\u5904\u7406\u903b\u8f91 ...\n            } else {\n                unsafe {\n                    NUM_FILE_NAMES += 1;\n                    LONGEST_FILE_NAME = LONGEST_FILE_NAME.max(name.len() as i32);\n                }\n            }\n        }\n\n        // \u9012\u5f52\u8c03\u7528\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9\n        if cell.link.is_some() {\n            process_link_list(&mut cell.link, decode);\n        }\n    }\n}\n\nfn process_cells(cell: &Option<Box<Cell>>, decode: &mut bool) {\n    if let Some(cell) = cell {\n        i"}], "start_byte": 2289, "end_byte": 3240, "start_point": [48, 0], "end_point": [72, 1], "text": "fn process_link_list(cell_option: &mut Option<Box<Cell>>, decode: &mut bool) {\n    if let Some(cell) = cell_option {\n        if let Some(ref name) = cell.name {\n            if name.as_str() == \"--\" {\n                *decode = false;\n                return;\n            } else if name.starts_with('-') && *decode {\n                // \u5982\u679c\u53c2\u6570\u4ee5 '-' \u5f00\u5934\uff0c\u5e76\u4e14 continue_evaluation \u4e3a true\n                // \u5219\u8df3\u8fc7\u6b64\u8282\u70b9\u7684\u5904\u7406\n                // println!(\"\u8df3\u8fc7\u53c2\u6570: {}\", name);  // \u793a\u4f8b: \u6253\u5370\u4fe1\u606f\n                // ... \u5176\u4ed6\u8df3\u8fc7\u8282\u70b9\u65f6\u7684\u5904\u7406\u903b\u8f91 ...\n            } else {\n                unsafe {\n                    NUM_FILE_NAMES += 1;\n                    LONGEST_FILE_NAME = LONGEST_FILE_NAME.max(name.len() as i32);\n                }\n            }\n        }\n\n        // \u9012\u5f52\u8c03\u7528\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9\n        if cell.link.is_some() {\n            process_link_list(&mut cell.link, decode);\n        }\n    }\n}\n\nfn process_cells(cell: &Option<Box<Cell>>, decode: &mut bool) {\n    if let Some(cell) = cell {\n        i"}, {"type": "function_item", "children": [{"type": "fn", "children": [], "start_byte": 3242, "end_byte": 3244, "start_point": [74, 0], "end_point": [74, 2], "text": "le"}, {"type": "identifier", "children": [], "start_byte": 3245, "end_byte": 3258, "start_point": [74, 3], "end_point": [74, 16], "text": " Some(name) ="}, {"type": "parameters", "children": [{"type": "(", "children": [], "start_byte": 3258, "end_byte": 3259, "start_point": [74, 16], "end_point": [74, 17], "text": " "}, {"type": "parameter", "children": [{"type": "identifier", "children": [], "start_byte": 3259, "end_byte": 3263, "start_point": [74, 17], "end_point": [74, 21], "text": "&cel"}, {"type": ":", "children": [], "start_byte": 3263, "end_byte": 3264, "start_point": [74, 21], "end_point": [74, 22], "text": "l"}, {"type": "reference_type", "children": [{"type": "&", "children": [], "start_byte": 3265, "end_byte": 3266, "start_point": [74, 23], "end_point": [74, 24], "text": "n"}, {"type": "generic_type", "children": [{"type": "type_identifier", "children": [], "start_byte": 3266, "end_byte": 3272, "start_point": [74, 24], "end_point": [74, 30], "text": "ame {\n"}, {"type": "type_arguments", "children": [{"type": "<", "children": [], "start_byte": 3272, "end_byte": 3273, "start_point": [74, 30], "end_point": [74, 31], "text": " "}, {"type": "generic_type", "children": [{"type": "type_identifier", "children": [], "start_byte": 3273, "end_byte": 3276, "start_point": [74, 31], "end_point": [74, 34], "text": "   "}, {"type": "type_arguments", "children": [{"type": "<", "children": [], "start_byte": 3276, "end_byte": 3277, "start_point": [74, 34], "end_point": [74, 35], "text": " "}, {"type": "type_identifier", "children": [], "start_byte": 3277, "end_byte": 3281, "start_point": [74, 35], "end_point": [74, 39], "text": "    "}, {"type": ">", "children": [], "start_byte": 3281, "end_byte": 3282, "start_point": [74, 39], "end_point": [74, 40], "text": " "}], "start_byte": 3276, "end_byte": 3282, "start_point": [74, 34], "end_point": [74, 40], "text": "      "}], "start_byte": 3273, "end_byte": 3282, "start_point": [74, 31], "end_point": [74, 40], "text": "         "}, {"type": ">", "children": [], "start_byte": 3282, "end_byte": 3283, "start_point": [74, 40], "end_point": [74, 41], "text": " "}], "start_byte": 3272, "end_byte": 3283, "start_point": [74, 30], "end_point": [74, 41], "text": "           "}], "start_byte": 3266, "end_byte": 3283, "start_point": [74, 24], "end_point": [74, 41], "text": "ame {\n           "}], "start_byte": 3265, "end_byte": 3283, "start_point": [74, 23], "end_point": [74, 41], "text": "name {\n           "}], "start_byte": 3259, "end_byte": 3283, "start_point": [74, 17], "end_point": [74, 41], "text": "&cell.name {\n           "}, {"type": ",", "children": [], "start_byte": 3283, "end_byte": 3284, "start_point": [74, 41], "end_point": [74, 42], "text": " "}, {"type": "parameter", "children": [{"type": "identifier", "children": [], "start_byte": 3285, "end_byte": 3291, "start_point": [74, 43], "end_point": [74, 49], "text": "f name"}, {"type": ":", "children": [], "start_byte": 3291, "end_byte": 3292, "start_point": [74, 49], "end_point": [74, 50], "text": "."}, {"type": "reference_type", "children": [{"type": "&", "children": [], "start_byte": 3293, "end_byte": 3294, "start_point": [74, 51], "end_point": [74, 52], "text": "s"}, {"type": "mutable_specifier", "children": [], "start_byte": 3294, "end_byte": 3297, "start_point": [74, 52], "end_point": [74, 55], "text": "_st"}, {"type": "primitive_type", "children": [], "start_byte": 3298, "end_byte": 3302, "start_point": [74, 56], "end_point": [74, 60], "text": "() ="}], "start_byte": 3293, "end_byte": 3302, "start_point": [74, 51], "end_point": [74, 60], "text": "s_str() ="}], "start_byte": 3285, "end_byte": 3302, "start_point": [74, 43], "end_point": [74, 60], "text": "f name.as_str() ="}, {"type": ")", "children": [], "start_byte": 3302, "end_byte": 3303, "start_point": [74, 60], "end_point": [74, 61], "text": "="}], "start_byte": 3258, "end_byte": 3303, "start_point": [74, 16], "end_point": [74, 61], "text": " &cell.name {\n            if name.as_str() =="}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 3304, "end_byte": 3305, "start_point": [74, 62], "end_point": [74, 63], "text": "\""}, {"type": "expression_statement", "children": [{"type": "if_expression", "children": [{"type": "if", "children": [], "start_byte": 3310, "end_byte": 3312, "start_point": [75, 4], "end_point": [75, 6], "text": "\n "}, {"type": "let_condition", "children": [{"type": "let", "children": [], "start_byte": 3313, "end_byte": 3316, "start_point": [75, 7], "end_point": [75, 10], "text": "   "}, {"type": "tuple_struct_pattern", "children": [{"type": "identifier", "children": [], "start_byte": 3317, "end_byte": 3321, "start_point": [75, 11], "end_point": [75, 15], "text": "    "}, {"type": "(", "children": [], "start_byte": 3321, "end_byte": 3322, "start_point": [75, 15], "end_point": [75, 16], "text": " "}, {"type": "identifier", "children": [], "start_byte": 3322, "end_byte": 3326, "start_point": [75, 16], "end_point": [75, 20], "text": "    "}, {"type": ")", "children": [], "start_byte": 3326, "end_byte": 3327, "start_point": [75, 20], "end_point": [75, 21], "text": " "}], "start_byte": 3317, "end_byte": 3327, "start_point": [75, 11], "end_point": [75, 21], "text": "          "}, {"type": "=", "children": [], "start_byte": 3328, "end_byte": 3329, "start_point": [75, 22], "end_point": [75, 23], "text": "d"}, {"type": "identifier", "children": [], "start_byte": 3330, "end_byte": 3334, "start_point": [75, 24], "end_point": [75, 28], "text": "code"}], "start_byte": 3313, "end_byte": 3334, "start_point": [75, 7], "end_point": [75, 28], "text": "              *decode"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 3335, "end_byte": 3336, "start_point": [75, 29], "end_point": [75, 30], "text": "="}, {"type": "expression_statement", "children": [{"type": "if_expression", "children": [{"type": "if", "children": [], "start_byte": 3345, "end_byte": 3347, "start_point": [76, 8], "end_point": [76, 10], "text": "  "}, {"type": "let_condition", "children": [{"type": "let", "children": [], "start_byte": 3348, "end_byte": 3351, "start_point": [76, 11], "end_point": [76, 14], "text": "   "}, {"type": "tuple_struct_pattern", "children": [{"type": "identifier", "children": [], "start_byte": 3352, "end_byte": 3356, "start_point": [76, 15], "end_point": [76, 19], "text": "    "}, {"type": "(", "children": [], "start_byte": 3356, "end_byte": 3357, "start_point": [76, 19], "end_point": [76, 20], "text": " "}, {"type": "identifier", "children": [], "start_byte": 3357, "end_byte": 3361, "start_point": [76, 20], "end_point": [76, 24], "text": "   r"}, {"type": ")", "children": [], "start_byte": 3361, "end_byte": 3362, "start_point": [76, 24], "end_point": [76, 25], "text": "e"}], "start_byte": 3352, "end_byte": 3362, "start_point": [76, 15], "end_point": [76, 25], "text": "        re"}, {"type": "=", "children": [], "start_byte": 3363, "end_byte": 3364, "start_point": [76, 26], "end_point": [76, 27], "text": "u"}, {"type": "reference_expression", "children": [{"type": "&", "children": [], "start_byte": 3365, "end_byte": 3366, "start_point": [76, 28], "end_point": [76, 29], "text": "n"}, {"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 3366, "end_byte": 3370, "start_point": [76, 29], "end_point": [76, 33], "text": ";\n  "}, {"type": ".", "children": [], "start_byte": 3370, "end_byte": 3371, "start_point": [76, 33], "end_point": [76, 34], "text": " "}, {"type": "field_identifier", "children": [], "start_byte": 3371, "end_byte": 3375, "start_point": [76, 34], "end_point": [76, 38], "text": "    "}], "start_byte": 3366, "end_byte": 3375, "start_point": [76, 29], "end_point": [76, 38], "text": ";\n       "}], "start_byte": 3365, "end_byte": 3375, "start_point": [76, 28], "end_point": [76, 38], "text": "n;\n       "}], "start_byte": 3348, "end_byte": 3375, "start_point": [76, 11], "end_point": [76, 38], "text": "            return;\n       "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 3376, "end_byte": 3377, "start_point": [76, 39], "end_point": [76, 40], "text": " "}, {"type": "expression_statement", "children": [{"type": "if_expression", "children": [{"type": "if", "children": [], "start_byte": 3390, "end_byte": 3392, "start_point": [77, 12], "end_point": [77, 14], "text": "  "}, {"type": "binary_expression", "children": [{"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 3393, "end_byte": 3397, "start_point": [77, 15], "end_point": [77, 19], "text": " if "}, {"type": ".", "children": [], "start_byte": 3397, "end_byte": 3398, "start_point": [77, 19], "end_point": [77, 20], "text": "n"}, {"type": "field_identifier", "children": [], "start_byte": 3398, "end_byte": 3404, "start_point": [77, 20], "end_point": [77, 26], "text": "ame.st"}], "start_byte": 3393, "end_byte": 3404, "start_point": [77, 15], "end_point": [77, 26], "text": " if name.st"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 3404, "end_byte": 3405, "start_point": [77, 26], "end_point": [77, 27], "text": "a"}, {"type": ")", "children": [], "start_byte": 3405, "end_byte": 3406, "start_point": [77, 27], "end_point": [77, 28], "text": "r"}], "start_byte": 3404, "end_byte": 3406, "start_point": [77, 26], "end_point": [77, 28], "text": "ar"}], "start_byte": 3393, "end_byte": 3406, "start_point": [77, 15], "end_point": [77, 28], "text": " if name.star"}, {"type": "==", "children": [], "start_byte": 3407, "end_byte": 3409, "start_point": [77, 29], "end_point": [77, 31], "text": "s_"}, {"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 3410, "end_byte": 3411, "start_point": [77, 32], "end_point": [77, 33], "text": "i"}, {"type": "\"", "children": [], "start_byte": 3413, "end_byte": 3414, "start_point": [77, 35], "end_point": [77, 36], "text": "("}], "start_byte": 3410, "end_byte": 3414, "start_point": [77, 32], "end_point": [77, 36], "text": "ith("}], "start_byte": 3393, "end_byte": 3414, "start_point": [77, 15], "end_point": [77, 36], "text": " if name.starts_with("}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 3415, "end_byte": 3416, "start_point": [77, 37], "end_point": [77, 38], "text": "-"}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "unary_expression", "children": [{"type": "*", "children": [], "start_byte": 3433, "end_byte": 3434, "start_point": [78, 16], "end_point": [78, 17], "text": " "}, {"type": "identifier", "children": [], "start_byte": 3434, "end_byte": 3440, "start_point": [78, 17], "end_point": [78, 23], "text": "      "}], "start_byte": 3433, "end_byte": 3440, "start_point": [78, 16], "end_point": [78, 23], "text": "       "}, {"type": "=", "children": [], "start_byte": 3441, "end_byte": 3442, "start_point": [78, 24], "end_point": [78, 25], "text": " "}, {"type": "boolean_literal", "children": [{"type": "false", "children": [], "start_byte": 3443, "end_byte": 3448, "start_point": [78, 26], "end_point": [78, 31], "text": "     "}], "start_byte": 3443, "end_byte": 3448, "start_point": [78, 26], "end_point": [78, 31], "text": "     "}], "start_byte": 3433, "end_byte": 3448, "start_point": [78, 16], "end_point": [78, 31], "text": "               "}, {"type": ";", "children": [], "start_byte": 3448, "end_byte": 3449, "start_point": [78, 31], "end_point": [78, 32], "text": "/"}], "start_byte": 3433, "end_byte": 3449, "start_point": [78, 16], "end_point": [78, 32], "text": "               /"}, {"type": "expression_statement", "children": [{"type": "return_expression", "children": [{"type": "return", "children": [], "start_byte": 3466, "end_byte": 3472, "start_point": [79, 16], "end_point": [79, 22], "text": "      "}], "start_byte": 3466, "end_byte": 3472, "start_point": [79, 16], "end_point": [79, 22], "text": "      "}, {"type": ";", "children": [], "start_byte": 3472, "end_byte": 3473, "start_point": [79, 22], "end_point": [79, 23], "text": " "}], "start_byte": 3466, "end_byte": 3473, "start_point": [79, 16], "end_point": [79, 23], "text": "       "}, {"type": "}", "children": [], "start_byte": 3486, "end_byte": 3487, "start_point": [80, 12], "end_point": [80, 13], "text": "_"}], "start_byte": 3415, "end_byte": 3487, "start_point": [77, 37], "end_point": [80, 13], "text": "-') && *decode {\n                // \u9012\u5f52\u8c03\u7528\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9\n                process_"}], "start_byte": 3390, "end_byte": 3487, "start_point": [77, 12], "end_point": [80, 13], "text": "    if name.starts_with('-') && *decode {\n                // \u9012\u5f52\u8c03\u7528\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9\n                process_"}], "start_byte": 3390, "end_byte": 3487, "start_point": [77, 12], "end_point": [80, 13], "text": "    if name.starts_with('-') && *decode {\n                // \u9012\u5f52\u8c03\u7528\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9\n                process_"}, {"type": "expression_statement", "children": [{"type": "if_expression", "children": [{"type": "if", "children": [], "start_byte": 3500, "end_byte": 3502, "start_point": [81, 12], "end_point": [81, 14], "text": "in"}, {"type": "binary_expression", "children": [{"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 3503, "end_byte": 3507, "start_point": [81, 15], "end_point": [81, 19], "text": ", de"}, {"type": ".", "children": [], "start_byte": 3507, "end_byte": 3508, "start_point": [81, 19], "end_point": [81, 20], "text": "c"}, {"type": "field_identifier", "children": [], "start_byte": 3508, "end_byte": 3519, "start_point": [81, 20], "end_point": [81, 31], "text": "ode);\n     "}], "start_byte": 3503, "end_byte": 3519, "start_point": [81, 15], "end_point": [81, 31], "text": ", decode);\n     "}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 3519, "end_byte": 3520, "start_point": [81, 31], "end_point": [81, 32], "text": " "}, {"type": "char_literal", "children": [], "start_byte": 3520, "end_byte": 3523, "start_point": [81, 32], "end_point": [81, 35], "text": "   "}, {"type": ")", "children": [], "start_byte": 3523, "end_byte": 3524, "start_point": [81, 35], "end_point": [81, 36], "text": " "}], "start_byte": 3519, "end_byte": 3524, "start_point": [81, 31], "end_point": [81, 36], "text": "     "}], "start_byte": 3503, "end_byte": 3524, "start_point": [81, 15], "end_point": [81, 36], "text": ", decode);\n          "}, {"type": "&&", "children": [], "start_byte": 3525, "end_byte": 3527, "start_point": [81, 37], "end_point": [81, 39], "text": "  "}, {"type": "unary_expression", "children": [{"type": "*", "children": [], "start_byte": 3528, "end_byte": 3529, "start_point": [81, 40], "end_point": [81, 41], "text": " "}, {"type": "identifier", "children": [], "start_byte": 3529, "end_byte": 3535, "start_point": [81, 41], "end_point": [81, 47], "text": " retur"}], "start_byte": 3528, "end_byte": 3535, "start_point": [81, 40], "end_point": [81, 47], "text": "  retur"}], "start_byte": 3503, "end_byte": 3535, "start_point": [81, 15], "end_point": [81, 47], "text": ", decode);\n                retur"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 3536, "end_byte": 3537, "start_point": [81, 48], "end_point": [81, 49], "text": ";"}, {"type": "line_comment", "children": [], "start_byte": 3554, "end_byte": 3590, "start_point": [82, 16], "end_point": [82, 52], "text": "          unsafe { NUM_FILES_PROCESS"}, {"type": "expression_statement", "children": [{"type": "call_expression", "children": [{"type": "identifier", "children": [], "start_byte": 3607, "end_byte": 3620, "start_point": [83, 16], "end_point": [83, 29], "text": "      // prin"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 3620, "end_byte": 3621, "start_point": [83, 29], "end_point": [83, 30], "text": "t"}, {"type": "reference_expression", "children": [{"type": "&", "children": [], "start_byte": 3621, "end_byte": 3622, "start_point": [83, 30], "end_point": [83, 31], "text": "l"}, {"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 3622, "end_byte": 3626, "start_point": [83, 31], "end_point": [83, 35], "text": "n!(\""}, {"type": ".", "children": [], "start_byte": 3626, "end_byte": 3627, "start_point": [83, 35], "end_point": [83, 36], "text": "c"}, {"type": "field_identifier", "children": [], "start_byte": 3627, "end_byte": 3631, "start_point": [83, 36], "end_point": [83, 40], "text": "ell."}], "start_byte": 3622, "end_byte": 3631, "start_point": [83, 31], "end_point": [83, 40], "text": "n!(\"cell."}], "start_byte": 3621, "end_byte": 3631, "start_point": [83, 30], "end_point": [83, 40], "text": "ln!(\"cell."}, {"type": ",", "children": [], "start_byte": 3631, "end_byte": 3632, "start_point": [83, 40], "end_point": [83, 41], "text": "n"}, {"type": "identifier", "children": [], "start_byte": 3633, "end_byte": 3639, "start_point": [83, 42], "end_point": [83, 48], "text": "me: {}"}, {"type": ")", "children": [], "start_byte": 3639, "end_byte": 3640, "start_point": [83, 48], "end_point": [83, 49], "text": "\""}], "start_byte": 3620, "end_byte": 3640, "start_point": [83, 29], "end_point": [83, 49], "text": "tln!(\"cell.name: {}\""}], "start_byte": 3607, "end_byte": 3640, "start_point": [83, 16], "end_point": [83, 49], "text": "      // println!(\"cell.name: {}\""}, {"type": ";", "children": [], "start_byte": 3640, "end_byte": 3641, "start_point": [83, 49], "end_point": [83, 50], "text": ","}], "start_byte": 3607, "end_byte": 3641, "start_point": [83, 16], "end_point": [83, 50], "text": "      // println!(\"cell.name: {}\","}, {"type": "expression_statement", "children": [{"type": "return_expression", "children": [{"type": "return", "children": [], "start_byte": 3658, "end_byte": 3664, "start_point": [84, 16], "end_point": [84, 22], "text": "   if "}], "start_byte": 3658, "end_byte": 3664, "start_point": [84, 16], "end_point": [84, 22], "text": "   if "}, {"type": ";", "children": [], "start_byte": 3664, "end_byte": 3665, "start_point": [84, 22], "end_point": [84, 23], "text": "l"}], "start_byte": 3658, "end_byte": 3665, "start_point": [84, 16], "end_point": [84, 23], "text": "   if l"}, {"type": "}", "children": [], "start_byte": 3678, "end_byte": 3679, "start_point": [85, 12], "end_point": [85, 13], "text": "o"}], "start_byte": 3536, "end_byte": 3679, "start_point": [81, 48], "end_point": [85, 13], "text": ";\n            }\n            unsafe { NUM_FILES_PROCESSED += 1; }\n            // println!(\"cell.name: {}\", name);\n            if let Err(e) = co"}], "start_byte": 3500, "end_byte": 3679, "start_point": [81, 12], "end_point": [85, 13], "text": "ink, decode);\n                return;\n            }\n            unsafe { NUM_FILES_PROCESSED += 1; }\n            // println!(\"cell.name: {}\", name);\n            if let Err(e) = co"}], "start_byte": 3500, "end_byte": 3679, "start_point": [81, 12], "end_point": [85, 13], "text": "ink, decode);\n                return;\n            }\n            unsafe { NUM_FILES_PROCESSED += 1; }\n            // println!(\"cell.name: {}\", name);\n            if let Err(e) = co"}, {"type": "expression_statement", "children": [{"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 3692, "end_byte": 3698, "start_point": [86, 12], "end_point": [86, 18], "text": "ame)) "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 3699, "end_byte": 3700, "start_point": [86, 19], "end_point": [86, 20], "text": "\n"}, {"type": "expression_statement", "children": [{"type": "compound_assignment_expr", "children": [{"type": "identifier", "children": [], "start_byte": 3701, "end_byte": 3720, "start_point": [86, 21], "end_point": [86, 40], "text": "               epri"}, {"type": "+=", "children": [], "start_byte": 3721, "end_byte": 3723, "start_point": [86, 41], "end_point": [86, 43], "text": "tl"}, {"type": "integer_literal", "children": [], "start_byte": 3724, "end_byte": 3725, "start_point": [86, 44], "end_point": [86, 45], "text": "!"}], "start_byte": 3701, "end_byte": 3725, "start_point": [86, 21], "end_point": [86, 45], "text": "               eprintln!"}, {"type": ";", "children": [], "start_byte": 3725, "end_byte": 3726, "start_point": [86, 45], "end_point": [86, 46], "text": "("}], "start_byte": 3701, "end_byte": 3726, "start_point": [86, 21], "end_point": [86, 46], "text": "               eprintln!("}, {"type": "}", "children": [], "start_byte": 3727, "end_byte": 3728, "start_point": [86, 47], "end_point": [86, 48], "text": "\u538b"}], "start_byte": 3699, "end_byte": 3728, "start_point": [86, 19], "end_point": [86, 48], "text": "\n                eprintln!(\"\u538b"}], "start_byte": 3692, "end_byte": 3728, "start_point": [86, 12], "end_point": [86, 48], "text": "ame)) {\n                eprintln!(\"\u538b"}], "start_byte": 3692, "end_byte": 3728, "start_point": [86, 12], "end_point": [86, 48], "text": "ame)) {\n                eprintln!(\"\u538b"}, {"type": "line_comment", "children": [], "start_byte": 3741, "end_byte": 3776, "start_point": [87, 12], "end_point": [87, 47], "text": "e);\n            }\n        }\n       "}, {"type": "expression_statement", "children": [{"type": "if_expression", "children": [{"type": "if", "children": [], "start_byte": 3789, "end_byte": 3791, "start_point": [88, 12], "end_point": [88, 14], "text": "\u8282\u70b9"}, {"type": "let_condition", "children": [{"type": "let", "children": [], "start_byte": 3792, "end_byte": 3795, "start_point": [88, 15], "end_point": [88, 18], "text": "   "}, {"type": "tuple_struct_pattern", "children": [{"type": "identifier", "children": [], "start_byte": 3796, "end_byte": 3799, "start_point": [88, 19], "end_point": [88, 22], "text": "   "}, {"type": "(", "children": [], "start_byte": 3799, "end_byte": 3800, "start_point": [88, 22], "end_point": [88, 23], "text": " "}, {"type": "identifier", "children": [], "start_byte": 3800, "end_byte": 3801, "start_point": [88, 23], "end_point": [88, 24], "text": "p"}, {"type": ")", "children": [], "start_byte": 3801, "end_byte": 3802, "start_point": [88, 24], "end_point": [88, 25], "text": "r"}], "start_byte": 3796, "end_byte": 3802, "start_point": [88, 19], "end_point": [88, 25], "text": "    pr"}, {"type": "=", "children": [], "start_byte": 3803, "end_byte": 3804, "start_point": [88, 26], "end_point": [88, 27], "text": "c"}, {"type": "call_expression", "children": [{"type": "identifier", "children": [], "start_byte": 3805, "end_byte": 3813, "start_point": [88, 28], "end_point": [88, 36], "text": "ss_cells"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 3813, "end_byte": 3814, "start_point": [88, 36], "end_point": [88, 37], "text": "("}, {"type": "call_expression", "children": [{"type": "identifier", "children": [], "start_byte": 3814, "end_byte": 3818, "start_point": [88, 37], "end_point": [88, 41], "text": "&cel"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 3818, "end_byte": 3819, "start_point": [88, 41], "end_point": [88, 42], "text": "l"}, {"type": "identifier", "children": [], "start_byte": 3819, "end_byte": 3823, "start_point": [88, 42], "end_point": [88, 46], "text": ".lin"}, {"type": ")", "children": [], "start_byte": 3823, "end_byte": 3824, "start_point": [88, 46], "end_point": [88, 47], "text": "k"}], "start_byte": 3818, "end_byte": 3824, "start_point": [88, 41], "end_point": [88, 47], "text": "l.link"}], "start_byte": 3814, "end_byte": 3824, "start_point": [88, 37], "end_point": [88, 47], "text": "&cell.link"}, {"type": ")", "children": [], "start_byte": 3824, "end_byte": 3825, "start_point": [88, 47], "end_point": [88, 48], "text": ","}], "start_byte": 3813, "end_byte": 3825, "start_point": [88, 36], "end_point": [88, 48], "text": "(&cell.link,"}], "start_byte": 3805, "end_byte": 3825, "start_point": [88, 28], "end_point": [88, 48], "text": "ss_cells(&cell.link,"}], "start_byte": 3792, "end_byte": 3825, "start_point": [88, 15], "end_point": [88, 48], "text": "        process_cells(&cell.link,"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 3826, "end_byte": 3827, "start_point": [88, 49], "end_point": [88, 50], "text": "d"}, {"type": "expression_statement", "children": [{"type": "macro_invocation", "children": [{"type": "identifier", "children": [], "start_byte": 3844, "end_byte": 3852, "start_point": [89, 16], "end_point": [89, 24], "text": "\n\npub fn"}, {"type": "!", "children": [], "start_byte": 3852, "end_byte": 3853, "start_point": [89, 24], "end_point": [89, 25], "text": " "}, {"type": "token_tree", "children": [{"type": "(", "children": [], "start_byte": 3853, "end_byte": 3854, "start_point": [89, 25], "end_point": [89, 26], "text": "m"}, {"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 3854, "end_byte": 3855, "start_point": [89, 26], "end_point": [89, 27], "text": "a"}, {"type": "\"", "children": [], "start_byte": 3880, "end_byte": 3881, "start_point": [89, 52], "end_point": [89, 53], "text": "&"}], "start_byte": 3854, "end_byte": 3881, "start_point": [89, 26], "end_point": [89, 53], "text": "ain(argv: &[String], gou: &"}, {"type": "identifier", "children": [], "start_byte": 3883, "end_byte": 3884, "start_point": [89, 55], "end_point": [89, 56], "text": "t"}, {"type": ")", "children": [], "start_byte": 3884, "end_byte": 3885, "start_point": [89, 56], "end_point": [89, 57], "text": "r"}], "start_byte": 3853, "end_byte": 3885, "start_point": [89, 25], "end_point": [89, 57], "text": "main(argv: &[String], gou: &[Str"}], "start_byte": 3844, "end_byte": 3885, "start_point": [89, 16], "end_point": [89, 57], "text": "\n\npub fn main(argv: &[String], gou: &[Str"}, {"type": ";", "children": [], "start_byte": 3885, "end_byte": 3886, "start_point": [89, 57], "end_point": [89, 58], "text": "i"}], "start_byte": 3844, "end_byte": 3886, "start_point": [89, 16], "end_point": [89, 58], "text": "\n\npub fn main(argv: &[String], gou: &[Stri"}, {"type": "}", "children": [], "start_byte": 3899, "end_byte": 3900, "start_point": [90, 12], "end_point": [90, 13], "text": "l"}], "start_byte": 3826, "end_byte": 3900, "start_point": [88, 49], "end_point": [90, 13], "text": "decode);\n    }\n}\n\n\n\npub fn main(argv: &[String], gou: &[String])  -> Resul"}], "start_byte": 3789, "end_byte": 3900, "start_point": [88, 12], "end_point": [90, 13], "text": "\u8282\u70b9\n        process_cells(&cell.link, decode);\n    }\n}\n\n\n\npub fn main(argv: &[String], gou: &[String])  -> Resul"}], "start_byte": 3789, "end_byte": 3900, "start_point": [88, 12], "end_point": [90, 13], "text": "\u8282\u70b9\n        process_cells(&cell.link, decode);\n    }\n}\n\n\n\npub fn main(argv: &[String], gou: &[String])  -> Resul"}, {"type": "}", "children": [], "start_byte": 3909, "end_byte": 3910, "start_point": [91, 8], "end_point": [91, 9], "text": ":"}], "start_byte": 3376, "end_byte": 3910, "start_point": [76, 39], "end_point": [91, 9], "text": "    }\n            if name.starts_with('-') && *decode {\n                // \u9012\u5f52\u8c03\u7528\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9\n                process_cells(&cell.link, decode);\n                return;\n            }\n            unsafe { NUM_FILES_PROCESSED += 1; }\n            // println!(\"cell.name: {}\", name);\n            if let Err(e) = compress(Some(name)) {\n                eprintln!(\"\u538b\u7f29\u8fc7\u7a0b\u4e2d\u51fa\u9519: {}\", e);\n            }\n        }\n        // \u9012\u5f52\u8c03\u7528\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9\n        process_cells(&cell.link, decode);\n    }\n}\n\n\n\npub fn main(argv: &[String], gou: &[String])  -> Result<(), io::"}], "start_byte": 3345, "end_byte": 3910, "start_point": [76, 8], "end_point": [91, 9], "text": "               return;\n            }\n            if name.starts_with('-') && *decode {\n                // \u9012\u5f52\u8c03\u7528\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9\n                process_cells(&cell.link, decode);\n                return;\n            }\n            unsafe { NUM_FILES_PROCESSED += 1; }\n            // println!(\"cell.name: {}\", name);\n            if let Err(e) = compress(Some(name)) {\n                eprintln!(\"\u538b\u7f29\u8fc7\u7a0b\u4e2d\u51fa\u9519: {}\", e);\n            }\n        }\n        // \u9012\u5f52\u8c03\u7528\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9\n        process_cells(&cell.link, decode);\n    }\n}\n\n\n\npub fn main(argv: &[String], gou: &[String])  -> Result<(), io::"}], "start_byte": 3345, "end_byte": 3910, "start_point": [76, 8], "end_point": [91, 9], "text": "               return;\n            }\n            if name.starts_with('-') && *decode {\n                // \u9012\u5f52\u8c03\u7528\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9\n                process_cells(&cell.link, decode);\n                return;\n            }\n            unsafe { NUM_FILES_PROCESSED += 1; }\n            // println!(\"cell.name: {}\", name);\n            if let Err(e) = compress(Some(name)) {\n                eprintln!(\"\u538b\u7f29\u8fc7\u7a0b\u4e2d\u51fa\u9519: {}\", e);\n            }\n        }\n        // \u9012\u5f52\u8c03\u7528\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9\n        process_cells(&cell.link, decode);\n    }\n}\n\n\n\npub fn main(argv: &[String], gou: &[String])  -> Result<(), io::"}, {"type": "line_comment", "children": [], "start_byte": 3919, "end_byte": 3955, "start_point": [92, 8], "end_point": [92, 44], "text": "    // let argv: Vec<String> = env::"}, {"type": "expression_statement", "children": [{"type": "call_expression", "children": [{"type": "identifier", "children": [], "start_byte": 3964, "end_byte": 3977, "start_point": [93, 8], "end_point": [93, 21], "text": "llect();\n    "}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 3977, "end_byte": 3978, "start_point": [93, 21], "end_point": [93, 22], "text": "l"}, {"type": "reference_expression", "children": [{"type": "&", "children": [], "start_byte": 3978, "end_byte": 3979, "start_point": [93, 22], "end_point": [93, 23], "text": "e"}, {"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 3979, "end_byte": 3983, "start_point": [93, 23], "end_point": [93, 27], "text": "t ar"}, {"type": ".", "children": [], "start_byte": 3983, "end_byte": 3984, "start_point": [93, 27], "end_point": [93, 28], "text": "g"}, {"type": "field_identifier", "children": [], "start_byte": 3984, "end_byte": 3988, "start_point": [93, 28], "end_point": [93, 32], "text": "v = "}], "start_byte": 3979, "end_byte": 3988, "start_point": [93, 23], "end_point": [93, 32], "text": "t argv = "}], "start_byte": 3978, "end_byte": 3988, "start_point": [93, 22], "end_point": [93, 32], "text": "et argv = "}, {"type": ",", "children": [], "start_byte": 3988, "end_byte": 3989, "start_point": [93, 32], "end_point": [93, 33], "text": "a"}, {"type": "identifier", "children": [], "start_byte": 3990, "end_byte": 3996, "start_point": [93, 34], "end_point": [93, 40], "text": "gv;\n  "}, {"type": ")", "children": [], "start_byte": 3996, "end_byte": 3997, "start_point": [93, 40], "end_point": [93, 41], "text": " "}], "start_byte": 3977, "end_byte": 3997, "start_point": [93, 21], "end_point": [93, 41], "text": "let argv = argv;\n   "}], "start_byte": 3964, "end_byte": 3997, "start_point": [93, 8], "end_point": [93, 41], "text": "llect();\n    let argv = argv;\n   "}, {"type": ";", "children": [], "start_byte": 3997, "end_byte": 3998, "start_point": [93, 41], "end_point": [93, 42], "text": " "}], "start_byte": 3964, "end_byte": 3998, "start_point": [93, 8], "end_point": [93, 42], "text": "llect();\n    let argv = argv;\n    "}, {"type": "}", "children": [], "start_byte": 4003, "end_byte": 4004, "start_point": [94, 4], "end_point": [94, 5], "text": "r"}], "start_byte": 3335, "end_byte": 4004, "start_point": [75, 29], "end_point": [94, 5], "text": "= false;\n                return;\n            }\n            if name.starts_with('-') && *decode {\n                // \u9012\u5f52\u8c03\u7528\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9\n                process_cells(&cell.link, decode);\n                return;\n            }\n            unsafe { NUM_FILES_PROCESSED += 1; }\n            // println!(\"cell.name: {}\", name);\n            if let Err(e) = compress(Some(name)) {\n                eprintln!(\"\u538b\u7f29\u8fc7\u7a0b\u4e2d\u51fa\u9519: {}\", e);\n            }\n        }\n        // \u9012\u5f52\u8c03\u7528\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9\n        process_cells(&cell.link, decode);\n    }\n}\n\n\n\npub fn main(argv: &[String], gou: &[String])  -> Result<(), io::Error> {\n    // let argv: Vec<String> = env::args().collect();\n    let argv = argv;\n    let ar"}], "start_byte": 3310, "end_byte": 4004, "start_point": [75, 4], "end_point": [94, 5], "text": "\n                *decode = false;\n                return;\n            }\n            if name.starts_with('-') && *decode {\n                // \u9012\u5f52\u8c03\u7528\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9\n                process_cells(&cell.link, decode);\n                return;\n            }\n            unsafe { NUM_FILES_PROCESSED += 1; }\n            // println!(\"cell.name: {}\", name);\n            if let Err(e) = compress(Some(name)) {\n                eprintln!(\"\u538b\u7f29\u8fc7\u7a0b\u4e2d\u51fa\u9519: {}\", e);\n            }\n        }\n        // \u9012\u5f52\u8c03\u7528\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9\n        process_cells(&cell.link, decode);\n    }\n}\n\n\n\npub fn main(argv: &[String], gou: &[String])  -> Result<(), io::Error> {\n    // let argv: Vec<String> = env::args().collect();\n    let argv = argv;\n    let ar"}], "start_byte": 3310, "end_byte": 4004, "start_point": [75, 4], "end_point": [94, 5], "text": "\n                *decode = false;\n                return;\n            }\n            if name.starts_with('-') && *decode {\n                // \u9012\u5f52\u8c03\u7528\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9\n                process_cells(&cell.link, decode);\n                return;\n            }\n            unsafe { NUM_FILES_PROCESSED += 1; }\n            // println!(\"cell.name: {}\", name);\n            if let Err(e) = compress(Some(name)) {\n                eprintln!(\"\u538b\u7f29\u8fc7\u7a0b\u4e2d\u51fa\u9519: {}\", e);\n            }\n        }\n        // \u9012\u5f52\u8c03\u7528\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9\n        process_cells(&cell.link, decode);\n    }\n}\n\n\n\npub fn main(argv: &[String], gou: &[String])  -> Result<(), io::Error> {\n    // let argv: Vec<String> = env::args().collect();\n    let argv = argv;\n    let ar"}, {"type": "}", "children": [], "start_byte": 4005, "end_byte": 4006, "start_point": [95, 0], "end_point": [95, 1], "text": "c"}], "start_byte": 3304, "end_byte": 4006, "start_point": [74, 62], "end_point": [95, 1], "text": "\"--\" {\n                *decode = false;\n                return;\n            }\n            if name.starts_with('-') && *decode {\n                // \u9012\u5f52\u8c03\u7528\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9\n                process_cells(&cell.link, decode);\n                return;\n            }\n            unsafe { NUM_FILES_PROCESSED += 1; }\n            // println!(\"cell.name: {}\", name);\n            if let Err(e) = compress(Some(name)) {\n                eprintln!(\"\u538b\u7f29\u8fc7\u7a0b\u4e2d\u51fa\u9519: {}\", e);\n            }\n        }\n        // \u9012\u5f52\u8c03\u7528\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9\n        process_cells(&cell.link, decode);\n    }\n}\n\n\n\npub fn main(argv: &[String], gou: &[String])  -> Result<(), io::Error> {\n    // let argv: Vec<String> = env::args().collect();\n    let argv = argv;\n    let argc"}], "start_byte": 3242, "end_byte": 4006, "start_point": [74, 0], "end_point": [95, 1], "text": "let Some(name) = &cell.name {\n            if name.as_str() == \"--\" {\n                *decode = false;\n                return;\n            }\n            if name.starts_with('-') && *decode {\n                // \u9012\u5f52\u8c03\u7528\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9\n                process_cells(&cell.link, decode);\n                return;\n            }\n            unsafe { NUM_FILES_PROCESSED += 1; }\n            // println!(\"cell.name: {}\", name);\n            if let Err(e) = compress(Some(name)) {\n                eprintln!(\"\u538b\u7f29\u8fc7\u7a0b\u4e2d\u51fa\u9519: {}\", e);\n            }\n        }\n        // \u9012\u5f52\u8c03\u7528\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9\n        process_cells(&cell.link, decode);\n    }\n}\n\n\n\npub fn main(argv: &[String], gou: &[String])  -> Result<(), io::Error> {\n    // let argv: Vec<String> = env::args().collect();\n    let argv = argv;\n    let argc"}, {"type": "function_item", "children": [{"type": "visibility_modifier", "children": [{"type": "pub", "children": [], "start_byte": 4010, "end_byte": 4013, "start_point": [99, 0], "end_point": [99, 3], "text": "ou."}], "start_byte": 4010, "end_byte": 4013, "start_point": [99, 0], "end_point": [99, 3], "text": "ou."}, {"type": "fn", "children": [], "start_byte": 4014, "end_byte": 4016, "start_point": [99, 4], "end_point": [99, 6], "text": "en"}, {"type": "identifier", "children": [], "start_byte": 4017, "end_byte": 4021, "start_point": [99, 7], "end_point": [99, 11], "text": ") as"}, {"type": "parameters", "children": [{"type": "(", "children": [], "start_byte": 4021, "end_byte": 4022, "start_point": [99, 11], "end_point": [99, 12], "text": " "}, {"type": "parameter", "children": [{"type": "identifier", "children": [], "start_byte": 4022, "end_byte": 4026, "start_point": [99, 12], "end_point": [99, 16], "text": "i32;"}, {"type": ":", "children": [], "start_byte": 4026, "end_byte": 4027, "start_point": [99, 16], "end_point": [99, 17], "text": "\n"}, {"type": "reference_type", "children": [{"type": "&", "children": [], "start_byte": 4028, "end_byte": 4029, "start_point": [99, 18], "end_point": [99, 19], "text": " "}, {"type": "array_type", "children": [{"type": "[", "children": [], "start_byte": 4029, "end_byte": 4030, "start_point": [99, 19], "end_point": [99, 20], "text": " "}, {"type": "type_identifier", "children": [], "start_byte": 4030, "end_byte": 4036, "start_point": [99, 20], "end_point": [99, 26], "text": " let m"}, {"type": "]", "children": [], "start_byte": 4036, "end_byte": 4037, "start_point": [99, 26], "end_point": [99, 27], "text": "u"}], "start_byte": 4029, "end_byte": 4037, "start_point": [99, 19], "end_point": [99, 27], "text": "  let mu"}], "start_byte": 4028, "end_byte": 4037, "start_point": [99, 18], "end_point": [99, 27], "text": "   let mu"}], "start_byte": 4022, "end_byte": 4037, "start_point": [99, 12], "end_point": [99, 27], "text": "i32;\n    let mu"}, {"type": ",", "children": [], "start_byte": 4037, "end_byte": 4038, "start_point": [99, 27], "end_point": [99, 28], "text": "t"}, {"type": "parameter", "children": [{"type": "identifier", "children": [], "start_byte": 4039, "end_byte": 4042, "start_point": [99, 29], "end_point": [99, 32], "text": "dec"}, {"type": ":", "children": [], "start_byte": 4042, "end_byte": 4043, "start_point": [99, 32], "end_point": [99, 33], "text": "o"}, {"type": "reference_type", "children": [{"type": "&", "children": [], "start_byte": 4044, "end_byte": 4045, "start_point": [99, 34], "end_point": [99, 35], "text": "e"}, {"type": "array_type", "children": [{"type": "[", "children": [], "start_byte": 4045, "end_byte": 4046, "start_point": [99, 35], "end_point": [99, 36], "text": ":"}, {"type": "type_identifier", "children": [], "start_byte": 4046, "end_byte": 4052, "start_point": [99, 36], "end_point": [99, 42], "text": " bool;"}, {"type": "]", "children": [], "start_byte": 4052, "end_byte": 4053, "start_point": [99, 42], "end_point": [99, 43], "text": "\n"}], "start_byte": 4045, "end_byte": 4053, "start_point": [99, 35], "end_point": [99, 43], "text": ": bool;\n"}], "start_byte": 4044, "end_byte": 4053, "start_point": [99, 34], "end_point": [99, 43], "text": "e: bool;\n"}], "start_byte": 4039, "end_byte": 4053, "start_point": [99, 29], "end_point": [99, 43], "text": "decode: bool;\n"}, {"type": ")", "children": [], "start_byte": 4053, "end_byte": 4054, "start_point": [99, 43], "end_point": [99, 44], "text": " "}], "start_byte": 4021, "end_byte": 4054, "start_point": [99, 11], "end_point": [99, 44], "text": " i32;\n    let mut decode: bool;\n "}, {"type": "->", "children": [], "start_byte": 4056, "end_byte": 4058, "start_point": [99, 46], "end_point": [99, 48], "text": " /"}, {"type": "generic_type", "children": [{"type": "type_identifier", "children": [], "start_byte": 4059, "end_byte": 4065, "start_point": [99, 49], "end_point": [99, 55], "text": " \u521d\u59cb\u5316\u53d8\u91cf"}, {"type": "type_arguments", "children": [{"type": "<", "children": [], "start_byte": 4065, "end_byte": 4066, "start_point": [99, 55], "end_point": [99, 56], "text": "\n"}, {"type": "unit_type", "children": [{"type": "(", "children": [], "start_byte": 4066, "end_byte": 4067, "start_point": [99, 56], "end_point": [99, 57], "text": " "}, {"type": ")", "children": [], "start_byte": 4067, "end_byte": 4068, "start_point": [99, 57], "end_point": [99, 58], "text": " "}], "start_byte": 4066, "end_byte": 4068, "start_point": [99, 56], "end_point": [99, 58], "text": "  "}, {"type": ",", "children": [], "start_byte": 4068, "end_byte": 4069, "start_point": [99, 58], "end_point": [99, 59], "text": " "}, {"type": "scoped_type_identifier", "children": [{"type": "identifier", "children": [], "start_byte": 4070, "end_byte": 4072, "start_point": [99, 60], "end_point": [99, 62], "text": "un"}, {"type": "::", "children": [], "start_byte": 4072, "end_byte": 4074, "start_point": [99, 62], "end_point": [99, 64], "text": "sa"}, {"type": "type_identifier", "children": [], "start_byte": 4074, "end_byte": 4079, "start_point": [99, 64], "end_point": [99, 69], "text": "fe{\n "}], "start_byte": 4070, "end_byte": 4079, "start_point": [99, 60], "end_point": [99, 69], "text": "unsafe{\n "}, {"type": ">", "children": [], "start_byte": 4079, "end_byte": 4080, "start_point": [99, 69], "end_point": [99, 70], "text": " "}], "start_byte": 4065, "end_byte": 4080, "start_point": [99, 55], "end_point": [99, 70], "text": "\n    unsafe{\n  "}], "start_byte": 4059, "end_byte": 4080, "start_point": [99, 49], "end_point": [99, 70], "text": " \u521d\u59cb\u5316\u53d8\u91cf\n    unsafe{\n  "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 4081, "end_byte": 4082, "start_point": [99, 71], "end_point": [99, 72], "text": " "}, {"type": "line_comment", "children": [], "start_byte": 4087, "end_byte": 4136, "start_point": [100, 4], "end_point": [100, 53], "text": "MALL_MODE = false;\n        KEEP_INPUT_FILES = fal"}, {"type": "let_declaration", "children": [{"type": "let", "children": [], "start_byte": 4141, "end_byte": 4144, "start_point": [101, 4], "end_point": [101, 7], "text": "   "}, {"type": "identifier", "children": [], "start_byte": 4145, "end_byte": 4149, "start_point": [101, 8], "end_point": [101, 12], "text": "   F"}, {"type": "=", "children": [], "start_byte": 4150, "end_byte": 4151, "start_point": [101, 13], "end_point": [101, 14], "text": "R"}, {"type": "identifier", "children": [], "start_byte": 4152, "end_byte": 4156, "start_point": [101, 15], "end_point": [101, 19], "text": "E_OV"}, {"type": ";", "children": [], "start_byte": 4156, "end_byte": 4157, "start_point": [101, 19], "end_point": [101, 20], "text": "E"}], "start_byte": 4141, "end_byte": 4157, "start_point": [101, 4], "end_point": [101, 20], "text": "       FORCE_OVE"}, {"type": "let_declaration", "children": [{"type": "let", "children": [], "start_byte": 4162, "end_byte": 4165, "start_point": [102, 4], "end_point": [102, 7], "text": "E ="}, {"type": "identifier", "children": [], "start_byte": 4166, "end_byte": 4170, "start_point": [102, 8], "end_point": [102, 12], "text": "fals"}, {"type": "=", "children": [], "start_byte": 4171, "end_byte": 4172, "start_point": [102, 13], "end_point": [102, 14], "text": ";"}, {"type": "type_cast_expression", "children": [{"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 4173, "end_byte": 4176, "start_point": [102, 15], "end_point": [102, 18], "text": "   "}, {"type": ".", "children": [], "start_byte": 4176, "end_byte": 4177, "start_point": [102, 18], "end_point": [102, 19], "text": " "}, {"type": "field_identifier", "children": [], "start_byte": 4177, "end_byte": 4180, "start_point": [102, 19], "end_point": [102, 22], "text": "   "}], "start_byte": 4173, "end_byte": 4180, "start_point": [102, 15], "end_point": [102, 22], "text": "       "}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 4180, "end_byte": 4181, "start_point": [102, 22], "end_point": [102, 23], "text": " "}, {"type": ")", "children": [], "start_byte": 4181, "end_byte": 4182, "start_point": [102, 23], "end_point": [102, 24], "text": "N"}], "start_byte": 4180, "end_byte": 4182, "start_point": [102, 22], "end_point": [102, 24], "text": " N"}], "start_byte": 4173, "end_byte": 4182, "start_point": [102, 15], "end_point": [102, 24], "text": "        N"}, {"type": "as", "children": [], "start_byte": 4183, "end_byte": 4185, "start_point": [102, 25], "end_point": [102, 27], "text": "IS"}, {"type": "primitive_type", "children": [], "start_byte": 4186, "end_byte": 4189, "start_point": [102, 28], "end_point": [102, 31], "text": " = "}], "start_byte": 4173, "end_byte": 4189, "start_point": [102, 15], "end_point": [102, 31], "text": "        NOISY = "}, {"type": ";", "children": [], "start_byte": 4189, "end_byte": 4190, "start_point": [102, 31], "end_point": [102, 32], "text": "t"}], "start_byte": 4162, "end_byte": 4190, "start_point": [102, 4], "end_point": [102, 32], "text": "E = false;\n        NOISY = t"}, {"type": "let_declaration", "children": [{"type": "let", "children": [], "start_byte": 4195, "end_byte": 4198, "start_point": [103, 4], "end_point": [103, 7], "text": "   "}, {"type": "mutable_specifier", "children": [], "start_byte": 4199, "end_byte": 4202, "start_point": [103, 8], "end_point": [103, 11], "text": "   "}, {"type": "identifier", "children": [], "start_byte": 4203, "end_byte": 4209, "start_point": [103, 12], "end_point": [103, 18], "text": "verbos"}, {"type": ":", "children": [], "start_byte": 4209, "end_byte": 4210, "start_point": [103, 18], "end_point": [103, 19], "text": "i"}, {"type": "primitive_type", "children": [], "start_byte": 4211, "end_byte": 4215, "start_point": [103, 20], "end_point": [103, 24], "text": "y = "}, {"type": ";", "children": [], "start_byte": 4215, "end_byte": 4216, "start_point": [103, 24], "end_point": [103, 25], "text": "0"}], "start_byte": 4195, "end_byte": 4216, "start_point": [103, 4], "end_point": [103, 25], "text": "        verbosity = 0"}, {"type": "line_comment", "children": [], "start_byte": 4221, "end_byte": 4239, "start_point": [104, 4], "end_point": [104, 22], "text": "     blockSize100k"}, {"type": "expression_statement", "children": [{"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 4244, "end_byte": 4250, "start_point": [105, 4], "end_point": [105, 10], "text": "\n     "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 4250, "end_byte": 4251, "start_point": [105, 10], "end_point": [105, 11], "text": " "}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 4260, "end_byte": 4270, "start_point": [106, 8], "end_point": [106, 18], "text": "ILS_EXIST "}, {"type": "=", "children": [], "start_byte": 4271, "end_byte": 4272, "start_point": [106, 19], "end_point": [106, 20], "text": " "}, {"type": "boolean_literal", "children": [{"type": "false", "children": [], "start_byte": 4273, "end_byte": 4278, "start_point": [106, 21], "end_point": [106, 26], "text": "alse;"}], "start_byte": 4273, "end_byte": 4278, "start_point": [106, 21], "end_point": [106, 26], "text": "alse;"}], "start_byte": 4260, "end_byte": 4278, "start_point": [106, 8], "end_point": [106, 26], "text": "ILS_EXIST = false;"}, {"type": ";", "children": [], "start_byte": 4278, "end_byte": 4279, "start_point": [106, 26], "end_point": [106, 27], "text": "\n"}], "start_byte": 4260, "end_byte": 4279, "start_point": [106, 8], "end_point": [106, 27], "text": "ILS_EXIST = false;\n"}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 4288, "end_byte": 4304, "start_point": [107, 8], "end_point": [107, 24], "text": "NZ_FAILS_EXIST ="}, {"type": "=", "children": [], "start_byte": 4305, "end_byte": 4306, "start_point": [107, 25], "end_point": [107, 26], "text": "f"}, {"type": "boolean_literal", "children": [{"type": "false", "children": [], "start_byte": 4307, "end_byte": 4312, "start_point": [107, 27], "end_point": [107, 32], "text": "lse;\n"}], "start_byte": 4307, "end_byte": 4312, "start_point": [107, 27], "end_point": [107, 32], "text": "lse;\n"}], "start_byte": 4288, "end_byte": 4312, "start_point": [107, 8], "end_point": [107, 32], "text": "NZ_FAILS_EXIST = false;\n"}, {"type": ";", "children": [], "start_byte": 4312, "end_byte": 4313, "start_point": [107, 32], "end_point": [107, 33], "text": " "}], "start_byte": 4288, "end_byte": 4313, "start_point": [107, 8], "end_point": [107, 33], "text": "NZ_FAILS_EXIST = false;\n "}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 4322, "end_byte": 4337, "start_point": [108, 8], "end_point": [108, 23], "text": "M_FILE_NAMES = "}, {"type": "=", "children": [], "start_byte": 4338, "end_byte": 4339, "start_point": [108, 24], "end_point": [108, 25], "text": ";"}, {"type": "boolean_literal", "children": [{"type": "false", "children": [], "start_byte": 4340, "end_byte": 4345, "start_point": [108, 26], "end_point": [108, 31], "text": "     "}], "start_byte": 4340, "end_byte": 4345, "start_point": [108, 26], "end_point": [108, 31], "text": "     "}], "start_byte": 4322, "end_byte": 4345, "start_point": [108, 8], "end_point": [108, 31], "text": "M_FILE_NAMES = 0;\n     "}, {"type": ";", "children": [], "start_byte": 4345, "end_byte": 4346, "start_point": [108, 31], "end_point": [108, 32], "text": " "}], "start_byte": 4322, "end_byte": 4346, "start_point": [108, 8], "end_point": [108, 32], "text": "M_FILE_NAMES = 0;\n      "}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 4355, "end_byte": 4360, "start_point": [109, 8], "end_point": [109, 13], "text": "ES_PR"}, {"type": "=", "children": [], "start_byte": 4361, "end_byte": 4362, "start_point": [109, 14], "end_point": [109, 15], "text": "C"}, {"type": "boolean_literal", "children": [{"type": "true", "children": [], "start_byte": 4363, "end_byte": 4367, "start_point": [109, 16], "end_point": [109, 20], "text": "SSED"}], "start_byte": 4363, "end_byte": 4367, "start_point": [109, 16], "end_point": [109, 20], "text": "SSED"}], "start_byte": 4355, "end_byte": 4367, "start_point": [109, 8], "end_point": [109, 20], "text": "ES_PROCESSED"}, {"type": ";", "children": [], "start_byte": 4367, "end_byte": 4368, "start_point": [109, 20], "end_point": [109, 21], "text": " "}], "start_byte": 4355, "end_byte": 4368, "start_point": [109, 8], "end_point": [109, 21], "text": "ES_PROCESSED "}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 4377, "end_byte": 4386, "start_point": [110, 8], "end_point": [110, 17], "text": "    workF"}, {"type": "=", "children": [], "start_byte": 4387, "end_byte": 4388, "start_point": [110, 18], "end_point": [110, 19], "text": "c"}, {"type": "integer_literal", "children": [], "start_byte": 4389, "end_byte": 4390, "start_point": [110, 20], "end_point": [110, 21], "text": "o"}], "start_byte": 4377, "end_byte": 4390, "start_point": [110, 8], "end_point": [110, 21], "text": "    workFacto"}, {"type": ";", "children": [], "start_byte": 4390, "end_byte": 4391, "start_point": [110, 21], "end_point": [110, 22], "text": "r"}], "start_byte": 4377, "end_byte": 4391, "start_point": [110, 8], "end_point": [110, 22], "text": "    workFactor"}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 4400, "end_byte": 4413, "start_point": [111, 8], "end_point": [111, 21], "text": "      DELETE_"}, {"type": "=", "children": [], "start_byte": 4414, "end_byte": 4415, "start_point": [111, 22], "end_point": [111, 23], "text": "U"}, {"type": "integer_literal", "children": [], "start_byte": 4416, "end_byte": 4417, "start_point": [111, 24], "end_point": [111, 25], "text": "P"}], "start_byte": 4400, "end_byte": 4417, "start_point": [111, 8], "end_point": [111, 25], "text": "      DELETE_OUTP"}, {"type": ";", "children": [], "start_byte": 4417, "end_byte": 4418, "start_point": [111, 25], "end_point": [111, 26], "text": "U"}], "start_byte": 4400, "end_byte": 4418, "start_point": [111, 8], "end_point": [111, 26], "text": "      DELETE_OUTPU"}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 4427, "end_byte": 4443, "start_point": [112, 8], "end_point": [112, 24], "text": "RRUPT = false;\n "}, {"type": "=", "children": [], "start_byte": 4444, "end_byte": 4445, "start_point": [112, 25], "end_point": [112, 26], "text": " "}, {"type": "boolean_literal", "children": [{"type": "false", "children": [], "start_byte": 4446, "end_byte": 4451, "start_point": [112, 27], "end_point": [112, 32], "text": "    E"}], "start_byte": 4446, "end_byte": 4451, "start_point": [112, 27], "end_point": [112, 32], "text": "    E"}], "start_byte": 4427, "end_byte": 4451, "start_point": [112, 8], "end_point": [112, 32], "text": "RRUPT = false;\n        E"}, {"type": ";", "children": [], "start_byte": 4451, "end_byte": 4452, "start_point": [112, 32], "end_point": [112, 33], "text": "X"}], "start_byte": 4427, "end_byte": 4452, "start_point": [112, 8], "end_point": [112, 33], "text": "RRUPT = false;\n        EX"}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 4461, "end_byte": 4476, "start_point": [113, 8], "end_point": [113, 23], "text": "= 0;\n        OP"}, {"type": "=", "children": [], "start_byte": 4477, "end_byte": 4478, "start_point": [113, 24], "end_point": [113, 25], "text": "M"}, {"type": "boolean_literal", "children": [{"type": "false", "children": [], "start_byte": 4479, "end_byte": 4484, "start_point": [113, 26], "end_point": [113, 31], "text": "DE = "}], "start_byte": 4479, "end_byte": 4484, "start_point": [113, 26], "end_point": [113, 31], "text": "DE = "}], "start_byte": 4461, "end_byte": 4484, "start_point": [113, 8], "end_point": [113, 31], "text": "= 0;\n        OP_MODE = "}, {"type": ";", "children": [], "start_byte": 4484, "end_byte": 4485, "start_point": [113, 31], "end_point": [113, 32], "text": "1"}], "start_byte": 4461, "end_byte": 4485, "start_point": [113, 8], "end_point": [113, 32], "text": "= 0;\n        OP_MODE = 1"}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 4494, "end_byte": 4508, "start_point": [114, 8], "end_point": [114, 22], "text": " LONGEST_FILE_"}, {"type": "=", "children": [], "start_byte": 4509, "end_byte": 4510, "start_point": [114, 23], "end_point": [114, 24], "text": "A"}, {"type": "integer_literal", "children": [], "start_byte": 4511, "end_byte": 4512, "start_point": [114, 25], "end_point": [114, 26], "text": "E"}], "start_byte": 4494, "end_byte": 4512, "start_point": [114, 8], "end_point": [114, 26], "text": " LONGEST_FILE_NAME"}, {"type": ";", "children": [], "start_byte": 4512, "end_byte": 4513, "start_point": [114, 26], "end_point": [114, 27], "text": " "}], "start_byte": 4494, "end_byte": 4513, "start_point": [114, 8], "end_point": [114, 27], "text": " LONGEST_FILE_NAME "}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 4522, "end_byte": 4541, "start_point": [115, 8], "end_point": [115, 27], "text": "    \n    }\n\n    let"}, {"type": "=", "children": [], "start_byte": 4542, "end_byte": 4543, "start_point": [115, 28], "end_point": [115, 29], "text": "m"}, {"type": "integer_literal", "children": [], "start_byte": 4544, "end_byte": 4545, "start_point": [115, 30], "end_point": [115, 31], "text": "t"}], "start_byte": 4522, "end_byte": 4545, "start_point": [115, 8], "end_point": [115, 31], "text": "    \n    }\n\n    let mut"}, {"type": ";", "children": [], "start_byte": 4545, "end_byte": 4546, "start_point": [115, 31], "end_point": [115, 32], "text": " "}], "start_byte": 4522, "end_byte": 4546, "start_point": [115, 8], "end_point": [115, 32], "text": "    \n    }\n\n    let mut "}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 4555, "end_byte": 4565, "start_point": [116, 8], "end_point": [116, 18], "text": "  let mut "}, {"type": "=", "children": [], "start_byte": 4566, "end_byte": 4567, "start_point": [116, 19], "end_point": [116, 20], "text": " "}, {"type": "integer_literal", "children": [], "start_byte": 4568, "end_byte": 4570, "start_point": [116, 21], "end_point": [116, 23], "text": " 0"}], "start_byte": 4555, "end_byte": 4570, "start_point": [116, 8], "end_point": [116, 23], "text": "  let mut j = 0"}, {"type": ";", "children": [], "start_byte": 4570, "end_byte": 4571, "start_point": [116, 23], "end_point": [116, 24], "text": ";"}], "start_byte": 4555, "end_byte": 4571, "start_point": [116, 8], "end_point": [116, 24], "text": "  let mut j = 0;"}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 4580, "end_byte": 4606, "start_point": [117, 8], "end_point": [117, 34], "text": "ode = true;\n\n    // let mu"}, {"type": "=", "children": [], "start_byte": 4607, "end_byte": 4608, "start_point": [117, 35], "end_point": [117, 36], "text": " "}, {"type": "boolean_literal", "children": [{"type": "false", "children": [], "start_byte": 4609, "end_byte": 4614, "start_point": [117, 37], "end_point": [117, 42], "text": "n_nam"}], "start_byte": 4609, "end_byte": 4614, "start_point": [117, 37], "end_point": [117, 42], "text": "n_nam"}], "start_byte": 4580, "end_byte": 4614, "start_point": [117, 8], "end_point": [117, 42], "text": "ode = true;\n\n    // let mut in_nam"}, {"type": ";", "children": [], "start_byte": 4614, "end_byte": 4615, "start_point": [117, 42], "end_point": [117, 43], "text": "e"}], "start_byte": 4580, "end_byte": 4615, "start_point": [117, 8], "end_point": [117, 43], "text": "ode = true;\n\n    // let mut in_name"}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 4624, "end_byte": 4634, "start_point": [118, 8], "end_point": [118, 18], "text": "::from(\"(n"}, {"type": "=", "children": [], "start_byte": 4635, "end_byte": 4636, "start_point": [118, 19], "end_point": [118, 20], "text": "n"}, {"type": "integer_literal", "children": [], "start_byte": 4637, "end_byte": 4638, "start_point": [118, 21], "end_point": [118, 22], "text": ")"}], "start_byte": 4624, "end_byte": 4638, "start_point": [118, 8], "end_point": [118, 22], "text": "::from(\"(none)"}, {"type": ";", "children": [], "start_byte": 4638, "end_byte": 4639, "start_point": [118, 22], "end_point": [118, 23], "text": "\""}], "start_byte": 4624, "end_byte": 4639, "start_point": [118, 8], "end_point": [118, 23], "text": "::from(\"(none)\""}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 4648, "end_byte": 4655, "start_point": [119, 8], "end_point": [119, 15], "text": " let mu"}, {"type": "=", "children": [], "start_byte": 4656, "end_byte": 4657, "start_point": [119, 16], "end_point": [119, 17], "text": " "}, {"type": "integer_literal", "children": [], "start_byte": 4658, "end_byte": 4659, "start_point": [119, 18], "end_point": [119, 19], "text": "u"}], "start_byte": 4648, "end_byte": 4659, "start_point": [119, 8], "end_point": [119, 19], "text": " let mut ou"}, {"type": ";", "children": [], "start_byte": 4659, "end_byte": 4660, "start_point": [119, 19], "end_point": [119, 20], "text": "t"}], "start_byte": 4648, "end_byte": 4660, "start_point": [119, 8], "end_point": [119, 20], "text": " let mut out"}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 4669, "end_byte": 4686, "start_point": [120, 8], "end_point": [120, 25], "text": "tring::from(\"(non"}, {"type": "=", "children": [], "start_byte": 4687, "end_byte": 4688, "start_point": [120, 26], "end_point": [120, 27], "text": ")"}, {"type": "integer_literal", "children": [], "start_byte": 4689, "end_byte": 4690, "start_point": [120, 28], "end_point": [120, 29], "text": ")"}], "start_byte": 4669, "end_byte": 4690, "start_point": [120, 8], "end_point": [120, 29], "text": "tring::from(\"(none)\")"}, {"type": ";", "children": [], "start_byte": 4690, "end_byte": 4691, "start_point": [120, 29], "end_point": [120, 30], "text": ";"}], "start_byte": 4669, "end_byte": 4691, "start_point": [120, 8], "end_point": [120, 30], "text": "tring::from(\"(none)\");"}, {"type": "}", "children": [], "start_byte": 4705, "end_byte": 4706, "start_point": [122, 4], "end_point": [122, 5], "text": "t"}], "start_byte": 4250, "end_byte": 4706, "start_point": [105, 10], "end_point": [122, 5], "text": "   TEST_FAILS_EXIST = false;\n        UNZ_FAILS_EXIST = false;\n        NUM_FILE_NAMES = 0;\n        NUM_FILES_PROCESSED = 0;\n        workFactor = 30;\n        DELETE_OUTPUT_ON_INTERRUPT = false;\n        EXIT_VALUE = 0;\n        OP_MODE = 1;\n        LONGEST_FILE_NAME = 7;\n        \n    }\n\n    let mut i = 0;\n    let mut j = 0;\n\n    decode = true;\n\n    // let mut in_name = String::from(\"(none)\");\n    // let mut out_name = String::from(\"(none)\");\n    // let mut"}], "start_byte": 4244, "end_byte": 4706, "start_point": [105, 4], "end_point": [122, 5], "text": "\n        TEST_FAILS_EXIST = false;\n        UNZ_FAILS_EXIST = false;\n        NUM_FILE_NAMES = 0;\n        NUM_FILES_PROCESSED = 0;\n        workFactor = 30;\n        DELETE_OUTPUT_ON_INTERRUPT = false;\n        EXIT_VALUE = 0;\n        OP_MODE = 1;\n        LONGEST_FILE_NAME = 7;\n        \n    }\n\n    let mut i = 0;\n    let mut j = 0;\n\n    decode = true;\n\n    // let mut in_name = String::from(\"(none)\");\n    // let mut out_name = String::from(\"(none)\");\n    // let mut"}], "start_byte": 4244, "end_byte": 4706, "start_point": [105, 4], "end_point": [122, 5], "text": "\n        TEST_FAILS_EXIST = false;\n        UNZ_FAILS_EXIST = false;\n        NUM_FILE_NAMES = 0;\n        NUM_FILES_PROCESSED = 0;\n        workFactor = 30;\n        DELETE_OUTPUT_ON_INTERRUPT = false;\n        EXIT_VALUE = 0;\n        OP_MODE = 1;\n        LONGEST_FILE_NAME = 7;\n        \n    }\n\n    let mut i = 0;\n    let mut j = 0;\n\n    decode = true;\n\n    // let mut in_name = String::from(\"(none)\");\n    // let mut out_name = String::from(\"(none)\");\n    // let mut"}, {"type": "let_declaration", "children": [{"type": "let", "children": [], "start_byte": 4712, "end_byte": 4715, "start_point": [124, 4], "end_point": [124, 7], "text": "nam"}, {"type": "mutable_specifier", "children": [], "start_byte": 4716, "end_byte": 4719, "start_point": [124, 8], "end_point": [124, 11], "text": "_re"}, {"type": "identifier", "children": [], "start_byte": 4720, "end_byte": 4721, "start_point": [124, 12], "end_point": [124, 13], "text": "l"}, {"type": "=", "children": [], "start_byte": 4722, "end_byte": 4723, "start_point": [124, 14], "end_point": [124, 15], "text": "y"}, {"type": "integer_literal", "children": [], "start_byte": 4724, "end_byte": 4725, "start_point": [124, 16], "end_point": [124, 17], "text": "="}, {"type": ";", "children": [], "start_byte": 4725, "end_byte": 4726, "start_point": [124, 17], "end_point": [124, 18], "text": " "}], "start_byte": 4712, "end_byte": 4726, "start_point": [124, 4], "end_point": [124, 18], "text": "name_really = "}, {"type": "let_declaration", "children": [{"type": "let", "children": [], "start_byte": 4731, "end_byte": 4734, "start_point": [125, 4], "end_point": [125, 7], "text": "0]."}, {"type": "mutable_specifier", "children": [], "start_byte": 4735, "end_byte": 4738, "start_point": [125, 8], "end_point": [125, 11], "text": "lon"}, {"type": "identifier", "children": [], "start_byte": 4739, "end_byte": 4740, "start_point": [125, 12], "end_point": [125, 13], "text": "("}, {"type": "=", "children": [], "start_byte": 4741, "end_byte": 4742, "start_point": [125, 14], "end_point": [125, 15], "text": ";"}, {"type": "integer_literal", "children": [], "start_byte": 4743, "end_byte": 4744, "start_point": [125, 16], "end_point": [125, 17], "text": " "}, {"type": ";", "children": [], "start_byte": 4744, "end_byte": 4745, "start_point": [125, 17], "end_point": [125, 18], "text": " "}], "start_byte": 4731, "end_byte": 4745, "start_point": [125, 4], "end_point": [125, 18], "text": "0].clone();\n  "}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 4751, "end_byte": 4757, "start_point": [127, 4], "end_point": [127, 10], "text": "et pro"}, {"type": "=", "children": [], "start_byte": 4758, "end_byte": 4759, "start_point": [127, 11], "end_point": [127, 12], "text": "_"}, {"type": "boolean_literal", "children": [{"type": "true", "children": [], "start_byte": 4760, "end_byte": 4764, "start_point": [127, 13], "end_point": [127, 17], "text": "ame "}], "start_byte": 4760, "end_byte": 4764, "start_point": [127, 13], "end_point": [127, 17], "text": "ame "}], "start_byte": 4751, "end_byte": 4764, "start_point": [127, 4], "end_point": [127, 17], "text": "et prog_name "}, {"type": ";", "children": [], "start_byte": 4764, "end_byte": 4765, "start_point": [127, 17], "end_point": [127, 18], "text": "="}], "start_byte": 4751, "end_byte": 4765, "start_point": [127, 4], "end_point": [127, 18], "text": "et prog_name ="}, {"type": "line_comment", "children": [], "start_byte": 4771, "end_byte": 4815, "start_point": [129, 4], "end_point": [129, 48], "text": "_name_really;\n\n    // \u786e\u4fdd\u7c7b\u578b\u5927\u5c0f\u6b63\u786e\n    // // pri"}, {"type": "line_comment", "children": [], "start_byte": 4820, "end_byte": 4865, "start_point": [130, 4], "end_point": [130, 49], "text": "(\"121_main_\u68c0\u67e5\u6570\u636e\u7c7b\u578b\u5927\u5c0f\");\n    // if std::mem::si"}, {"type": "line_comment", "children": [], "start_byte": 4870, "end_byte": 4916, "start_point": [131, 4], "end_point": [131, 50], "text": "::<i32>() != 4 || std::mem::size_of::<u16>() !"}, {"type": "line_comment", "children": [], "start_byte": 4921, "end_byte": 4958, "start_point": [132, 4], "end_point": [132, 41], "text": "| std::mem::size_of::<char>() != 1 {\n"}, {"type": "line_comment", "children": [], "start_byte": 4964, "end_byte": 4991, "start_point": [134, 4], "end_point": [134, 31], "text": "     // println!(\"121_main_"}, {"type": "line_comment", "children": [], "start_byte": 4996, "end_byte": 5048, "start_point": [135, 4], "end_point": [135, 56], "text": "\u5c0f\u9519\u8bef\");\n    //     config_error();\n    //     return "}, {"type": "line_comment", "children": [], "start_byte": 5053, "end_byte": 5163, "start_point": [136, 4], "end_point": [136, 114], "text": "o::Error::new(io::ErrorKind::Other, \"\u914d\u7f6e\u9519\u8bef\"));\n    // }\n\n\n    unsafe {\n        let prog_name_str = env::args()."}, {"type": "line_comment", "children": [], "start_byte": 5168, "end_byte": 5224, "start_point": [137, 4], "end_point": [137, 60], "text": ").unwrap_or_else(|| String::from(\"(unknown)\"));\n        "}, {"type": "line_comment", "children": [], "start_byte": 5229, "end_byte": 5251, "start_point": [138, 4], "end_point": [138, 26], "text": "NAME_REALLY = string_t"}, {"type": "line_comment", "children": [], "start_byte": 5256, "end_byte": 5328, "start_point": [139, 4], "end_point": [139, 76], "text": "array_1034(prog_name_str.clone());\n        let p_str = Path::new(&prog_n"}, {"type": "line_comment", "children": [], "start_byte": 5333, "end_byte": 5337, "start_point": [140, 4], "end_point": [140, 8], "text": "tr)\n"}, {"type": "expression_statement", "children": [{"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 5344, "end_byte": 5350, "start_point": [143, 4], "end_point": [143, 10], "text": "     ."}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 5351, "end_byte": 5352, "start_point": [143, 11], "end_point": [143, 12], "text": "i"}, {"type": "let_declaration", "children": [{"type": "let", "children": [], "start_byte": 5361, "end_byte": 5364, "start_point": [144, 8], "end_point": [144, 11], "text": "\n  "}, {"type": "identifier", "children": [], "start_byte": 5365, "end_byte": 5378, "start_point": [144, 12], "end_point": [144, 25], "text": "         .unw"}, {"type": "=", "children": [], "start_byte": 5379, "end_byte": 5380, "start_point": [144, 26], "end_point": [144, 27], "text": "a"}, {"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "call_expression", "children": [{"type": "scoped_identifier", "children": [{"type": "identifier", "children": [], "start_byte": 5381, "end_byte": 5384, "start_point": [144, 28], "end_point": [144, 31], "text": "()\n"}, {"type": "::", "children": [], "start_byte": 5384, "end_byte": 5386, "start_point": [144, 31], "end_point": [144, 33], "text": "  "}, {"type": "identifier", "children": [], "start_byte": 5386, "end_byte": 5390, "start_point": [144, 33], "end_point": [144, 37], "text": "    "}], "start_byte": 5381, "end_byte": 5390, "start_point": [144, 28], "end_point": [144, 37], "text": "()\n      "}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 5390, "end_byte": 5391, "start_point": [144, 37], "end_point": [144, 38], "text": " "}, {"type": ")", "children": [], "start_byte": 5391, "end_byte": 5392, "start_point": [144, 38], "end_point": [144, 39], "text": " "}], "start_byte": 5390, "end_byte": 5392, "start_point": [144, 37], "end_point": [144, 39], "text": "  "}], "start_byte": 5381, "end_byte": 5392, "start_point": [144, 28], "end_point": [144, 39], "text": "()\n        "}, {"type": ".", "children": [], "start_byte": 5392, "end_byte": 5393, "start_point": [144, 39], "end_point": [144, 40], "text": " "}, {"type": "field_identifier", "children": [], "start_byte": 5393, "end_byte": 5396, "start_point": [144, 40], "end_point": [144, 43], "text": "   "}], "start_byte": 5381, "end_byte": 5396, "start_point": [144, 28], "end_point": [144, 43], "text": "()\n            "}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 5396, "end_byte": 5397, "start_point": [144, 43], "end_point": [144, 44], "text": "."}, {"type": "integer_literal", "children": [], "start_byte": 5397, "end_byte": 5398, "start_point": [144, 44], "end_point": [144, 45], "text": "t"}, {"type": ")", "children": [], "start_byte": 5398, "end_byte": 5399, "start_point": [144, 45], "end_point": [144, 46], "text": "o"}], "start_byte": 5396, "end_byte": 5399, "start_point": [144, 43], "end_point": [144, 46], "text": ".to"}], "start_byte": 5381, "end_byte": 5399, "start_point": [144, 28], "end_point": [144, 46], "text": "()\n            .to"}, {"type": ".", "children": [], "start_byte": 5399, "end_byte": 5400, "start_point": [144, 46], "end_point": [144, 47], "text": "_"}, {"type": "field_identifier", "children": [], "start_byte": 5400, "end_byte": 5414, "start_point": [144, 47], "end_point": [144, 61], "text": "str()\n        "}], "start_byte": 5381, "end_byte": 5414, "start_point": [144, 28], "end_point": [144, 61], "text": "()\n            .to_str()\n        "}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 5414, "end_byte": 5415, "start_point": [144, 61], "end_point": [144, 62], "text": " "}, {"type": "closure_expression", "children": [{"type": "closure_parameters", "children": [{"type": "|", "children": [], "start_byte": 5415, "end_byte": 5416, "start_point": [144, 62], "end_point": [144, 63], "text": " "}, {"type": "|", "children": [], "start_byte": 5416, "end_byte": 5417, "start_point": [144, 63], "end_point": [144, 64], "text": " "}], "start_byte": 5415, "end_byte": 5417, "start_point": [144, 62], "end_point": [144, 64], "text": "  "}, {"type": "call_expression", "children": [{"type": "scoped_identifier", "children": [{"type": "identifier", "children": [], "start_byte": 5418, "end_byte": 5424, "start_point": [144, 65], "end_point": [144, 71], "text": ".unwra"}, {"type": "::", "children": [], "start_byte": 5424, "end_byte": 5426, "start_point": [144, 71], "end_point": [144, 73], "text": "p("}, {"type": "identifier", "children": [], "start_byte": 5426, "end_byte": 5430, "start_point": [144, 73], "end_point": [144, 77], "text": ");\n "}], "start_byte": 5418, "end_byte": 5430, "start_point": [144, 65], "end_point": [144, 77], "text": ".unwrap();\n "}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 5430, "end_byte": 5431, "start_point": [144, 77], "end_point": [144, 78], "text": " "}, {"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 5431, "end_byte": 5432, "start_point": [144, 78], "end_point": [144, 79], "text": " "}, {"type": "\"", "children": [], "start_byte": 5441, "end_byte": 5442, "start_point": [144, 88], "end_point": [144, 89], "text": "_"}], "start_byte": 5431, "end_byte": 5442, "start_point": [144, 78], "end_point": [144, 89], "text": "      PROG_"}, {"type": ")", "children": [], "start_byte": 5442, "end_byte": 5443, "start_point": [144, 89], "end_point": [144, 90], "text": "N"}], "start_byte": 5430, "end_byte": 5443, "start_point": [144, 77], "end_point": [144, 90], "text": "       PROG_N"}], "start_byte": 5418, "end_byte": 5443, "start_point": [144, 65], "end_point": [144, 90], "text": ".unwrap();\n        PROG_N"}], "start_byte": 5415, "end_byte": 5443, "start_point": [144, 62], "end_point": [144, 90], "text": "   .unwrap();\n        PROG_N"}, {"type": ")", "children": [], "start_byte": 5443, "end_byte": 5444, "start_point": [144, 90], "end_point": [144, 91], "text": "A"}], "start_byte": 5414, "end_byte": 5444, "start_point": [144, 61], "end_point": [144, 91], "text": "    .unwrap();\n        PROG_NA"}], "start_byte": 5381, "end_byte": 5444, "start_point": [144, 28], "end_point": [144, 91], "text": "()\n            .to_str()\n            .unwrap();\n        PROG_NA"}, {"type": ";", "children": [], "start_byte": 5444, "end_byte": 5445, "start_point": [144, 91], "end_point": [144, 92], "text": "M"}], "start_byte": 5361, "end_byte": 5445, "start_point": [144, 8], "end_point": [144, 92], "text": "\n            .unwrap()\n            .to_str()\n            .unwrap();\n        PROG_NAM"}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 5454, "end_byte": 5470, "start_point": [145, 8], "end_point": [145, 24], "text": "g_to_u8_array_20"}, {"type": "=", "children": [], "start_byte": 5471, "end_byte": 5472, "start_point": [145, 25], "end_point": [145, 26], "text": "0"}, {"type": "call_expression", "children": [{"type": "identifier", "children": [], "start_byte": 5473, "end_byte": 5496, "start_point": [145, 27], "end_point": [145, 50], "text": "p_str.to_string());\n   "}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 5496, "end_byte": 5497, "start_point": [145, 50], "end_point": [145, 51], "text": " "}, {"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 5497, "end_byte": 5510, "start_point": [145, 51], "end_point": [145, 64], "text": "}\n\n    // \u5904\u7406\u547d"}, {"type": ".", "children": [], "start_byte": 5510, "end_byte": 5511, "start_point": [145, 64], "end_point": [145, 65], "text": "\u4ee4"}, {"type": "field_identifier", "children": [], "start_byte": 5511, "end_byte": 5516, "start_point": [145, 65], "end_point": [145, 70], "text": "\u884c\u53c2\u6570\n "}], "start_byte": 5497, "end_byte": 5516, "start_point": [145, 51], "end_point": [145, 70], "text": "}\n\n    // \u5904\u7406\u547d\u4ee4\u884c\u53c2\u6570\n "}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 5516, "end_byte": 5517, "start_point": [145, 70], "end_point": [145, 71], "text": " "}, {"type": ")", "children": [], "start_byte": 5517, "end_byte": 5518, "start_point": [145, 71], "end_point": [145, 72], "text": " "}], "start_byte": 5516, "end_byte": 5518, "start_point": [145, 70], "end_point": [145, 72], "text": "  "}], "start_byte": 5497, "end_byte": 5518, "start_point": [145, 51], "end_point": [145, 72], "text": "}\n\n    // \u5904\u7406\u547d\u4ee4\u884c\u53c2\u6570\n   "}, {"type": ")", "children": [], "start_byte": 5518, "end_byte": 5519, "start_point": [145, 72], "end_point": [145, 73], "text": " "}], "start_byte": 5496, "end_byte": 5519, "start_point": [145, 50], "end_point": [145, 73], "text": " }\n\n    // \u5904\u7406\u547d\u4ee4\u884c\u53c2\u6570\n    "}], "start_byte": 5473, "end_byte": 5519, "start_point": [145, 27], "end_point": [145, 73], "text": "p_str.to_string());\n    }\n\n    // \u5904\u7406\u547d\u4ee4\u884c\u53c2\u6570\n    "}], "start_byte": 5454, "end_byte": 5519, "start_point": [145, 8], "end_point": [145, 73], "text": "g_to_u8_array_2000(p_str.to_string());\n    }\n\n    // \u5904\u7406\u547d\u4ee4\u884c\u53c2\u6570\n    "}, {"type": ";", "children": [], "start_byte": 5519, "end_byte": 5520, "start_point": [145, 73], "end_point": [145, 74], "text": "/"}], "start_byte": 5454, "end_byte": 5520, "start_point": [145, 8], "end_point": [145, 74], "text": "g_to_u8_array_2000(p_str.to_string());\n    }\n\n    // \u5904\u7406\u547d\u4ee4\u884c\u53c2\u6570\n    /"}, {"type": "let_declaration", "children": [{"type": "let", "children": [], "start_byte": 5529, "end_byte": 5532, "start_point": [146, 8], "end_point": [146, 11], "text": "!(\""}, {"type": "identifier", "children": [], "start_byte": 5533, "end_byte": 5538, "start_point": [146, 12], "end_point": [146, 17], "text": "21_ma"}, {"type": "=", "children": [], "start_byte": 5539, "end_byte": 5540, "start_point": [146, 18], "end_point": [146, 19], "text": "n"}, {"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "call_expression", "children": [{"type": "scoped_identifier", "children": [{"type": "identifier", "children": [], "start_byte": 5541, "end_byte": 5545, "start_point": [146, 20], "end_point": [146, 24], "text": "\u5f00\u59cb\u5904\u7406"}, {"type": "::", "children": [], "start_byte": 5545, "end_byte": 5547, "start_point": [146, 24], "end_point": [146, 26], "text": "\u547d\u4ee4"}, {"type": "identifier", "children": [], "start_byte": 5547, "end_byte": 5550, "start_point": [146, 26], "end_point": [146, 29], "text": "\u884c\u53c2\u6570"}], "start_byte": 5541, "end_byte": 5550, "start_point": [146, 20], "end_point": [146, 29], "text": "\u5f00\u59cb\u5904\u7406\u547d\u4ee4\u884c\u53c2\u6570"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 5550, "end_byte": 5551, "start_point": [146, 29], "end_point": [146, 30], "text": "\""}, {"type": "reference_expression", "children": [{"type": "&", "children": [], "start_byte": 5551, "end_byte": 5552, "start_point": [146, 30], "end_point": [146, 31], "text": ")"}, {"type": "identifier", "children": [], "start_byte": 5552, "end_byte": 5565, "start_point": [146, 31], "end_point": [146, 44], "text": ";\n    let mut"}], "start_byte": 5551, "end_byte": 5565, "start_point": [146, 30], "end_point": [146, 44], "text": ");\n    let mut"}, {"type": ")", "children": [], "start_byte": 5565, "end_byte": 5566, "start_point": [146, 44], "end_point": [146, 45], "text": " "}], "start_byte": 5550, "end_byte": 5566, "start_point": [146, 29], "end_point": [146, 45], "text": "\");\n    let mut "}], "start_byte": 5541, "end_byte": 5566, "start_point": [146, 20], "end_point": [146, 45], "text": "\u5f00\u59cb\u5904\u7406\u547d\u4ee4\u884c\u53c2\u6570\");\n    let mut "}, {"type": ".", "children": [], "start_byte": 5579, "end_byte": 5580, "start_point": [147, 12], "end_point": [147, 13], "text": "m"}, {"type": "field_identifier", "children": [], "start_byte": 5580, "end_byte": 5589, "start_point": [147, 13], "end_point": [147, 22], "text": "e(Box::ne"}], "start_byte": 5541, "end_byte": 5589, "start_point": [146, 20], "end_point": [147, 22], "text": "\u5f00\u59cb\u5904\u7406\u547d\u4ee4\u884c\u53c2\u6570\");\n    let mut arg_list = Some(Box::ne"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 5589, "end_byte": 5590, "start_point": [147, 22], "end_point": [147, 23], "text": "w"}, {"type": ")", "children": [], "start_byte": 5590, "end_byte": 5591, "start_point": [147, 23], "end_point": [147, 24], "text": "("}], "start_byte": 5589, "end_byte": 5591, "start_point": [147, 22], "end_point": [147, 24], "text": "w("}], "start_byte": 5541, "end_byte": 5591, "start_point": [146, 20], "end_point": [147, 24], "text": "\u5f00\u59cb\u5904\u7406\u547d\u4ee4\u884c\u53c2\u6570\");\n    let mut arg_list = Some(Box::new("}, {"type": ".", "children": [], "start_byte": 5604, "end_byte": 5605, "start_point": [148, 12], "end_point": [148, 13], "text": "("}, {"type": "field_identifier", "children": [], "start_byte": 5605, "end_byte": 5611, "start_point": [148, 13], "end_point": [148, 19], "text": ")));\n "}], "start_byte": 5541, "end_byte": 5611, "start_point": [146, 20], "end_point": [148, 19], "text": "\u5f00\u59cb\u5904\u7406\u547d\u4ee4\u884c\u53c2\u6570\");\n    let mut arg_list = Some(Box::new(Cell::mk_cell()));\n "}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 5611, "end_byte": 5612, "start_point": [148, 19], "end_point": [148, 20], "text": " "}, {"type": ")", "children": [], "start_byte": 5612, "end_byte": 5613, "start_point": [148, 20], "end_point": [148, 21], "text": " "}], "start_byte": 5611, "end_byte": 5613, "start_point": [148, 19], "end_point": [148, 21], "text": "  "}], "start_byte": 5541, "end_byte": 5613, "start_point": [146, 20], "end_point": [148, 21], "text": "\u5f00\u59cb\u5904\u7406\u547d\u4ee4\u884c\u53c2\u6570\");\n    let mut arg_list = Some(Box::new(Cell::mk_cell()));\n   "}, {"type": ".", "children": [], "start_byte": 5626, "end_byte": 5627, "start_point": [149, 12], "end_point": [149, 13], "text": "a"}, {"type": "field_identifier", "children": [], "start_byte": 5627, "end_byte": 5633, "start_point": [149, 13], "end_point": [149, 19], "text": "gs_fro"}], "start_byte": 5541, "end_byte": 5633, "start_point": [146, 20], "end_point": [149, 19], "text": "\u5f00\u59cb\u5904\u7406\u547d\u4ee4\u884c\u53c2\u6570\");\n    let mut arg_list = Some(Box::new(Cell::mk_cell()));\n    Cell::add_flags_fro"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 5633, "end_byte": 5634, "start_point": [149, 19], "end_point": [149, 20], "text": "m"}, {"type": ")", "children": [], "start_byte": 5634, "end_byte": 5635, "start_point": [149, 20], "end_point": [149, 21], "text": "_"}], "start_byte": 5633, "end_byte": 5635, "start_point": [149, 19], "end_point": [149, 21], "text": "m_"}], "start_byte": 5541, "end_byte": 5635, "start_point": [146, 20], "end_point": [149, 21], "text": "\u5f00\u59cb\u5904\u7406\u547d\u4ee4\u884c\u53c2\u6570\");\n    let mut arg_list = Some(Box::new(Cell::mk_cell()));\n    Cell::add_flags_from_"}, {"type": ".", "children": [], "start_byte": 5648, "end_byte": 5649, "start_point": [150, 12], "end_point": [150, 13], "text": "a"}, {"type": "field_identifier", "children": [], "start_byte": 5649, "end_byte": 5655, "start_point": [150, 13], "end_point": [150, 19], "text": "rg_lis"}], "start_byte": 5541, "end_byte": 5655, "start_point": [146, 20], "end_point": [150, 19], "text": "\u5f00\u59cb\u5904\u7406\u547d\u4ee4\u884c\u53c2\u6570\");\n    let mut arg_list = Some(Box::new(Cell::mk_cell()));\n    Cell::add_flags_from_env_var(&mut arg_lis"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 5655, "end_byte": 5656, "start_point": [150, 19], "end_point": [150, 20], "text": "t"}, {"type": ")", "children": [], "start_byte": 5656, "end_byte": 5657, "start_point": [150, 20], "end_point": [150, 21], "text": ","}], "start_byte": 5655, "end_byte": 5657, "start_point": [150, 19], "end_point": [150, 21], "text": "t,"}], "start_byte": 5541, "end_byte": 5657, "start_point": [146, 20], "end_point": [150, 21], "text": "\u5f00\u59cb\u5904\u7406\u547d\u4ee4\u884c\u53c2\u6570\");\n    let mut arg_list = Some(Box::new(Cell::mk_cell()));\n    Cell::add_flags_from_env_var(&mut arg_list,"}, {"type": ";", "children": [], "start_byte": 5657, "end_byte": 5658, "start_point": [150, 21], "end_point": [150, 22], "text": " "}], "start_byte": 5529, "end_byte": 5658, "start_point": [146, 8], "end_point": [150, 22], "text": "!(\"121_main_\u5f00\u59cb\u5904\u7406\u547d\u4ee4\u884c\u53c2\u6570\");\n    let mut arg_list = Some(Box::new(Cell::mk_cell()));\n    Cell::add_flags_from_env_var(&mut arg_list, "}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 5667, "end_byte": 5676, "start_point": [151, 8], "end_point": [151, 17], "text": "\n    // p"}, {"type": "=", "children": [], "start_byte": 5677, "end_byte": 5678, "start_point": [151, 18], "end_point": [151, 19], "text": "i"}, {"type": "call_expression", "children": [{"type": "identifier", "children": [], "start_byte": 5679, "end_byte": 5702, "start_point": [151, 20], "end_point": [151, 43], "text": "tln!(\"121_main_\u6dfb\u52a0\u73af\u5883\u53d8\u91cf B"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 5702, "end_byte": 5703, "start_point": [151, 43], "end_point": [151, 44], "text": "Z"}, {"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 5703, "end_byte": 5708, "start_point": [151, 44], "end_point": [151, 49], "text": "IP2\")"}, {"type": ".", "children": [], "start_byte": 5708, "end_byte": 5709, "start_point": [151, 49], "end_point": [151, 50], "text": ";"}, {"type": "field_identifier", "children": [], "start_byte": 5709, "end_byte": 5718, "start_point": [151, 50], "end_point": [151, 59], "text": "\n\n    Cel"}], "start_byte": 5703, "end_byte": 5718, "start_point": [151, 44], "end_point": [151, 59], "text": "IP2\");\n\n    Cel"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 5718, "end_byte": 5719, "start_point": [151, 59], "end_point": [151, 60], "text": "l"}, {"type": ")", "children": [], "start_byte": 5719, "end_byte": 5720, "start_point": [151, 60], "end_point": [151, 61], "text": ":"}], "start_byte": 5718, "end_byte": 5720, "start_point": [151, 59], "end_point": [151, 61], "text": "l:"}], "start_byte": 5703, "end_byte": 5720, "start_point": [151, 44], "end_point": [151, 61], "text": "IP2\");\n\n    Cell:"}, {"type": ")", "children": [], "start_byte": 5720, "end_byte": 5721, "start_point": [151, 61], "end_point": [151, 62], "text": ":"}], "start_byte": 5702, "end_byte": 5721, "start_point": [151, 43], "end_point": [151, 62], "text": "ZIP2\");\n\n    Cell::"}], "start_byte": 5679, "end_byte": 5721, "start_point": [151, 20], "end_point": [151, 62], "text": "tln!(\"121_main_\u6dfb\u52a0\u73af\u5883\u53d8\u91cf BZIP2\");\n\n    Cell::"}], "start_byte": 5667, "end_byte": 5721, "start_point": [151, 8], "end_point": [151, 62], "text": "\n    // println!(\"121_main_\u6dfb\u52a0\u73af\u5883\u53d8\u91cf BZIP2\");\n\n    Cell::"}, {"type": ";", "children": [], "start_byte": 5721, "end_byte": 5722, "start_point": [151, 62], "end_point": [151, 63], "text": "a"}], "start_byte": 5667, "end_byte": 5722, "start_point": [151, 8], "end_point": [151, 63], "text": "\n    // println!(\"121_main_\u6dfb\u52a0\u73af\u5883\u53d8\u91cf BZIP2\");\n\n    Cell::a"}, {"type": "}", "children": [], "start_byte": 5727, "end_byte": 5728, "start_point": [152, 4], "end_point": [152, 5], "text": "a"}], "start_byte": 5351, "end_byte": 5728, "start_point": [143, 11], "end_point": [152, 5], "text": "ile_name()\n            .unwrap()\n            .to_str()\n            .unwrap();\n        PROG_NAME = string_to_u8_array_2000(p_str.to_string());\n    }\n\n    // \u5904\u7406\u547d\u4ee4\u884c\u53c2\u6570\n    // println!(\"121_main_\u5f00\u59cb\u5904\u7406\u547d\u4ee4\u884c\u53c2\u6570\");\n    let mut arg_list = Some(Box::new(Cell::mk_cell()));\n    Cell::add_flags_from_env_var(&mut arg_list, \"BZIP2\");\n    // println!(\"121_main_\u6dfb\u52a0\u73af\u5883\u53d8\u91cf BZIP2\");\n\n    Cell::add_fla"}], "start_byte": 5344, "end_byte": 5728, "start_point": [143, 4], "end_point": [152, 5], "text": "     .file_name()\n            .unwrap()\n            .to_str()\n            .unwrap();\n        PROG_NAME = string_to_u8_array_2000(p_str.to_string());\n    }\n\n    // \u5904\u7406\u547d\u4ee4\u884c\u53c2\u6570\n    // println!(\"121_main_\u5f00\u59cb\u5904\u7406\u547d\u4ee4\u884c\u53c2\u6570\");\n    let mut arg_list = Some(Box::new(Cell::mk_cell()));\n    Cell::add_flags_from_env_var(&mut arg_list, \"BZIP2\");\n    // println!(\"121_main_\u6dfb\u52a0\u73af\u5883\u53d8\u91cf BZIP2\");\n\n    Cell::add_fla"}], "start_byte": 5344, "end_byte": 5728, "start_point": [143, 4], "end_point": [152, 5], "text": "     .file_name()\n            .unwrap()\n            .to_str()\n            .unwrap();\n        PROG_NAME = string_to_u8_array_2000(p_str.to_string());\n    }\n\n    // \u5904\u7406\u547d\u4ee4\u884c\u53c2\u6570\n    // println!(\"121_main_\u5f00\u59cb\u5904\u7406\u547d\u4ee4\u884c\u53c2\u6570\");\n    let mut arg_list = Some(Box::new(Cell::mk_cell()));\n    Cell::add_flags_from_env_var(&mut arg_list, \"BZIP2\");\n    // println!(\"121_main_\u6dfb\u52a0\u73af\u5883\u53d8\u91cf BZIP2\");\n\n    Cell::add_fla"}, {"type": "line_comment", "children": [], "start_byte": 5734, "end_byte": 5758, "start_point": [154, 4], "end_point": [154, 28], "text": "m_env_var(&mut arg_list,"}, {"type": "line_comment", "children": [], "start_byte": 5763, "end_byte": 5815, "start_point": [155, 4], "end_point": [155, 56], "text": "P\");\n    // println!(\"121_main_\u6dfb\u52a0\u73af\u5883\u53d8\u91cf BZIP\");\n\n    f"}, {"type": "let_declaration", "children": [{"type": "let", "children": [], "start_byte": 5820, "end_byte": 5823, "start_point": [156, 4], "end_point": [156, 7], "text": "g i"}, {"type": "mutable_specifier", "children": [], "start_byte": 5824, "end_byte": 5827, "start_point": [156, 8], "end_point": [156, 11], "text": " ar"}, {"type": "identifier", "children": [], "start_byte": 5828, "end_byte": 5836, "start_point": [156, 12], "end_point": [156, 20], "text": "v.iter()"}, {"type": "=", "children": [], "start_byte": 5837, "end_byte": 5838, "start_point": [156, 21], "end_point": [156, 22], "text": "s"}, {"type": "call_expression", "children": [{"type": "identifier", "children": [], "start_byte": 5839, "end_byte": 5843, "start_point": [156, 23], "end_point": [156, 27], "text": "ip(1"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 5843, "end_byte": 5844, "start_point": [156, 27], "end_point": [156, 28], "text": ")"}, {"type": "call_expression", "children": [{"type": "scoped_identifier", "children": [{"type": "identifier", "children": [], "start_byte": 5844, "end_byte": 5847, "start_point": [156, 28], "end_point": [156, 31], "text": " {\n"}, {"type": "::", "children": [], "start_byte": 5847, "end_byte": 5849, "start_point": [156, 31], "end_point": [156, 33], "text": "  "}, {"type": "identifier", "children": [], "start_byte": 5849, "end_byte": 5852, "start_point": [156, 33], "end_point": [156, 36], "text": "   "}], "start_byte": 5844, "end_byte": 5852, "start_point": [156, 28], "end_point": [156, 36], "text": " {\n     "}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 5852, "end_byte": 5853, "start_point": [156, 36], "end_point": [156, 37], "text": " "}, {"type": "call_expression", "children": [{"type": "scoped_identifier", "children": [{"type": "identifier", "children": [], "start_byte": 5853, "end_byte": 5857, "start_point": [156, 37], "end_point": [156, 41], "text": "  //"}, {"type": "::", "children": [], "start_byte": 5857, "end_byte": 5859, "start_point": [156, 41], "end_point": [156, 43], "text": " p"}, {"type": "identifier", "children": [], "start_byte": 5859, "end_byte": 5866, "start_point": [156, 43], "end_point": [156, 50], "text": "rintln!"}], "start_byte": 5853, "end_byte": 5866, "start_point": [156, 37], "end_point": [156, 50], "text": "  // println!"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 5866, "end_byte": 5867, "start_point": [156, 50], "end_point": [156, 51], "text": "("}, {"type": ")", "children": [], "start_byte": 5867, "end_byte": 5868, "start_point": [156, 51], "end_point": [156, 52], "text": "\""}], "start_byte": 5866, "end_byte": 5868, "start_point": [156, 50], "end_point": [156, 52], "text": "(\""}], "start_byte": 5853, "end_byte": 5868, "start_point": [156, 37], "end_point": [156, 52], "text": "  // println!(\""}, {"type": ")", "children": [], "start_byte": 5868, "end_byte": 5869, "start_point": [156, 52], "end_point": [156, 53], "text": "1"}], "start_byte": 5852, "end_byte": 5869, "start_point": [156, 36], "end_point": [156, 53], "text": "   // println!(\"1"}], "start_byte": 5844, "end_byte": 5869, "start_point": [156, 28], "end_point": [156, 53], "text": " {\n        // println!(\"1"}, {"type": ")", "children": [], "start_byte": 5869, "end_byte": 5870, "start_point": [156, 53], "end_point": [156, 54], "text": "2"}], "start_byte": 5843, "end_byte": 5870, "start_point": [156, 27], "end_point": [156, 54], "text": ") {\n        // println!(\"12"}], "start_byte": 5839, "end_byte": 5870, "start_point": [156, 23], "end_point": [156, 54], "text": "ip(1) {\n        // println!(\"12"}, {"type": ";", "children": [], "start_byte": 5870, "end_byte": 5871, "start_point": [156, 54], "end_point": [156, 55], "text": "1"}], "start_byte": 5820, "end_byte": 5871, "start_point": [156, 4], "end_point": [156, 55], "text": "g in argv.iter().skip(1) {\n        // println!(\"121"}, {"type": "expression_statement", "children": [{"type": "call_expression", "children": [{"type": "scoped_identifier", "children": [{"type": "identifier", "children": [], "start_byte": 5876, "end_byte": 5880, "start_point": [157, 4], "end_point": [157, 8], "text": "_\u5904\u7406\u53c2"}, {"type": "::", "children": [], "start_byte": 5880, "end_byte": 5882, "start_point": [157, 8], "end_point": [157, 10], "text": "\u6570:"}, {"type": "identifier", "children": [], "start_byte": 5882, "end_byte": 5904, "start_point": [157, 10], "end_point": [157, 32], "text": " {}\", arg);\n        ar"}], "start_byte": 5876, "end_byte": 5904, "start_point": [157, 4], "end_point": [157, 32], "text": "_\u5904\u7406\u53c2\u6570: {}\", arg);\n        ar"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 5904, "end_byte": 5905, "start_point": [157, 32], "end_point": [157, 33], "text": "g"}, {"type": "reference_expression", "children": [{"type": "&", "children": [], "start_byte": 5905, "end_byte": 5906, "start_point": [157, 33], "end_point": [157, 34], "text": "_"}, {"type": "mutable_specifier", "children": [], "start_byte": 5906, "end_byte": 5909, "start_point": [157, 34], "end_point": [157, 37], "text": "lis"}, {"type": "identifier", "children": [], "start_byte": 5910, "end_byte": 5918, "start_point": [157, 38], "end_point": [157, 46], "text": " = Some("}], "start_byte": 5905, "end_byte": 5918, "start_point": [157, 33], "end_point": [157, 46], "text": "_list = Some("}, {"type": ",", "children": [], "start_byte": 5918, "end_byte": 5919, "start_point": [157, 46], "end_point": [157, 47], "text": "B"}, {"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 5920, "end_byte": 5921, "start_point": [157, 48], "end_point": [157, 49], "text": "x"}, {"type": "\"", "children": [], "start_byte": 5926, "end_byte": 5927, "start_point": [157, 54], "end_point": [157, 55], "text": "("}], "start_byte": 5920, "end_byte": 5927, "start_point": [157, 48], "end_point": [157, 55], "text": "x::new("}, {"type": ")", "children": [], "start_byte": 5927, "end_byte": 5928, "start_point": [157, 55], "end_point": [157, 56], "text": "a"}], "start_byte": 5904, "end_byte": 5928, "start_point": [157, 32], "end_point": [157, 56], "text": "g_list = Some(Box::new(a"}], "start_byte": 5876, "end_byte": 5928, "start_point": [157, 4], "end_point": [157, 56], "text": "_\u5904\u7406\u53c2\u6570: {}\", arg);\n        arg_list = Some(Box::new(a"}, {"type": ";", "children": [], "start_byte": 5928, "end_byte": 5929, "start_point": [157, 56], "end_point": [157, 57], "text": "r"}], "start_byte": 5876, "end_byte": 5929, "start_point": [157, 4], "end_point": [157, 57], "text": "_\u5904\u7406\u53c2\u6570: {}\", arg);\n        arg_list = Some(Box::new(ar"}, {"type": "line_comment", "children": [], "start_byte": 5934, "end_byte": 5983, "start_point": [158, 4], "end_point": [158, 53], "text": "t.take().unwrap_or_else(|| Box::new(Cell::mk_cell"}, {"type": "expression_statement", "children": [{"type": "call_expression", "children": [{"type": "scoped_identifier", "children": [{"type": "identifier", "children": [], "start_byte": 5989, "end_byte": 5993, "start_point": [160, 4], "end_point": [160, 8], "text": "noc_"}, {"type": "::", "children": [], "start_byte": 5993, "end_byte": 5995, "start_point": [160, 8], "end_point": [160, 10], "text": "st"}, {"type": "identifier", "children": [], "start_byte": 5995, "end_byte": 6017, "start_point": [160, 10], "end_point": [160, 32], "text": "ring(arg)));\n    }\n\n  "}], "start_byte": 5989, "end_byte": 6017, "start_point": [160, 4], "end_point": [160, 32], "text": "noc_string(arg)));\n    }\n\n  "}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 6017, "end_byte": 6018, "start_point": [160, 32], "end_point": [160, 33], "text": " "}, {"type": "reference_expression", "children": [{"type": "&", "children": [], "start_byte": 6018, "end_byte": 6019, "start_point": [160, 33], "end_point": [160, 34], "text": " "}, {"type": "mutable_specifier", "children": [], "start_byte": 6019, "end_byte": 6022, "start_point": [160, 34], "end_point": [160, 37], "text": "// "}, {"type": "identifier", "children": [], "start_byte": 6023, "end_byte": 6031, "start_point": [160, 38], "end_point": [160, 46], "text": "rintln!("}], "start_byte": 6018, "end_byte": 6031, "start_point": [160, 33], "end_point": [160, 46], "text": " // println!("}, {"type": ",", "children": [], "start_byte": 6031, "end_byte": 6032, "start_point": [160, 46], "end_point": [160, 47], "text": "\""}, {"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 6033, "end_byte": 6034, "start_point": [160, 48], "end_point": [160, 49], "text": "f"}, {"type": "\"", "children": [], "start_byte": 6038, "end_byte": 6039, "start_point": [160, 53], "end_point": [160, 54], "text": "d"}], "start_byte": 6033, "end_byte": 6039, "start_point": [160, 48], "end_point": [160, 54], "text": "fter d"}, {"type": ")", "children": [], "start_byte": 6039, "end_byte": 6040, "start_point": [160, 54], "end_point": [160, 55], "text": "o"}], "start_byte": 6017, "end_byte": 6040, "start_point": [160, 32], "end_point": [160, 55], "text": "  // println!(\"After do"}], "start_byte": 5989, "end_byte": 6040, "start_point": [160, 4], "end_point": [160, 55], "text": "noc_string(arg)));\n    }\n\n    // println!(\"After do"}, {"type": ";", "children": [], "start_byte": 6040, "end_byte": 6041, "start_point": [160, 55], "end_point": [160, 56], "text": "i"}], "start_byte": 5989, "end_byte": 6041, "start_point": [160, 4], "end_point": [160, 56], "text": "noc_string(arg)));\n    }\n\n    // println!(\"After doi"}, {"type": "line_comment", "children": [], "start_byte": 6046, "end_byte": 6094, "start_point": [161, 4], "end_point": [161, 52], "text": "th arg_list\");\n    if let Some(ref cell) = arg_l"}, {"type": "expression_statement", "children": [{"type": "for_expression", "children": [{"type": "for", "children": [], "start_byte": 6100, "end_byte": 6103, "start_point": [163, 4], "end_point": [163, 7], "text": "   "}, {"type": "identifier", "children": [], "start_byte": 6104, "end_byte": 6107, "start_point": [163, 8], "end_point": [163, 11], "text": "   "}, {"type": "in", "children": [], "start_byte": 6108, "end_byte": 6110, "start_point": [163, 12], "end_point": [163, 14], "text": "ce"}, {"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 6111, "end_byte": 6115, "start_point": [163, 15], "end_point": [163, 19], "text": "l.pr"}, {"type": ".", "children": [], "start_byte": 6115, "end_byte": 6116, "start_point": [163, 19], "end_point": [163, 20], "text": "i"}, {"type": "field_identifier", "children": [], "start_byte": 6116, "end_byte": 6120, "start_point": [163, 20], "end_point": [163, 24], "text": "ntLi"}], "start_byte": 6111, "end_byte": 6120, "start_point": [163, 15], "end_point": [163, 24], "text": "l.printLi"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 6120, "end_byte": 6121, "start_point": [163, 24], "end_point": [163, 25], "text": "n"}, {"type": ")", "children": [], "start_byte": 6121, "end_byte": 6122, "start_point": [163, 25], "end_point": [163, 26], "text": "k"}], "start_byte": 6120, "end_byte": 6122, "start_point": [163, 24], "end_point": [163, 26], "text": "nk"}], "start_byte": 6111, "end_byte": 6122, "start_point": [163, 15], "end_point": [163, 26], "text": "l.printLink"}, {"type": ".", "children": [], "start_byte": 6122, "end_byte": 6123, "start_point": [163, 26], "end_point": [163, 27], "text": "L"}, {"type": "field_identifier", "children": [], "start_byte": 6123, "end_byte": 6127, "start_point": [163, 27], "end_point": [163, 31], "text": "ists"}], "start_byte": 6111, "end_byte": 6127, "start_point": [163, 15], "end_point": [163, 31], "text": "l.printLinkLists"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 6127, "end_byte": 6128, "start_point": [163, 31], "end_point": [163, 32], "text": "("}, {"type": "integer_literal", "children": [], "start_byte": 6128, "end_byte": 6129, "start_point": [163, 32], "end_point": [163, 33], "text": ")"}, {"type": ")", "children": [], "start_byte": 6129, "end_byte": 6130, "start_point": [163, 33], "end_point": [163, 34], "text": ";"}], "start_byte": 6127, "end_byte": 6130, "start_point": [163, 31], "end_point": [163, 34], "text": "();"}], "start_byte": 6111, "end_byte": 6130, "start_point": [163, 15], "end_point": [163, 34], "text": "l.printLinkLists();"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 6131, "end_byte": 6132, "start_point": [163, 35], "end_point": [163, 36], "text": " "}, {"type": "line_comment", "children": [], "start_byte": 6141, "end_byte": 6187, "start_point": [164, 8], "end_point": [164, 54], "text": "// \u4e0b\u9762\u8fdb\u5165arg_list\u7684\u4f7f\u7528\n\n    // let mut arg_list = "}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 6196, "end_byte": 6204, "start_point": [165, 8], "end_point": [165, 16], "text": ");\n    /"}, {"type": "=", "children": [], "start_byte": 6205, "end_byte": 6206, "start_point": [165, 17], "end_point": [165, 18], "text": " "}, {"type": "call_expression", "children": [{"type": "identifier", "children": [], "start_byte": 6207, "end_byte": 6211, "start_point": [165, 19], "end_point": [165, 23], "text": "dd_f"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 6211, "end_byte": 6212, "start_point": [165, 23], "end_point": [165, 24], "text": "l"}, {"type": "call_expression", "children": [{"type": "scoped_identifier", "children": [{"type": "identifier", "children": [], "start_byte": 6212, "end_byte": 6215, "start_point": [165, 24], "end_point": [165, 27], "text": "ags"}, {"type": "::", "children": [], "start_byte": 6215, "end_byte": 6217, "start_point": [165, 27], "end_point": [165, 29], "text": "_f"}, {"type": "identifier", "children": [], "start_byte": 6217, "end_byte": 6220, "start_point": [165, 29], "end_point": [165, 32], "text": "rom"}], "start_byte": 6212, "end_byte": 6220, "start_point": [165, 24], "end_point": [165, 32], "text": "ags_from"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 6220, "end_byte": 6221, "start_point": [165, 32], "end_point": [165, 33], "text": "_"}, {"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 6221, "end_byte": 6229, "start_point": [165, 33], "end_point": [165, 41], "text": "env_var("}, {"type": ".", "children": [], "start_byte": 6229, "end_byte": 6230, "start_point": [165, 41], "end_point": [165, 42], "text": "&"}, {"type": "field_identifier", "children": [], "start_byte": 6230, "end_byte": 6234, "start_point": [165, 42], "end_point": [165, 46], "text": "mut "}], "start_byte": 6221, "end_byte": 6234, "start_point": [165, 33], "end_point": [165, 46], "text": "env_var(&mut "}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 6234, "end_byte": 6235, "start_point": [165, 46], "end_point": [165, 47], "text": "a"}, {"type": ")", "children": [], "start_byte": 6235, "end_byte": 6236, "start_point": [165, 47], "end_point": [165, 48], "text": "r"}], "start_byte": 6234, "end_byte": 6236, "start_point": [165, 46], "end_point": [165, 48], "text": "ar"}], "start_byte": 6221, "end_byte": 6236, "start_point": [165, 33], "end_point": [165, 48], "text": "env_var(&mut ar"}, {"type": ".", "children": [], "start_byte": 6236, "end_byte": 6237, "start_point": [165, 48], "end_point": [165, 49], "text": "g"}, {"type": "field_identifier", "children": [], "start_byte": 6237, "end_byte": 6251, "start_point": [165, 49], "end_point": [165, 63], "text": "_list, \"BZIP2\""}], "start_byte": 6221, "end_byte": 6251, "start_point": [165, 33], "end_point": [165, 63], "text": "env_var(&mut arg_list, \"BZIP2\""}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 6251, "end_byte": 6252, "start_point": [165, 63], "end_point": [165, 64], "text": ")"}, {"type": "closure_expression", "children": [{"type": "closure_parameters", "children": [{"type": "|", "children": [], "start_byte": 6252, "end_byte": 6253, "start_point": [165, 64], "end_point": [165, 65], "text": ";"}, {"type": "|", "children": [], "start_byte": 6253, "end_byte": 6254, "start_point": [165, 65], "end_point": [165, 66], "text": "\n"}], "start_byte": 6252, "end_byte": 6254, "start_point": [165, 64], "end_point": [165, 66], "text": ";\n"}, {"type": "call_expression", "children": [{"type": "scoped_identifier", "children": [{"type": "identifier", "children": [], "start_byte": 6255, "end_byte": 6258, "start_point": [165, 67], "end_point": [165, 70], "text": "   "}, {"type": "::", "children": [], "start_byte": 6258, "end_byte": 6260, "start_point": [165, 70], "end_point": [165, 72], "text": "//"}, {"type": "identifier", "children": [], "start_byte": 6260, "end_byte": 6263, "start_point": [165, 72], "end_point": [165, 75], "text": " ad"}], "start_byte": 6255, "end_byte": 6263, "start_point": [165, 67], "end_point": [165, 75], "text": "   // ad"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 6263, "end_byte": 6264, "start_point": [165, 75], "end_point": [165, 76], "text": "d"}, {"type": "call_expression", "children": [{"type": "scoped_identifier", "children": [{"type": "identifier", "children": [], "start_byte": 6264, "end_byte": 6268, "start_point": [165, 76], "end_point": [165, 80], "text": "_fla"}, {"type": "::", "children": [], "start_byte": 6268, "end_byte": 6270, "start_point": [165, 80], "end_point": [165, 82], "text": "gs"}, {"type": "identifier", "children": [], "start_byte": 6270, "end_byte": 6277, "start_point": [165, 82], "end_point": [165, 89], "text": "_from_e"}], "start_byte": 6264, "end_byte": 6277, "start_point": [165, 76], "end_point": [165, 89], "text": "_flags_from_e"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 6277, "end_byte": 6278, "start_point": [165, 89], "end_point": [165, 90], "text": "n"}, {"type": ")", "children": [], "start_byte": 6278, "end_byte": 6279, "start_point": [165, 90], "end_point": [165, 91], "text": "v"}], "start_byte": 6277, "end_byte": 6279, "start_point": [165, 89], "end_point": [165, 91], "text": "nv"}], "start_byte": 6264, "end_byte": 6279, "start_point": [165, 76], "end_point": [165, 91], "text": "_flags_from_env"}, {"type": ")", "children": [], "start_byte": 6279, "end_byte": 6280, "start_point": [165, 91], "end_point": [165, 92], "text": "_"}], "start_byte": 6263, "end_byte": 6280, "start_point": [165, 75], "end_point": [165, 92], "text": "d_flags_from_env_"}], "start_byte": 6255, "end_byte": 6280, "start_point": [165, 67], "end_point": [165, 92], "text": "   // add_flags_from_env_"}], "start_byte": 6252, "end_byte": 6280, "start_point": [165, 64], "end_point": [165, 92], "text": ";\n    // add_flags_from_env_"}, {"type": ")", "children": [], "start_byte": 6280, "end_byte": 6281, "start_point": [165, 92], "end_point": [165, 93], "text": "v"}], "start_byte": 6251, "end_byte": 6281, "start_point": [165, 63], "end_point": [165, 93], "text": ");\n    // add_flags_from_env_v"}], "start_byte": 6221, "end_byte": 6281, "start_point": [165, 33], "end_point": [165, 93], "text": "env_var(&mut arg_list, \"BZIP2\");\n    // add_flags_from_env_v"}, {"type": ".", "children": [], "start_byte": 6281, "end_byte": 6282, "start_point": [165, 93], "end_point": [165, 94], "text": "a"}, {"type": "field_identifier", "children": [], "start_byte": 6282, "end_byte": 6293, "start_point": [165, 94], "end_point": [165, 105], "text": "r(&mut arg_"}], "start_byte": 6221, "end_byte": 6293, "start_point": [165, 33], "end_point": [165, 105], "text": "env_var(&mut arg_list, \"BZIP2\");\n    // add_flags_from_env_var(&mut arg_"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 6293, "end_byte": 6294, "start_point": [165, 105], "end_point": [165, 106], "text": "l"}, {"type": "identifier", "children": [], "start_byte": 6294, "end_byte": 6297, "start_point": [165, 106], "end_point": [165, 109], "text": "ist"}, {"type": ")", "children": [], "start_byte": 6297, "end_byte": 6298, "start_point": [165, 109], "end_point": [165, 110], "text": ","}], "start_byte": 6293, "end_byte": 6298, "start_point": [165, 105], "end_point": [165, 110], "text": "list,"}], "start_byte": 6221, "end_byte": 6298, "start_point": [165, 33], "end_point": [165, 110], "text": "env_var(&mut arg_list, \"BZIP2\");\n    // add_flags_from_env_var(&mut arg_list,"}, {"type": ")", "children": [], "start_byte": 6298, "end_byte": 6299, "start_point": [165, 110], "end_point": [165, 111], "text": " "}], "start_byte": 6220, "end_byte": 6299, "start_point": [165, 32], "end_point": [165, 111], "text": "_env_var(&mut arg_list, \"BZIP2\");\n    // add_flags_from_env_var(&mut arg_list, "}], "start_byte": 6212, "end_byte": 6299, "start_point": [165, 24], "end_point": [165, 111], "text": "ags_from_env_var(&mut arg_list, \"BZIP2\");\n    // add_flags_from_env_var(&mut arg_list, "}, {"type": ")", "children": [], "start_byte": 6299, "end_byte": 6300, "start_point": [165, 111], "end_point": [165, 112], "text": "\""}], "start_byte": 6211, "end_byte": 6300, "start_point": [165, 23], "end_point": [165, 112], "text": "lags_from_env_var(&mut arg_list, \"BZIP2\");\n    // add_flags_from_env_var(&mut arg_list, \""}], "start_byte": 6207, "end_byte": 6300, "start_point": [165, 19], "end_point": [165, 112], "text": "dd_flags_from_env_var(&mut arg_list, \"BZIP2\");\n    // add_flags_from_env_var(&mut arg_list, \""}], "start_byte": 6196, "end_byte": 6300, "start_point": [165, 8], "end_point": [165, 112], "text": ");\n    // add_flags_from_env_var(&mut arg_list, \"BZIP2\");\n    // add_flags_from_env_var(&mut arg_list, \""}, {"type": ";", "children": [], "start_byte": 6300, "end_byte": 6301, "start_point": [165, 112], "end_point": [165, 113], "text": "B"}], "start_byte": 6196, "end_byte": 6301, "start_point": [165, 8], "end_point": [165, 113], "text": ");\n    // add_flags_from_env_var(&mut arg_list, \"BZIP2\");\n    // add_flags_from_env_var(&mut arg_list, \"B"}, {"type": "}", "children": [], "start_byte": 6306, "end_byte": 6307, "start_point": [166, 4], "end_point": [166, 5], "text": ";"}], "start_byte": 6131, "end_byte": 6307, "start_point": [163, 35], "end_point": [166, 5], "text": "    }\n    // \u4e0b\u9762\u8fdb\u5165arg_list\u7684\u4f7f\u7528\n\n    // let mut arg_list = Vec::new();\n    // add_flags_from_env_var(&mut arg_list, \"BZIP2\");\n    // add_flags_from_env_var(&mut arg_list, \"BZIP\");"}], "start_byte": 6100, "end_byte": 6307, "start_point": [163, 4], "end_point": [166, 5], "text": "        cell.printLinkLists();\n    }\n    // \u4e0b\u9762\u8fdb\u5165arg_list\u7684\u4f7f\u7528\n\n    // let mut arg_list = Vec::new();\n    // add_flags_from_env_var(&mut arg_list, \"BZIP2\");\n    // add_flags_from_env_var(&mut arg_list, \"BZIP\");"}], "start_byte": 6100, "end_byte": 6307, "start_point": [163, 4], "end_point": [166, 5], "text": "        cell.printLinkLists();\n    }\n    // \u4e0b\u9762\u8fdb\u5165arg_list\u7684\u4f7f\u7528\n\n    // let mut arg_list = Vec::new();\n    // add_flags_from_env_var(&mut arg_list, \"BZIP2\");\n    // add_flags_from_env_var(&mut arg_list, \"BZIP\");"}, {"type": "line_comment", "children": [], "start_byte": 6313, "end_byte": 6354, "start_point": [168, 4], "end_point": [168, 45], "text": "/ arg_list.extend(env::args().skip(1));\n "}, {"type": "expression_statement", "children": [{"type": "if_expression", "children": [{"type": "if", "children": [], "start_byte": 6359, "end_byte": 6361, "start_point": [169, 4], "end_point": [169, 6], "text": "sa"}, {"type": "let_condition", "children": [{"type": "let", "children": [], "start_byte": 6362, "end_byte": 6365, "start_point": [169, 7], "end_point": [169, 10], "text": "e {"}, {"type": "tuple_struct_pattern", "children": [{"type": "identifier", "children": [], "start_byte": 6366, "end_byte": 6370, "start_point": [169, 11], "end_point": [169, 15], "text": "    "}, {"type": "(", "children": [], "start_byte": 6370, "end_byte": 6371, "start_point": [169, 15], "end_point": [169, 16], "text": " "}, {"type": "ref_pattern", "children": [{"type": "ref", "children": [], "start_byte": 6371, "end_byte": 6374, "start_point": [169, 16], "end_point": [169, 19], "text": "   "}, {"type": "identifier", "children": [], "start_byte": 6375, "end_byte": 6379, "start_point": [169, 20], "end_point": [169, 24], "text": "ONGE"}], "start_byte": 6371, "end_byte": 6379, "start_point": [169, 16], "end_point": [169, 24], "text": "   LONGE"}, {"type": ")", "children": [], "start_byte": 6379, "end_byte": 6380, "start_point": [169, 24], "end_point": [169, 25], "text": "S"}], "start_byte": 6366, "end_byte": 6380, "start_point": [169, 11], "end_point": [169, 25], "text": "        LONGES"}, {"type": "=", "children": [], "start_byte": 6381, "end_byte": 6382, "start_point": [169, 26], "end_point": [169, 27], "text": "_"}, {"type": "identifier", "children": [], "start_byte": 6383, "end_byte": 6391, "start_point": [169, 28], "end_point": [169, 36], "text": "ILE_NAME"}], "start_byte": 6362, "end_byte": 6391, "start_point": [169, 7], "end_point": [169, 36], "text": "e {\n        LONGEST_FILE_NAME"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 6392, "end_byte": 6393, "start_point": [169, 37], "end_point": [169, 38], "text": "="}, {"type": "expression_statement", "children": [{"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 6402, "end_byte": 6406, "start_point": [170, 8], "end_point": [170, 12], "text": "   N"}, {"type": ".", "children": [], "start_byte": 6406, "end_byte": 6407, "start_point": [170, 12], "end_point": [170, 13], "text": "U"}, {"type": "field_identifier", "children": [], "start_byte": 6407, "end_byte": 6421, "start_point": [170, 13], "end_point": [170, 27], "text": "M_FILE_NAMES ="}], "start_byte": 6402, "end_byte": 6421, "start_point": [170, 8], "end_point": [170, 27], "text": "   NUM_FILE_NAMES ="}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 6421, "end_byte": 6422, "start_point": [170, 27], "end_point": [170, 28], "text": " "}, {"type": ")", "children": [], "start_byte": 6422, "end_byte": 6423, "start_point": [170, 28], "end_point": [170, 29], "text": "0"}], "start_byte": 6421, "end_byte": 6423, "start_point": [170, 27], "end_point": [170, 29], "text": " 0"}], "start_byte": 6402, "end_byte": 6423, "start_point": [170, 8], "end_point": [170, 29], "text": "   NUM_FILE_NAMES = 0"}, {"type": ";", "children": [], "start_byte": 6423, "end_byte": 6424, "start_point": [170, 29], "end_point": [170, 30], "text": ";"}], "start_byte": 6402, "end_byte": 6424, "start_point": [170, 8], "end_point": [170, 30], "text": "   NUM_FILE_NAMES = 0;"}, {"type": "}", "children": [], "start_byte": 6429, "end_byte": 6430, "start_point": [171, 4], "end_point": [171, 5], "text": "}"}], "start_byte": 6392, "end_byte": 6430, "start_point": [169, 37], "end_point": [171, 5], "text": "= 7;\n        NUM_FILE_NAMES = 0;\n    }"}], "start_byte": 6359, "end_byte": 6430, "start_point": [169, 4], "end_point": [171, 5], "text": "safe {\n        LONGEST_FILE_NAME = 7;\n        NUM_FILE_NAMES = 0;\n    }"}], "start_byte": 6359, "end_byte": 6430, "start_point": [169, 4], "end_point": [171, 5], "text": "safe {\n        LONGEST_FILE_NAME = 7;\n        NUM_FILE_NAMES = 0;\n    }"}, {"type": "line_comment", "children": [], "start_byte": 6435, "end_byte": 6467, "start_point": [172, 4], "end_point": [172, 36], "text": "decode = true;\n    // \u9012\u5f52\u904d\u5386 \ud83d\udd25\n   "}, {"type": "line_comment", "children": [], "start_byte": 6473, "end_byte": 6506, "start_point": [174, 4], "end_point": [174, 37], "text": "ss_link_list(&mut arg_list, &mut "}, {"type": "line_comment", "children": [], "start_byte": 6511, "end_byte": 6561, "start_point": [175, 4], "end_point": [175, 54], "text": "e);\n    // for aa in &arg_list {\n    //      // \u89e3\u5f15"}, {"type": "line_comment", "children": [], "start_byte": 6566, "end_byte": 6615, "start_point": [176, 4], "end_point": [176, 53], "text": "x<String>` \u4ee5\u83b7\u53d6 `String` \u7684\u5f15\u7528\n    //     if let Som"}, {"type": "line_comment", "children": [], "start_byte": 6620, "end_byte": 6660, "start_point": [177, 4], "end_point": [177, 44], "text": " name) = aa.name {\n    //         if nam"}, {"type": "expression_statement", "children": [{"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 6665, "end_byte": 6671, "start_point": [178, 4], "end_point": [178, 10], "text": "str() "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 6672, "end_byte": 6673, "start_point": [178, 11], "end_point": [178, 12], "text": "="}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 6682, "end_byte": 6699, "start_point": [179, 8], "end_point": [179, 25], "text": "   //            "}, {"type": "=", "children": [], "start_byte": 6700, "end_byte": 6701, "start_point": [179, 26], "end_point": [179, 27], "text": "d"}, {"type": "integer_literal", "children": [], "start_byte": 6702, "end_byte": 6703, "start_point": [179, 28], "end_point": [179, 29], "text": "c"}], "start_byte": 6682, "end_byte": 6703, "start_point": [179, 8], "end_point": [179, 29], "text": "   //             dec"}, {"type": ";", "children": [], "start_byte": 6703, "end_byte": 6704, "start_point": [179, 29], "end_point": [179, 30], "text": "o"}], "start_byte": 6682, "end_byte": 6704, "start_point": [179, 8], "end_point": [179, 30], "text": "   //             deco"}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 6713, "end_byte": 6727, "start_point": [180, 8], "end_point": [180, 22], "text": "e;\n    //     "}, {"type": "=", "children": [], "start_byte": 6728, "end_byte": 6729, "start_point": [180, 23], "end_point": [180, 24], "text": " "}, {"type": "integer_literal", "children": [], "start_byte": 6730, "end_byte": 6731, "start_point": [180, 25], "end_point": [180, 26], "text": " "}], "start_byte": 6713, "end_byte": 6731, "start_point": [180, 8], "end_point": [180, 26], "text": "e;\n    //         "}, {"type": ";", "children": [], "start_byte": 6731, "end_byte": 6732, "start_point": [180, 26], "end_point": [180, 27], "text": " "}], "start_byte": 6713, "end_byte": 6732, "start_point": [180, 8], "end_point": [180, 27], "text": "e;\n    //          "}, {"type": "}", "children": [], "start_byte": 6737, "end_byte": 6738, "start_point": [181, 4], "end_point": [181, 5], "text": "n"}], "start_byte": 6672, "end_byte": 6738, "start_point": [178, 11], "end_point": [181, 5], "text": "= \"--\" {\n    //             decode = false;\n    //             con"}], "start_byte": 6665, "end_byte": 6738, "start_point": [178, 4], "end_point": [181, 5], "text": "str() == \"--\" {\n    //             decode = false;\n    //             con"}], "start_byte": 6665, "end_byte": 6738, "start_point": [178, 4], "end_point": [181, 5], "text": "str() == \"--\" {\n    //             decode = false;\n    //             con"}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 6743, "end_byte": 6749, "start_point": [182, 4], "end_point": [182, 10], "text": ";\n    "}, {"type": "=", "children": [], "start_byte": 6750, "end_byte": 6751, "start_point": [182, 11], "end_point": [182, 12], "text": "/"}, {"type": "boolean_literal", "children": [{"type": "true", "children": [], "start_byte": 6752, "end_byte": 6756, "start_point": [182, 13], "end_point": [182, 17], "text": "    "}], "start_byte": 6752, "end_byte": 6756, "start_point": [182, 13], "end_point": [182, 17], "text": "    "}], "start_byte": 6743, "end_byte": 6756, "start_point": [182, 4], "end_point": [182, 17], "text": ";\n    //     "}, {"type": ";", "children": [], "start_byte": 6756, "end_byte": 6757, "start_point": [182, 17], "end_point": [182, 18], "text": " "}], "start_byte": 6743, "end_byte": 6757, "start_point": [182, 4], "end_point": [182, 18], "text": ";\n    //      "}, {"type": "line_comment", "children": [], "start_byte": 6762, "end_byte": 6782, "start_point": [183, 4], "end_point": [183, 24], "text": "    //         if na"}, {"type": "expression_statement", "children": [{"type": "call_expression", "children": [{"type": "identifier", "children": [], "start_byte": 6787, "end_byte": 6804, "start_point": [184, 4], "end_point": [184, 21], "text": "arts_with('-') &&"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 6804, "end_byte": 6805, "start_point": [184, 21], "end_point": [184, 22], "text": " "}, {"type": "reference_expression", "children": [{"type": "&", "children": [], "start_byte": 6805, "end_byte": 6806, "start_point": [184, 22], "end_point": [184, 23], "text": "d"}, {"type": "mutable_specifier", "children": [], "start_byte": 6806, "end_byte": 6809, "start_point": [184, 23], "end_point": [184, 26], "text": "eco"}, {"type": "identifier", "children": [], "start_byte": 6810, "end_byte": 6818, "start_point": [184, 27], "end_point": [184, 35], "text": "e {\n    "}], "start_byte": 6805, "end_byte": 6818, "start_point": [184, 22], "end_point": [184, 35], "text": "decode {\n    "}, {"type": ",", "children": [], "start_byte": 6818, "end_byte": 6819, "start_point": [184, 35], "end_point": [184, 36], "text": "/"}, {"type": "reference_expression", "children": [{"type": "&", "children": [], "start_byte": 6820, "end_byte": 6821, "start_point": [184, 37], "end_point": [184, 38], "text": " "}, {"type": "mutable_specifier", "children": [], "start_byte": 6821, "end_byte": 6824, "start_point": [184, 38], "end_point": [184, 41], "text": "   "}, {"type": "identifier", "children": [], "start_byte": 6825, "end_byte": 6831, "start_point": [184, 42], "end_point": [184, 48], "text": "      "}], "start_byte": 6820, "end_byte": 6831, "start_point": [184, 37], "end_point": [184, 48], "text": "           "}, {"type": ")", "children": [], "start_byte": 6831, "end_byte": 6832, "start_point": [184, 48], "end_point": [184, 49], "text": " "}], "start_byte": 6804, "end_byte": 6832, "start_point": [184, 21], "end_point": [184, 49], "text": " decode {\n    //            "}], "start_byte": 6787, "end_byte": 6832, "start_point": [184, 4], "end_point": [184, 49], "text": "arts_with('-') && decode {\n    //            "}, {"type": ";", "children": [], "start_byte": 6832, "end_byte": 6833, "start_point": [184, 49], "end_point": [184, 50], "text": " "}], "start_byte": 6787, "end_byte": 6833, "start_point": [184, 4], "end_point": [184, 50], "text": "arts_with('-') && decode {\n    //             "}, {"type": "line_comment", "children": [], "start_byte": 6838, "end_byte": 6862, "start_point": [185, 4], "end_point": [185, 28], "text": "nue;\n    //         }\n  "}, {"type": "line_comment", "children": [], "start_byte": 6867, "end_byte": 6930, "start_point": [186, 4], "end_point": [186, 67], "text": "        unsafe {\n    //             NUM_FILE_NAMES += 1;\n    //"}, {"type": "line_comment", "children": [], "start_byte": 6935, "end_byte": 6975, "start_point": [187, 4], "end_point": [187, 44], "text": "        LONGEST_FILE_NAME = LONGEST_FILE"}, {"type": "line_comment", "children": [], "start_byte": 6980, "end_byte": 7017, "start_point": [188, 4], "end_point": [188, 41], "text": ".max(name.len() as i32);\n    //      "}, {"type": "line_comment", "children": [], "start_byte": 7022, "end_byte": 7052, "start_point": [189, 4], "end_point": [189, 34], "text": "    //     }\n    // }\n\n    uns"}, {"type": "line_comment", "children": [], "start_byte": 7057, "end_byte": 7081, "start_point": [190, 4], "end_point": [190, 28], "text": "SRC_MODE = if NUM_FILE_N"}, {"type": "line_comment", "children": [], "start_byte": 7086, "end_byte": 7098, "start_point": [191, 4], "end_point": [191, 16], "text": "== 0 { 1 } e"}, {"type": "line_comment", "children": [], "start_byte": 7103, "end_byte": 7150, "start_point": [192, 4], "end_point": [192, 51], "text": " 3 };}\n    unsafe {OP_MODE = 1;}\n    unsafe {\n "}, {"type": "line_comment", "children": [], "start_byte": 7155, "end_byte": 7179, "start_point": [193, 4], "end_point": [193, 28], "text": "  let mut prog_name_str "}, {"type": "line_comment", "children": [], "start_byte": 7184, "end_byte": 7196, "start_point": [194, 4], "end_point": [194, 16], "text": "array_to_str"}, {"type": "line_comment", "children": [], "start_byte": 7201, "end_byte": 7220, "start_point": [195, 4], "end_point": [195, 23], "text": "PROG_NAME);\n       "}, {"type": "line_comment", "children": [], "start_byte": 7225, "end_byte": 7260, "start_point": [196, 4], "end_point": [196, 39], "text": "rog_name_str.contains(\"unzip\") || p"}, {"type": "line_comment", "children": [], "start_byte": 7265, "end_byte": 7341, "start_point": [197, 4], "end_point": [197, 80], "text": "ame_str.contains(\"UNZIP\") {\n            OP_MODE = 2;\n        }\n        if pr"}, {"type": "line_comment", "children": [], "start_byte": 7346, "end_byte": 7358, "start_point": [198, 4], "end_point": [198, 16], "text": "me_str.conta"}, {"type": "line_comment", "children": [], "start_byte": 7363, "end_byte": 7371, "start_point": [199, 4], "end_point": [199, 12], "text": "z2cat\") "}, {"type": "line_comment", "children": [], "start_byte": 7376, "end_byte": 7380, "start_point": [200, 4], "end_point": [200, 8], "text": "og_n"}, {"type": "expression_statement", "children": [{"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 7386, "end_byte": 7392, "start_point": [202, 4], "end_point": [202, 10], "text": "r.cont"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 7393, "end_byte": 7394, "start_point": [202, 11], "end_point": [202, 12], "text": "i"}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 7394, "end_byte": 7402, "start_point": [202, 12], "end_point": [202, 20], "text": "ns(\"Z2CA"}, {"type": "=", "children": [], "start_byte": 7403, "end_byte": 7404, "start_point": [202, 21], "end_point": [202, 22], "text": "\""}, {"type": "if_expression", "children": [{"type": "if", "children": [], "start_byte": 7405, "end_byte": 7407, "start_point": [202, 23], "end_point": [202, 25], "text": " |"}, {"type": "binary_expression", "children": [{"type": "identifier", "children": [], "start_byte": 7408, "end_byte": 7422, "start_point": [202, 26], "end_point": [202, 40], "text": " prog_name_str"}, {"type": "==", "children": [], "start_byte": 7423, "end_byte": 7425, "start_point": [202, 41], "end_point": [202, 43], "text": "co"}, {"type": "integer_literal", "children": [], "start_byte": 7426, "end_byte": 7427, "start_point": [202, 44], "end_point": [202, 45], "text": "t"}], "start_byte": 7408, "end_byte": 7427, "start_point": [202, 26], "end_point": [202, 45], "text": " prog_name_str.cont"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 7428, "end_byte": 7429, "start_point": [202, 46], "end_point": [202, 47], "text": "i"}, {"type": "integer_literal", "children": [], "start_byte": 7430, "end_byte": 7431, "start_point": [202, 48], "end_point": [202, 49], "text": "s"}, {"type": "}", "children": [], "start_byte": 7432, "end_byte": 7433, "start_point": [202, 50], "end_point": [202, 51], "text": "\""}], "start_byte": 7428, "end_byte": 7433, "start_point": [202, 46], "end_point": [202, 51], "text": "ins(\""}, {"type": "else_clause", "children": [{"type": "else", "children": [], "start_byte": 7434, "end_byte": 7438, "start_point": [202, 52], "end_point": [202, 56], "text": "cat\""}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 7439, "end_byte": 7440, "start_point": [202, 57], "end_point": [202, 58], "text": " "}, {"type": "integer_literal", "children": [], "start_byte": 7441, "end_byte": 7442, "start_point": [202, 59], "end_point": [202, 60], "text": "|"}, {"type": "}", "children": [], "start_byte": 7443, "end_byte": 7444, "start_point": [202, 61], "end_point": [202, 62], "text": "p"}], "start_byte": 7439, "end_byte": 7444, "start_point": [202, 57], "end_point": [202, 62], "text": " || p"}], "start_byte": 7434, "end_byte": 7444, "start_point": [202, 52], "end_point": [202, 62], "text": "cat\") || p"}], "start_byte": 7405, "end_byte": 7444, "start_point": [202, 23], "end_point": [202, 62], "text": " || prog_name_str.contains(\"zcat\") || p"}], "start_byte": 7394, "end_byte": 7444, "start_point": [202, 12], "end_point": [202, 62], "text": "ns(\"Z2CAT\") || prog_name_str.contains(\"zcat\") || p"}, {"type": ";", "children": [], "start_byte": 7444, "end_byte": 7445, "start_point": [202, 62], "end_point": [202, 63], "text": "r"}], "start_byte": 7394, "end_byte": 7445, "start_point": [202, 12], "end_point": [202, 63], "text": "ns(\"Z2CAT\") || prog_name_str.contains(\"zcat\") || pr"}, {"type": "}", "children": [], "start_byte": 7445, "end_byte": 7446, "start_point": [202, 63], "end_point": [202, 64], "text": "o"}], "start_byte": 7393, "end_byte": 7446, "start_point": [202, 11], "end_point": [202, 64], "text": "ins(\"Z2CAT\") || prog_name_str.contains(\"zcat\") || pro"}], "start_byte": 7386, "end_byte": 7446, "start_point": [202, 4], "end_point": [202, 64], "text": "r.contains(\"Z2CAT\") || prog_name_str.contains(\"zcat\") || pro"}], "start_byte": 7386, "end_byte": 7446, "start_point": [202, 4], "end_point": [202, 64], "text": "r.contains(\"Z2CAT\") || prog_name_str.contains(\"zcat\") || pro"}, {"type": "expression_statement", "children": [{"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 7451, "end_byte": 7457, "start_point": [203, 4], "end_point": [203, 10], "text": "e_str."}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 7458, "end_byte": 7459, "start_point": [203, 11], "end_point": [203, 12], "text": "o"}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 7459, "end_byte": 7466, "start_point": [203, 12], "end_point": [203, 19], "text": "ntains("}, {"type": "=", "children": [], "start_byte": 7467, "end_byte": 7468, "start_point": [203, 20], "end_point": [203, 21], "text": "Z"}, {"type": "integer_literal", "children": [], "start_byte": 7469, "end_byte": 7470, "start_point": [203, 22], "end_point": [203, 23], "text": "A"}], "start_byte": 7459, "end_byte": 7470, "start_point": [203, 12], "end_point": [203, 23], "text": "ntains(\"ZCA"}, {"type": ";", "children": [], "start_byte": 7470, "end_byte": 7471, "start_point": [203, 23], "end_point": [203, 24], "text": "T"}], "start_byte": 7459, "end_byte": 7471, "start_point": [203, 12], "end_point": [203, 24], "text": "ntains(\"ZCAT"}, {"type": "}", "children": [], "start_byte": 7471, "end_byte": 7472, "start_point": [203, 24], "end_point": [203, 25], "text": "\""}], "start_byte": 7458, "end_byte": 7472, "start_point": [203, 11], "end_point": [203, 25], "text": "ontains(\"ZCAT\""}], "start_byte": 7451, "end_byte": 7472, "start_point": [203, 4], "end_point": [203, 25], "text": "e_str.contains(\"ZCAT\""}], "start_byte": 7451, "end_byte": 7472, "start_point": [203, 4], "end_point": [203, 25], "text": "e_str.contains(\"ZCAT\""}, {"type": "expression_statement", "children": [{"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 7477, "end_byte": 7483, "start_point": [204, 4], "end_point": [204, 10], "text": "      "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 7484, "end_byte": 7485, "start_point": [204, 11], "end_point": [204, 12], "text": " "}, {"type": "let_declaration", "children": [{"type": "let", "children": [], "start_byte": 7494, "end_byte": 7497, "start_point": [205, 8], "end_point": [205, 11], "text": "E ="}, {"type": "mutable_specifier", "children": [], "start_byte": 7498, "end_byte": 7501, "start_point": [205, 12], "end_point": [205, 15], "text": "2;\n"}, {"type": "identifier", "children": [], "start_byte": 7502, "end_byte": 7515, "start_point": [205, 16], "end_point": [205, 29], "text": "       }\n    "}, {"type": "=", "children": [], "start_byte": 7516, "end_byte": 7517, "start_point": [205, 30], "end_point": [205, 31], "text": "\n"}, {"type": "call_expression", "children": [{"type": "identifier", "children": [], "start_byte": 7518, "end_byte": 7536, "start_point": [205, 32], "end_point": [205, 50], "text": "\n    // \u904d\u5386arg_list"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 7536, "end_byte": 7537, "start_point": [205, 50], "end_point": [205, 51], "text": "\u5904"}, {"type": "reference_expression", "children": [{"type": "&", "children": [], "start_byte": 7537, "end_byte": 7538, "start_point": [205, 51], "end_point": [205, 52], "text": "\u7406"}, {"type": "identifier", "children": [], "start_byte": 7538, "end_byte": 7547, "start_point": [205, 52], "end_point": [205, 61], "text": "\u6bcf\u4e2a\u547d\u4ee4\u884c\u53c2\u6570\n "}], "start_byte": 7537, "end_byte": 7547, "start_point": [205, 51], "end_point": [205, 61], "text": "\u7406\u6bcf\u4e2a\u547d\u4ee4\u884c\u53c2\u6570\n "}, {"type": ")", "children": [], "start_byte": 7547, "end_byte": 7548, "start_point": [205, 61], "end_point": [205, 62], "text": " "}], "start_byte": 7536, "end_byte": 7548, "start_point": [205, 50], "end_point": [205, 62], "text": "\u5904\u7406\u6bcf\u4e2a\u547d\u4ee4\u884c\u53c2\u6570\n  "}], "start_byte": 7518, "end_byte": 7548, "start_point": [205, 32], "end_point": [205, 62], "text": "\n    // \u904d\u5386arg_list\u5904\u7406\u6bcf\u4e2a\u547d\u4ee4\u884c\u53c2\u6570\n  "}, {"type": ";", "children": [], "start_byte": 7548, "end_byte": 7549, "start_point": [205, 62], "end_point": [205, 63], "text": " "}], "start_byte": 7494, "end_byte": 7549, "start_point": [205, 8], "end_point": [205, 63], "text": "E = 2;\n        }\n    }\n\n\n    // \u904d\u5386arg_list\u5904\u7406\u6bcf\u4e2a\u547d\u4ee4\u884c\u53c2\u6570\n   "}, {"type": "expression_statement", "children": [{"type": "if_expression", "children": [{"type": "if", "children": [], "start_byte": 7558, "end_byte": 7560, "start_point": [206, 8], "end_point": [206, 10], "text": "aa"}, {"type": "binary_expression", "children": [{"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 7561, "end_byte": 7574, "start_point": [206, 11], "end_point": [206, 24], "text": "= &arg_list;\n"}, {"type": ".", "children": [], "start_byte": 7574, "end_byte": 7575, "start_point": [206, 24], "end_point": [206, 25], "text": " "}, {"type": "field_identifier", "children": [], "start_byte": 7575, "end_byte": 7583, "start_point": [206, 25], "end_point": [206, 33], "text": "   while"}], "start_byte": 7561, "end_byte": 7583, "start_point": [206, 11], "end_point": [206, 33], "text": "= &arg_list;\n    while"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 7583, "end_byte": 7584, "start_point": [206, 33], "end_point": [206, 34], "text": " "}, {"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 7584, "end_byte": 7585, "start_point": [206, 34], "end_point": [206, 35], "text": "l"}, {"type": "\"", "children": [], "start_byte": 7590, "end_byte": 7591, "start_point": [206, 40], "end_point": [206, 41], "text": "m"}], "start_byte": 7584, "end_byte": 7591, "start_point": [206, 34], "end_point": [206, 41], "text": "let Som"}, {"type": ")", "children": [], "start_byte": 7591, "end_byte": 7592, "start_point": [206, 41], "end_point": [206, 42], "text": "e"}], "start_byte": 7583, "end_byte": 7592, "start_point": [206, 33], "end_point": [206, 42], "text": " let Some"}], "start_byte": 7561, "end_byte": 7592, "start_point": [206, 11], "end_point": [206, 42], "text": "= &arg_list;\n    while let Some"}, {"type": "||", "children": [], "start_byte": 7593, "end_byte": 7595, "start_point": [206, 43], "end_point": [206, 45], "text": "ce"}, {"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 7596, "end_byte": 7609, "start_point": [206, 46], "end_point": [206, 59], "text": "l) = aa {\n   "}, {"type": ".", "children": [], "start_byte": 7609, "end_byte": 7610, "start_point": [206, 59], "end_point": [206, 60], "text": " "}, {"type": "field_identifier", "children": [], "start_byte": 7610, "end_byte": 7618, "start_point": [206, 60], "end_point": [206, 68], "text": "    if l"}], "start_byte": 7596, "end_byte": 7618, "start_point": [206, 46], "end_point": [206, 68], "text": "l) = aa {\n        if l"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 7618, "end_byte": 7619, "start_point": [206, 68], "end_point": [206, 69], "text": "e"}, {"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 7619, "end_byte": 7620, "start_point": [206, 69], "end_point": [206, 70], "text": "t"}, {"type": "\"", "children": [], "start_byte": 7625, "end_byte": 7626, "start_point": [206, 75], "end_point": [206, 76], "text": "("}], "start_byte": 7619, "end_byte": 7626, "start_point": [206, 69], "end_point": [206, 76], "text": "t Some("}, {"type": ")", "children": [], "start_byte": 7626, "end_byte": 7627, "start_point": [206, 76], "end_point": [206, 77], "text": "n"}], "start_byte": 7618, "end_byte": 7627, "start_point": [206, 68], "end_point": [206, 77], "text": "et Some(n"}], "start_byte": 7596, "end_byte": 7627, "start_point": [206, 46], "end_point": [206, 77], "text": "l) = aa {\n        if let Some(n"}], "start_byte": 7561, "end_byte": 7627, "start_point": [206, 11], "end_point": [206, 77], "text": "= &arg_list;\n    while let Some(cell) = aa {\n        if let Some(n"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 7628, "end_byte": 7629, "start_point": [206, 78], "end_point": [206, 79], "text": "m"}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 7642, "end_byte": 7649, "start_point": [207, 12], "end_point": [207, 19], "text": "me {\n  "}, {"type": "=", "children": [], "start_byte": 7650, "end_byte": 7651, "start_point": [207, 20], "end_point": [207, 21], "text": " "}, {"type": "integer_literal", "children": [], "start_byte": 7652, "end_byte": 7653, "start_point": [207, 22], "end_point": [207, 23], "text": " "}], "start_byte": 7642, "end_byte": 7653, "start_point": [207, 12], "end_point": [207, 23], "text": "me {\n      "}, {"type": ";", "children": [], "start_byte": 7653, "end_byte": 7654, "start_point": [207, 23], "end_point": [207, 24], "text": " "}], "start_byte": 7642, "end_byte": 7654, "start_point": [207, 12], "end_point": [207, 24], "text": "me {\n       "}, {"type": "}", "children": [], "start_byte": 7663, "end_byte": 7664, "start_point": [208, 8], "end_point": [208, 9], "text": "a"}], "start_byte": 7628, "end_byte": 7664, "start_point": [206, 78], "end_point": [208, 9], "text": "me) = &cell.name {\n            if na"}], "start_byte": 7558, "end_byte": 7664, "start_point": [206, 8], "end_point": [208, 9], "text": "aa = &arg_list;\n    while let Some(cell) = aa {\n        if let Some(name) = &cell.name {\n            if na"}], "start_byte": 7558, "end_byte": 7664, "start_point": [206, 8], "end_point": [208, 9], "text": "aa = &arg_list;\n    while let Some(cell) = aa {\n        if let Some(name) = &cell.name {\n            if na"}, {"type": "expression_statement", "children": [{"type": "if_expression", "children": [{"type": "if", "children": [], "start_byte": 7673, "end_byte": 7675, "start_point": [209, 8], "end_point": [209, 10], "text": "()"}, {"type": "binary_expression", "children": [{"type": "binary_expression", "children": [{"type": "binary_expression", "children": [{"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 7676, "end_byte": 7689, "start_point": [209, 11], "end_point": [209, 24], "text": "== \"--\"  {\n  "}, {"type": ".", "children": [], "start_byte": 7689, "end_byte": 7690, "start_point": [209, 24], "end_point": [209, 25], "text": " "}, {"type": "field_identifier", "children": [], "start_byte": 7690, "end_byte": 7698, "start_point": [209, 25], "end_point": [209, 33], "text": "        "}], "start_byte": 7676, "end_byte": 7698, "start_point": [209, 11], "end_point": [209, 33], "text": "== \"--\"  {\n           "}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 7698, "end_byte": 7699, "start_point": [209, 33], "end_point": [209, 34], "text": " "}, {"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 7699, "end_byte": 7700, "start_point": [209, 34], "end_point": [209, 35], "text": " "}, {"type": "\"", "children": [], "start_byte": 7705, "end_byte": 7706, "start_point": [209, 40], "end_point": [209, 41], "text": "e"}], "start_byte": 7699, "end_byte": 7706, "start_point": [209, 34], "end_point": [209, 41], "text": "    bre"}, {"type": ")", "children": [], "start_byte": 7706, "end_byte": 7707, "start_point": [209, 41], "end_point": [209, 42], "text": "a"}], "start_byte": 7698, "end_byte": 7707, "start_point": [209, 33], "end_point": [209, 42], "text": "     brea"}], "start_byte": 7676, "end_byte": 7707, "start_point": [209, 11], "end_point": [209, 42], "text": "== \"--\"  {\n                brea"}, {"type": "||", "children": [], "start_byte": 7708, "end_byte": 7710, "start_point": [209, 43], "end_point": [209, 45], "text": ";\n"}, {"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 7711, "end_byte": 7724, "start_point": [209, 46], "end_point": [209, 59], "text": "           }\n"}, {"type": ".", "children": [], "start_byte": 7724, "end_byte": 7725, "start_point": [209, 59], "end_point": [209, 60], "text": "\n"}, {"type": "field_identifier", "children": [], "start_byte": 7725, "end_byte": 7733, "start_point": [209, 60], "end_point": [209, 68], "text": "        "}], "start_byte": 7711, "end_byte": 7733, "start_point": [209, 46], "end_point": [209, 68], "text": "           }\n\n        "}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 7733, "end_byte": 7734, "start_point": [209, 68], "end_point": [209, 69], "text": " "}, {"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 7734, "end_byte": 7735, "start_point": [209, 69], "end_point": [209, 70], "text": " "}, {"type": "\"", "children": [], "start_byte": 7740, "end_byte": 7741, "start_point": [209, 75], "end_point": [209, 76], "text": "n"}], "start_byte": 7734, "end_byte": 7741, "start_point": [209, 69], "end_point": [209, 76], "text": "   if n"}, {"type": ")", "children": [], "start_byte": 7741, "end_byte": 7742, "start_point": [209, 76], "end_point": [209, 77], "text": "a"}], "start_byte": 7733, "end_byte": 7742, "start_point": [209, 68], "end_point": [209, 77], "text": "    if na"}], "start_byte": 7711, "end_byte": 7742, "start_point": [209, 46], "end_point": [209, 77], "text": "           }\n\n            if na"}], "start_byte": 7676, "end_byte": 7742, "start_point": [209, 11], "end_point": [209, 77], "text": "== \"--\"  {\n                break;\n            }\n\n            if na"}, {"type": "||", "children": [], "start_byte": 7743, "end_byte": 7745, "start_point": [209, 78], "end_point": [209, 80], "text": "e."}, {"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 7746, "end_byte": 7759, "start_point": [209, 81], "end_point": [209, 94], "text": "tarts_with('-"}, {"type": ".", "children": [], "start_byte": 7759, "end_byte": 7760, "start_point": [209, 94], "end_point": [209, 95], "text": "'"}, {"type": "field_identifier", "children": [], "start_byte": 7760, "end_byte": 7768, "start_point": [209, 95], "end_point": [209, 103], "text": ") && !na"}], "start_byte": 7746, "end_byte": 7768, "start_point": [209, 81], "end_point": [209, 103], "text": "tarts_with('-') && !na"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 7768, "end_byte": 7769, "start_point": [209, 103], "end_point": [209, 104], "text": "m"}, {"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 7769, "end_byte": 7770, "start_point": [209, 104], "end_point": [209, 105], "text": "e"}, {"type": "\"", "children": [], "start_byte": 7774, "end_byte": 7775, "start_point": [209, 109], "end_point": [209, 110], "text": "r"}], "start_byte": 7769, "end_byte": 7775, "start_point": [209, 104], "end_point": [209, 110], "text": "e.star"}, {"type": ")", "children": [], "start_byte": 7775, "end_byte": 7776, "start_point": [209, 110], "end_point": [209, 111], "text": "t"}], "start_byte": 7768, "end_byte": 7776, "start_point": [209, 103], "end_point": [209, 111], "text": "me.start"}], "start_byte": 7746, "end_byte": 7776, "start_point": [209, 81], "end_point": [209, 111], "text": "tarts_with('-') && !name.start"}], "start_byte": 7676, "end_byte": 7776, "start_point": [209, 11], "end_point": [209, 111], "text": "== \"--\"  {\n                break;\n            }\n\n            if name.starts_with('-') && !name.start"}, {"type": "||", "children": [], "start_byte": 7777, "end_byte": 7779, "start_point": [209, 112], "end_point": [209, 114], "text": "_w"}, {"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 7780, "end_byte": 7793, "start_point": [209, 115], "end_point": [209, 128], "text": "th(\"--\") {\n  "}, {"type": ".", "children": [], "start_byte": 7793, "end_byte": 7794, "start_point": [209, 128], "end_point": [209, 129], "text": " "}, {"type": "field_identifier", "children": [], "start_byte": 7794, "end_byte": 7802, "start_point": [209, 129], "end_point": [209, 137], "text": "        "}], "start_byte": 7780, "end_byte": 7802, "start_point": [209, 115], "end_point": [209, 137], "text": "th(\"--\") {\n           "}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 7802, "end_byte": 7803, "start_point": [209, 137], "end_point": [209, 138], "text": " "}, {"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 7803, "end_byte": 7804, "start_point": [209, 138], "end_point": [209, 139], "text": " "}, {"type": "\"", "children": [], "start_byte": 7808, "end_byte": 7809, "start_point": [209, 143], "end_point": [209, 144], "text": "o"}], "start_byte": 7803, "end_byte": 7809, "start_point": [209, 138], "end_point": [209, 144], "text": "    fo"}, {"type": ")", "children": [], "start_byte": 7809, "end_byte": 7810, "start_point": [209, 144], "end_point": [209, 145], "text": "r"}], "start_byte": 7802, "end_byte": 7810, "start_point": [209, 137], "end_point": [209, 145], "text": "     for"}], "start_byte": 7780, "end_byte": 7810, "start_point": [209, 115], "end_point": [209, 145], "text": "th(\"--\") {\n                for"}], "start_byte": 7676, "end_byte": 7810, "start_point": [209, 11], "end_point": [209, 145], "text": "== \"--\"  {\n                break;\n            }\n\n            if name.starts_with('-') && !name.starts_with(\"--\") {\n                for"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 7811, "end_byte": 7812, "start_point": [209, 146], "end_point": [209, 147], "text": "c"}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 7825, "end_byte": 7832, "start_point": [210, 12], "end_point": [210, 19], "text": "rs().sk"}, {"type": "=", "children": [], "start_byte": 7833, "end_byte": 7834, "start_point": [210, 20], "end_point": [210, 21], "text": "p"}, {"type": "integer_literal", "children": [], "start_byte": 7835, "end_byte": 7836, "start_point": [210, 22], "end_point": [210, 23], "text": "1"}], "start_byte": 7825, "end_byte": 7836, "start_point": [210, 12], "end_point": [210, 23], "text": "rs().skip(1"}, {"type": ";", "children": [], "start_byte": 7836, "end_byte": 7837, "start_point": [210, 23], "end_point": [210, 24], "text": ")"}], "start_byte": 7825, "end_byte": 7837, "start_point": [210, 12], "end_point": [210, 24], "text": "rs().skip(1)"}, {"type": "}", "children": [], "start_byte": 7846, "end_byte": 7847, "start_point": [211, 8], "end_point": [211, 9], "text": " "}], "start_byte": 7811, "end_byte": 7847, "start_point": [209, 146], "end_point": [211, 9], "text": "ch in name.chars().skip(1) {\n       "}], "start_byte": 7673, "end_byte": 7847, "start_point": [209, 8], "end_point": [211, 9], "text": "() == \"--\"  {\n                break;\n            }\n\n            if name.starts_with('-') && !name.starts_with(\"--\") {\n                for ch in name.chars().skip(1) {\n       "}], "start_byte": 7673, "end_byte": 7847, "start_point": [209, 8], "end_point": [211, 9], "text": "() == \"--\"  {\n                break;\n            }\n\n            if name.starts_with('-') && !name.starts_with(\"--\") {\n                for ch in name.chars().skip(1) {\n       "}, {"type": "}", "children": [], "start_byte": 7852, "end_byte": 7853, "start_point": [212, 4], "end_point": [212, 5], "text": " "}], "start_byte": 7484, "end_byte": 7853, "start_point": [204, 11], "end_point": [212, 5], "text": "    OP_MODE = 2;\n        }\n    }\n\n\n    // \u904d\u5386arg_list\u5904\u7406\u6bcf\u4e2a\u547d\u4ee4\u884c\u53c2\u6570\n    let mut aa = &arg_list;\n    while let Some(cell) = aa {\n        if let Some(name) = &cell.name {\n            if name.as_str() == \"--\"  {\n                break;\n            }\n\n            if name.starts_with('-') && !name.starts_with(\"--\") {\n                for ch in name.chars().skip(1) {\n             "}], "start_byte": 7477, "end_byte": 7853, "start_point": [204, 4], "end_point": [212, 5], "text": "           OP_MODE = 2;\n        }\n    }\n\n\n    // \u904d\u5386arg_list\u5904\u7406\u6bcf\u4e2a\u547d\u4ee4\u884c\u53c2\u6570\n    let mut aa = &arg_list;\n    while let Some(cell) = aa {\n        if let Some(name) = &cell.name {\n            if name.as_str() == \"--\"  {\n                break;\n            }\n\n            if name.starts_with('-') && !name.starts_with(\"--\") {\n                for ch in name.chars().skip(1) {\n             "}], "start_byte": 7477, "end_byte": 7853, "start_point": [204, 4], "end_point": [212, 5], "text": "           OP_MODE = 2;\n        }\n    }\n\n\n    // \u904d\u5386arg_list\u5904\u7406\u6bcf\u4e2a\u547d\u4ee4\u884c\u53c2\u6570\n    let mut aa = &arg_list;\n    while let Some(cell) = aa {\n        if let Some(name) = &cell.name {\n            if name.as_str() == \"--\"  {\n                break;\n            }\n\n            if name.starts_with('-') && !name.starts_with(\"--\") {\n                for ch in name.chars().skip(1) {\n             "}, {"type": "line_comment", "children": [], "start_byte": 7860, "end_byte": 7904, "start_point": [215, 4], "end_point": [215, 48], "text": "match ch {\n                        'c' => un"}, {"type": "let_declaration", "children": [{"type": "let", "children": [], "start_byte": 7909, "end_byte": 7912, "start_point": [216, 4], "end_point": [216, 7], "text": "{ S"}, {"type": "mutable_specifier", "children": [], "start_byte": 7913, "end_byte": 7916, "start_point": [216, 8], "end_point": [216, 11], "text": "C_M"}, {"type": "identifier", "children": [], "start_byte": 7917, "end_byte": 7919, "start_point": [216, 12], "end_point": [216, 14], "text": "DE"}, {"type": "=", "children": [], "start_byte": 7920, "end_byte": 7921, "start_point": [216, 15], "end_point": [216, 16], "text": "="}, {"type": "reference_expression", "children": [{"type": "&", "children": [], "start_byte": 7922, "end_byte": 7923, "start_point": [216, 17], "end_point": [216, 18], "text": "2"}, {"type": "identifier", "children": [], "start_byte": 7923, "end_byte": 7931, "start_point": [216, 18], "end_point": [216, 26], "text": "; },\n   "}], "start_byte": 7922, "end_byte": 7931, "start_point": [216, 17], "end_point": [216, 26], "text": "2; },\n   "}, {"type": ";", "children": [], "start_byte": 7931, "end_byte": 7932, "start_point": [216, 26], "end_point": [216, 27], "text": " "}], "start_byte": 7909, "end_byte": 7932, "start_point": [216, 4], "end_point": [216, 27], "text": "{ SRC_MODE = 2; },\n    "}, {"type": "expression_statement", "children": [{"type": "while_expression", "children": [{"type": "while", "children": [], "start_byte": 7937, "end_byte": 7942, "start_point": [217, 4], "end_point": [217, 9], "text": "     "}, {"type": "let_condition", "children": [{"type": "let", "children": [], "start_byte": 7943, "end_byte": 7946, "start_point": [217, 10], "end_point": [217, 13], "text": "   "}, {"type": "tuple_struct_pattern", "children": [{"type": "identifier", "children": [], "start_byte": 7947, "end_byte": 7951, "start_point": [217, 14], "end_point": [217, 18], "text": "    "}, {"type": "(", "children": [], "start_byte": 7951, "end_byte": 7952, "start_point": [217, 18], "end_point": [217, 19], "text": " "}, {"type": "identifier", "children": [], "start_byte": 7952, "end_byte": 7956, "start_point": [217, 19], "end_point": [217, 23], "text": "'d' "}, {"type": ")", "children": [], "start_byte": 7956, "end_byte": 7957, "start_point": [217, 23], "end_point": [217, 24], "text": "="}], "start_byte": 7947, "end_byte": 7957, "start_point": [217, 14], "end_point": [217, 24], "text": "     'd' ="}, {"type": "=", "children": [], "start_byte": 7958, "end_byte": 7959, "start_point": [217, 25], "end_point": [217, 26], "text": " "}, {"type": "identifier", "children": [], "start_byte": 7960, "end_byte": 7962, "start_point": [217, 27], "end_point": [217, 29], "text": "ns"}], "start_byte": 7943, "end_byte": 7962, "start_point": [217, 10], "end_point": [217, 29], "text": "         'd' => uns"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 7963, "end_byte": 7964, "start_point": [217, 30], "end_point": [217, 31], "text": "f"}, {"type": "expression_statement", "children": [{"type": "if_expression", "children": [{"type": "if", "children": [], "start_byte": 7973, "end_byte": 7975, "start_point": [218, 8], "end_point": [218, 10], "text": "DE"}, {"type": "let_condition", "children": [{"type": "let", "children": [], "start_byte": 7976, "end_byte": 7979, "start_point": [218, 11], "end_point": [218, 14], "text": "= 2"}, {"type": "tuple_struct_pattern", "children": [{"type": "identifier", "children": [], "start_byte": 7980, "end_byte": 7984, "start_point": [218, 15], "end_point": [218, 19], "text": " },\n"}, {"type": "(", "children": [], "start_byte": 7984, "end_byte": 7985, "start_point": [218, 19], "end_point": [218, 20], "text": " "}, {"type": "identifier", "children": [], "start_byte": 7985, "end_byte": 7989, "start_point": [218, 20], "end_point": [218, 24], "text": "    "}, {"type": ")", "children": [], "start_byte": 7989, "end_byte": 7990, "start_point": [218, 24], "end_point": [218, 25], "text": " "}], "start_byte": 7980, "end_byte": 7990, "start_point": [218, 15], "end_point": [218, 25], "text": " },\n      "}, {"type": "=", "children": [], "start_byte": 7991, "end_byte": 7992, "start_point": [218, 26], "end_point": [218, 27], "text": " "}, {"type": "reference_expression", "children": [{"type": "&", "children": [], "start_byte": 7993, "end_byte": 7994, "start_point": [218, 28], "end_point": [218, 29], "text": " "}, {"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 7994, "end_byte": 7998, "start_point": [218, 29], "end_point": [218, 33], "text": "    "}, {"type": ".", "children": [], "start_byte": 7998, "end_byte": 7999, "start_point": [218, 33], "end_point": [218, 34], "text": " "}, {"type": "field_identifier", "children": [], "start_byte": 7999, "end_byte": 8003, "start_point": [218, 34], "end_point": [218, 38], "text": "    "}], "start_byte": 7994, "end_byte": 8003, "start_point": [218, 29], "end_point": [218, 38], "text": "         "}], "start_byte": 7993, "end_byte": 8003, "start_point": [218, 28], "end_point": [218, 38], "text": "          "}], "start_byte": 7976, "end_byte": 8003, "start_point": [218, 11], "end_point": [218, 38], "text": "= 2; },\n                   "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 8004, "end_byte": 8005, "start_point": [218, 39], "end_point": [218, 40], "text": " "}, {"type": "expression_statement", "children": [{"type": "if_expression", "children": [{"type": "if", "children": [], "start_byte": 8018, "end_byte": 8020, "start_point": [219, 12], "end_point": [219, 14], "text": "af"}, {"type": "binary_expression", "children": [{"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 8021, "end_byte": 8025, "start_point": [219, 15], "end_point": [219, 19], "text": " { O"}, {"type": ".", "children": [], "start_byte": 8025, "end_byte": 8026, "start_point": [219, 19], "end_point": [219, 20], "text": "P"}, {"type": "field_identifier", "children": [], "start_byte": 8026, "end_byte": 8032, "start_point": [219, 20], "end_point": [219, 26], "text": "_MODE "}], "start_byte": 8021, "end_byte": 8032, "start_point": [219, 15], "end_point": [219, 26], "text": " { OP_MODE "}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 8032, "end_byte": 8033, "start_point": [219, 26], "end_point": [219, 27], "text": "="}, {"type": ")", "children": [], "start_byte": 8033, "end_byte": 8034, "start_point": [219, 27], "end_point": [219, 28], "text": " "}], "start_byte": 8032, "end_byte": 8034, "start_point": [219, 26], "end_point": [219, 28], "text": "= "}], "start_byte": 8021, "end_byte": 8034, "start_point": [219, 15], "end_point": [219, 28], "text": " { OP_MODE = "}, {"type": "==", "children": [], "start_byte": 8035, "end_byte": 8037, "start_point": [219, 29], "end_point": [219, 31], "text": "; "}, {"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 8038, "end_byte": 8039, "start_point": [219, 32], "end_point": [219, 33], "text": ","}, {"type": "\"", "children": [], "start_byte": 8041, "end_byte": 8042, "start_point": [219, 35], "end_point": [219, 36], "text": " "}], "start_byte": 8038, "end_byte": 8042, "start_point": [219, 32], "end_point": [219, 36], "text": ",\n  "}], "start_byte": 8021, "end_byte": 8042, "start_point": [219, 15], "end_point": [219, 36], "text": " { OP_MODE = 1; },\n  "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 8044, "end_byte": 8045, "start_point": [219, 38], "end_point": [219, 39], "text": " "}, {"type": "expression_statement", "children": [{"type": "break_expression", "children": [{"type": "break", "children": [], "start_byte": 8062, "end_byte": 8067, "start_point": [220, 16], "end_point": [220, 21], "text": "  'f'"}], "start_byte": 8062, "end_byte": 8067, "start_point": [220, 16], "end_point": [220, 21], "text": "  'f'"}, {"type": ";", "children": [], "start_byte": 8067, "end_byte": 8068, "start_point": [220, 21], "end_point": [220, 22], "text": " "}], "start_byte": 8062, "end_byte": 8068, "start_point": [220, 16], "end_point": [220, 22], "text": "  'f' "}, {"type": "}", "children": [], "start_byte": 8081, "end_byte": 8082, "start_point": [221, 12], "end_point": [221, 13], "text": "O"}], "start_byte": 8044, "end_byte": 8082, "start_point": [219, 38], "end_point": [221, 13], "text": "                    'f' => unsafe { FO"}], "start_byte": 8018, "end_byte": 8082, "start_point": [219, 12], "end_point": [221, 13], "text": "afe { OP_MODE = 1; },\n                        'f' => unsafe { FO"}], "start_byte": 8018, "end_byte": 8082, "start_point": [219, 12], "end_point": [221, 13], "text": "afe { OP_MODE = 1; },\n                        'f' => unsafe { FO"}, {"type": "expression_statement", "children": [{"type": "if_expression", "children": [{"type": "if", "children": [], "start_byte": 8096, "end_byte": 8098, "start_point": [223, 12], "end_point": [223, 14], "text": "= "}, {"type": "binary_expression", "children": [{"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 8099, "end_byte": 8103, "start_point": [223, 15], "end_point": [223, 19], "text": "rue;"}, {"type": ".", "children": [], "start_byte": 8103, "end_byte": 8104, "start_point": [223, 19], "end_point": [223, 20], "text": " "}, {"type": "field_identifier", "children": [], "start_byte": 8104, "end_byte": 8115, "start_point": [223, 20], "end_point": [223, 31], "text": "},\n        "}], "start_byte": 8099, "end_byte": 8115, "start_point": [223, 15], "end_point": [223, 31], "text": "rue; },\n        "}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 8115, "end_byte": 8116, "start_point": [223, 31], "end_point": [223, 32], "text": " "}, {"type": "char_literal", "children": [], "start_byte": 8116, "end_byte": 8119, "start_point": [223, 32], "end_point": [223, 35], "text": "   "}, {"type": ")", "children": [], "start_byte": 8119, "end_byte": 8120, "start_point": [223, 35], "end_point": [223, 36], "text": " "}], "start_byte": 8115, "end_byte": 8120, "start_point": [223, 31], "end_point": [223, 36], "text": "     "}], "start_byte": 8099, "end_byte": 8120, "start_point": [223, 15], "end_point": [223, 36], "text": "rue; },\n             "}, {"type": "&&", "children": [], "start_byte": 8121, "end_byte": 8123, "start_point": [223, 37], "end_point": [223, 39], "text": "  "}, {"type": "unary_expression", "children": [{"type": "!", "children": [], "start_byte": 8124, "end_byte": 8125, "start_point": [223, 40], "end_point": [223, 41], "text": " "}, {"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 8125, "end_byte": 8129, "start_point": [223, 41], "end_point": [223, 45], "text": "    "}, {"type": ".", "children": [], "start_byte": 8129, "end_byte": 8130, "start_point": [223, 45], "end_point": [223, 46], "text": " "}, {"type": "field_identifier", "children": [], "start_byte": 8130, "end_byte": 8141, "start_point": [223, 46], "end_point": [223, 57], "text": " 't' => uns"}], "start_byte": 8125, "end_byte": 8141, "start_point": [223, 41], "end_point": [223, 57], "text": "      't' => uns"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 8141, "end_byte": 8142, "start_point": [223, 57], "end_point": [223, 58], "text": "a"}, {"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 8142, "end_byte": 8143, "start_point": [223, 58], "end_point": [223, 59], "text": "f"}, {"type": "\"", "children": [], "start_byte": 8145, "end_byte": 8146, "start_point": [223, 61], "end_point": [223, 62], "text": "{"}], "start_byte": 8142, "end_byte": 8146, "start_point": [223, 58], "end_point": [223, 62], "text": "fe {"}, {"type": ")", "children": [], "start_byte": 8146, "end_byte": 8147, "start_point": [223, 62], "end_point": [223, 63], "text": " "}], "start_byte": 8141, "end_byte": 8147, "start_point": [223, 57], "end_point": [223, 63], "text": "afe { "}], "start_byte": 8125, "end_byte": 8147, "start_point": [223, 41], "end_point": [223, 63], "text": "      't' => unsafe { "}], "start_byte": 8124, "end_byte": 8147, "start_point": [223, 40], "end_point": [223, 63], "text": "       't' => unsafe { "}], "start_byte": 8099, "end_byte": 8147, "start_point": [223, 15], "end_point": [223, 63], "text": "rue; },\n                        't' => unsafe { "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 8148, "end_byte": 8149, "start_point": [223, 64], "end_point": [223, 65], "text": "P"}, {"type": "expression_statement", "children": [{"type": "for_expression", "children": [{"type": "for", "children": [], "start_byte": 8166, "end_byte": 8169, "start_point": [224, 16], "end_point": [224, 19], "text": "   "}, {"type": "identifier", "children": [], "start_byte": 8170, "end_byte": 8172, "start_point": [224, 20], "end_point": [224, 22], "text": "  "}, {"type": "in", "children": [], "start_byte": 8173, "end_byte": 8175, "start_point": [224, 23], "end_point": [224, 25], "text": "  "}, {"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 8176, "end_byte": 8180, "start_point": [224, 26], "end_point": [224, 30], "text": "    "}, {"type": ".", "children": [], "start_byte": 8180, "end_byte": 8181, "start_point": [224, 30], "end_point": [224, 31], "text": " "}, {"type": "field_identifier", "children": [], "start_byte": 8181, "end_byte": 8186, "start_point": [224, 31], "end_point": [224, 36], "text": "     "}], "start_byte": 8176, "end_byte": 8186, "start_point": [224, 26], "end_point": [224, 36], "text": "          "}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 8186, "end_byte": 8187, "start_point": [224, 36], "end_point": [224, 37], "text": " "}, {"type": ")", "children": [], "start_byte": 8187, "end_byte": 8188, "start_point": [224, 37], "end_point": [224, 38], "text": "'"}], "start_byte": 8186, "end_byte": 8188, "start_point": [224, 36], "end_point": [224, 38], "text": " '"}], "start_byte": 8176, "end_byte": 8188, "start_point": [224, 26], "end_point": [224, 38], "text": "           '"}, {"type": ".", "children": [], "start_byte": 8188, "end_byte": 8189, "start_point": [224, 38], "end_point": [224, 39], "text": "k"}, {"type": "field_identifier", "children": [], "start_byte": 8189, "end_byte": 8193, "start_point": [224, 39], "end_point": [224, 43], "text": "' =>"}], "start_byte": 8176, "end_byte": 8193, "start_point": [224, 26], "end_point": [224, 43], "text": "           'k' =>"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 8193, "end_byte": 8194, "start_point": [224, 43], "end_point": [224, 44], "text": " "}, {"type": "integer_literal", "children": [], "start_byte": 8194, "end_byte": 8195, "start_point": [224, 44], "end_point": [224, 45], "text": "u"}, {"type": ")", "children": [], "start_byte": 8195, "end_byte": 8196, "start_point": [224, 45], "end_point": [224, 46], "text": "n"}], "start_byte": 8193, "end_byte": 8196, "start_point": [224, 43], "end_point": [224, 46], "text": " un"}], "start_byte": 8176, "end_byte": 8196, "start_point": [224, 26], "end_point": [224, 46], "text": "           'k' => un"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 8197, "end_byte": 8198, "start_point": [224, 47], "end_point": [224, 48], "text": "a"}, {"type": "expression_statement", "children": [{"type": "match_expression", "children": [{"type": "match", "children": [], "start_byte": 8219, "end_byte": 8224, "start_point": [225, 20], "end_point": [225, 25], "text": " = tr"}, {"type": "identifier", "children": [], "start_byte": 8225, "end_byte": 8227, "start_point": [225, 26], "end_point": [225, 28], "text": "e;"}, {"type": "match_block", "children": [{"type": "{", "children": [], "start_byte": 8228, "end_byte": 8229, "start_point": [225, 29], "end_point": [225, 30], "text": "}"}, {"type": "match_arm", "children": [{"type": "match_pattern", "children": [{"type": "char_literal", "children": [], "start_byte": 8254, "end_byte": 8257, "start_point": [226, 24], "end_point": [226, 27], "text": " 's"}], "start_byte": 8254, "end_byte": 8257, "start_point": [226, 24], "end_point": [226, 27], "text": " 's"}, {"type": "=>", "children": [], "start_byte": 8258, "end_byte": 8260, "start_point": [226, 28], "end_point": [226, 30], "text": " ="}, {"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 8261, "end_byte": 8267, "start_point": [226, 31], "end_point": [226, 37], "text": " unsaf"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 8268, "end_byte": 8269, "start_point": [226, 38], "end_point": [226, 39], "text": " "}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 8270, "end_byte": 8278, "start_point": [226, 40], "end_point": [226, 48], "text": " SMALL_M"}, {"type": "=", "children": [], "start_byte": 8279, "end_byte": 8280, "start_point": [226, 49], "end_point": [226, 50], "text": "D"}, {"type": "integer_literal", "children": [], "start_byte": 8281, "end_byte": 8282, "start_point": [226, 51], "end_point": [226, 52], "text": " "}], "start_byte": 8270, "end_byte": 8282, "start_point": [226, 40], "end_point": [226, 52], "text": " SMALL_MODE "}, {"type": ";", "children": [], "start_byte": 8282, "end_byte": 8283, "start_point": [226, 52], "end_point": [226, 53], "text": "="}], "start_byte": 8270, "end_byte": 8283, "start_point": [226, 40], "end_point": [226, 53], "text": " SMALL_MODE ="}, {"type": "}", "children": [], "start_byte": 8284, "end_byte": 8285, "start_point": [226, 54], "end_point": [226, 55], "text": "t"}], "start_byte": 8268, "end_byte": 8285, "start_point": [226, 38], "end_point": [226, 55], "text": " { SMALL_MODE = t"}], "start_byte": 8261, "end_byte": 8285, "start_point": [226, 31], "end_point": [226, 55], "text": " unsafe { SMALL_MODE = t"}, {"type": ",", "children": [], "start_byte": 8285, "end_byte": 8286, "start_point": [226, 55], "end_point": [226, 56], "text": "r"}], "start_byte": 8254, "end_byte": 8286, "start_point": [226, 24], "end_point": [226, 56], "text": " 's' => unsafe { SMALL_MODE = tr"}, {"type": "match_arm", "children": [{"type": "match_pattern", "children": [{"type": "char_literal", "children": [], "start_byte": 8311, "end_byte": 8314, "start_point": [227, 24], "end_point": [227, 27], "text": "   "}], "start_byte": 8311, "end_byte": 8314, "start_point": [227, 24], "end_point": [227, 27], "text": "   "}, {"type": "=>", "children": [], "start_byte": 8315, "end_byte": 8317, "start_point": [227, 28], "end_point": [227, 30], "text": "  "}, {"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 8318, "end_byte": 8324, "start_point": [227, 31], "end_point": [227, 37], "text": "q' => "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 8325, "end_byte": 8326, "start_point": [227, 38], "end_point": [227, 39], "text": "n"}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 8327, "end_byte": 8334, "start_point": [227, 40], "end_point": [227, 47], "text": "afe { N"}, {"type": "=", "children": [], "start_byte": 8335, "end_byte": 8336, "start_point": [227, 48], "end_point": [227, 49], "text": "I"}, {"type": "integer_literal", "children": [], "start_byte": 8337, "end_byte": 8338, "start_point": [227, 50], "end_point": [227, 51], "text": "Y"}], "start_byte": 8327, "end_byte": 8338, "start_point": [227, 40], "end_point": [227, 51], "text": "afe { NOISY"}, {"type": ";", "children": [], "start_byte": 8338, "end_byte": 8339, "start_point": [227, 51], "end_point": [227, 52], "text": " "}], "start_byte": 8327, "end_byte": 8339, "start_point": [227, 40], "end_point": [227, 52], "text": "afe { NOISY "}, {"type": "}", "children": [], "start_byte": 8340, "end_byte": 8341, "start_point": [227, 53], "end_point": [227, 54], "text": " "}], "start_byte": 8325, "end_byte": 8341, "start_point": [227, 38], "end_point": [227, 54], "text": "nsafe { NOISY = "}], "start_byte": 8318, "end_byte": 8341, "start_point": [227, 31], "end_point": [227, 54], "text": "q' => unsafe { NOISY = "}, {"type": ",", "children": [], "start_byte": 8341, "end_byte": 8342, "start_point": [227, 54], "end_point": [227, 55], "text": "f"}], "start_byte": 8311, "end_byte": 8342, "start_point": [227, 24], "end_point": [227, 55], "text": "      'q' => unsafe { NOISY = f"}, {"type": "match_arm", "children": [{"type": "match_pattern", "children": [{"type": "char_literal", "children": [], "start_byte": 8367, "end_byte": 8370, "start_point": [228, 24], "end_point": [228, 27], "text": "   "}], "start_byte": 8367, "end_byte": 8370, "start_point": [228, 24], "end_point": [228, 27], "text": "   "}, {"type": "=>", "children": [], "start_byte": 8371, "end_byte": 8373, "start_point": [228, 28], "end_point": [228, 30], "text": "  "}, {"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 8374, "end_byte": 8380, "start_point": [228, 31], "end_point": [228, 37], "text": " '1' ="}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 8381, "end_byte": 8382, "start_point": [228, 38], "end_point": [228, 39], "text": " "}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 8383, "end_byte": 8390, "start_point": [228, 40], "end_point": [228, 47], "text": "nsafe {"}, {"type": "=", "children": [], "start_byte": 8391, "end_byte": 8392, "start_point": [228, 48], "end_point": [228, 49], "text": "b"}, {"type": "integer_literal", "children": [], "start_byte": 8393, "end_byte": 8394, "start_point": [228, 50], "end_point": [228, 51], "text": "o"}], "start_byte": 8383, "end_byte": 8394, "start_point": [228, 40], "end_point": [228, 51], "text": "nsafe { blo"}, {"type": ";", "children": [], "start_byte": 8394, "end_byte": 8395, "start_point": [228, 51], "end_point": [228, 52], "text": "c"}], "start_byte": 8383, "end_byte": 8395, "start_point": [228, 40], "end_point": [228, 52], "text": "nsafe { bloc"}, {"type": "}", "children": [], "start_byte": 8396, "end_byte": 8397, "start_point": [228, 53], "end_point": [228, 54], "text": "S"}], "start_byte": 8381, "end_byte": 8397, "start_point": [228, 38], "end_point": [228, 54], "text": " unsafe { blockS"}], "start_byte": 8374, "end_byte": 8397, "start_point": [228, 31], "end_point": [228, 54], "text": " '1' => unsafe { blockS"}, {"type": ",", "children": [], "start_byte": 8397, "end_byte": 8398, "start_point": [228, 54], "end_point": [228, 55], "text": "i"}], "start_byte": 8367, "end_byte": 8398, "start_point": [228, 24], "end_point": [228, 55], "text": "        '1' => unsafe { blockSi"}, {"type": "match_arm", "children": [{"type": "match_pattern", "children": [{"type": "char_literal", "children": [], "start_byte": 8423, "end_byte": 8426, "start_point": [229, 24], "end_point": [229, 27], "text": "   "}], "start_byte": 8423, "end_byte": 8426, "start_point": [229, 24], "end_point": [229, 27], "text": "   "}, {"type": "=>", "children": [], "start_byte": 8427, "end_byte": 8429, "start_point": [229, 28], "end_point": [229, 30], "text": "  "}, {"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 8430, "end_byte": 8436, "start_point": [229, 31], "end_point": [229, 37], "text": "      "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 8437, "end_byte": 8438, "start_point": [229, 38], "end_point": [229, 39], "text": "'"}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 8439, "end_byte": 8454, "start_point": [229, 40], "end_point": [229, 55], "text": "' => unsafe { b"}, {"type": "=", "children": [], "start_byte": 8455, "end_byte": 8456, "start_point": [229, 56], "end_point": [229, 57], "text": "o"}, {"type": "boolean_literal", "children": [{"type": "true", "children": [], "start_byte": 8457, "end_byte": 8461, "start_point": [229, 58], "end_point": [229, 62], "text": "kSiz"}], "start_byte": 8457, "end_byte": 8461, "start_point": [229, 58], "end_point": [229, 62], "text": "kSiz"}], "start_byte": 8439, "end_byte": 8461, "start_point": [229, 40], "end_point": [229, 62], "text": "' => unsafe { blockSiz"}, {"type": ";", "children": [], "start_byte": 8461, "end_byte": 8462, "start_point": [229, 62], "end_point": [229, 63], "text": "e"}], "start_byte": 8439, "end_byte": 8462, "start_point": [229, 40], "end_point": [229, 63], "text": "' => unsafe { blockSize"}, {"type": "}", "children": [], "start_byte": 8463, "end_byte": 8464, "start_point": [229, 64], "end_point": [229, 65], "text": "0"}], "start_byte": 8437, "end_byte": 8464, "start_point": [229, 38], "end_point": [229, 65], "text": "'2' => unsafe { blockSize10"}], "start_byte": 8430, "end_byte": 8464, "start_point": [229, 31], "end_point": [229, 65], "text": "       '2' => unsafe { blockSize10"}, {"type": ",", "children": [], "start_byte": 8464, "end_byte": 8465, "start_point": [229, 65], "end_point": [229, 66], "text": "0"}], "start_byte": 8423, "end_byte": 8465, "start_point": [229, 24], "end_point": [229, 66], "text": "              '2' => unsafe { blockSize100"}, {"type": "match_arm", "children": [{"type": "match_pattern", "children": [{"type": "char_literal", "children": [], "start_byte": 8490, "end_byte": 8493, "start_point": [230, 24], "end_point": [230, 27], "text": "   "}], "start_byte": 8490, "end_byte": 8493, "start_point": [230, 24], "end_point": [230, 27], "text": "   "}, {"type": "=>", "children": [], "start_byte": 8494, "end_byte": 8496, "start_point": [230, 28], "end_point": [230, 30], "text": "  "}, {"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 8497, "end_byte": 8503, "start_point": [230, 31], "end_point": [230, 37], "text": "  '3' "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 8504, "end_byte": 8505, "start_point": [230, 38], "end_point": [230, 39], "text": ">"}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 8506, "end_byte": 8513, "start_point": [230, 40], "end_point": [230, 47], "text": "unsafe "}, {"type": "=", "children": [], "start_byte": 8514, "end_byte": 8515, "start_point": [230, 48], "end_point": [230, 49], "text": " "}, {"type": "integer_literal", "children": [], "start_byte": 8516, "end_byte": 8517, "start_point": [230, 50], "end_point": [230, 51], "text": "l"}], "start_byte": 8506, "end_byte": 8517, "start_point": [230, 40], "end_point": [230, 51], "text": "unsafe { bl"}, {"type": ";", "children": [], "start_byte": 8517, "end_byte": 8518, "start_point": [230, 51], "end_point": [230, 52], "text": "o"}], "start_byte": 8506, "end_byte": 8518, "start_point": [230, 40], "end_point": [230, 52], "text": "unsafe { blo"}, {"type": "}", "children": [], "start_byte": 8519, "end_byte": 8520, "start_point": [230, 53], "end_point": [230, 54], "text": "k"}], "start_byte": 8504, "end_byte": 8520, "start_point": [230, 38], "end_point": [230, 54], "text": "> unsafe { block"}], "start_byte": 8497, "end_byte": 8520, "start_point": [230, 31], "end_point": [230, 54], "text": "  '3' => unsafe { block"}, {"type": ",", "children": [], "start_byte": 8520, "end_byte": 8521, "start_point": [230, 54], "end_point": [230, 55], "text": "S"}], "start_byte": 8490, "end_byte": 8521, "start_point": [230, 24], "end_point": [230, 55], "text": "         '3' => unsafe { blockS"}, {"type": "match_arm", "children": [{"type": "match_pattern", "children": [{"type": "char_literal", "children": [], "start_byte": 8546, "end_byte": 8549, "start_point": [231, 24], "end_point": [231, 27], "text": "   "}], "start_byte": 8546, "end_byte": 8549, "start_point": [231, 24], "end_point": [231, 27], "text": "   "}, {"type": "=>", "children": [], "start_byte": 8550, "end_byte": 8552, "start_point": [231, 28], "end_point": [231, 30], "text": "  "}, {"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 8553, "end_byte": 8559, "start_point": [231, 31], "end_point": [231, 37], "text": "      "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 8560, "end_byte": 8561, "start_point": [231, 38], "end_point": [231, 39], "text": " "}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 8562, "end_byte": 8578, "start_point": [231, 40], "end_point": [231, 56], "text": "4' => unsafe { b"}, {"type": "=", "children": [], "start_byte": 8579, "end_byte": 8580, "start_point": [231, 57], "end_point": [231, 58], "text": "o"}, {"type": "boolean_literal", "children": [{"type": "true", "children": [], "start_byte": 8581, "end_byte": 8585, "start_point": [231, 59], "end_point": [231, 63], "text": "kSiz"}], "start_byte": 8581, "end_byte": 8585, "start_point": [231, 59], "end_point": [231, 63], "text": "kSiz"}], "start_byte": 8562, "end_byte": 8585, "start_point": [231, 40], "end_point": [231, 63], "text": "4' => unsafe { blockSiz"}, {"type": ";", "children": [], "start_byte": 8585, "end_byte": 8586, "start_point": [231, 63], "end_point": [231, 64], "text": "e"}], "start_byte": 8562, "end_byte": 8586, "start_point": [231, 40], "end_point": [231, 64], "text": "4' => unsafe { blockSize"}, {"type": "}", "children": [], "start_byte": 8587, "end_byte": 8588, "start_point": [231, 65], "end_point": [231, 66], "text": "0"}], "start_byte": 8560, "end_byte": 8588, "start_point": [231, 38], "end_point": [231, 66], "text": " '4' => unsafe { blockSize10"}], "start_byte": 8553, "end_byte": 8588, "start_point": [231, 31], "end_point": [231, 66], "text": "        '4' => unsafe { blockSize10"}, {"type": ",", "children": [], "start_byte": 8588, "end_byte": 8589, "start_point": [231, 66], "end_point": [231, 67], "text": "0"}], "start_byte": 8546, "end_byte": 8589, "start_point": [231, 24], "end_point": [231, 67], "text": "               '4' => unsafe { blockSize100"}, {"type": "match_arm", "children": [{"type": "match_pattern", "children": [{"type": "char_literal", "children": [], "start_byte": 8614, "end_byte": 8617, "start_point": [232, 24], "end_point": [232, 27], "text": "   "}], "start_byte": 8614, "end_byte": 8617, "start_point": [232, 24], "end_point": [232, 27], "text": "   "}, {"type": "=>", "children": [], "start_byte": 8618, "end_byte": 8620, "start_point": [232, 28], "end_point": [232, 30], "text": "  "}, {"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 8621, "end_byte": 8627, "start_point": [232, 31], "end_point": [232, 37], "text": "  '5' "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 8628, "end_byte": 8629, "start_point": [232, 38], "end_point": [232, 39], "text": ">"}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 8630, "end_byte": 8640, "start_point": [232, 40], "end_point": [232, 50], "text": "unsafe { b"}, {"type": "=", "children": [], "start_byte": 8641, "end_byte": 8642, "start_point": [232, 51], "end_point": [232, 52], "text": "o"}, {"type": "boolean_literal", "children": [{"type": "true", "children": [], "start_byte": 8643, "end_byte": 8647, "start_point": [232, 53], "end_point": [232, 57], "text": "kSiz"}], "start_byte": 8643, "end_byte": 8647, "start_point": [232, 53], "end_point": [232, 57], "text": "kSiz"}], "start_byte": 8630, "end_byte": 8647, "start_point": [232, 40], "end_point": [232, 57], "text": "unsafe { blockSiz"}, {"type": ";", "children": [], "start_byte": 8647, "end_byte": 8648, "start_point": [232, 57], "end_point": [232, 58], "text": "e"}], "start_byte": 8630, "end_byte": 8648, "start_point": [232, 40], "end_point": [232, 58], "text": "unsafe { blockSize"}, {"type": "}", "children": [], "start_byte": 8649, "end_byte": 8650, "start_point": [232, 59], "end_point": [232, 60], "text": "0"}], "start_byte": 8628, "end_byte": 8650, "start_point": [232, 38], "end_point": [232, 60], "text": "> unsafe { blockSize10"}], "start_byte": 8621, "end_byte": 8650, "start_point": [232, 31], "end_point": [232, 60], "text": "  '5' => unsafe { blockSize10"}, {"type": ",", "children": [], "start_byte": 8650, "end_byte": 8651, "start_point": [232, 60], "end_point": [232, 61], "text": "0"}], "start_byte": 8614, "end_byte": 8651, "start_point": [232, 24], "end_point": [232, 61], "text": "         '5' => unsafe { blockSize100"}, {"type": "match_arm", "children": [{"type": "match_pattern", "children": [{"type": "char_literal", "children": [], "start_byte": 8676, "end_byte": 8679, "start_point": [233, 24], "end_point": [233, 27], "text": "   "}], "start_byte": 8676, "end_byte": 8679, "start_point": [233, 24], "end_point": [233, 27], "text": "   "}, {"type": "=>", "children": [], "start_byte": 8680, "end_byte": 8682, "start_point": [233, 28], "end_point": [233, 30], "text": "  "}, {"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 8683, "end_byte": 8689, "start_point": [233, 31], "end_point": [233, 37], "text": "  '6' "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 8690, "end_byte": 8691, "start_point": [233, 38], "end_point": [233, 39], "text": ">"}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 8692, "end_byte": 8697, "start_point": [233, 40], "end_point": [233, 45], "text": "unsaf"}, {"type": "=", "children": [], "start_byte": 8698, "end_byte": 8699, "start_point": [233, 46], "end_point": [233, 47], "text": " "}, {"type": "boolean_literal", "children": [{"type": "false", "children": [], "start_byte": 8700, "end_byte": 8705, "start_point": [233, 48], "end_point": [233, 53], "text": " bloc"}], "start_byte": 8700, "end_byte": 8705, "start_point": [233, 48], "end_point": [233, 53], "text": " bloc"}], "start_byte": 8692, "end_byte": 8705, "start_point": [233, 40], "end_point": [233, 53], "text": "unsafe { bloc"}, {"type": ";", "children": [], "start_byte": 8705, "end_byte": 8706, "start_point": [233, 53], "end_point": [233, 54], "text": "k"}], "start_byte": 8692, "end_byte": 8706, "start_point": [233, 40], "end_point": [233, 54], "text": "unsafe { block"}, {"type": "}", "children": [], "start_byte": 8707, "end_byte": 8708, "start_point": [233, 55], "end_point": [233, 56], "text": "i"}], "start_byte": 8690, "end_byte": 8708, "start_point": [233, 38], "end_point": [233, 56], "text": "> unsafe { blockSi"}], "start_byte": 8683, "end_byte": 8708, "start_point": [233, 31], "end_point": [233, 56], "text": "  '6' => unsafe { blockSi"}, {"type": ",", "children": [], "start_byte": 8708, "end_byte": 8709, "start_point": [233, 56], "end_point": [233, 57], "text": "z"}], "start_byte": 8676, "end_byte": 8709, "start_point": [233, 24], "end_point": [233, 57], "text": "         '6' => unsafe { blockSiz"}, {"type": "match_arm", "children": [{"type": "match_pattern", "children": [{"type": "char_literal", "children": [], "start_byte": 8734, "end_byte": 8737, "start_point": [234, 24], "end_point": [234, 27], "text": "   "}], "start_byte": 8734, "end_byte": 8737, "start_point": [234, 24], "end_point": [234, 27], "text": "   "}, {"type": "=>", "children": [], "start_byte": 8738, "end_byte": 8740, "start_point": [234, 28], "end_point": [234, 30], "text": "  "}, {"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 8741, "end_byte": 8747, "start_point": [234, 31], "end_point": [234, 37], "text": "      "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 8748, "end_byte": 8749, "start_point": [234, 38], "end_point": [234, 39], "text": "7"}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 8750, "end_byte": 8763, "start_point": [234, 40], "end_point": [234, 53], "text": " => unsafe { "}, {"type": "=", "children": [], "start_byte": 8764, "end_byte": 8765, "start_point": [234, 54], "end_point": [234, 55], "text": "l"}, {"type": "integer_literal", "children": [], "start_byte": 8766, "end_byte": 8767, "start_point": [234, 56], "end_point": [234, 57], "text": "c"}], "start_byte": 8750, "end_byte": 8767, "start_point": [234, 40], "end_point": [234, 57], "text": " => unsafe { bloc"}, {"type": ";", "children": [], "start_byte": 8767, "end_byte": 8768, "start_point": [234, 57], "end_point": [234, 58], "text": "k"}], "start_byte": 8750, "end_byte": 8768, "start_point": [234, 40], "end_point": [234, 58], "text": " => unsafe { block"}, {"type": "}", "children": [], "start_byte": 8769, "end_byte": 8770, "start_point": [234, 59], "end_point": [234, 60], "text": "i"}], "start_byte": 8748, "end_byte": 8770, "start_point": [234, 38], "end_point": [234, 60], "text": "7' => unsafe { blockSi"}], "start_byte": 8741, "end_byte": 8770, "start_point": [234, 31], "end_point": [234, 60], "text": "      '7' => unsafe { blockSi"}, {"type": ",", "children": [], "start_byte": 8770, "end_byte": 8771, "start_point": [234, 60], "end_point": [234, 61], "text": "z"}], "start_byte": 8734, "end_byte": 8771, "start_point": [234, 24], "end_point": [234, 61], "text": "             '7' => unsafe { blockSiz"}, {"type": "match_arm", "children": [{"type": "match_pattern", "children": [{"type": "char_literal", "children": [], "start_byte": 8796, "end_byte": 8799, "start_point": [235, 24], "end_point": [235, 27], "text": "   "}], "start_byte": 8796, "end_byte": 8799, "start_point": [235, 24], "end_point": [235, 27], "text": "   "}, {"type": "=>", "children": [], "start_byte": 8800, "end_byte": 8802, "start_point": [235, 28], "end_point": [235, 30], "text": "  "}, {"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 8803, "end_byte": 8809, "start_point": [235, 31], "end_point": [235, 37], "text": "      "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 8810, "end_byte": 8811, "start_point": [235, 38], "end_point": [235, 39], "text": "8"}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 8812, "end_byte": 8825, "start_point": [235, 40], "end_point": [235, 53], "text": " => unsafe { "}, {"type": "=", "children": [], "start_byte": 8826, "end_byte": 8827, "start_point": [235, 54], "end_point": [235, 55], "text": "l"}, {"type": "integer_literal", "children": [], "start_byte": 8828, "end_byte": 8829, "start_point": [235, 56], "end_point": [235, 57], "text": "c"}], "start_byte": 8812, "end_byte": 8829, "start_point": [235, 40], "end_point": [235, 57], "text": " => unsafe { bloc"}, {"type": ";", "children": [], "start_byte": 8829, "end_byte": 8830, "start_point": [235, 57], "end_point": [235, 58], "text": "k"}], "start_byte": 8812, "end_byte": 8830, "start_point": [235, 40], "end_point": [235, 58], "text": " => unsafe { block"}, {"type": "}", "children": [], "start_byte": 8831, "end_byte": 8832, "start_point": [235, 59], "end_point": [235, 60], "text": "i"}], "start_byte": 8810, "end_byte": 8832, "start_point": [235, 38], "end_point": [235, 60], "text": "8' => unsafe { blockSi"}], "start_byte": 8803, "end_byte": 8832, "start_point": [235, 31], "end_point": [235, 60], "text": "      '8' => unsafe { blockSi"}, {"type": ",", "children": [], "start_byte": 8832, "end_byte": 8833, "start_point": [235, 60], "end_point": [235, 61], "text": "z"}], "start_byte": 8796, "end_byte": 8833, "start_point": [235, 24], "end_point": [235, 61], "text": "             '8' => unsafe { blockSiz"}, {"type": "match_arm", "children": [{"type": "match_pattern", "children": [{"type": "char_literal", "children": [], "start_byte": 8858, "end_byte": 8861, "start_point": [236, 24], "end_point": [236, 27], "text": "   "}], "start_byte": 8858, "end_byte": 8861, "start_point": [236, 24], "end_point": [236, 27], "text": "   "}, {"type": "=>", "children": [], "start_byte": 8862, "end_byte": 8864, "start_point": [236, 28], "end_point": [236, 30], "text": "  "}, {"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 8865, "end_byte": 8871, "start_point": [236, 31], "end_point": [236, 37], "text": "      "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 8872, "end_byte": 8873, "start_point": [236, 38], "end_point": [236, 39], "text": "9"}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 8874, "end_byte": 8887, "start_point": [236, 40], "end_point": [236, 53], "text": " => unsafe { "}, {"type": "=", "children": [], "start_byte": 8888, "end_byte": 8889, "start_point": [236, 54], "end_point": [236, 55], "text": "l"}, {"type": "integer_literal", "children": [], "start_byte": 8890, "end_byte": 8891, "start_point": [236, 56], "end_point": [236, 57], "text": "c"}], "start_byte": 8874, "end_byte": 8891, "start_point": [236, 40], "end_point": [236, 57], "text": " => unsafe { bloc"}, {"type": ";", "children": [], "start_byte": 8891, "end_byte": 8892, "start_point": [236, 57], "end_point": [236, 58], "text": "k"}], "start_byte": 8874, "end_byte": 8892, "start_point": [236, 40], "end_point": [236, 58], "text": " => unsafe { block"}, {"type": "}", "children": [], "start_byte": 8893, "end_byte": 8894, "start_point": [236, 59], "end_point": [236, 60], "text": "i"}], "start_byte": 8872, "end_byte": 8894, "start_point": [236, 38], "end_point": [236, 60], "text": "9' => unsafe { blockSi"}], "start_byte": 8865, "end_byte": 8894, "start_point": [236, 31], "end_point": [236, 60], "text": "      '9' => unsafe { blockSi"}, {"type": ",", "children": [], "start_byte": 8894, "end_byte": 8895, "start_point": [236, 60], "end_point": [236, 61], "text": "z"}], "start_byte": 8858, "end_byte": 8895, "start_point": [236, 24], "end_point": [236, 61], "text": "             '9' => unsafe { blockSiz"}, {"type": "match_arm", "children": [{"type": "match_pattern", "children": [{"type": "char_literal", "children": [], "start_byte": 8920, "end_byte": 8923, "start_point": [237, 24], "end_point": [237, 27], "text": "   "}], "start_byte": 8920, "end_byte": 8923, "start_point": [237, 24], "end_point": [237, 27], "text": "   "}, {"type": "=>", "children": [], "start_byte": 8924, "end_byte": 8926, "start_point": [237, 28], "end_point": [237, 30], "text": "  "}, {"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 8927, "end_byte": 8933, "start_point": [237, 31], "end_point": [237, 37], "text": "      "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 8934, "end_byte": 8935, "start_point": [237, 38], "end_point": [237, 39], "text": "/"}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 8936, "end_byte": 8949, "start_point": [237, 40], "end_point": [237, 53], "text": "...\u5904\u7406\u5176\u4ed6\u5b57\u7b26...\n"}, {"type": "=", "children": [], "start_byte": 8950, "end_byte": 8951, "start_point": [237, 54], "end_point": [237, 55], "text": " "}, {"type": "integer_literal", "children": [], "start_byte": 8952, "end_byte": 8953, "start_point": [237, 56], "end_point": [237, 57], "text": " "}], "start_byte": 8936, "end_byte": 8953, "start_point": [237, 40], "end_point": [237, 57], "text": "...\u5904\u7406\u5176\u4ed6\u5b57\u7b26...\n    "}, {"type": ";", "children": [], "start_byte": 8953, "end_byte": 8954, "start_point": [237, 57], "end_point": [237, 58], "text": " "}], "start_byte": 8936, "end_byte": 8954, "start_point": [237, 40], "end_point": [237, 58], "text": "...\u5904\u7406\u5176\u4ed6\u5b57\u7b26...\n     "}, {"type": "}", "children": [], "start_byte": 8955, "end_byte": 8956, "start_point": [237, 59], "end_point": [237, 60], "text": " "}], "start_byte": 8934, "end_byte": 8956, "start_point": [237, 38], "end_point": [237, 60], "text": "/ ...\u5904\u7406\u5176\u4ed6\u5b57\u7b26...\n       "}], "start_byte": 8927, "end_byte": 8956, "start_point": [237, 31], "end_point": [237, 60], "text": "      // ...\u5904\u7406\u5176\u4ed6\u5b57\u7b26...\n       "}, {"type": ",", "children": [], "start_byte": 8956, "end_byte": 8957, "start_point": [237, 60], "end_point": [237, 61], "text": " "}], "start_byte": 8920, "end_byte": 8957, "start_point": [237, 24], "end_point": [237, 61], "text": "             // ...\u5904\u7406\u5176\u4ed6\u5b57\u7b26...\n        "}, {"type": "match_arm", "children": [{"type": "match_pattern", "children": [{"type": "char_literal", "children": [], "start_byte": 8982, "end_byte": 8985, "start_point": [238, 24], "end_point": [238, 27], "text": "saf"}], "start_byte": 8982, "end_byte": 8985, "start_point": [238, 24], "end_point": [238, 27], "text": "saf"}, {"type": "=>", "children": [], "start_byte": 8986, "end_byte": 8988, "start_point": [238, 28], "end_point": [238, 30], "text": " {"}, {"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 8989, "end_byte": 8995, "start_point": [238, 31], "end_point": [238, 37], "text": "licens"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 8996, "end_byte": 8997, "start_point": [238, 38], "end_point": [238, 39], "text": "("}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 8998, "end_byte": 9011, "start_point": [238, 40], "end_point": [238, 53], "text": "; },\n        "}, {"type": "=", "children": [], "start_byte": 9012, "end_byte": 9013, "start_point": [238, 54], "end_point": [238, 55], "text": " "}, {"type": "integer_literal", "children": [], "start_byte": 9014, "end_byte": 9015, "start_point": [238, 56], "end_point": [238, 57], "text": " "}], "start_byte": 8998, "end_byte": 9015, "start_point": [238, 40], "end_point": [238, 57], "text": "; },\n            "}, {"type": ";", "children": [], "start_byte": 9015, "end_byte": 9016, "start_point": [238, 57], "end_point": [238, 58], "text": " "}], "start_byte": 8998, "end_byte": 9016, "start_point": [238, 40], "end_point": [238, 58], "text": "; },\n             "}, {"type": "}", "children": [], "start_byte": 9017, "end_byte": 9018, "start_point": [238, 59], "end_point": [238, 60], "text": " "}], "start_byte": 8996, "end_byte": 9018, "start_point": [238, 38], "end_point": [238, 60], "text": "(); },\n               "}], "start_byte": 8989, "end_byte": 9018, "start_point": [238, 31], "end_point": [238, 60], "text": "license(); },\n               "}, {"type": ",", "children": [], "start_byte": 9018, "end_byte": 9019, "start_point": [238, 60], "end_point": [238, 61], "text": " "}], "start_byte": 8982, "end_byte": 9019, "start_point": [238, 24], "end_point": [238, 61], "text": "safe { license(); },\n                "}, {"type": "match_arm", "children": [{"type": "match_pattern", "children": [{"type": "char_literal", "children": [], "start_byte": 9044, "end_byte": 9047, "start_point": [239, 24], "end_point": [239, 27], "text": "ERB"}], "start_byte": 9044, "end_byte": 9047, "start_point": [239, 24], "end_point": [239, 27], "text": "ERB"}, {"type": "=>", "children": [], "start_byte": 9048, "end_byte": 9050, "start_point": [239, 28], "end_point": [239, 30], "text": "SI"}, {"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 9051, "end_byte": 9057, "start_point": [239, 31], "end_point": [239, 37], "text": "Y += 1"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 9058, "end_byte": 9059, "start_point": [239, 38], "end_point": [239, 39], "text": " "}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 9060, "end_byte": 9073, "start_point": [239, 40], "end_point": [239, 53], "text": ",\n           "}, {"type": "=", "children": [], "start_byte": 9074, "end_byte": 9075, "start_point": [239, 54], "end_point": [239, 55], "text": " "}, {"type": "integer_literal", "children": [], "start_byte": 9076, "end_byte": 9077, "start_point": [239, 56], "end_point": [239, 57], "text": " "}], "start_byte": 9060, "end_byte": 9077, "start_point": [239, 40], "end_point": [239, 57], "text": ",\n               "}, {"type": ";", "children": [], "start_byte": 9077, "end_byte": 9078, "start_point": [239, 57], "end_point": [239, 58], "text": " "}], "start_byte": 9060, "end_byte": 9078, "start_point": [239, 40], "end_point": [239, 58], "text": ",\n                "}, {"type": "}", "children": [], "start_byte": 9079, "end_byte": 9080, "start_point": [239, 59], "end_point": [239, 60], "text": " "}], "start_byte": 9058, "end_byte": 9080, "start_point": [239, 38], "end_point": [239, 60], "text": " },\n                  "}], "start_byte": 9051, "end_byte": 9080, "start_point": [239, 31], "end_point": [239, 60], "text": "Y += 1; },\n                  "}, {"type": ",", "children": [], "start_byte": 9080, "end_byte": 9081, "start_point": [239, 60], "end_point": [239, 61], "text": " "}], "start_byte": 9044, "end_byte": 9081, "start_point": [239, 24], "end_point": [239, 61], "text": "ERBOSITY += 1; },\n                   "}, {"type": "match_arm", "children": [{"type": "match_pattern", "children": [{"type": "char_literal", "children": [], "start_byte": 9106, "end_byte": 9109, "start_point": [240, 24], "end_point": [240, 27], "text": "   "}], "start_byte": 9106, "end_byte": 9109, "start_point": [240, 24], "end_point": [240, 27], "text": "   "}, {"type": "=>", "children": [], "start_byte": 9110, "end_byte": 9112, "start_point": [240, 28], "end_point": [240, 30], "text": "  "}, {"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 9113, "end_byte": 9119, "start_point": [240, 31], "end_point": [240, 37], "text": "      "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 9120, "end_byte": 9121, "start_point": [240, 38], "end_point": [240, 39], "text": " "}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 9122, "end_byte": 9135, "start_point": [240, 40], "end_point": [240, 53], "text": " unsafe{\n    "}, {"type": "=", "children": [], "start_byte": 9136, "end_byte": 9137, "start_point": [240, 54], "end_point": [240, 55], "text": " "}, {"type": "integer_literal", "children": [], "start_byte": 9138, "end_byte": 9139, "start_point": [240, 56], "end_point": [240, 57], "text": " "}], "start_byte": 9122, "end_byte": 9139, "start_point": [240, 40], "end_point": [240, 57], "text": " unsafe{\n        "}, {"type": ";", "children": [], "start_byte": 9139, "end_byte": 9140, "start_point": [240, 57], "end_point": [240, 58], "text": " "}], "start_byte": 9122, "end_byte": 9140, "start_point": [240, 40], "end_point": [240, 58], "text": " unsafe{\n         "}, {"type": "}", "children": [], "start_byte": 9141, "end_byte": 9142, "start_point": [240, 59], "end_point": [240, 60], "text": " "}], "start_byte": 9120, "end_byte": 9142, "start_point": [240, 38], "end_point": [240, 60], "text": "   unsafe{\n           "}], "start_byte": 9113, "end_byte": 9142, "start_point": [240, 31], "end_point": [240, 60], "text": "          unsafe{\n           "}, {"type": ",", "children": [], "start_byte": 9142, "end_byte": 9143, "start_point": [240, 60], "end_point": [240, 61], "text": " "}], "start_byte": 9106, "end_byte": 9143, "start_point": [240, 24], "end_point": [240, 61], "text": "                 unsafe{\n            "}, {"type": "match_arm", "children": [{"type": "match_pattern", "children": [{"type": "char_literal", "children": [], "start_byte": 9168, "end_byte": 9171, "start_point": [241, 24], "end_point": [241, 27], "text": "rog"}], "start_byte": 9168, "end_byte": 9171, "start_point": [241, 24], "end_point": [241, 27], "text": "rog"}, {"type": "=>", "children": [], "start_byte": 9172, "end_byte": 9174, "start_point": [241, 28], "end_point": [241, 30], "text": "na"}, {"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 9175, "end_byte": 9181, "start_point": [241, 31], "end_point": [241, 37], "text": "e_str "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 9182, "end_byte": 9183, "start_point": [241, 38], "end_point": [241, 39], "text": " "}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 9184, "end_byte": 9197, "start_point": [241, 40], "end_point": [241, 53], "text": "td::str::from"}, {"type": "=", "children": [], "start_byte": 9198, "end_byte": 9199, "start_point": [241, 54], "end_point": [241, 55], "text": "u"}, {"type": "integer_literal", "children": [], "start_byte": 9200, "end_byte": 9201, "start_point": [241, 56], "end_point": [241, 57], "text": "f"}], "start_byte": 9184, "end_byte": 9201, "start_point": [241, 40], "end_point": [241, 57], "text": "td::str::from_utf"}, {"type": ";", "children": [], "start_byte": 9201, "end_byte": 9202, "start_point": [241, 57], "end_point": [241, 58], "text": "8"}], "start_byte": 9184, "end_byte": 9202, "start_point": [241, 40], "end_point": [241, 58], "text": "td::str::from_utf8"}, {"type": "}", "children": [], "start_byte": 9203, "end_byte": 9204, "start_point": [241, 59], "end_point": [241, 60], "text": "&"}], "start_byte": 9182, "end_byte": 9204, "start_point": [241, 38], "end_point": [241, 60], "text": " std::str::from_utf8(&"}], "start_byte": 9175, "end_byte": 9204, "start_point": [241, 31], "end_point": [241, 60], "text": "e_str = std::str::from_utf8(&"}, {"type": ",", "children": [], "start_byte": 9204, "end_byte": 9205, "start_point": [241, 60], "end_point": [241, 61], "text": "P"}], "start_byte": 9168, "end_byte": 9205, "start_point": [241, 24], "end_point": [241, 61], "text": "rog_name_str = std::str::from_utf8(&P"}, {"type": "match_arm", "children": [{"type": "match_pattern", "children": [{"type": "char_literal", "children": [], "start_byte": 9230, "end_byte": 9233, "start_point": [242, 24], "end_point": [242, 27], "text": "ME "}], "start_byte": 9230, "end_byte": 9233, "start_point": [242, 24], "end_point": [242, 27], "text": "ME "}, {"type": "=>", "children": [], "start_byte": 9234, "end_byte": 9236, "start_point": [242, 28], "end_point": [242, 30], "text": "\u662f\u6709"}, {"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 9237, "end_byte": 9243, "start_point": [242, 31], "end_point": [242, 37], "text": "\u7684 UTF-"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 9244, "end_byte": 9245, "start_point": [242, 38], "end_point": [242, 39], "text": " "}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 9246, "end_byte": 9259, "start_point": [242, 40], "end_point": [242, 53], "text": "\u7b26\u4e32\");\n       "}, {"type": "=", "children": [], "start_byte": 9260, "end_byte": 9261, "start_point": [242, 54], "end_point": [242, 55], "text": " "}, {"type": "integer_literal", "children": [], "start_byte": 9262, "end_byte": 9263, "start_point": [242, 56], "end_point": [242, 57], "text": " "}], "start_byte": 9246, "end_byte": 9263, "start_point": [242, 40], "end_point": [242, 57], "text": "\u7b26\u4e32\");\n           "}, {"type": ";", "children": [], "start_byte": 9263, "end_byte": 9264, "start_point": [242, 57], "end_point": [242, 58], "text": " "}], "start_byte": 9246, "end_byte": 9264, "start_point": [242, 40], "end_point": [242, 58], "text": "\u7b26\u4e32\");\n            "}, {"type": "}", "children": [], "start_byte": 9265, "end_byte": 9266, "start_point": [242, 59], "end_point": [242, 60], "text": " "}], "start_byte": 9244, "end_byte": 9266, "start_point": [242, 38], "end_point": [242, 60], "text": " \u5b57\u7b26\u4e32\");\n              "}], "start_byte": 9237, "end_byte": 9266, "start_point": [242, 31], "end_point": [242, 60], "text": "\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n              "}, {"type": ",", "children": [], "start_byte": 9266, "end_byte": 9267, "start_point": [242, 60], "end_point": [242, 61], "text": " "}], "start_byte": 9230, "end_byte": 9267, "start_point": [242, 24], "end_point": [242, 61], "text": "ME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n               "}, {"type": "line_comment", "children": [], "start_byte": 9292, "end_byte": 9319, "start_point": [243, 24], "end_point": [243, 51], "text": "og_name_str);\n             "}, {"type": "match_arm", "children": [{"type": "match_pattern", "children": [{"type": "char_literal", "children": [], "start_byte": 9344, "end_byte": 9347, "start_point": [244, 24], "end_point": [244, 27], "text": "   "}], "start_byte": 9344, "end_byte": 9347, "start_point": [244, 24], "end_point": [244, 27], "text": "   "}, {"type": "=>", "children": [], "start_byte": 9348, "end_byte": 9350, "start_point": [244, 28], "end_point": [244, 30], "text": "  "}, {"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 9351, "end_byte": 9357, "start_point": [244, 31], "end_point": [244, 37], "text": "      "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 9358, "end_byte": 9359, "start_point": [244, 38], "end_point": [244, 39], "text": " "}, {"type": "expression_statement", "children": [{"type": "call_expression", "children": [{"type": "identifier", "children": [], "start_byte": 9360, "end_byte": 9367, "start_point": [244, 40], "end_point": [244, 47], "text": "    // "}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 9367, "end_byte": 9368, "start_point": [244, 47], "end_point": [244, 48], "text": "p"}, {"type": ")", "children": [], "start_byte": 9368, "end_byte": 9369, "start_point": [244, 48], "end_point": [244, 49], "text": "r"}], "start_byte": 9367, "end_byte": 9369, "start_point": [244, 47], "end_point": [244, 49], "text": "pr"}], "start_byte": 9360, "end_byte": 9369, "start_point": [244, 40], "end_point": [244, 49], "text": "    // pr"}, {"type": ";", "children": [], "start_byte": 9369, "end_byte": 9370, "start_point": [244, 49], "end_point": [244, 50], "text": "o"}], "start_byte": 9360, "end_byte": 9370, "start_point": [244, 40], "end_point": [244, 50], "text": "    // pro"}, {"type": "}", "children": [], "start_byte": 9371, "end_byte": 9372, "start_point": [244, 51], "end_point": [244, 52], "text": "e"}], "start_byte": 9358, "end_byte": 9372, "start_point": [244, 38], "end_point": [244, 52], "text": "      // proce"}], "start_byte": 9351, "end_byte": 9372, "start_point": [244, 31], "end_point": [244, 52], "text": "             // proce"}, {"type": ",", "children": [], "start_byte": 9372, "end_byte": 9373, "start_point": [244, 52], "end_point": [244, 53], "text": "s"}], "start_byte": 9344, "end_byte": 9373, "start_point": [244, 24], "end_point": [244, 53], "text": "                    // proces"}, {"type": "match_arm", "children": [{"type": "match_pattern", "children": [{"type": "char_literal", "children": [], "start_byte": 9398, "end_byte": 9401, "start_point": [245, 24], "end_point": [245, 27], "text": "   "}], "start_byte": 9398, "end_byte": 9401, "start_point": [245, 24], "end_point": [245, 27], "text": "   "}, {"type": "=>", "children": [], "start_byte": 9402, "end_byte": 9404, "start_point": [245, 28], "end_point": [245, 30], "text": "  "}, {"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 9405, "end_byte": 9411, "start_point": [245, 31], "end_point": [245, 37], "text": "    },"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 9412, "end_byte": 9413, "start_point": [245, 38], "end_point": [245, 39], "text": " "}, {"type": "expression_statement", "children": [{"type": "compound_assignment_expr", "children": [{"type": "identifier", "children": [], "start_byte": 9414, "end_byte": 9423, "start_point": [245, 40], "end_point": [245, 49], "text": "         "}, {"type": "+=", "children": [], "start_byte": 9424, "end_byte": 9426, "start_point": [245, 50], "end_point": [245, 52], "text": "  "}, {"type": "integer_literal", "children": [], "start_byte": 9427, "end_byte": 9428, "start_point": [245, 53], "end_point": [245, 54], "text": " "}], "start_byte": 9414, "end_byte": 9428, "start_point": [245, 40], "end_point": [245, 54], "text": "              "}, {"type": ";", "children": [], "start_byte": 9428, "end_byte": 9429, "start_point": [245, 54], "end_point": [245, 55], "text": " "}], "start_byte": 9414, "end_byte": 9429, "start_point": [245, 40], "end_point": [245, 55], "text": "               "}, {"type": "}", "children": [], "start_byte": 9430, "end_byte": 9431, "start_point": [245, 56], "end_point": [245, 57], "text": " "}], "start_byte": 9412, "end_byte": 9431, "start_point": [245, 38], "end_point": [245, 57], "text": "                   "}], "start_byte": 9405, "end_byte": 9431, "start_point": [245, 31], "end_point": [245, 57], "text": "    },\n                   "}, {"type": ",", "children": [], "start_byte": 9431, "end_byte": 9432, "start_point": [245, 57], "end_point": [245, 58], "text": " "}], "start_byte": 9398, "end_byte": 9432, "start_point": [245, 24], "end_point": [245, 58], "text": "           },\n                    "}, {"type": "match_arm", "children": [{"type": "match_pattern", "children": [{"type": "char_literal", "children": [], "start_byte": 9457, "end_byte": 9460, "start_point": [246, 24], "end_point": [246, 27], "text": "   "}], "start_byte": 9457, "end_byte": 9460, "start_point": [246, 24], "end_point": [246, 27], "text": "   "}, {"type": "=>", "children": [], "start_byte": 9461, "end_byte": 9463, "start_point": [246, 28], "end_point": [246, 30], "text": "  "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 9464, "end_byte": 9465, "start_point": [246, 31], "end_point": [246, 32], "text": " "}, {"type": "expression_statement", "children": [{"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 9494, "end_byte": 9500, "start_point": [247, 28], "end_point": [247, 34], "text": "      "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 9500, "end_byte": 9501, "start_point": [247, 34], "end_point": [247, 35], "text": " "}, {"type": "let_declaration", "children": [{"type": "let", "children": [], "start_byte": 9534, "end_byte": 9537, "start_point": [248, 32], "end_point": [248, 35], "text": " fl"}, {"type": "identifier", "children": [], "start_byte": 9538, "end_byte": 9551, "start_point": [248, 36], "end_point": [248, 49], "text": "g `{}`\", Stri"}, {"type": "=", "children": [], "start_byte": 9552, "end_byte": 9553, "start_point": [248, 50], "end_point": [248, 51], "text": "g"}, {"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "call_expression", "children": [{"type": "scoped_identifier", "children": [{"type": "scoped_identifier", "children": [{"type": "identifier", "children": [], "start_byte": 9554, "end_byte": 9557, "start_point": [248, 52], "end_point": [248, 55], "text": ":fr"}, {"type": "::", "children": [], "start_byte": 9557, "end_byte": 9559, "start_point": [248, 55], "end_point": [248, 57], "text": "om"}, {"type": "identifier", "children": [], "start_byte": 9559, "end_byte": 9562, "start_point": [248, 57], "end_point": [248, 60], "text": "_ut"}], "start_byte": 9554, "end_byte": 9562, "start_point": [248, 52], "end_point": [248, 60], "text": ":from_ut"}, {"type": "::", "children": [], "start_byte": 9562, "end_byte": 9564, "start_point": [248, 60], "end_point": [248, 62], "text": "f8"}, {"type": "identifier", "children": [], "start_byte": 9564, "end_byte": 9573, "start_point": [248, 62], "end_point": [248, 71], "text": "_lossy(&P"}], "start_byte": 9554, "end_byte": 9573, "start_point": [248, 52], "end_point": [248, 71], "text": ":from_utf8_lossy(&P"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 9573, "end_byte": 9574, "start_point": [248, 71], "end_point": [248, 72], "text": "R"}, {"type": "reference_expression", "children": [{"type": "&", "children": [], "start_byte": 9574, "end_byte": 9575, "start_point": [248, 72], "end_point": [248, 73], "text": "O"}, {"type": "identifier", "children": [], "start_byte": 9575, "end_byte": 9584, "start_point": [248, 73], "end_point": [248, 82], "text": "G_NAME), "}], "start_byte": 9574, "end_byte": 9584, "start_point": [248, 72], "end_point": [248, 82], "text": "OG_NAME), "}, {"type": ")", "children": [], "start_byte": 9584, "end_byte": 9585, "start_point": [248, 82], "end_point": [248, 83], "text": "n"}], "start_byte": 9573, "end_byte": 9585, "start_point": [248, 71], "end_point": [248, 83], "text": "ROG_NAME), n"}], "start_byte": 9554, "end_byte": 9585, "start_point": [248, 52], "end_point": [248, 83], "text": ":from_utf8_lossy(&PROG_NAME), n"}, {"type": ".", "children": [], "start_byte": 9585, "end_byte": 9586, "start_point": [248, 83], "end_point": [248, 84], "text": "a"}, {"type": "field_identifier", "children": [], "start_byte": 9586, "end_byte": 9592, "start_point": [248, 84], "end_point": [248, 90], "text": "me);\n "}], "start_byte": 9554, "end_byte": 9592, "start_point": [248, 52], "end_point": [248, 90], "text": ":from_utf8_lossy(&PROG_NAME), name);\n "}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 9592, "end_byte": 9593, "start_point": [248, 90], "end_point": [248, 91], "text": " "}, {"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 9593, "end_byte": 9594, "start_point": [248, 91], "end_point": [248, 92], "text": " "}, {"type": "\"", "children": [], "start_byte": 9635, "end_byte": 9636, "start_point": [248, 133], "end_point": [248, 134], "text": "r"}], "start_byte": 9593, "end_byte": 9636, "start_point": [248, 91], "end_point": [248, 134], "text": "                          let prog_name_str"}, {"type": ")", "children": [], "start_byte": 9636, "end_byte": 9637, "start_point": [248, 134], "end_point": [248, 135], "text": " "}], "start_byte": 9592, "end_byte": 9637, "start_point": [248, 90], "end_point": [248, 135], "text": "                           let prog_name_str "}], "start_byte": 9554, "end_byte": 9637, "start_point": [248, 52], "end_point": [248, 135], "text": ":from_utf8_lossy(&PROG_NAME), name);\n                            let prog_name_str "}, {"type": ";", "children": [], "start_byte": 9637, "end_byte": 9638, "start_point": [248, 135], "end_point": [248, 136], "text": "="}], "start_byte": 9534, "end_byte": 9638, "start_point": [248, 32], "end_point": [248, 136], "text": " flag `{}`\", String::from_utf8_lossy(&PROG_NAME), name);\n                            let prog_name_str ="}, {"type": "expression_statement", "children": [{"type": "call_expression", "children": [{"type": "identifier", "children": [], "start_byte": 9671, "end_byte": 9676, "start_point": [249, 32], "end_point": [249, 37], "text": "expec"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 9676, "end_byte": 9677, "start_point": [249, 37], "end_point": [249, 38], "text": "t"}, {"type": "identifier", "children": [], "start_byte": 9677, "end_byte": 9690, "start_point": [249, 38], "end_point": [249, 51], "text": "(\"PROG_NAME \u4e0d"}, {"type": ")", "children": [], "start_byte": 9690, "end_byte": 9691, "start_point": [249, 51], "end_point": [249, 52], "text": "\u662f"}], "start_byte": 9676, "end_byte": 9691, "start_point": [249, 37], "end_point": [249, 52], "text": "t(\"PROG_NAME \u4e0d\u662f"}], "start_byte": 9671, "end_byte": 9691, "start_point": [249, 32], "end_point": [249, 52], "text": "expect(\"PROG_NAME \u4e0d\u662f"}, {"type": ";", "children": [], "start_byte": 9691, "end_byte": 9692, "start_point": [249, 52], "end_point": [249, 53], "text": "\u6709"}], "start_byte": 9671, "end_byte": 9692, "start_point": [249, 32], "end_point": [249, 53], "text": "expect(\"PROG_NAME \u4e0d\u662f\u6709"}, {"type": "}", "children": [], "start_byte": 9721, "end_byte": 9722, "start_point": [250, 28], "end_point": [250, 29], "text": " "}], "start_byte": 9500, "end_byte": 9722, "start_point": [247, 34], "end_point": [250, 29], "text": "        eprintln!(\"\u7b2c\u4e00match {}: Bad flag `{}`\", String::from_utf8_lossy(&PROG_NAME), name);\n                            let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n              "}], "start_byte": 9494, "end_byte": 9722, "start_point": [247, 28], "end_point": [250, 29], "text": "              eprintln!(\"\u7b2c\u4e00match {}: Bad flag `{}`\", String::from_utf8_lossy(&PROG_NAME), name);\n                            let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n              "}], "start_byte": 9494, "end_byte": 9722, "start_point": [247, 28], "end_point": [250, 29], "text": "              eprintln!(\"\u7b2c\u4e00match {}: Bad flag `{}`\", String::from_utf8_lossy(&PROG_NAME), name);\n                            let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n              "}, {"type": "line_comment", "children": [], "start_byte": 9751, "end_byte": 9771, "start_point": [251, 28], "end_point": [251, 48], "text": "name_str);\n         "}, {"type": "}", "children": [], "start_byte": 9796, "end_byte": 9797, "start_point": [252, 24], "end_point": [252, 25], "text": " "}], "start_byte": 9464, "end_byte": 9797, "start_point": [246, 31], "end_point": [252, 25], "text": "       unsafe {\n                            eprintln!(\"\u7b2c\u4e00match {}: Bad flag `{}`\", String::from_utf8_lossy(&PROG_NAME), name);\n                            let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                                usage(prog_name_str);\n                            }\n     "}, {"type": ",", "children": [], "start_byte": 9797, "end_byte": 9798, "start_point": [252, 25], "end_point": [252, 26], "text": " "}], "start_byte": 9457, "end_byte": 9798, "start_point": [246, 24], "end_point": [252, 26], "text": "              unsafe {\n                            eprintln!(\"\u7b2c\u4e00match {}: Bad flag `{}`\", String::from_utf8_lossy(&PROG_NAME), name);\n                            let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                                usage(prog_name_str);\n                            }\n      "}, {"type": "match_arm", "children": [{"type": "match_pattern", "children": [{"type": "_", "children": [], "start_byte": 9823, "end_byte": 9824, "start_point": [253, 24], "end_point": [253, 25], "text": "p"}], "start_byte": 9823, "end_byte": 9824, "start_point": [253, 24], "end_point": [253, 25], "text": "p"}, {"type": "=>", "children": [], "start_byte": 9825, "end_byte": 9827, "start_point": [253, 26], "end_point": [253, 28], "text": "oc"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 9828, "end_byte": 9829, "start_point": [253, 29], "end_point": [253, 30], "text": "s"}, {"type": "expression_statement", "children": [{"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 9858, "end_byte": 9864, "start_point": [254, 28], "end_point": [254, 34], "text": "      "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 9865, "end_byte": 9866, "start_point": [254, 35], "end_point": [254, 36], "text": "}"}, {"type": "expression_statement", "children": [{"type": "macro_invocation", "children": [{"type": "identifier", "children": [], "start_byte": 9895, "end_byte": 9903, "start_point": [255, 28], "end_point": [255, 36], "text": "        "}, {"type": "!", "children": [], "start_byte": 9903, "end_byte": 9904, "start_point": [255, 36], "end_point": [255, 37], "text": " "}, {"type": "token_tree", "children": [{"type": "(", "children": [], "start_byte": 9904, "end_byte": 9905, "start_point": [255, 37], "end_point": [255, 38], "text": " "}, {"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 9905, "end_byte": 9906, "start_point": [255, 38], "end_point": [255, 39], "text": "}"}, {"type": "\"", "children": [], "start_byte": 9935, "end_byte": 9936, "start_point": [255, 68], "end_point": [255, 69], "text": " "}], "start_byte": 9905, "end_byte": 9936, "start_point": [255, 38], "end_point": [255, 69], "text": "}\n            }\n        }\n     "}, {"type": "identifier", "children": [], "start_byte": 9938, "end_byte": 9944, "start_point": [255, 71], "end_point": [255, 77], "text": " aa = "}, {"type": "identifier", "children": [], "start_byte": 9946, "end_byte": 9961, "start_point": [255, 79], "end_point": [255, 94], "text": "ell.link;\n    }"}, {"type": "token_tree", "children": [{"type": "(", "children": [], "start_byte": 9961, "end_byte": 9962, "start_point": [255, 94], "end_point": [255, 95], "text": "\n"}, {"type": "identifier", "children": [], "start_byte": 9963, "end_byte": 9972, "start_point": [255, 96], "end_point": [255, 105], "text": "\n    // \u904d"}, {"type": ")", "children": [], "start_byte": 9972, "end_byte": 9973, "start_point": [255, 105], "end_point": [255, 106], "text": "\u5386"}], "start_byte": 9961, "end_byte": 9973, "start_point": [255, 94], "end_point": [255, 106], "text": "\n\n\n    // \u904d\u5386"}, {"type": "identifier", "children": [], "start_byte": 9975, "end_byte": 9979, "start_point": [255, 108], "end_point": [255, 112], "text": "g_li"}, {"type": ")", "children": [], "start_byte": 9979, "end_byte": 9980, "start_point": [255, 112], "end_point": [255, 113], "text": "s"}], "start_byte": 9904, "end_byte": 9980, "start_point": [255, 37], "end_point": [255, 113], "text": " }\n            }\n        }\n        aa = &cell.link;\n    }\n\n\n    // \u904d\u5386arg_lis"}], "start_byte": 9895, "end_byte": 9980, "start_point": [255, 28], "end_point": [255, 113], "text": "          }\n            }\n        }\n        aa = &cell.link;\n    }\n\n\n    // \u904d\u5386arg_lis"}, {"type": ";", "children": [], "start_byte": 9980, "end_byte": 9981, "start_point": [255, 113], "end_point": [255, 114], "text": "t"}], "start_byte": 9895, "end_byte": 9981, "start_point": [255, 28], "end_point": [255, 114], "text": "          }\n            }\n        }\n        aa = &cell.link;\n    }\n\n\n    // \u904d\u5386arg_list"}, {"type": "let_declaration", "children": [{"type": "let", "children": [], "start_byte": 10010, "end_byte": 10013, "start_point": [256, 28], "end_point": [256, 31], "text": " &a"}, {"type": "identifier", "children": [], "start_byte": 10014, "end_byte": 10027, "start_point": [256, 32], "end_point": [256, 45], "text": "g_list;\n    w"}, {"type": "=", "children": [], "start_byte": 10028, "end_byte": 10029, "start_point": [256, 46], "end_point": [256, 47], "text": "i"}, {"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "call_expression", "children": [{"type": "scoped_identifier", "children": [{"type": "scoped_identifier", "children": [{"type": "identifier", "children": [], "start_byte": 10030, "end_byte": 10033, "start_point": [256, 48], "end_point": [256, 51], "text": "e l"}, {"type": "::", "children": [], "start_byte": 10033, "end_byte": 10035, "start_point": [256, 51], "end_point": [256, 53], "text": "et"}, {"type": "identifier", "children": [], "start_byte": 10035, "end_byte": 10038, "start_point": [256, 53], "end_point": [256, 56], "text": " So"}], "start_byte": 10030, "end_byte": 10038, "start_point": [256, 48], "end_point": [256, 56], "text": "e let So"}, {"type": "::", "children": [], "start_byte": 10038, "end_byte": 10040, "start_point": [256, 56], "end_point": [256, 58], "text": "me"}, {"type": "identifier", "children": [], "start_byte": 10040, "end_byte": 10049, "start_point": [256, 58], "end_point": [256, 67], "text": "(cell) = "}], "start_byte": 10030, "end_byte": 10049, "start_point": [256, 48], "end_point": [256, 67], "text": "e let Some(cell) = "}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 10049, "end_byte": 10050, "start_point": [256, 67], "end_point": [256, 68], "text": "a"}, {"type": "reference_expression", "children": [{"type": "&", "children": [], "start_byte": 10050, "end_byte": 10051, "start_point": [256, 68], "end_point": [256, 69], "text": "a"}, {"type": "identifier", "children": [], "start_byte": 10051, "end_byte": 10060, "start_point": [256, 69], "end_point": [256, 78], "text": " {\n      "}], "start_byte": 10050, "end_byte": 10060, "start_point": [256, 68], "end_point": [256, 78], "text": "a {\n      "}, {"type": ")", "children": [], "start_byte": 10060, "end_byte": 10061, "start_point": [256, 78], "end_point": [256, 79], "text": " "}], "start_byte": 10049, "end_byte": 10061, "start_point": [256, 67], "end_point": [256, 79], "text": "aa {\n       "}], "start_byte": 10030, "end_byte": 10061, "start_point": [256, 48], "end_point": [256, 79], "text": "e let Some(cell) = aa {\n       "}, {"type": ".", "children": [], "start_byte": 10061, "end_byte": 10062, "start_point": [256, 79], "end_point": [256, 80], "text": " "}, {"type": "field_identifier", "children": [], "start_byte": 10062, "end_byte": 10068, "start_point": [256, 80], "end_point": [256, 86], "text": "if let"}], "start_byte": 10030, "end_byte": 10068, "start_point": [256, 48], "end_point": [256, 86], "text": "e let Some(cell) = aa {\n        if let"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 10068, "end_byte": 10069, "start_point": [256, 86], "end_point": [256, 87], "text": " "}, {"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 10069, "end_byte": 10070, "start_point": [256, 87], "end_point": [256, 88], "text": "S"}, {"type": "\"", "children": [], "start_byte": 10111, "end_byte": 10112, "start_point": [256, 129], "end_point": [256, 130], "text": "h"}], "start_byte": 10069, "end_byte": 10112, "start_point": [256, 87], "end_point": [256, 130], "text": "Some(name) = &cell.name {\n            match"}, {"type": ")", "children": [], "start_byte": 10112, "end_byte": 10113, "start_point": [256, 130], "end_point": [256, 131], "text": " "}], "start_byte": 10068, "end_byte": 10113, "start_point": [256, 86], "end_point": [256, 131], "text": " Some(name) = &cell.name {\n            match "}], "start_byte": 10030, "end_byte": 10113, "start_point": [256, 48], "end_point": [256, 131], "text": "e let Some(cell) = aa {\n        if let Some(name) = &cell.name {\n            match "}, {"type": ";", "children": [], "start_byte": 10113, "end_byte": 10114, "start_point": [256, 131], "end_point": [256, 132], "text": "n"}], "start_byte": 10010, "end_byte": 10114, "start_point": [256, 28], "end_point": [256, 132], "text": " &arg_list;\n    while let Some(cell) = aa {\n        if let Some(name) = &cell.name {\n            match n"}, {"type": "expression_statement", "children": [{"type": "call_expression", "children": [{"type": "identifier", "children": [], "start_byte": 10147, "end_byte": 10152, "start_point": [257, 32], "end_point": [257, 37], "text": "-\" =>"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 10152, "end_byte": 10153, "start_point": [257, 37], "end_point": [257, 38], "text": " "}, {"type": "identifier", "children": [], "start_byte": 10153, "end_byte": 10166, "start_point": [257, 38], "end_point": [257, 51], "text": "break,\n      "}, {"type": ")", "children": [], "start_byte": 10166, "end_byte": 10167, "start_point": [257, 51], "end_point": [257, 52], "text": " "}], "start_byte": 10152, "end_byte": 10167, "start_point": [257, 37], "end_point": [257, 52], "text": " break,\n       "}], "start_byte": 10147, "end_byte": 10167, "start_point": [257, 32], "end_point": [257, 52], "text": "-\" => break,\n       "}, {"type": ";", "children": [], "start_byte": 10167, "end_byte": 10168, "start_point": [257, 52], "end_point": [257, 53], "text": " "}], "start_byte": 10147, "end_byte": 10168, "start_point": [257, 32], "end_point": [257, 53], "text": "-\" => break,\n        "}, {"type": "}", "children": [], "start_byte": 10197, "end_byte": 10198, "start_point": [258, 28], "end_point": [258, 29], "text": "{"}], "start_byte": 9865, "end_byte": 10198, "start_point": [254, 35], "end_point": [258, 29], "text": "}\n                    }\n                }\n            }\n        }\n        aa = &cell.link;\n    }\n\n\n    // \u904d\u5386arg_list\u5904\u7406\u6bcf\u4e2a\u957f\u683c\u5f0f\u547d\u4ee4\u884c\u53c2\u6570\n    let mut aa = &arg_list;\n    while let Some(cell) = aa {\n        if let Some(name) = &cell.name {\n            match name.as_str() {\n                \"--\" => break,\n                \"--stdout\" => unsafe {"}], "start_byte": 9858, "end_byte": 10198, "start_point": [254, 28], "end_point": [258, 29], "text": "       }\n                    }\n                }\n            }\n        }\n        aa = &cell.link;\n    }\n\n\n    // \u904d\u5386arg_list\u5904\u7406\u6bcf\u4e2a\u957f\u683c\u5f0f\u547d\u4ee4\u884c\u53c2\u6570\n    let mut aa = &arg_list;\n    while let Some(cell) = aa {\n        if let Some(name) = &cell.name {\n            match name.as_str() {\n                \"--\" => break,\n                \"--stdout\" => unsafe {"}], "start_byte": 9858, "end_byte": 10198, "start_point": [254, 28], "end_point": [258, 29], "text": "       }\n                    }\n                }\n            }\n        }\n        aa = &cell.link;\n    }\n\n\n    // \u904d\u5386arg_list\u5904\u7406\u6bcf\u4e2a\u957f\u683c\u5f0f\u547d\u4ee4\u884c\u53c2\u6570\n    let mut aa = &arg_list;\n    while let Some(cell) = aa {\n        if let Some(name) = &cell.name {\n            match name.as_str() {\n                \"--\" => break,\n                \"--stdout\" => unsafe {"}, {"type": "line_comment", "children": [], "start_byte": 10227, "end_byte": 10247, "start_point": [259, 28], "end_point": [259, 48], "text": "     \"--decompress\" "}, {"type": "}", "children": [], "start_byte": 10272, "end_byte": 10273, "start_point": [260, 24], "end_point": [260, 25], "text": "}"}], "start_byte": 9828, "end_byte": 10273, "start_point": [253, 29], "end_point": [260, 25], "text": "ss::exit(1);\n                        }\n                    }\n                }\n            }\n        }\n        aa = &cell.link;\n    }\n\n\n    // \u904d\u5386arg_list\u5904\u7406\u6bcf\u4e2a\u957f\u683c\u5f0f\u547d\u4ee4\u884c\u53c2\u6570\n    let mut aa = &arg_list;\n    while let Some(cell) = aa {\n        if let Some(name) = &cell.name {\n            match name.as_str() {\n                \"--\" => break,\n                \"--stdout\" => unsafe { SRC_MODE = 2; },\n                \"--decompress\" => unsafe { OP_MODE = 2; }"}], "start_byte": 9823, "end_byte": 10273, "start_point": [253, 24], "end_point": [260, 25], "text": "process::exit(1);\n                        }\n                    }\n                }\n            }\n        }\n        aa = &cell.link;\n    }\n\n\n    // \u904d\u5386arg_list\u5904\u7406\u6bcf\u4e2a\u957f\u683c\u5f0f\u547d\u4ee4\u884c\u53c2\u6570\n    let mut aa = &arg_list;\n    while let Some(cell) = aa {\n        if let Some(name) = &cell.name {\n            match name.as_str() {\n                \"--\" => break,\n                \"--stdout\" => unsafe { SRC_MODE = 2; },\n                \"--decompress\" => unsafe { OP_MODE = 2; }"}, {"type": "}", "children": [], "start_byte": 10294, "end_byte": 10295, "start_point": [261, 20], "end_point": [261, 21], "text": "c"}], "start_byte": 8228, "end_byte": 10295, "start_point": [225, 29], "end_point": [261, 21], "text": "},\n                        's' => unsafe { SMALL_MODE = true; },\n                        'q' => unsafe { NOISY = false; },\n                        '1' => unsafe { blockSize100k = 1; },\n                        '2' => unsafe { blockSize100k = 2; },\n                        '3' => unsafe { blockSize100k = 3; },\n                        '4' => unsafe { blockSize100k = 4; },\n                        '5' => unsafe { blockSize100k = 5; },\n                        '6' => unsafe { blockSize100k = 6; },\n                        '7' => unsafe { blockSize100k = 7; },\n                        '8' => unsafe { blockSize100k = 8; },\n                        '9' => unsafe { blockSize100k = 9; },\n                        // ...\u5904\u7406\u5176\u4ed6\u5b57\u7b26...\n                        'L' => unsafe { license(); },\n                        'v' => unsafe { VERBOSITY += 1; },\n                        'h' => {\n                            unsafe{\n                                let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                                usage(prog_name_str);\n                            }\n                            // process::exit(0);\n                        },\n                        _ => {\n                            unsafe {\n                            eprintln!(\"\u7b2c\u4e00match {}: Bad flag `{}`\", String::from_utf8_lossy(&PROG_NAME), name);\n                            let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                                usage(prog_name_str);\n                            }\n                            // process::exit(1);\n                        }\n                    }\n                }\n            }\n        }\n        aa = &cell.link;\n    }\n\n\n    // \u904d\u5386arg_list\u5904\u7406\u6bcf\u4e2a\u957f\u683c\u5f0f\u547d\u4ee4\u884c\u53c2\u6570\n    let mut aa = &arg_list;\n    while let Some(cell) = aa {\n        if let Some(name) = &cell.name {\n            match name.as_str() {\n                \"--\" => break,\n                \"--stdout\" => unsafe { SRC_MODE = 2; },\n                \"--decompress\" => unsafe { OP_MODE = 2; },\n                \"--c"}], "start_byte": 8219, "end_byte": 10295, "start_point": [225, 20], "end_point": [261, 21], "text": " = true; },\n                        's' => unsafe { SMALL_MODE = true; },\n                        'q' => unsafe { NOISY = false; },\n                        '1' => unsafe { blockSize100k = 1; },\n                        '2' => unsafe { blockSize100k = 2; },\n                        '3' => unsafe { blockSize100k = 3; },\n                        '4' => unsafe { blockSize100k = 4; },\n                        '5' => unsafe { blockSize100k = 5; },\n                        '6' => unsafe { blockSize100k = 6; },\n                        '7' => unsafe { blockSize100k = 7; },\n                        '8' => unsafe { blockSize100k = 8; },\n                        '9' => unsafe { blockSize100k = 9; },\n                        // ...\u5904\u7406\u5176\u4ed6\u5b57\u7b26...\n                        'L' => unsafe { license(); },\n                        'v' => unsafe { VERBOSITY += 1; },\n                        'h' => {\n                            unsafe{\n                                let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                                usage(prog_name_str);\n                            }\n                            // process::exit(0);\n                        },\n                        _ => {\n                            unsafe {\n                            eprintln!(\"\u7b2c\u4e00match {}: Bad flag `{}`\", String::from_utf8_lossy(&PROG_NAME), name);\n                            let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                                usage(prog_name_str);\n                            }\n                            // process::exit(1);\n                        }\n                    }\n                }\n            }\n        }\n        aa = &cell.link;\n    }\n\n\n    // \u904d\u5386arg_list\u5904\u7406\u6bcf\u4e2a\u957f\u683c\u5f0f\u547d\u4ee4\u884c\u53c2\u6570\n    let mut aa = &arg_list;\n    while let Some(cell) = aa {\n        if let Some(name) = &cell.name {\n            match name.as_str() {\n                \"--\" => break,\n                \"--stdout\" => unsafe { SRC_MODE = 2; },\n                \"--decompress\" => unsafe { OP_MODE = 2; },\n                \"--c"}], "start_byte": 8219, "end_byte": 10295, "start_point": [225, 20], "end_point": [261, 21], "text": " = true; },\n                        's' => unsafe { SMALL_MODE = true; },\n                        'q' => unsafe { NOISY = false; },\n                        '1' => unsafe { blockSize100k = 1; },\n                        '2' => unsafe { blockSize100k = 2; },\n                        '3' => unsafe { blockSize100k = 3; },\n                        '4' => unsafe { blockSize100k = 4; },\n                        '5' => unsafe { blockSize100k = 5; },\n                        '6' => unsafe { blockSize100k = 6; },\n                        '7' => unsafe { blockSize100k = 7; },\n                        '8' => unsafe { blockSize100k = 8; },\n                        '9' => unsafe { blockSize100k = 9; },\n                        // ...\u5904\u7406\u5176\u4ed6\u5b57\u7b26...\n                        'L' => unsafe { license(); },\n                        'v' => unsafe { VERBOSITY += 1; },\n                        'h' => {\n                            unsafe{\n                                let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                                usage(prog_name_str);\n                            }\n                            // process::exit(0);\n                        },\n                        _ => {\n                            unsafe {\n                            eprintln!(\"\u7b2c\u4e00match {}: Bad flag `{}`\", String::from_utf8_lossy(&PROG_NAME), name);\n                            let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                                usage(prog_name_str);\n                            }\n                            // process::exit(1);\n                        }\n                    }\n                }\n            }\n        }\n        aa = &cell.link;\n    }\n\n\n    // \u904d\u5386arg_list\u5904\u7406\u6bcf\u4e2a\u957f\u683c\u5f0f\u547d\u4ee4\u884c\u53c2\u6570\n    let mut aa = &arg_list;\n    while let Some(cell) = aa {\n        if let Some(name) = &cell.name {\n            match name.as_str() {\n                \"--\" => break,\n                \"--stdout\" => unsafe { SRC_MODE = 2; },\n                \"--decompress\" => unsafe { OP_MODE = 2; },\n                \"--c"}, {"type": "}", "children": [], "start_byte": 10312, "end_byte": 10313, "start_point": [262, 16], "end_point": [262, 17], "text": "e"}], "start_byte": 8197, "end_byte": 10313, "start_point": [224, 47], "end_point": [262, 17], "text": "afe { KEEP_INPUT_FILES = true; },\n                        's' => unsafe { SMALL_MODE = true; },\n                        'q' => unsafe { NOISY = false; },\n                        '1' => unsafe { blockSize100k = 1; },\n                        '2' => unsafe { blockSize100k = 2; },\n                        '3' => unsafe { blockSize100k = 3; },\n                        '4' => unsafe { blockSize100k = 4; },\n                        '5' => unsafe { blockSize100k = 5; },\n                        '6' => unsafe { blockSize100k = 6; },\n                        '7' => unsafe { blockSize100k = 7; },\n                        '8' => unsafe { blockSize100k = 8; },\n                        '9' => unsafe { blockSize100k = 9; },\n                        // ...\u5904\u7406\u5176\u4ed6\u5b57\u7b26...\n                        'L' => unsafe { license(); },\n                        'v' => unsafe { VERBOSITY += 1; },\n                        'h' => {\n                            unsafe{\n                                let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                                usage(prog_name_str);\n                            }\n                            // process::exit(0);\n                        },\n                        _ => {\n                            unsafe {\n                            eprintln!(\"\u7b2c\u4e00match {}: Bad flag `{}`\", String::from_utf8_lossy(&PROG_NAME), name);\n                            let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                                usage(prog_name_str);\n                            }\n                            // process::exit(1);\n                        }\n                    }\n                }\n            }\n        }\n        aa = &cell.link;\n    }\n\n\n    // \u904d\u5386arg_list\u5904\u7406\u6bcf\u4e2a\u957f\u683c\u5f0f\u547d\u4ee4\u884c\u53c2\u6570\n    let mut aa = &arg_list;\n    while let Some(cell) = aa {\n        if let Some(name) = &cell.name {\n            match name.as_str() {\n                \"--\" => break,\n                \"--stdout\" => unsafe { SRC_MODE = 2; },\n                \"--decompress\" => unsafe { OP_MODE = 2; },\n                \"--compress\" => unsafe"}], "start_byte": 8166, "end_byte": 10313, "start_point": [224, 16], "end_point": [262, 17], "text": "                     'k' => unsafe { KEEP_INPUT_FILES = true; },\n                        's' => unsafe { SMALL_MODE = true; },\n                        'q' => unsafe { NOISY = false; },\n                        '1' => unsafe { blockSize100k = 1; },\n                        '2' => unsafe { blockSize100k = 2; },\n                        '3' => unsafe { blockSize100k = 3; },\n                        '4' => unsafe { blockSize100k = 4; },\n                        '5' => unsafe { blockSize100k = 5; },\n                        '6' => unsafe { blockSize100k = 6; },\n                        '7' => unsafe { blockSize100k = 7; },\n                        '8' => unsafe { blockSize100k = 8; },\n                        '9' => unsafe { blockSize100k = 9; },\n                        // ...\u5904\u7406\u5176\u4ed6\u5b57\u7b26...\n                        'L' => unsafe { license(); },\n                        'v' => unsafe { VERBOSITY += 1; },\n                        'h' => {\n                            unsafe{\n                                let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                                usage(prog_name_str);\n                            }\n                            // process::exit(0);\n                        },\n                        _ => {\n                            unsafe {\n                            eprintln!(\"\u7b2c\u4e00match {}: Bad flag `{}`\", String::from_utf8_lossy(&PROG_NAME), name);\n                            let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                                usage(prog_name_str);\n                            }\n                            // process::exit(1);\n                        }\n                    }\n                }\n            }\n        }\n        aa = &cell.link;\n    }\n\n\n    // \u904d\u5386arg_list\u5904\u7406\u6bcf\u4e2a\u957f\u683c\u5f0f\u547d\u4ee4\u884c\u53c2\u6570\n    let mut aa = &arg_list;\n    while let Some(cell) = aa {\n        if let Some(name) = &cell.name {\n            match name.as_str() {\n                \"--\" => break,\n                \"--stdout\" => unsafe { SRC_MODE = 2; },\n                \"--decompress\" => unsafe { OP_MODE = 2; },\n                \"--compress\" => unsafe"}], "start_byte": 8166, "end_byte": 10313, "start_point": [224, 16], "end_point": [262, 17], "text": "                     'k' => unsafe { KEEP_INPUT_FILES = true; },\n                        's' => unsafe { SMALL_MODE = true; },\n                        'q' => unsafe { NOISY = false; },\n                        '1' => unsafe { blockSize100k = 1; },\n                        '2' => unsafe { blockSize100k = 2; },\n                        '3' => unsafe { blockSize100k = 3; },\n                        '4' => unsafe { blockSize100k = 4; },\n                        '5' => unsafe { blockSize100k = 5; },\n                        '6' => unsafe { blockSize100k = 6; },\n                        '7' => unsafe { blockSize100k = 7; },\n                        '8' => unsafe { blockSize100k = 8; },\n                        '9' => unsafe { blockSize100k = 9; },\n                        // ...\u5904\u7406\u5176\u4ed6\u5b57\u7b26...\n                        'L' => unsafe { license(); },\n                        'v' => unsafe { VERBOSITY += 1; },\n                        'h' => {\n                            unsafe{\n                                let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                                usage(prog_name_str);\n                            }\n                            // process::exit(0);\n                        },\n                        _ => {\n                            unsafe {\n                            eprintln!(\"\u7b2c\u4e00match {}: Bad flag `{}`\", String::from_utf8_lossy(&PROG_NAME), name);\n                            let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                                usage(prog_name_str);\n                            }\n                            // process::exit(1);\n                        }\n                    }\n                }\n            }\n        }\n        aa = &cell.link;\n    }\n\n\n    // \u904d\u5386arg_list\u5904\u7406\u6bcf\u4e2a\u957f\u683c\u5f0f\u547d\u4ee4\u884c\u53c2\u6570\n    let mut aa = &arg_list;\n    while let Some(cell) = aa {\n        if let Some(name) = &cell.name {\n            match name.as_str() {\n                \"--\" => break,\n                \"--stdout\" => unsafe { SRC_MODE = 2; },\n                \"--decompress\" => unsafe { OP_MODE = 2; },\n                \"--compress\" => unsafe"}, {"type": "}", "children": [], "start_byte": 10326, "end_byte": 10327, "start_point": [263, 12], "end_point": [263, 13], "text": "1"}], "start_byte": 8148, "end_byte": 10327, "start_point": [223, 64], "end_point": [263, 13], "text": "P_MODE = 3; },\n                        'k' => unsafe { KEEP_INPUT_FILES = true; },\n                        's' => unsafe { SMALL_MODE = true; },\n                        'q' => unsafe { NOISY = false; },\n                        '1' => unsafe { blockSize100k = 1; },\n                        '2' => unsafe { blockSize100k = 2; },\n                        '3' => unsafe { blockSize100k = 3; },\n                        '4' => unsafe { blockSize100k = 4; },\n                        '5' => unsafe { blockSize100k = 5; },\n                        '6' => unsafe { blockSize100k = 6; },\n                        '7' => unsafe { blockSize100k = 7; },\n                        '8' => unsafe { blockSize100k = 8; },\n                        '9' => unsafe { blockSize100k = 9; },\n                        // ...\u5904\u7406\u5176\u4ed6\u5b57\u7b26...\n                        'L' => unsafe { license(); },\n                        'v' => unsafe { VERBOSITY += 1; },\n                        'h' => {\n                            unsafe{\n                                let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                                usage(prog_name_str);\n                            }\n                            // process::exit(0);\n                        },\n                        _ => {\n                            unsafe {\n                            eprintln!(\"\u7b2c\u4e00match {}: Bad flag `{}`\", String::from_utf8_lossy(&PROG_NAME), name);\n                            let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                                usage(prog_name_str);\n                            }\n                            // process::exit(1);\n                        }\n                    }\n                }\n            }\n        }\n        aa = &cell.link;\n    }\n\n\n    // \u904d\u5386arg_list\u5904\u7406\u6bcf\u4e2a\u957f\u683c\u5f0f\u547d\u4ee4\u884c\u53c2\u6570\n    let mut aa = &arg_list;\n    while let Some(cell) = aa {\n        if let Some(name) = &cell.name {\n            match name.as_str() {\n                \"--\" => break,\n                \"--stdout\" => unsafe { SRC_MODE = 2; },\n                \"--decompress\" => unsafe { OP_MODE = 2; },\n                \"--compress\" => unsafe { OP_MODE = 1"}], "start_byte": 8096, "end_byte": 10327, "start_point": [223, 12], "end_point": [263, 13], "text": "= true; },\n                        't' => unsafe { OP_MODE = 3; },\n                        'k' => unsafe { KEEP_INPUT_FILES = true; },\n                        's' => unsafe { SMALL_MODE = true; },\n                        'q' => unsafe { NOISY = false; },\n                        '1' => unsafe { blockSize100k = 1; },\n                        '2' => unsafe { blockSize100k = 2; },\n                        '3' => unsafe { blockSize100k = 3; },\n                        '4' => unsafe { blockSize100k = 4; },\n                        '5' => unsafe { blockSize100k = 5; },\n                        '6' => unsafe { blockSize100k = 6; },\n                        '7' => unsafe { blockSize100k = 7; },\n                        '8' => unsafe { blockSize100k = 8; },\n                        '9' => unsafe { blockSize100k = 9; },\n                        // ...\u5904\u7406\u5176\u4ed6\u5b57\u7b26...\n                        'L' => unsafe { license(); },\n                        'v' => unsafe { VERBOSITY += 1; },\n                        'h' => {\n                            unsafe{\n                                let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                                usage(prog_name_str);\n                            }\n                            // process::exit(0);\n                        },\n                        _ => {\n                            unsafe {\n                            eprintln!(\"\u7b2c\u4e00match {}: Bad flag `{}`\", String::from_utf8_lossy(&PROG_NAME), name);\n                            let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                                usage(prog_name_str);\n                            }\n                            // process::exit(1);\n                        }\n                    }\n                }\n            }\n        }\n        aa = &cell.link;\n    }\n\n\n    // \u904d\u5386arg_list\u5904\u7406\u6bcf\u4e2a\u957f\u683c\u5f0f\u547d\u4ee4\u884c\u53c2\u6570\n    let mut aa = &arg_list;\n    while let Some(cell) = aa {\n        if let Some(name) = &cell.name {\n            match name.as_str() {\n                \"--\" => break,\n                \"--stdout\" => unsafe { SRC_MODE = 2; },\n                \"--decompress\" => unsafe { OP_MODE = 2; },\n                \"--compress\" => unsafe { OP_MODE = 1"}], "start_byte": 8096, "end_byte": 10327, "start_point": [223, 12], "end_point": [263, 13], "text": "= true; },\n                        't' => unsafe { OP_MODE = 3; },\n                        'k' => unsafe { KEEP_INPUT_FILES = true; },\n                        's' => unsafe { SMALL_MODE = true; },\n                        'q' => unsafe { NOISY = false; },\n                        '1' => unsafe { blockSize100k = 1; },\n                        '2' => unsafe { blockSize100k = 2; },\n                        '3' => unsafe { blockSize100k = 3; },\n                        '4' => unsafe { blockSize100k = 4; },\n                        '5' => unsafe { blockSize100k = 5; },\n                        '6' => unsafe { blockSize100k = 6; },\n                        '7' => unsafe { blockSize100k = 7; },\n                        '8' => unsafe { blockSize100k = 8; },\n                        '9' => unsafe { blockSize100k = 9; },\n                        // ...\u5904\u7406\u5176\u4ed6\u5b57\u7b26...\n                        'L' => unsafe { license(); },\n                        'v' => unsafe { VERBOSITY += 1; },\n                        'h' => {\n                            unsafe{\n                                let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                                usage(prog_name_str);\n                            }\n                            // process::exit(0);\n                        },\n                        _ => {\n                            unsafe {\n                            eprintln!(\"\u7b2c\u4e00match {}: Bad flag `{}`\", String::from_utf8_lossy(&PROG_NAME), name);\n                            let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                                usage(prog_name_str);\n                            }\n                            // process::exit(1);\n                        }\n                    }\n                }\n            }\n        }\n        aa = &cell.link;\n    }\n\n\n    // \u904d\u5386arg_list\u5904\u7406\u6bcf\u4e2a\u957f\u683c\u5f0f\u547d\u4ee4\u884c\u53c2\u6570\n    let mut aa = &arg_list;\n    while let Some(cell) = aa {\n        if let Some(name) = &cell.name {\n            match name.as_str() {\n                \"--\" => break,\n                \"--stdout\" => unsafe { SRC_MODE = 2; },\n                \"--decompress\" => unsafe { OP_MODE = 2; },\n                \"--compress\" => unsafe { OP_MODE = 1"}, {"type": "}", "children": [], "start_byte": 10336, "end_byte": 10337, "start_point": [264, 8], "end_point": [264, 9], "text": " "}], "start_byte": 8004, "end_byte": 10337, "start_point": [218, 39], "end_point": [264, 9], "text": "    'z' => unsafe { OP_MODE = 1; },\n                        'f' => unsafe { FORCE_OVERWRITE = true; },\n                        't' => unsafe { OP_MODE = 3; },\n                        'k' => unsafe { KEEP_INPUT_FILES = true; },\n                        's' => unsafe { SMALL_MODE = true; },\n                        'q' => unsafe { NOISY = false; },\n                        '1' => unsafe { blockSize100k = 1; },\n                        '2' => unsafe { blockSize100k = 2; },\n                        '3' => unsafe { blockSize100k = 3; },\n                        '4' => unsafe { blockSize100k = 4; },\n                        '5' => unsafe { blockSize100k = 5; },\n                        '6' => unsafe { blockSize100k = 6; },\n                        '7' => unsafe { blockSize100k = 7; },\n                        '8' => unsafe { blockSize100k = 8; },\n                        '9' => unsafe { blockSize100k = 9; },\n                        // ...\u5904\u7406\u5176\u4ed6\u5b57\u7b26...\n                        'L' => unsafe { license(); },\n                        'v' => unsafe { VERBOSITY += 1; },\n                        'h' => {\n                            unsafe{\n                                let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                                usage(prog_name_str);\n                            }\n                            // process::exit(0);\n                        },\n                        _ => {\n                            unsafe {\n                            eprintln!(\"\u7b2c\u4e00match {}: Bad flag `{}`\", String::from_utf8_lossy(&PROG_NAME), name);\n                            let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                                usage(prog_name_str);\n                            }\n                            // process::exit(1);\n                        }\n                    }\n                }\n            }\n        }\n        aa = &cell.link;\n    }\n\n\n    // \u904d\u5386arg_list\u5904\u7406\u6bcf\u4e2a\u957f\u683c\u5f0f\u547d\u4ee4\u884c\u53c2\u6570\n    let mut aa = &arg_list;\n    while let Some(cell) = aa {\n        if let Some(name) = &cell.name {\n            match name.as_str() {\n                \"--\" => break,\n                \"--stdout\" => unsafe { SRC_MODE = 2; },\n                \"--decompress\" => unsafe { OP_MODE = 2; },\n                \"--compress\" => unsafe { OP_MODE = 1; },\n     "}], "start_byte": 7973, "end_byte": 10337, "start_point": [218, 8], "end_point": [264, 9], "text": "DE = 2; },\n                        'z' => unsafe { OP_MODE = 1; },\n                        'f' => unsafe { FORCE_OVERWRITE = true; },\n                        't' => unsafe { OP_MODE = 3; },\n                        'k' => unsafe { KEEP_INPUT_FILES = true; },\n                        's' => unsafe { SMALL_MODE = true; },\n                        'q' => unsafe { NOISY = false; },\n                        '1' => unsafe { blockSize100k = 1; },\n                        '2' => unsafe { blockSize100k = 2; },\n                        '3' => unsafe { blockSize100k = 3; },\n                        '4' => unsafe { blockSize100k = 4; },\n                        '5' => unsafe { blockSize100k = 5; },\n                        '6' => unsafe { blockSize100k = 6; },\n                        '7' => unsafe { blockSize100k = 7; },\n                        '8' => unsafe { blockSize100k = 8; },\n                        '9' => unsafe { blockSize100k = 9; },\n                        // ...\u5904\u7406\u5176\u4ed6\u5b57\u7b26...\n                        'L' => unsafe { license(); },\n                        'v' => unsafe { VERBOSITY += 1; },\n                        'h' => {\n                            unsafe{\n                                let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                                usage(prog_name_str);\n                            }\n                            // process::exit(0);\n                        },\n                        _ => {\n                            unsafe {\n                            eprintln!(\"\u7b2c\u4e00match {}: Bad flag `{}`\", String::from_utf8_lossy(&PROG_NAME), name);\n                            let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                                usage(prog_name_str);\n                            }\n                            // process::exit(1);\n                        }\n                    }\n                }\n            }\n        }\n        aa = &cell.link;\n    }\n\n\n    // \u904d\u5386arg_list\u5904\u7406\u6bcf\u4e2a\u957f\u683c\u5f0f\u547d\u4ee4\u884c\u53c2\u6570\n    let mut aa = &arg_list;\n    while let Some(cell) = aa {\n        if let Some(name) = &cell.name {\n            match name.as_str() {\n                \"--\" => break,\n                \"--stdout\" => unsafe { SRC_MODE = 2; },\n                \"--decompress\" => unsafe { OP_MODE = 2; },\n                \"--compress\" => unsafe { OP_MODE = 1; },\n     "}], "start_byte": 7973, "end_byte": 10337, "start_point": [218, 8], "end_point": [264, 9], "text": "DE = 2; },\n                        'z' => unsafe { OP_MODE = 1; },\n                        'f' => unsafe { FORCE_OVERWRITE = true; },\n                        't' => unsafe { OP_MODE = 3; },\n                        'k' => unsafe { KEEP_INPUT_FILES = true; },\n                        's' => unsafe { SMALL_MODE = true; },\n                        'q' => unsafe { NOISY = false; },\n                        '1' => unsafe { blockSize100k = 1; },\n                        '2' => unsafe { blockSize100k = 2; },\n                        '3' => unsafe { blockSize100k = 3; },\n                        '4' => unsafe { blockSize100k = 4; },\n                        '5' => unsafe { blockSize100k = 5; },\n                        '6' => unsafe { blockSize100k = 6; },\n                        '7' => unsafe { blockSize100k = 7; },\n                        '8' => unsafe { blockSize100k = 8; },\n                        '9' => unsafe { blockSize100k = 9; },\n                        // ...\u5904\u7406\u5176\u4ed6\u5b57\u7b26...\n                        'L' => unsafe { license(); },\n                        'v' => unsafe { VERBOSITY += 1; },\n                        'h' => {\n                            unsafe{\n                                let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                                usage(prog_name_str);\n                            }\n                            // process::exit(0);\n                        },\n                        _ => {\n                            unsafe {\n                            eprintln!(\"\u7b2c\u4e00match {}: Bad flag `{}`\", String::from_utf8_lossy(&PROG_NAME), name);\n                            let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                                usage(prog_name_str);\n                            }\n                            // process::exit(1);\n                        }\n                    }\n                }\n            }\n        }\n        aa = &cell.link;\n    }\n\n\n    // \u904d\u5386arg_list\u5904\u7406\u6bcf\u4e2a\u957f\u683c\u5f0f\u547d\u4ee4\u884c\u53c2\u6570\n    let mut aa = &arg_list;\n    while let Some(cell) = aa {\n        if let Some(name) = &cell.name {\n            match name.as_str() {\n                \"--\" => break,\n                \"--stdout\" => unsafe { SRC_MODE = 2; },\n                \"--decompress\" => unsafe { OP_MODE = 2; },\n                \"--compress\" => unsafe { OP_MODE = 1; },\n     "}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 10346, "end_byte": 10348, "start_point": [265, 8], "end_point": [265, 10], "text": "  "}, {"type": "=", "children": [], "start_byte": 10349, "end_byte": 10350, "start_point": [265, 11], "end_point": [265, 12], "text": "-"}, {"type": "reference_expression", "children": [{"type": "&", "children": [], "start_byte": 10351, "end_byte": 10352, "start_point": [265, 13], "end_point": [265, 14], "text": "f"}, {"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 10352, "end_byte": 10356, "start_point": [265, 14], "end_point": [265, 18], "text": "orce"}, {"type": ".", "children": [], "start_byte": 10356, "end_byte": 10357, "start_point": [265, 18], "end_point": [265, 19], "text": "\""}, {"type": "field_identifier", "children": [], "start_byte": 10357, "end_byte": 10361, "start_point": [265, 19], "end_point": [265, 23], "text": " => "}], "start_byte": 10352, "end_byte": 10361, "start_point": [265, 14], "end_point": [265, 23], "text": "orce\" => "}], "start_byte": 10351, "end_byte": 10361, "start_point": [265, 13], "end_point": [265, 23], "text": "force\" => "}], "start_byte": 10346, "end_byte": 10361, "start_point": [265, 8], "end_point": [265, 23], "text": "  \"--force\" => "}, {"type": ";", "children": [], "start_byte": 10361, "end_byte": 10362, "start_point": [265, 23], "end_point": [265, 24], "text": "u"}], "start_byte": 10346, "end_byte": 10362, "start_point": [265, 8], "end_point": [265, 24], "text": "  \"--force\" => u"}, {"type": "}", "children": [], "start_byte": 10367, "end_byte": 10368, "start_point": [266, 4], "end_point": [266, 5], "text": " "}], "start_byte": 7963, "end_byte": 10368, "start_point": [217, 30], "end_point": [266, 5], "text": "fe { OP_MODE = 2; },\n                        'z' => unsafe { OP_MODE = 1; },\n                        'f' => unsafe { FORCE_OVERWRITE = true; },\n                        't' => unsafe { OP_MODE = 3; },\n                        'k' => unsafe { KEEP_INPUT_FILES = true; },\n                        's' => unsafe { SMALL_MODE = true; },\n                        'q' => unsafe { NOISY = false; },\n                        '1' => unsafe { blockSize100k = 1; },\n                        '2' => unsafe { blockSize100k = 2; },\n                        '3' => unsafe { blockSize100k = 3; },\n                        '4' => unsafe { blockSize100k = 4; },\n                        '5' => unsafe { blockSize100k = 5; },\n                        '6' => unsafe { blockSize100k = 6; },\n                        '7' => unsafe { blockSize100k = 7; },\n                        '8' => unsafe { blockSize100k = 8; },\n                        '9' => unsafe { blockSize100k = 9; },\n                        // ...\u5904\u7406\u5176\u4ed6\u5b57\u7b26...\n                        'L' => unsafe { license(); },\n                        'v' => unsafe { VERBOSITY += 1; },\n                        'h' => {\n                            unsafe{\n                                let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                                usage(prog_name_str);\n                            }\n                            // process::exit(0);\n                        },\n                        _ => {\n                            unsafe {\n                            eprintln!(\"\u7b2c\u4e00match {}: Bad flag `{}`\", String::from_utf8_lossy(&PROG_NAME), name);\n                            let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                                usage(prog_name_str);\n                            }\n                            // process::exit(1);\n                        }\n                    }\n                }\n            }\n        }\n        aa = &cell.link;\n    }\n\n\n    // \u904d\u5386arg_list\u5904\u7406\u6bcf\u4e2a\u957f\u683c\u5f0f\u547d\u4ee4\u884c\u53c2\u6570\n    let mut aa = &arg_list;\n    while let Some(cell) = aa {\n        if let Some(name) = &cell.name {\n            match name.as_str() {\n                \"--\" => break,\n                \"--stdout\" => unsafe { SRC_MODE = 2; },\n                \"--decompress\" => unsafe { OP_MODE = 2; },\n                \"--compress\" => unsafe { OP_MODE = 1; },\n                \"--force\" => unsafe "}], "start_byte": 7937, "end_byte": 10368, "start_point": [217, 4], "end_point": [266, 5], "text": "               'd' => unsafe { OP_MODE = 2; },\n                        'z' => unsafe { OP_MODE = 1; },\n                        'f' => unsafe { FORCE_OVERWRITE = true; },\n                        't' => unsafe { OP_MODE = 3; },\n                        'k' => unsafe { KEEP_INPUT_FILES = true; },\n                        's' => unsafe { SMALL_MODE = true; },\n                        'q' => unsafe { NOISY = false; },\n                        '1' => unsafe { blockSize100k = 1; },\n                        '2' => unsafe { blockSize100k = 2; },\n                        '3' => unsafe { blockSize100k = 3; },\n                        '4' => unsafe { blockSize100k = 4; },\n                        '5' => unsafe { blockSize100k = 5; },\n                        '6' => unsafe { blockSize100k = 6; },\n                        '7' => unsafe { blockSize100k = 7; },\n                        '8' => unsafe { blockSize100k = 8; },\n                        '9' => unsafe { blockSize100k = 9; },\n                        // ...\u5904\u7406\u5176\u4ed6\u5b57\u7b26...\n                        'L' => unsafe { license(); },\n                        'v' => unsafe { VERBOSITY += 1; },\n                        'h' => {\n                            unsafe{\n                                let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                                usage(prog_name_str);\n                            }\n                            // process::exit(0);\n                        },\n                        _ => {\n                            unsafe {\n                            eprintln!(\"\u7b2c\u4e00match {}: Bad flag `{}`\", String::from_utf8_lossy(&PROG_NAME), name);\n                            let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                                usage(prog_name_str);\n                            }\n                            // process::exit(1);\n                        }\n                    }\n                }\n            }\n        }\n        aa = &cell.link;\n    }\n\n\n    // \u904d\u5386arg_list\u5904\u7406\u6bcf\u4e2a\u957f\u683c\u5f0f\u547d\u4ee4\u884c\u53c2\u6570\n    let mut aa = &arg_list;\n    while let Some(cell) = aa {\n        if let Some(name) = &cell.name {\n            match name.as_str() {\n                \"--\" => break,\n                \"--stdout\" => unsafe { SRC_MODE = 2; },\n                \"--decompress\" => unsafe { OP_MODE = 2; },\n                \"--compress\" => unsafe { OP_MODE = 1; },\n                \"--force\" => unsafe "}], "start_byte": 7937, "end_byte": 10368, "start_point": [217, 4], "end_point": [266, 5], "text": "               'd' => unsafe { OP_MODE = 2; },\n                        'z' => unsafe { OP_MODE = 1; },\n                        'f' => unsafe { FORCE_OVERWRITE = true; },\n                        't' => unsafe { OP_MODE = 3; },\n                        'k' => unsafe { KEEP_INPUT_FILES = true; },\n                        's' => unsafe { SMALL_MODE = true; },\n                        'q' => unsafe { NOISY = false; },\n                        '1' => unsafe { blockSize100k = 1; },\n                        '2' => unsafe { blockSize100k = 2; },\n                        '3' => unsafe { blockSize100k = 3; },\n                        '4' => unsafe { blockSize100k = 4; },\n                        '5' => unsafe { blockSize100k = 5; },\n                        '6' => unsafe { blockSize100k = 6; },\n                        '7' => unsafe { blockSize100k = 7; },\n                        '8' => unsafe { blockSize100k = 8; },\n                        '9' => unsafe { blockSize100k = 9; },\n                        // ...\u5904\u7406\u5176\u4ed6\u5b57\u7b26...\n                        'L' => unsafe { license(); },\n                        'v' => unsafe { VERBOSITY += 1; },\n                        'h' => {\n                            unsafe{\n                                let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                                usage(prog_name_str);\n                            }\n                            // process::exit(0);\n                        },\n                        _ => {\n                            unsafe {\n                            eprintln!(\"\u7b2c\u4e00match {}: Bad flag `{}`\", String::from_utf8_lossy(&PROG_NAME), name);\n                            let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                                usage(prog_name_str);\n                            }\n                            // process::exit(1);\n                        }\n                    }\n                }\n            }\n        }\n        aa = &cell.link;\n    }\n\n\n    // \u904d\u5386arg_list\u5904\u7406\u6bcf\u4e2a\u957f\u683c\u5f0f\u547d\u4ee4\u884c\u53c2\u6570\n    let mut aa = &arg_list;\n    while let Some(cell) = aa {\n        if let Some(name) = &cell.name {\n            match name.as_str() {\n                \"--\" => break,\n                \"--stdout\" => unsafe { SRC_MODE = 2; },\n                \"--decompress\" => unsafe { OP_MODE = 2; },\n                \"--compress\" => unsafe { OP_MODE = 1; },\n                \"--force\" => unsafe "}, {"type": "line_comment", "children": [], "start_byte": 10375, "end_byte": 10428, "start_point": [269, 4], "end_point": [269, 57], "text": "_OVERWRITE = true; },\n                \"--test\" => uns"}, {"type": "let_declaration", "children": [{"type": "let", "children": [], "start_byte": 10433, "end_byte": 10436, "start_point": [270, 4], "end_point": [270, 7], "text": " OP"}, {"type": "mutable_specifier", "children": [], "start_byte": 10437, "end_byte": 10440, "start_point": [270, 8], "end_point": [270, 11], "text": "MOD"}, {"type": "identifier", "children": [], "start_byte": 10441, "end_byte": 10443, "start_point": [270, 12], "end_point": [270, 14], "text": " ="}, {"type": "=", "children": [], "start_byte": 10444, "end_byte": 10445, "start_point": [270, 15], "end_point": [270, 16], "text": "3"}, {"type": "reference_expression", "children": [{"type": "&", "children": [], "start_byte": 10446, "end_byte": 10447, "start_point": [270, 17], "end_point": [270, 18], "text": " "}, {"type": "identifier", "children": [], "start_byte": 10447, "end_byte": 10455, "start_point": [270, 18], "end_point": [270, 26], "text": "},\n     "}], "start_byte": 10446, "end_byte": 10455, "start_point": [270, 17], "end_point": [270, 26], "text": " },\n     "}, {"type": ";", "children": [], "start_byte": 10455, "end_byte": 10456, "start_point": [270, 26], "end_point": [270, 27], "text": " "}], "start_byte": 10433, "end_byte": 10456, "start_point": [270, 4], "end_point": [270, 27], "text": " OP_MODE = 3; },\n      "}, {"type": "expression_statement", "children": [{"type": "while_expression", "children": [{"type": "while", "children": [], "start_byte": 10461, "end_byte": 10466, "start_point": [271, 4], "end_point": [271, 9], "text": "     "}, {"type": "let_condition", "children": [{"type": "let", "children": [], "start_byte": 10467, "end_byte": 10470, "start_point": [271, 10], "end_point": [271, 13], "text": "--k"}, {"type": "tuple_struct_pattern", "children": [{"type": "identifier", "children": [], "start_byte": 10471, "end_byte": 10475, "start_point": [271, 14], "end_point": [271, 18], "text": "ep\" "}, {"type": "(", "children": [], "start_byte": 10475, "end_byte": 10476, "start_point": [271, 18], "end_point": [271, 19], "text": "="}, {"type": "identifier", "children": [], "start_byte": 10476, "end_byte": 10480, "start_point": [271, 19], "end_point": [271, 23], "text": "> un"}, {"type": ")", "children": [], "start_byte": 10480, "end_byte": 10481, "start_point": [271, 23], "end_point": [271, 24], "text": "s"}], "start_byte": 10471, "end_byte": 10481, "start_point": [271, 14], "end_point": [271, 24], "text": "ep\" => uns"}, {"type": "=", "children": [], "start_byte": 10482, "end_byte": 10483, "start_point": [271, 25], "end_point": [271, 26], "text": "f"}, {"type": "identifier", "children": [], "start_byte": 10484, "end_byte": 10486, "start_point": [271, 27], "end_point": [271, 29], "text": " {"}], "start_byte": 10467, "end_byte": 10486, "start_point": [271, 10], "end_point": [271, 29], "text": "--keep\" => unsafe {"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 10487, "end_byte": 10488, "start_point": [271, 30], "end_point": [271, 31], "text": "K"}, {"type": "expression_statement", "children": [{"type": "if_expression", "children": [{"type": "if", "children": [], "start_byte": 10497, "end_byte": 10499, "start_point": [272, 8], "end_point": [272, 10], "text": "_F"}, {"type": "let_condition", "children": [{"type": "let", "children": [], "start_byte": 10500, "end_byte": 10503, "start_point": [272, 11], "end_point": [272, 14], "text": "LES"}, {"type": "tuple_struct_pattern", "children": [{"type": "identifier", "children": [], "start_byte": 10504, "end_byte": 10508, "start_point": [272, 15], "end_point": [272, 19], "text": "= tr"}, {"type": "(", "children": [], "start_byte": 10508, "end_byte": 10509, "start_point": [272, 19], "end_point": [272, 20], "text": "u"}, {"type": "identifier", "children": [], "start_byte": 10509, "end_byte": 10513, "start_point": [272, 20], "end_point": [272, 24], "text": "e; }"}, {"type": ")", "children": [], "start_byte": 10513, "end_byte": 10514, "start_point": [272, 24], "end_point": [272, 25], "text": ","}], "start_byte": 10504, "end_byte": 10514, "start_point": [272, 15], "end_point": [272, 25], "text": "= true; },"}, {"type": "=", "children": [], "start_byte": 10515, "end_byte": 10516, "start_point": [272, 26], "end_point": [272, 27], "text": " "}, {"type": "reference_expression", "children": [{"type": "&", "children": [], "start_byte": 10517, "end_byte": 10518, "start_point": [272, 28], "end_point": [272, 29], "text": " "}, {"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 10518, "end_byte": 10522, "start_point": [272, 29], "end_point": [272, 33], "text": "    "}, {"type": ".", "children": [], "start_byte": 10522, "end_byte": 10523, "start_point": [272, 33], "end_point": [272, 34], "text": " "}, {"type": "field_identifier", "children": [], "start_byte": 10523, "end_byte": 10527, "start_point": [272, 34], "end_point": [272, 38], "text": "    "}], "start_byte": 10518, "end_byte": 10527, "start_point": [272, 29], "end_point": [272, 38], "text": "         "}], "start_byte": 10517, "end_byte": 10527, "start_point": [272, 28], "end_point": [272, 38], "text": "          "}], "start_byte": 10500, "end_byte": 10527, "start_point": [272, 11], "end_point": [272, 38], "text": "LES = true; },\n            "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 10528, "end_byte": 10529, "start_point": [272, 39], "end_point": [272, 40], "text": " "}, {"type": "expression_statement", "children": [{"type": "match_expression", "children": [{"type": "match", "children": [], "start_byte": 10542, "end_byte": 10547, "start_point": [273, 12], "end_point": [273, 17], "text": "> uns"}, {"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 10548, "end_byte": 10552, "start_point": [273, 18], "end_point": [273, 22], "text": "fe {"}, {"type": ".", "children": [], "start_byte": 10552, "end_byte": 10553, "start_point": [273, 22], "end_point": [273, 23], "text": " "}, {"type": "field_identifier", "children": [], "start_byte": 10553, "end_byte": 10559, "start_point": [273, 23], "end_point": [273, 29], "text": "SMALL_"}], "start_byte": 10548, "end_byte": 10559, "start_point": [273, 18], "end_point": [273, 29], "text": "fe { SMALL_"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 10559, "end_byte": 10560, "start_point": [273, 29], "end_point": [273, 30], "text": "M"}, {"type": ")", "children": [], "start_byte": 10560, "end_byte": 10561, "start_point": [273, 30], "end_point": [273, 31], "text": "O"}], "start_byte": 10559, "end_byte": 10561, "start_point": [273, 29], "end_point": [273, 31], "text": "MO"}], "start_byte": 10548, "end_byte": 10561, "start_point": [273, 18], "end_point": [273, 31], "text": "fe { SMALL_MO"}, {"type": "match_block", "children": [{"type": "{", "children": [], "start_byte": 10562, "end_byte": 10563, "start_point": [273, 32], "end_point": [273, 33], "text": "E"}, {"type": "match_arm", "children": [{"type": "match_pattern", "children": [{"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 10580, "end_byte": 10581, "start_point": [274, 16], "end_point": [274, 17], "text": " "}, {"type": "\"", "children": [], "start_byte": 10583, "end_byte": 10584, "start_point": [274, 19], "end_point": [274, 20], "text": " "}], "start_byte": 10580, "end_byte": 10584, "start_point": [274, 16], "end_point": [274, 20], "text": "    "}], "start_byte": 10580, "end_byte": 10584, "start_point": [274, 16], "end_point": [274, 20], "text": "    "}, {"type": "=>", "children": [], "start_byte": 10585, "end_byte": 10587, "start_point": [274, 21], "end_point": [274, 23], "text": "  "}, {"type": "break_expression", "children": [{"type": "break", "children": [], "start_byte": 10588, "end_byte": 10593, "start_point": [274, 24], "end_point": [274, 29], "text": "   \"-"}], "start_byte": 10588, "end_byte": 10593, "start_point": [274, 24], "end_point": [274, 29], "text": "   \"-"}, {"type": ",", "children": [], "start_byte": 10593, "end_byte": 10594, "start_point": [274, 29], "end_point": [274, 30], "text": "-"}], "start_byte": 10580, "end_byte": 10594, "start_point": [274, 16], "end_point": [274, 30], "text": "           \"--"}, {"type": "match_arm", "children": [{"type": "match_pattern", "children": [{"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 10611, "end_byte": 10612, "start_point": [275, 16], "end_point": [275, 17], "text": "{"}, {"type": "\"", "children": [], "start_byte": 10620, "end_byte": 10621, "start_point": [275, 25], "end_point": [275, 26], "text": " "}], "start_byte": 10611, "end_byte": 10621, "start_point": [275, 16], "end_point": [275, 26], "text": "{ NOISY = "}], "start_byte": 10611, "end_byte": 10621, "start_point": [275, 16], "end_point": [275, 26], "text": "{ NOISY = "}, {"type": "=>", "children": [], "start_byte": 10622, "end_byte": 10624, "start_point": [275, 27], "end_point": [275, 29], "text": "al"}, {"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 10625, "end_byte": 10631, "start_point": [275, 30], "end_point": [275, 36], "text": "e; },\n"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 10632, "end_byte": 10633, "start_point": [275, 37], "end_point": [275, 38], "text": " "}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 10634, "end_byte": 10642, "start_point": [275, 39], "end_point": [275, 47], "text": "        "}, {"type": "=", "children": [], "start_byte": 10643, "end_byte": 10644, "start_point": [275, 48], "end_point": [275, 49], "text": " "}, {"type": "integer_literal", "children": [], "start_byte": 10645, "end_byte": 10646, "start_point": [275, 50], "end_point": [275, 51], "text": " "}], "start_byte": 10634, "end_byte": 10646, "start_point": [275, 39], "end_point": [275, 51], "text": "            "}, {"type": ";", "children": [], "start_byte": 10646, "end_byte": 10647, "start_point": [275, 51], "end_point": [275, 52], "text": " "}], "start_byte": 10634, "end_byte": 10647, "start_point": [275, 39], "end_point": [275, 52], "text": "             "}, {"type": "}", "children": [], "start_byte": 10648, "end_byte": 10649, "start_point": [275, 53], "end_point": [275, 54], "text": "-"}], "start_byte": 10632, "end_byte": 10649, "start_point": [275, 37], "end_point": [275, 54], "text": "               \"-"}], "start_byte": 10625, "end_byte": 10649, "start_point": [275, 30], "end_point": [275, 54], "text": "e; },\n                \"-"}, {"type": ",", "children": [], "start_byte": 10649, "end_byte": 10650, "start_point": [275, 54], "end_point": [275, 55], "text": "-"}], "start_byte": 10611, "end_byte": 10650, "start_point": [275, 16], "end_point": [275, 55], "text": "{ NOISY = false; },\n                \"--"}, {"type": "match_arm", "children": [{"type": "match_pattern", "children": [{"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 10667, "end_byte": 10668, "start_point": [276, 16], "end_point": [276, 17], "text": "e"}, {"type": "\"", "children": [], "start_byte": 10680, "end_byte": 10681, "start_point": [276, 29], "end_point": [276, 30], "text": "n"}], "start_byte": 10667, "end_byte": 10681, "start_point": [276, 16], "end_point": [276, 30], "text": "ense\" => licen"}], "start_byte": 10667, "end_byte": 10681, "start_point": [276, 16], "end_point": [276, 30], "text": "ense\" => licen"}, {"type": "=>", "children": [], "start_byte": 10682, "end_byte": 10684, "start_point": [276, 31], "end_point": [276, 33], "text": "e("}, {"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 10685, "end_byte": 10691, "start_point": [276, 34], "end_point": [276, 40], "text": ",\n    "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 10692, "end_byte": 10693, "start_point": [276, 41], "end_point": [276, 42], "text": " "}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 10694, "end_byte": 10701, "start_point": [276, 43], "end_point": [276, 50], "text": "       "}, {"type": "=", "children": [], "start_byte": 10702, "end_byte": 10703, "start_point": [276, 51], "end_point": [276, 52], "text": " "}, {"type": "integer_literal", "children": [], "start_byte": 10704, "end_byte": 10705, "start_point": [276, 53], "end_point": [276, 54], "text": "-"}], "start_byte": 10694, "end_byte": 10705, "start_point": [276, 43], "end_point": [276, 54], "text": "         \"-"}, {"type": ";", "children": [], "start_byte": 10705, "end_byte": 10706, "start_point": [276, 54], "end_point": [276, 55], "text": "-"}], "start_byte": 10694, "end_byte": 10706, "start_point": [276, 43], "end_point": [276, 55], "text": "         \"--"}, {"type": "}", "children": [], "start_byte": 10707, "end_byte": 10708, "start_point": [276, 56], "end_point": [276, 57], "text": "x"}], "start_byte": 10692, "end_byte": 10708, "start_point": [276, 41], "end_point": [276, 57], "text": "           \"--ex"}], "start_byte": 10685, "end_byte": 10708, "start_point": [276, 34], "end_point": [276, 57], "text": ",\n                \"--ex"}, {"type": ",", "children": [], "start_byte": 10708, "end_byte": 10709, "start_point": [276, 57], "end_point": [276, 58], "text": "p"}], "start_byte": 10667, "end_byte": 10709, "start_point": [276, 16], "end_point": [276, 58], "text": "ense\" => license(),\n                \"--exp"}, {"type": "match_arm", "children": [{"type": "match_pattern", "children": [{"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 10726, "end_byte": 10727, "start_point": [277, 16], "end_point": [277, 17], "text": "f"}, {"type": "\"", "children": [], "start_byte": 10737, "end_byte": 10738, "start_point": [277, 27], "end_point": [277, 28], "text": "A"}], "start_byte": 10726, "end_byte": 10738, "start_point": [277, 16], "end_point": [277, 28], "text": "fe { WORK_FA"}], "start_byte": 10726, "end_byte": 10738, "start_point": [277, 16], "end_point": [277, 28], "text": "fe { WORK_FA"}, {"type": "=>", "children": [], "start_byte": 10739, "end_byte": 10741, "start_point": [277, 29], "end_point": [277, 31], "text": "TO"}, {"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 10742, "end_byte": 10748, "start_point": [277, 32], "end_point": [277, 38], "text": " = 1; "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 10749, "end_byte": 10750, "start_point": [277, 39], "end_point": [277, 40], "text": ","}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 10751, "end_byte": 10758, "start_point": [277, 41], "end_point": [277, 48], "text": "       "}, {"type": "=", "children": [], "start_byte": 10759, "end_byte": 10760, "start_point": [277, 49], "end_point": [277, 50], "text": " "}, {"type": "integer_literal", "children": [], "start_byte": 10761, "end_byte": 10762, "start_point": [277, 51], "end_point": [277, 52], "text": " "}], "start_byte": 10751, "end_byte": 10762, "start_point": [277, 41], "end_point": [277, 52], "text": "           "}, {"type": ";", "children": [], "start_byte": 10762, "end_byte": 10763, "start_point": [277, 52], "end_point": [277, 53], "text": " "}], "start_byte": 10751, "end_byte": 10763, "start_point": [277, 41], "end_point": [277, 53], "text": "            "}, {"type": "}", "children": [], "start_byte": 10764, "end_byte": 10765, "start_point": [277, 54], "end_point": [277, 55], "text": " "}], "start_byte": 10749, "end_byte": 10765, "start_point": [277, 39], "end_point": [277, 55], "text": ",\n              "}], "start_byte": 10742, "end_byte": 10765, "start_point": [277, 32], "end_point": [277, 55], "text": " = 1; },\n              "}, {"type": ",", "children": [], "start_byte": 10765, "end_byte": 10766, "start_point": [277, 55], "end_point": [277, 56], "text": " "}], "start_byte": 10726, "end_byte": 10766, "start_point": [277, 16], "end_point": [277, 56], "text": "fe { WORK_FACTOR = 1; },\n               "}, {"type": "match_arm", "children": [{"type": "match_pattern", "children": [{"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 10783, "end_byte": 10784, "start_point": [278, 16], "end_point": [278, 17], "text": "s"}, {"type": "\"", "children": [], "start_byte": 10791, "end_byte": 10792, "start_point": [278, 24], "end_point": [278, 25], "text": "-"}], "start_byte": 10783, "end_byte": 10792, "start_point": [278, 16], "end_point": [278, 25], "text": "st\" | \"--"}], "start_byte": 10783, "end_byte": 10792, "start_point": [278, 16], "end_point": [278, 25], "text": "st\" | \"--"}, {"type": "=>", "children": [], "start_byte": 10793, "end_byte": 10795, "start_point": [278, 26], "end_point": [278, 28], "text": "ep"}, {"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 10796, "end_byte": 10802, "start_point": [278, 29], "end_point": [278, 35], "text": "titive"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 10803, "end_byte": 10804, "start_point": [278, 36], "end_point": [278, 37], "text": "f"}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 10805, "end_byte": 10820, "start_point": [278, 38], "end_point": [278, 53], "text": "st\" => redundan"}, {"type": "=", "children": [], "start_byte": 10821, "end_byte": 10822, "start_point": [278, 54], "end_point": [278, 55], "text": "("}, {"type": "boolean_literal", "children": [{"type": "true", "children": [], "start_byte": 10823, "end_byte": 10827, "start_point": [278, 56], "end_point": [278, 60], "text": "name"}], "start_byte": 10823, "end_byte": 10827, "start_point": [278, 56], "end_point": [278, 60], "text": "name"}], "start_byte": 10805, "end_byte": 10827, "start_point": [278, 38], "end_point": [278, 60], "text": "st\" => redundant(&name"}, {"type": ";", "children": [], "start_byte": 10827, "end_byte": 10828, "start_point": [278, 60], "end_point": [278, 61], "text": "."}], "start_byte": 10805, "end_byte": 10828, "start_point": [278, 38], "end_point": [278, 61], "text": "st\" => redundant(&name."}, {"type": "}", "children": [], "start_byte": 10829, "end_byte": 10830, "start_point": [278, 62], "end_point": [278, 63], "text": "s"}], "start_byte": 10803, "end_byte": 10830, "start_point": [278, 36], "end_point": [278, 63], "text": "fast\" => redundant(&name.as"}], "start_byte": 10796, "end_byte": 10830, "start_point": [278, 29], "end_point": [278, 63], "text": "titive-fast\" => redundant(&name.as"}, {"type": ",", "children": [], "start_byte": 10830, "end_byte": 10831, "start_point": [278, 63], "end_point": [278, 64], "text": "_"}], "start_byte": 10783, "end_byte": 10831, "start_point": [278, 16], "end_point": [278, 64], "text": "st\" | \"--repetitive-fast\" => redundant(&name.as_"}, {"type": "match_arm", "children": [{"type": "match_pattern", "children": [{"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 10848, "end_byte": 10849, "start_point": [279, 16], "end_point": [279, 17], "text": " "}, {"type": "\"", "children": [], "start_byte": 10855, "end_byte": 10856, "start_point": [279, 23], "end_point": [279, 24], "text": " "}], "start_byte": 10848, "end_byte": 10856, "start_point": [279, 16], "end_point": [279, 24], "text": "        "}], "start_byte": 10848, "end_byte": 10856, "start_point": [279, 16], "end_point": [279, 24], "text": "        "}, {"type": "=>", "children": [], "start_byte": 10857, "end_byte": 10859, "start_point": [279, 25], "end_point": [279, 27], "text": "\"-"}, {"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 10860, "end_byte": 10866, "start_point": [279, 28], "end_point": [279, 34], "text": "fast\" "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 10867, "end_byte": 10868, "start_point": [279, 35], "end_point": [279, 36], "text": ">"}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 10869, "end_byte": 10876, "start_point": [279, 37], "end_point": [279, 44], "text": "unsafe "}, {"type": "=", "children": [], "start_byte": 10877, "end_byte": 10878, "start_point": [279, 45], "end_point": [279, 46], "text": " "}, {"type": "integer_literal", "children": [], "start_byte": 10879, "end_byte": 10880, "start_point": [279, 47], "end_point": [279, 48], "text": "l"}], "start_byte": 10869, "end_byte": 10880, "start_point": [279, 37], "end_point": [279, 48], "text": "unsafe { bl"}, {"type": ";", "children": [], "start_byte": 10880, "end_byte": 10881, "start_point": [279, 48], "end_point": [279, 49], "text": "o"}], "start_byte": 10869, "end_byte": 10881, "start_point": [279, 37], "end_point": [279, 49], "text": "unsafe { blo"}, {"type": "}", "children": [], "start_byte": 10882, "end_byte": 10883, "start_point": [279, 50], "end_point": [279, 51], "text": "k"}], "start_byte": 10867, "end_byte": 10883, "start_point": [279, 35], "end_point": [279, 51], "text": "> unsafe { block"}], "start_byte": 10860, "end_byte": 10883, "start_point": [279, 28], "end_point": [279, 51], "text": "fast\" => unsafe { block"}, {"type": ",", "children": [], "start_byte": 10883, "end_byte": 10884, "start_point": [279, 51], "end_point": [279, 52], "text": "S"}], "start_byte": 10848, "end_byte": 10884, "start_point": [279, 16], "end_point": [279, 52], "text": "         \"--fast\" => unsafe { blockS"}, {"type": "match_arm", "children": [{"type": "match_pattern", "children": [{"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 10901, "end_byte": 10902, "start_point": [280, 16], "end_point": [280, 17], "text": " "}, {"type": "\"", "children": [], "start_byte": 10908, "end_byte": 10909, "start_point": [280, 23], "end_point": [280, 24], "text": " "}], "start_byte": 10901, "end_byte": 10909, "start_point": [280, 16], "end_point": [280, 24], "text": "        "}], "start_byte": 10901, "end_byte": 10909, "start_point": [280, 16], "end_point": [280, 24], "text": "        "}, {"type": "=>", "children": [], "start_byte": 10910, "end_byte": 10912, "start_point": [280, 25], "end_point": [280, 27], "text": "  "}, {"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 10913, "end_byte": 10919, "start_point": [280, 28], "end_point": [280, 34], "text": "   \"--"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 10920, "end_byte": 10921, "start_point": [280, 35], "end_point": [280, 36], "text": "e"}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 10922, "end_byte": 10938, "start_point": [280, 37], "end_point": [280, 53], "text": "t\" => unsafe { b"}, {"type": "=", "children": [], "start_byte": 10939, "end_byte": 10940, "start_point": [280, 54], "end_point": [280, 55], "text": "o"}, {"type": "boolean_literal", "children": [{"type": "true", "children": [], "start_byte": 10941, "end_byte": 10945, "start_point": [280, 56], "end_point": [280, 60], "text": "kSiz"}], "start_byte": 10941, "end_byte": 10945, "start_point": [280, 56], "end_point": [280, 60], "text": "kSiz"}], "start_byte": 10922, "end_byte": 10945, "start_point": [280, 37], "end_point": [280, 60], "text": "t\" => unsafe { blockSiz"}, {"type": ";", "children": [], "start_byte": 10945, "end_byte": 10946, "start_point": [280, 60], "end_point": [280, 61], "text": "e"}], "start_byte": 10922, "end_byte": 10946, "start_point": [280, 37], "end_point": [280, 61], "text": "t\" => unsafe { blockSize"}, {"type": "}", "children": [], "start_byte": 10947, "end_byte": 10948, "start_point": [280, 62], "end_point": [280, 63], "text": "0"}], "start_byte": 10920, "end_byte": 10948, "start_point": [280, 35], "end_point": [280, 63], "text": "est\" => unsafe { blockSize10"}], "start_byte": 10913, "end_byte": 10948, "start_point": [280, 28], "end_point": [280, 63], "text": "   \"--best\" => unsafe { blockSize10"}, {"type": ",", "children": [], "start_byte": 10948, "end_byte": 10949, "start_point": [280, 63], "end_point": [280, 64], "text": "0"}], "start_byte": 10901, "end_byte": 10949, "start_point": [280, 16], "end_point": [280, 64], "text": "               \"--best\" => unsafe { blockSize100"}, {"type": "match_arm", "children": [{"type": "match_pattern", "children": [{"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 10966, "end_byte": 10967, "start_point": [281, 16], "end_point": [281, 17], "text": " "}, {"type": "\"", "children": [], "start_byte": 10974, "end_byte": 10975, "start_point": [281, 24], "end_point": [281, 25], "text": " "}], "start_byte": 10966, "end_byte": 10975, "start_point": [281, 16], "end_point": [281, 25], "text": "         "}], "start_byte": 10966, "end_byte": 10975, "start_point": [281, 16], "end_point": [281, 25], "text": "         "}, {"type": "=>", "children": [], "start_byte": 10976, "end_byte": 10978, "start_point": [281, 26], "end_point": [281, 28], "text": "--"}, {"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 10979, "end_byte": 10985, "start_point": [281, 29], "end_point": [281, 35], "text": "erbose"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 10986, "end_byte": 10987, "start_point": [281, 36], "end_point": [281, 37], "text": " "}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 10988, "end_byte": 10998, "start_point": [281, 38], "end_point": [281, 48], "text": "> unsafe {"}, {"type": "=", "children": [], "start_byte": 10999, "end_byte": 11000, "start_point": [281, 49], "end_point": [281, 50], "text": "V"}, {"type": "boolean_literal", "children": [{"type": "true", "children": [], "start_byte": 11001, "end_byte": 11005, "start_point": [281, 51], "end_point": [281, 55], "text": "RBOS"}], "start_byte": 11001, "end_byte": 11005, "start_point": [281, 51], "end_point": [281, 55], "text": "RBOS"}], "start_byte": 10988, "end_byte": 11005, "start_point": [281, 38], "end_point": [281, 55], "text": "> unsafe { VERBOS"}, {"type": ";", "children": [], "start_byte": 11005, "end_byte": 11006, "start_point": [281, 55], "end_point": [281, 56], "text": "I"}], "start_byte": 10988, "end_byte": 11006, "start_point": [281, 38], "end_point": [281, 56], "text": "> unsafe { VERBOSI"}, {"type": "}", "children": [], "start_byte": 11007, "end_byte": 11008, "start_point": [281, 57], "end_point": [281, 58], "text": "Y"}], "start_byte": 10986, "end_byte": 11008, "start_point": [281, 36], "end_point": [281, 58], "text": " => unsafe { VERBOSITY"}], "start_byte": 10979, "end_byte": 11008, "start_point": [281, 29], "end_point": [281, 58], "text": "erbose\" => unsafe { VERBOSITY"}, {"type": ",", "children": [], "start_byte": 11008, "end_byte": 11009, "start_point": [281, 58], "end_point": [281, 59], "text": " "}], "start_byte": 10966, "end_byte": 11009, "start_point": [281, 16], "end_point": [281, 59], "text": "         \"--verbose\" => unsafe { VERBOSITY "}, {"type": "match_arm", "children": [{"type": "match_pattern", "children": [{"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 11026, "end_byte": 11027, "start_point": [282, 16], "end_point": [282, 17], "text": " "}, {"type": "\"", "children": [], "start_byte": 11034, "end_byte": 11035, "start_point": [282, 24], "end_point": [282, 25], "text": "\""}], "start_byte": 11026, "end_byte": 11035, "start_point": [282, 16], "end_point": [282, 25], "text": "        \""}], "start_byte": 11026, "end_byte": 11035, "start_point": [282, 16], "end_point": [282, 25], "text": "        \""}, {"type": "=>", "children": [], "start_byte": 11036, "end_byte": 11038, "start_point": [282, 26], "end_point": [282, 28], "text": "-h"}, {"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 11039, "end_byte": 11045, "start_point": [282, 29], "end_point": [282, 35], "text": "lp\" =>"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 11046, "end_byte": 11047, "start_point": [282, 36], "end_point": [282, 37], "text": "{"}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 11048, "end_byte": 11053, "start_point": [282, 38], "end_point": [282, 43], "text": "     "}, {"type": "=", "children": [], "start_byte": 11054, "end_byte": 11055, "start_point": [282, 44], "end_point": [282, 45], "text": " "}, {"type": "boolean_literal", "children": [{"type": "false", "children": [], "start_byte": 11056, "end_byte": 11061, "start_point": [282, 46], "end_point": [282, 51], "text": "     "}], "start_byte": 11056, "end_byte": 11061, "start_point": [282, 46], "end_point": [282, 51], "text": "     "}], "start_byte": 11048, "end_byte": 11061, "start_point": [282, 38], "end_point": [282, 51], "text": "             "}, {"type": ";", "children": [], "start_byte": 11061, "end_byte": 11062, "start_point": [282, 51], "end_point": [282, 52], "text": " "}], "start_byte": 11048, "end_byte": 11062, "start_point": [282, 38], "end_point": [282, 52], "text": "              "}, {"type": "}", "children": [], "start_byte": 11063, "end_byte": 11064, "start_point": [282, 53], "end_point": [282, 54], "text": " "}], "start_byte": 11046, "end_byte": 11064, "start_point": [282, 36], "end_point": [282, 54], "text": "{\n                "}], "start_byte": 11039, "end_byte": 11064, "start_point": [282, 29], "end_point": [282, 54], "text": "lp\" => {\n                "}, {"type": ",", "children": [], "start_byte": 11064, "end_byte": 11065, "start_point": [282, 54], "end_point": [282, 55], "text": " "}], "start_byte": 11026, "end_byte": 11065, "start_point": [282, 16], "end_point": [282, 55], "text": "        \"--help\" => {\n                 "}, {"type": "match_arm", "children": [{"type": "match_pattern", "children": [{"type": "or_pattern", "children": [{"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 11082, "end_byte": 11083, "start_point": [283, 16], "end_point": [283, 17], "text": " "}, {"type": "\"", "children": [], "start_byte": 11092, "end_byte": 11093, "start_point": [283, 26], "end_point": [283, 27], "text": " "}], "start_byte": 11082, "end_byte": 11093, "start_point": [283, 16], "end_point": [283, 27], "text": "           "}, {"type": "|", "children": [], "start_byte": 11094, "end_byte": 11095, "start_point": [283, 28], "end_point": [283, 29], "text": " "}, {"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 11096, "end_byte": 11097, "start_point": [283, 30], "end_point": [283, 31], "text": " "}, {"type": "\"", "children": [], "start_byte": 11106, "end_byte": 11107, "start_point": [283, 40], "end_point": [283, 41], "text": "o"}], "start_byte": 11096, "end_byte": 11107, "start_point": [283, 30], "end_point": [283, 41], "text": "    let pro"}], "start_byte": 11082, "end_byte": 11107, "start_point": [283, 16], "end_point": [283, 41], "text": "                  let pro"}], "start_byte": 11082, "end_byte": 11107, "start_point": [283, 16], "end_point": [283, 41], "text": "                  let pro"}, {"type": "=>", "children": [], "start_byte": 11108, "end_byte": 11110, "start_point": [283, 42], "end_point": [283, 44], "text": "_n"}, {"type": "call_expression", "children": [{"type": "identifier", "children": [], "start_byte": 11111, "end_byte": 11118, "start_point": [283, 45], "end_point": [283, 52], "text": "me_str "}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 11118, "end_byte": 11119, "start_point": [283, 52], "end_point": [283, 53], "text": "="}, {"type": ")", "children": [], "start_byte": 11119, "end_byte": 11120, "start_point": [283, 53], "end_point": [283, 54], "text": " "}], "start_byte": 11118, "end_byte": 11120, "start_point": [283, 52], "end_point": [283, 54], "text": "= "}], "start_byte": 11111, "end_byte": 11120, "start_point": [283, 45], "end_point": [283, 54], "text": "me_str = "}, {"type": ",", "children": [], "start_byte": 11120, "end_byte": 11121, "start_point": [283, 54], "end_point": [283, 55], "text": "s"}], "start_byte": 11082, "end_byte": 11121, "start_point": [283, 16], "end_point": [283, 55], "text": "                  let prog_name_str = s"}, {"type": "match_arm", "children": [{"type": "match_pattern", "children": [{"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 11138, "end_byte": 11139, "start_point": [284, 16], "end_point": [284, 17], "text": "8"}, {"type": "\"", "children": [], "start_byte": 11152, "end_byte": 11153, "start_point": [284, 30], "end_point": [284, 31], "text": "e"}], "start_byte": 11138, "end_byte": 11153, "start_point": [284, 16], "end_point": [284, 31], "text": "8(&PROG_NAME).e"}], "start_byte": 11138, "end_byte": 11153, "start_point": [284, 16], "end_point": [284, 31], "text": "8(&PROG_NAME).e"}, {"type": "=>", "children": [], "start_byte": 11154, "end_byte": 11156, "start_point": [284, 32], "end_point": [284, 34], "text": "pe"}, {"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 11157, "end_byte": 11163, "start_point": [284, 35], "end_point": [284, 41], "text": "t(\"PRO"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 11164, "end_byte": 11165, "start_point": [284, 42], "end_point": [284, 43], "text": "_"}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 11166, "end_byte": 11177, "start_point": [284, 44], "end_point": [284, 55], "text": "AME \u4e0d\u662f\u6709\u6548\u7684 U"}, {"type": "=", "children": [], "start_byte": 11178, "end_byte": 11179, "start_point": [284, 56], "end_point": [284, 57], "text": "F"}, {"type": "integer_literal", "children": [], "start_byte": 11180, "end_byte": 11181, "start_point": [284, 58], "end_point": [284, 59], "text": "8"}], "start_byte": 11166, "end_byte": 11181, "start_point": [284, 44], "end_point": [284, 59], "text": "AME \u4e0d\u662f\u6709\u6548\u7684 UTF-8"}, {"type": ";", "children": [], "start_byte": 11181, "end_byte": 11182, "start_point": [284, 59], "end_point": [284, 60], "text": " "}], "start_byte": 11166, "end_byte": 11182, "start_point": [284, 44], "end_point": [284, 60], "text": "AME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 "}, {"type": "}", "children": [], "start_byte": 11183, "end_byte": 11184, "start_point": [284, 61], "end_point": [284, 62], "text": "\u7b26"}], "start_byte": 11164, "end_byte": 11184, "start_point": [284, 42], "end_point": [284, 62], "text": "_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26"}], "start_byte": 11157, "end_byte": 11184, "start_point": [284, 35], "end_point": [284, 62], "text": "t(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26"}, {"type": ",", "children": [], "start_byte": 11184, "end_byte": 11185, "start_point": [284, 62], "end_point": [284, 63], "text": "\u4e32"}], "start_byte": 11138, "end_byte": 11185, "start_point": [284, 16], "end_point": [284, 63], "text": "8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32"}, {"type": "match_arm", "children": [{"type": "match_pattern", "children": [{"type": "or_pattern", "children": [{"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 11202, "end_byte": 11203, "start_point": [285, 16], "end_point": [285, 17], "text": " "}, {"type": "\"", "children": [], "start_byte": 11220, "end_byte": 11221, "start_point": [285, 34], "end_point": [285, 35], "text": "r"}], "start_byte": 11202, "end_byte": 11221, "start_point": [285, 16], "end_point": [285, 35], "text": "           usage(pr"}, {"type": "|", "children": [], "start_byte": 11222, "end_byte": 11223, "start_point": [285, 36], "end_point": [285, 37], "text": "g"}, {"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 11224, "end_byte": 11225, "start_point": [285, 38], "end_point": [285, 39], "text": "n"}, {"type": "\"", "children": [], "start_byte": 11242, "end_byte": 11243, "start_point": [285, 56], "end_point": [285, 57], "text": " "}], "start_byte": 11224, "end_byte": 11243, "start_point": [285, 38], "end_point": [285, 57], "text": "name_str);\n        "}], "start_byte": 11202, "end_byte": 11243, "start_point": [285, 16], "end_point": [285, 57], "text": "           usage(prog_name_str);\n        "}], "start_byte": 11202, "end_byte": 11243, "start_point": [285, 16], "end_point": [285, 57], "text": "           usage(prog_name_str);\n        "}, {"type": "=>", "children": [], "start_byte": 11244, "end_byte": 11246, "start_point": [285, 58], "end_point": [285, 60], "text": "  "}, {"type": "call_expression", "children": [{"type": "identifier", "children": [], "start_byte": 11247, "end_byte": 11256, "start_point": [285, 61], "end_point": [285, 70], "text": "        }"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 11256, "end_byte": 11257, "start_point": [285, 70], "end_point": [285, 71], "text": "\n"}, {"type": "reference_expression", "children": [{"type": "&", "children": [], "start_byte": 11257, "end_byte": 11258, "start_point": [285, 71], "end_point": [285, 72], "text": " "}, {"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 11258, "end_byte": 11262, "start_point": [285, 72], "end_point": [285, 76], "text": "    "}, {"type": ".", "children": [], "start_byte": 11262, "end_byte": 11263, "start_point": [285, 76], "end_point": [285, 77], "text": " "}, {"type": "field_identifier", "children": [], "start_byte": 11263, "end_byte": 11271, "start_point": [285, 77], "end_point": [285, 85], "text": "        "}], "start_byte": 11258, "end_byte": 11271, "start_point": [285, 72], "end_point": [285, 85], "text": "             "}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 11271, "end_byte": 11272, "start_point": [285, 85], "end_point": [285, 86], "text": " "}, {"type": ")", "children": [], "start_byte": 11272, "end_byte": 11273, "start_point": [285, 86], "end_point": [285, 87], "text": " "}], "start_byte": 11271, "end_byte": 11273, "start_point": [285, 85], "end_point": [285, 87], "text": "  "}], "start_byte": 11258, "end_byte": 11273, "start_point": [285, 72], "end_point": [285, 87], "text": "               "}], "start_byte": 11257, "end_byte": 11273, "start_point": [285, 71], "end_point": [285, 87], "text": "                "}, {"type": ")", "children": [], "start_byte": 11273, "end_byte": 11274, "start_point": [285, 87], "end_point": [285, 88], "text": " "}], "start_byte": 11256, "end_byte": 11274, "start_point": [285, 70], "end_point": [285, 88], "text": "\n                 "}], "start_byte": 11247, "end_byte": 11274, "start_point": [285, 61], "end_point": [285, 88], "text": "        }\n                 "}, {"type": ",", "children": [], "start_byte": 11274, "end_byte": 11275, "start_point": [285, 88], "end_point": [285, 89], "text": " "}], "start_byte": 11202, "end_byte": 11275, "start_point": [285, 16], "end_point": [285, 89], "text": "           usage(prog_name_str);\n                    }\n                  "}, {"type": "match_arm", "children": [{"type": "match_pattern", "children": [{"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 11292, "end_byte": 11293, "start_point": [286, 16], "end_point": [286, 17], "text": "t"}, {"type": "\"", "children": [], "start_byte": 11299, "end_byte": 11300, "start_point": [286, 23], "end_point": [286, 24], "text": " "}], "start_byte": 11292, "end_byte": 11300, "start_point": [286, 16], "end_point": [286, 24], "text": "t(0);\n  "}], "start_byte": 11292, "end_byte": 11300, "start_point": [286, 16], "end_point": [286, 24], "text": "t(0);\n  "}, {"type": "=>", "children": [], "start_byte": 11301, "end_byte": 11303, "start_point": [286, 25], "end_point": [286, 27], "text": "  "}, {"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 11304, "end_byte": 11310, "start_point": [286, 28], "end_point": [286, 34], "text": "      "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 11311, "end_byte": 11312, "start_point": [286, 35], "end_point": [286, 36], "text": " "}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 11313, "end_byte": 11326, "start_point": [286, 37], "end_point": [286, 50], "text": " },\n         "}, {"type": "=", "children": [], "start_byte": 11327, "end_byte": 11328, "start_point": [286, 51], "end_point": [286, 52], "text": " "}, {"type": "integer_literal", "children": [], "start_byte": 11329, "end_byte": 11330, "start_point": [286, 53], "end_point": [286, 54], "text": " "}], "start_byte": 11313, "end_byte": 11330, "start_point": [286, 37], "end_point": [286, 54], "text": " },\n             "}, {"type": ";", "children": [], "start_byte": 11330, "end_byte": 11331, "start_point": [286, 54], "end_point": [286, 55], "text": " "}], "start_byte": 11313, "end_byte": 11331, "start_point": [286, 37], "end_point": [286, 55], "text": " },\n              "}, {"type": "}", "children": [], "start_byte": 11332, "end_byte": 11333, "start_point": [286, 56], "end_point": [286, 57], "text": " "}], "start_byte": 11311, "end_byte": 11333, "start_point": [286, 35], "end_point": [286, 57], "text": "   },\n                "}], "start_byte": 11304, "end_byte": 11333, "start_point": [286, 28], "end_point": [286, 57], "text": "          },\n                "}, {"type": ",", "children": [], "start_byte": 11333, "end_byte": 11334, "start_point": [286, 57], "end_point": [286, 58], "text": "_"}], "start_byte": 11292, "end_byte": 11334, "start_point": [286, 16], "end_point": [286, 58], "text": "t(0);\n                },\n                _"}, {"type": "match_arm", "children": [{"type": "match_pattern", "children": [{"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 11351, "end_byte": 11352, "start_point": [287, 16], "end_point": [287, 17], "text": "i"}, {"type": "\"", "children": [], "start_byte": 11358, "end_byte": 11359, "start_point": [287, 23], "end_point": [287, 24], "text": "\""}], "start_byte": 11351, "end_byte": 11359, "start_point": [287, 16], "end_point": [287, 24], "text": "ith(\"--\""}], "start_byte": 11351, "end_byte": 11359, "start_point": [287, 16], "end_point": [287, 24], "text": "ith(\"--\""}, {"type": "=>", "children": [], "start_byte": 11360, "end_byte": 11362, "start_point": [287, 25], "end_point": [287, 27], "text": " ="}, {"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 11363, "end_byte": 11369, "start_point": [287, 28], "end_point": [287, 34], "text": " {\n   "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 11370, "end_byte": 11371, "start_point": [287, 35], "end_point": [287, 36], "text": " "}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 11372, "end_byte": 11385, "start_point": [287, 37], "end_point": [287, 50], "text": "             "}, {"type": "=", "children": [], "start_byte": 11386, "end_byte": 11387, "start_point": [287, 51], "end_point": [287, 52], "text": "u"}, {"type": "integer_literal", "children": [], "start_byte": 11388, "end_byte": 11389, "start_point": [287, 53], "end_point": [287, 54], "text": "s"}], "start_byte": 11372, "end_byte": 11389, "start_point": [287, 37], "end_point": [287, 54], "text": "              uns"}, {"type": ";", "children": [], "start_byte": 11389, "end_byte": 11390, "start_point": [287, 54], "end_point": [287, 55], "text": "a"}], "start_byte": 11372, "end_byte": 11390, "start_point": [287, 37], "end_point": [287, 55], "text": "              unsa"}, {"type": "}", "children": [], "start_byte": 11391, "end_byte": 11392, "start_point": [287, 56], "end_point": [287, 57], "text": "e"}], "start_byte": 11370, "end_byte": 11392, "start_point": [287, 35], "end_point": [287, 57], "text": "                unsafe"}], "start_byte": 11363, "end_byte": 11392, "start_point": [287, 28], "end_point": [287, 57], "text": " {\n                    unsafe"}, {"type": ",", "children": [], "start_byte": 11392, "end_byte": 11393, "start_point": [287, 57], "end_point": [287, 58], "text": "{"}], "start_byte": 11351, "end_byte": 11393, "start_point": [287, 16], "end_point": [287, 58], "text": "ith(\"--\") => {\n                    unsafe{"}, {"type": "match_arm", "children": [{"type": "match_pattern", "children": [{"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 11410, "end_byte": 11411, "start_point": [288, 16], "end_point": [288, 17], "text": " "}, {"type": "\"", "children": [], "start_byte": 11420, "end_byte": 11421, "start_point": [288, 26], "end_point": [288, 27], "text": "p"}], "start_byte": 11410, "end_byte": 11421, "start_point": [288, 16], "end_point": [288, 27], "text": "         ep"}], "start_byte": 11410, "end_byte": 11421, "start_point": [288, 16], "end_point": [288, 27], "text": "         ep"}, {"type": "=>", "children": [], "start_byte": 11422, "end_byte": 11424, "start_point": [288, 28], "end_point": [288, 30], "text": "in"}, {"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 11425, "end_byte": 11431, "start_point": [288, 31], "end_point": [288, 37], "text": "ln!(\"\u7b2c"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 11432, "end_byte": 11433, "start_point": [288, 38], "end_point": [288, 39], "text": "m"}, {"type": "expression_statement", "children": [{"type": "compound_assignment_expr", "children": [{"type": "identifier", "children": [], "start_byte": 11434, "end_byte": 11443, "start_point": [288, 40], "end_point": [288, 49], "text": "tch {}: B"}, {"type": "+=", "children": [], "start_byte": 11444, "end_byte": 11446, "start_point": [288, 50], "end_point": [288, 52], "text": "d "}, {"type": "integer_literal", "children": [], "start_byte": 11447, "end_byte": 11448, "start_point": [288, 53], "end_point": [288, 54], "text": "l"}], "start_byte": 11434, "end_byte": 11448, "start_point": [288, 40], "end_point": [288, 54], "text": "tch {}: Bad fl"}, {"type": ";", "children": [], "start_byte": 11448, "end_byte": 11449, "start_point": [288, 54], "end_point": [288, 55], "text": "a"}], "start_byte": 11434, "end_byte": 11449, "start_point": [288, 40], "end_point": [288, 55], "text": "tch {}: Bad fla"}, {"type": "}", "children": [], "start_byte": 11450, "end_byte": 11451, "start_point": [288, 56], "end_point": [288, 57], "text": " "}], "start_byte": 11432, "end_byte": 11451, "start_point": [288, 38], "end_point": [288, 57], "text": "match {}: Bad flag "}], "start_byte": 11425, "end_byte": 11451, "start_point": [288, 31], "end_point": [288, 57], "text": "ln!(\"\u7b2c\u4e8cmatch {}: Bad flag "}, {"type": ",", "children": [], "start_byte": 11451, "end_byte": 11452, "start_point": [288, 57], "end_point": [288, 58], "text": "`"}], "start_byte": 11410, "end_byte": 11452, "start_point": [288, 16], "end_point": [288, 58], "text": "         eprintln!(\"\u7b2c\u4e8cmatch {}: Bad flag `"}, {"type": "match_arm", "children": [{"type": "match_pattern", "children": [{"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 11469, "end_byte": 11470, "start_point": [289, 16], "end_point": [289, 17], "text": "m"}, {"type": "\"", "children": [], "start_byte": 11476, "end_byte": 11477, "start_point": [289, 23], "end_point": [289, 24], "text": "l"}], "start_byte": 11469, "end_byte": 11477, "start_point": [289, 16], "end_point": [289, 24], "text": "m_utf8_l"}], "start_byte": 11469, "end_byte": 11477, "start_point": [289, 16], "end_point": [289, 24], "text": "m_utf8_l"}, {"type": "=>", "children": [], "start_byte": 11478, "end_byte": 11480, "start_point": [289, 25], "end_point": [289, 27], "text": "ss"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 11481, "end_byte": 11482, "start_point": [289, 28], "end_point": [289, 29], "text": "("}, {"type": "expression_statement", "children": [{"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 11503, "end_byte": 11509, "start_point": [290, 20], "end_point": [290, 26], "text": "      "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 11509, "end_byte": 11510, "start_point": [290, 26], "end_point": [290, 27], "text": " "}, {"type": "let_declaration", "children": [{"type": "let", "children": [], "start_byte": 11535, "end_byte": 11538, "start_point": [291, 24], "end_point": [291, 27], "text": "nam"}, {"type": "identifier", "children": [], "start_byte": 11539, "end_byte": 11552, "start_point": [291, 28], "end_point": [291, 41], "text": "_str = std::s"}, {"type": "=", "children": [], "start_byte": 11553, "end_byte": 11554, "start_point": [291, 42], "end_point": [291, 43], "text": "r"}, {"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "call_expression", "children": [{"type": "scoped_identifier", "children": [{"type": "scoped_identifier", "children": [{"type": "identifier", "children": [], "start_byte": 11555, "end_byte": 11558, "start_point": [291, 44], "end_point": [291, 47], "text": ":fr"}, {"type": "::", "children": [], "start_byte": 11558, "end_byte": 11560, "start_point": [291, 47], "end_point": [291, 49], "text": "om"}, {"type": "identifier", "children": [], "start_byte": 11560, "end_byte": 11563, "start_point": [291, 49], "end_point": [291, 52], "text": "_ut"}], "start_byte": 11555, "end_byte": 11563, "start_point": [291, 44], "end_point": [291, 52], "text": ":from_ut"}, {"type": "::", "children": [], "start_byte": 11563, "end_byte": 11565, "start_point": [291, 52], "end_point": [291, 54], "text": "f8"}, {"type": "identifier", "children": [], "start_byte": 11565, "end_byte": 11574, "start_point": [291, 54], "end_point": [291, 63], "text": "(&PROG_NA"}], "start_byte": 11555, "end_byte": 11574, "start_point": [291, 44], "end_point": [291, 63], "text": ":from_utf8(&PROG_NA"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 11574, "end_byte": 11575, "start_point": [291, 63], "end_point": [291, 64], "text": "M"}, {"type": "reference_expression", "children": [{"type": "&", "children": [], "start_byte": 11575, "end_byte": 11576, "start_point": [291, 64], "end_point": [291, 65], "text": "E"}, {"type": "identifier", "children": [], "start_byte": 11576, "end_byte": 11585, "start_point": [291, 65], "end_point": [291, 74], "text": ").expect("}], "start_byte": 11575, "end_byte": 11585, "start_point": [291, 64], "end_point": [291, 74], "text": "E).expect("}, {"type": ")", "children": [], "start_byte": 11585, "end_byte": 11586, "start_point": [291, 74], "end_point": [291, 75], "text": "\""}], "start_byte": 11574, "end_byte": 11586, "start_point": [291, 63], "end_point": [291, 75], "text": "ME).expect(\""}], "start_byte": 11555, "end_byte": 11586, "start_point": [291, 44], "end_point": [291, 75], "text": ":from_utf8(&PROG_NAME).expect(\""}, {"type": ".", "children": [], "start_byte": 11586, "end_byte": 11587, "start_point": [291, 75], "end_point": [291, 76], "text": "P"}, {"type": "field_identifier", "children": [], "start_byte": 11587, "end_byte": 11593, "start_point": [291, 76], "end_point": [291, 82], "text": "ROG_NA"}], "start_byte": 11555, "end_byte": 11593, "start_point": [291, 44], "end_point": [291, 82], "text": ":from_utf8(&PROG_NAME).expect(\"PROG_NA"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 11593, "end_byte": 11594, "start_point": [291, 82], "end_point": [291, 83], "text": "M"}, {"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 11594, "end_byte": 11595, "start_point": [291, 83], "end_point": [291, 84], "text": "E"}, {"type": "\"", "children": [], "start_byte": 11636, "end_byte": 11637, "start_point": [291, 125], "end_point": [291, 126], "text": " "}], "start_byte": 11594, "end_byte": 11637, "start_point": [291, 83], "end_point": [291, 126], "text": "E \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                      "}, {"type": ")", "children": [], "start_byte": 11637, "end_byte": 11638, "start_point": [291, 126], "end_point": [291, 127], "text": " "}], "start_byte": 11593, "end_byte": 11638, "start_point": [291, 82], "end_point": [291, 127], "text": "ME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                       "}], "start_byte": 11555, "end_byte": 11638, "start_point": [291, 44], "end_point": [291, 127], "text": ":from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                       "}, {"type": ";", "children": [], "start_byte": 11638, "end_byte": 11639, "start_point": [291, 127], "end_point": [291, 128], "text": " "}], "start_byte": 11535, "end_byte": 11639, "start_point": [291, 24], "end_point": [291, 128], "text": "name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                        "}, {"type": "expression_statement", "children": [{"type": "call_expression", "children": [{"type": "identifier", "children": [], "start_byte": 11664, "end_byte": 11669, "start_point": [292, 24], "end_point": [292, 29], "text": "     "}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 11669, "end_byte": 11670, "start_point": [292, 29], "end_point": [292, 30], "text": " "}, {"type": "identifier", "children": [], "start_byte": 11670, "end_byte": 11683, "start_point": [292, 30], "end_point": [292, 43], "text": "           }\n"}, {"type": ")", "children": [], "start_byte": 11683, "end_byte": 11684, "start_point": [292, 43], "end_point": [292, 44], "text": " "}], "start_byte": 11669, "end_byte": 11684, "start_point": [292, 29], "end_point": [292, 44], "text": "            }\n "}], "start_byte": 11664, "end_byte": 11684, "start_point": [292, 24], "end_point": [292, 44], "text": "                 }\n "}, {"type": ";", "children": [], "start_byte": 11684, "end_byte": 11685, "start_point": [292, 44], "end_point": [292, 45], "text": " "}], "start_byte": 11664, "end_byte": 11685, "start_point": [292, 24], "end_point": [292, 45], "text": "                 }\n  "}, {"type": "}", "children": [], "start_byte": 11706, "end_byte": 11707, "start_point": [293, 20], "end_point": [293, 21], "text": "p"}], "start_byte": 11509, "end_byte": 11707, "start_point": [290, 26], "end_point": [293, 21], "text": "                 let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                        usage(prog_name_str);\n                    }\n                    // p"}], "start_byte": 11503, "end_byte": 11707, "start_point": [290, 20], "end_point": [293, 21], "text": "                       let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                        usage(prog_name_str);\n                    }\n                    // p"}], "start_byte": 11503, "end_byte": 11707, "start_point": [290, 20], "end_point": [293, 21], "text": "                       let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                        usage(prog_name_str);\n                    }\n                    // p"}, {"type": "line_comment", "children": [], "start_byte": 11728, "end_byte": 11748, "start_point": [294, 20], "end_point": [294, 40], "text": "            },\n     "}, {"type": "}", "children": [], "start_byte": 11765, "end_byte": 11766, "start_point": [295, 16], "end_point": [295, 17], "text": "}"}], "start_byte": 11481, "end_byte": 11766, "start_point": [289, 28], "end_point": [295, 17], "text": "(&PROG_NAME), name);\n                        let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                        usage(prog_name_str);\n                    }\n                    // process::exit(0);\n                },\n                _ => {}"}, {"type": ",", "children": [], "start_byte": 11766, "end_byte": 11767, "start_point": [295, 17], "end_point": [295, 18], "text": "\n"}], "start_byte": 11469, "end_byte": 11767, "start_point": [289, 16], "end_point": [295, 18], "text": "m_utf8_lossy(&PROG_NAME), name);\n                        let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                        usage(prog_name_str);\n                    }\n                    // process::exit(0);\n                },\n                _ => {}\n"}, {"type": "match_arm", "children": [{"type": "match_pattern", "children": [{"type": "_", "children": [], "start_byte": 11784, "end_byte": 11785, "start_point": [296, 16], "end_point": [296, 17], "text": " "}, {"type": "if", "children": [], "start_byte": 11786, "end_byte": 11788, "start_point": [296, 18], "end_point": [296, 20], "text": "  "}, {"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 11789, "end_byte": 11793, "start_point": [296, 21], "end_point": [296, 25], "text": "}\n  "}, {"type": ".", "children": [], "start_byte": 11793, "end_byte": 11794, "start_point": [296, 25], "end_point": [296, 26], "text": " "}, {"type": "field_identifier", "children": [], "start_byte": 11794, "end_byte": 11805, "start_point": [296, 26], "end_point": [296, 37], "text": "     aa = &"}], "start_byte": 11789, "end_byte": 11805, "start_point": [296, 21], "end_point": [296, 37], "text": "}\n        aa = &"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 11805, "end_byte": 11806, "start_point": [296, 37], "end_point": [296, 38], "text": "c"}, {"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 11806, "end_byte": 11807, "start_point": [296, 38], "end_point": [296, 39], "text": "e"}, {"type": "\"", "children": [], "start_byte": 11809, "end_byte": 11810, "start_point": [296, 41], "end_point": [296, 42], "text": "."}], "start_byte": 11806, "end_byte": 11810, "start_point": [296, 38], "end_point": [296, 42], "text": "ell."}, {"type": ")", "children": [], "start_byte": 11810, "end_byte": 11811, "start_point": [296, 42], "end_point": [296, 43], "text": "l"}], "start_byte": 11805, "end_byte": 11811, "start_point": [296, 37], "end_point": [296, 43], "text": "cell.l"}], "start_byte": 11789, "end_byte": 11811, "start_point": [296, 21], "end_point": [296, 43], "text": "}\n        aa = &cell.l"}], "start_byte": 11784, "end_byte": 11811, "start_point": [296, 16], "end_point": [296, 43], "text": "     }\n        aa = &cell.l"}, {"type": "=>", "children": [], "start_byte": 11812, "end_byte": 11814, "start_point": [296, 44], "end_point": [296, 46], "text": "nk"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 11815, "end_byte": 11816, "start_point": [296, 47], "end_point": [296, 48], "text": "\n"}, {"type": "expression_statement", "children": [{"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 11837, "end_byte": 11843, "start_point": [297, 20], "end_point": [297, 26], "text": "bosity"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 11843, "end_byte": 11844, "start_point": [297, 26], "end_point": [297, 27], "text": "\u9650"}, {"type": "expression_statement", "children": [{"type": "macro_invocation", "children": [{"type": "identifier", "children": [], "start_byte": 11870, "end_byte": 11878, "start_point": [298, 24], "end_point": [298, 32], "text": "VERBOSIT"}, {"type": "!", "children": [], "start_byte": 11878, "end_byte": 11879, "start_point": [298, 32], "end_point": [298, 33], "text": "Y"}, {"type": "token_tree", "children": [{"type": "(", "children": [], "start_byte": 11879, "end_byte": 11880, "start_point": [298, 33], "end_point": [298, 34], "text": " "}, {"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 11880, "end_byte": 11881, "start_point": [298, 34], "end_point": [298, 35], "text": ">"}, {"type": "\"", "children": [], "start_byte": 11910, "end_byte": 11911, "start_point": [298, 64], "end_point": [298, 65], "text": "4"}], "start_byte": 11880, "end_byte": 11911, "start_point": [298, 34], "end_point": [298, 65], "text": "> 4 {\n            VERBOSITY = 4"}, {"type": "identifier", "children": [], "start_byte": 11913, "end_byte": 11919, "start_point": [298, 67], "end_point": [298, 73], "text": "      "}, {"type": "identifier", "children": [], "start_byte": 11921, "end_byte": 11936, "start_point": [298, 75], "end_point": [298, 90], "text": "}\n        if OP"}, {"type": "token_tree", "children": [{"type": "(", "children": [], "start_byte": 11936, "end_byte": 11937, "start_point": [298, 90], "end_point": [298, 91], "text": "_"}, {"type": "identifier", "children": [], "start_byte": 11938, "end_byte": 11947, "start_point": [298, 92], "end_point": [298, 101], "text": "ODE == 1 "}, {"type": ")", "children": [], "start_byte": 11947, "end_byte": 11948, "start_point": [298, 101], "end_point": [298, 102], "text": "&"}], "start_byte": 11936, "end_byte": 11948, "start_point": [298, 90], "end_point": [298, 102], "text": "_MODE == 1 &"}, {"type": "identifier", "children": [], "start_byte": 11950, "end_byte": 11954, "start_point": [298, 104], "end_point": [298, 108], "text": "SMAL"}, {"type": ")", "children": [], "start_byte": 11954, "end_byte": 11955, "start_point": [298, 108], "end_point": [298, 109], "text": "L"}], "start_byte": 11879, "end_byte": 11955, "start_point": [298, 33], "end_point": [298, 109], "text": " > 4 {\n            VERBOSITY = 4;\n        }\n        if OP_MODE == 1 && SMALL"}], "start_byte": 11870, "end_byte": 11955, "start_point": [298, 24], "end_point": [298, 109], "text": "VERBOSITY > 4 {\n            VERBOSITY = 4;\n        }\n        if OP_MODE == 1 && SMALL"}, {"type": ";", "children": [], "start_byte": 11955, "end_byte": 11956, "start_point": [298, 109], "end_point": [298, 110], "text": "_"}], "start_byte": 11870, "end_byte": 11956, "start_point": [298, 24], "end_point": [298, 110], "text": "VERBOSITY > 4 {\n            VERBOSITY = 4;\n        }\n        if OP_MODE == 1 && SMALL_"}, {"type": "let_declaration", "children": [{"type": "let", "children": [], "start_byte": 11981, "end_byte": 11984, "start_point": [299, 24], "end_point": [299, 27], "text": " {\n"}, {"type": "identifier", "children": [], "start_byte": 11985, "end_byte": 11998, "start_point": [299, 28], "end_point": [299, 41], "text": "           un"}, {"type": "=", "children": [], "start_byte": 11999, "end_byte": 12000, "start_point": [299, 42], "end_point": [299, 43], "text": "a"}, {"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "call_expression", "children": [{"type": "scoped_identifier", "children": [{"type": "scoped_identifier", "children": [{"type": "identifier", "children": [], "start_byte": 12001, "end_byte": 12004, "start_point": [299, 44], "end_point": [299, 47], "text": "e {"}, {"type": "::", "children": [], "start_byte": 12004, "end_byte": 12006, "start_point": [299, 47], "end_point": [299, 49], "text": "bl"}, {"type": "identifier", "children": [], "start_byte": 12006, "end_byte": 12009, "start_point": [299, 49], "end_point": [299, 52], "text": "ock"}], "start_byte": 12001, "end_byte": 12009, "start_point": [299, 44], "end_point": [299, 52], "text": "e {block"}, {"type": "::", "children": [], "start_byte": 12009, "end_byte": 12011, "start_point": [299, 52], "end_point": [299, 54], "text": "Si"}, {"type": "identifier", "children": [], "start_byte": 12011, "end_byte": 12020, "start_point": [299, 54], "end_point": [299, 63], "text": "ze100k = "}], "start_byte": 12001, "end_byte": 12020, "start_point": [299, 44], "end_point": [299, 63], "text": "e {blockSize100k = "}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 12020, "end_byte": 12021, "start_point": [299, 63], "end_point": [299, 64], "text": "2"}, {"type": "reference_expression", "children": [{"type": "&", "children": [], "start_byte": 12021, "end_byte": 12022, "start_point": [299, 64], "end_point": [299, 65], "text": ";"}, {"type": "identifier", "children": [], "start_byte": 12022, "end_byte": 12031, "start_point": [299, 65], "end_point": [299, 74], "text": " }\n      "}], "start_byte": 12021, "end_byte": 12031, "start_point": [299, 64], "end_point": [299, 74], "text": "; }\n      "}, {"type": ")", "children": [], "start_byte": 12031, "end_byte": 12032, "start_point": [299, 74], "end_point": [299, 75], "text": " "}], "start_byte": 12020, "end_byte": 12032, "start_point": [299, 63], "end_point": [299, 75], "text": "2; }\n       "}], "start_byte": 12001, "end_byte": 12032, "start_point": [299, 44], "end_point": [299, 75], "text": "e {blockSize100k = 2; }\n       "}, {"type": ".", "children": [], "start_byte": 12032, "end_byte": 12033, "start_point": [299, 75], "end_point": [299, 76], "text": " "}, {"type": "field_identifier", "children": [], "start_byte": 12033, "end_byte": 12039, "start_point": [299, 76], "end_point": [299, 82], "text": "}\n    "}], "start_byte": 12001, "end_byte": 12039, "start_point": [299, 44], "end_point": [299, 82], "text": "e {blockSize100k = 2; }\n        }\n    "}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 12039, "end_byte": 12040, "start_point": [299, 82], "end_point": [299, 83], "text": " "}, {"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 12040, "end_byte": 12041, "start_point": [299, 83], "end_point": [299, 84], "text": " "}, {"type": "\"", "children": [], "start_byte": 12082, "end_byte": 12083, "start_point": [299, 125], "end_point": [299, 126], "text": " "}], "start_byte": 12040, "end_byte": 12083, "start_point": [299, 83], "end_point": [299, 126], "text": "   if OP_MODE == 3 && SRC_MODE == 2 {\n     "}, {"type": ")", "children": [], "start_byte": 12083, "end_byte": 12084, "start_point": [299, 126], "end_point": [299, 127], "text": " "}], "start_byte": 12039, "end_byte": 12084, "start_point": [299, 82], "end_point": [299, 127], "text": "    if OP_MODE == 3 && SRC_MODE == 2 {\n      "}], "start_byte": 12001, "end_byte": 12084, "start_point": [299, 44], "end_point": [299, 127], "text": "e {blockSize100k = 2; }\n        }\n        if OP_MODE == 3 && SRC_MODE == 2 {\n      "}, {"type": ";", "children": [], "start_byte": 12084, "end_byte": 12085, "start_point": [299, 127], "end_point": [299, 128], "text": " "}], "start_byte": 11981, "end_byte": 12085, "start_point": [299, 24], "end_point": [299, 128], "text": " {\n            unsafe {blockSize100k = 2; }\n        }\n        if OP_MODE == 3 && SRC_MODE == 2 {\n       "}, {"type": "expression_statement", "children": [{"type": "call_expression", "children": [{"type": "identifier", "children": [], "start_byte": 12110, "end_byte": 12115, "start_point": [300, 24], "end_point": [300, 29], "text": "}: -c"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 12115, "end_byte": 12116, "start_point": [300, 29], "end_point": [300, 30], "text": " "}, {"type": "identifier", "children": [], "start_byte": 12116, "end_byte": 12129, "start_point": [300, 30], "end_point": [300, 43], "text": "and -t cannot"}, {"type": ")", "children": [], "start_byte": 12129, "end_byte": 12130, "start_point": [300, 43], "end_point": [300, 44], "text": " "}], "start_byte": 12115, "end_byte": 12130, "start_point": [300, 29], "end_point": [300, 44], "text": " and -t cannot "}], "start_byte": 12110, "end_byte": 12130, "start_point": [300, 24], "end_point": [300, 44], "text": "}: -c and -t cannot "}, {"type": ";", "children": [], "start_byte": 12130, "end_byte": 12131, "start_point": [300, 44], "end_point": [300, 45], "text": "b"}], "start_byte": 12110, "end_byte": 12131, "start_point": [300, 24], "end_point": [300, 45], "text": "}: -c and -t cannot b"}, {"type": "}", "children": [], "start_byte": 12152, "end_byte": 12153, "start_point": [301, 20], "end_point": [301, 21], "text": "r"}], "start_byte": 11843, "end_byte": 12153, "start_point": [297, 26], "end_point": [301, 21], "text": "\u9650\u5236\n    unsafe {\n        if VERBOSITY > 4 {\n            VERBOSITY = 4;\n        }\n        if OP_MODE == 1 && SMALL_MODE && blockSize100k > 2 {\n            unsafe {blockSize100k = 2; }\n        }\n        if OP_MODE == 3 && SRC_MODE == 2 {\n            unsafe {eprintln!(\"{}: -c and -t cannot be used together.\", Str"}], "start_byte": 11837, "end_byte": 12153, "start_point": [297, 20], "end_point": [301, 21], "text": "bosity\u9650\u5236\n    unsafe {\n        if VERBOSITY > 4 {\n            VERBOSITY = 4;\n        }\n        if OP_MODE == 1 && SMALL_MODE && blockSize100k > 2 {\n            unsafe {blockSize100k = 2; }\n        }\n        if OP_MODE == 3 && SRC_MODE == 2 {\n            unsafe {eprintln!(\"{}: -c and -t cannot be used together.\", Str"}], "start_byte": 11837, "end_byte": 12153, "start_point": [297, 20], "end_point": [301, 21], "text": "bosity\u9650\u5236\n    unsafe {\n        if VERBOSITY > 4 {\n            VERBOSITY = 4;\n        }\n        if OP_MODE == 1 && SMALL_MODE && blockSize100k > 2 {\n            unsafe {blockSize100k = 2; }\n        }\n        if OP_MODE == 3 && SRC_MODE == 2 {\n            unsafe {eprintln!(\"{}: -c and -t cannot be used together.\", Str"}, {"type": "line_comment", "children": [], "start_byte": 12174, "end_byte": 12194, "start_point": [302, 20], "end_point": [302, 40], "text": "&PROG_NAME));}\n     "}, {"type": "}", "children": [], "start_byte": 12211, "end_byte": 12212, "start_point": [303, 16], "end_point": [303, 17], "text": ":"}], "start_byte": 11815, "end_byte": 12212, "start_point": [296, 47], "end_point": [303, 17], "text": "\n    }\n\n\n\n    // \u8bbe\u7f6everbosity\u9650\u5236\n    unsafe {\n        if VERBOSITY > 4 {\n            VERBOSITY = 4;\n        }\n        if OP_MODE == 1 && SMALL_MODE && blockSize100k > 2 {\n            unsafe {blockSize100k = 2; }\n        }\n        if OP_MODE == 3 && SRC_MODE == 2 {\n            unsafe {eprintln!(\"{}: -c and -t cannot be used together.\", String::from_utf8_lossy(&PROG_NAME));}\n            // process:"}, {"type": ",", "children": [], "start_byte": 12212, "end_byte": 12213, "start_point": [303, 17], "end_point": [303, 18], "text": ":"}], "start_byte": 11784, "end_byte": 12213, "start_point": [296, 16], "end_point": [303, 18], "text": "     }\n        aa = &cell.link;\n    }\n\n\n\n    // \u8bbe\u7f6everbosity\u9650\u5236\n    unsafe {\n        if VERBOSITY > 4 {\n            VERBOSITY = 4;\n        }\n        if OP_MODE == 1 && SMALL_MODE && blockSize100k > 2 {\n            unsafe {blockSize100k = 2; }\n        }\n        if OP_MODE == 3 && SRC_MODE == 2 {\n            unsafe {eprintln!(\"{}: -c and -t cannot be used together.\", String::from_utf8_lossy(&PROG_NAME));}\n            // process::"}, {"type": "match_arm", "children": [{"type": "match_pattern", "children": [{"type": "_", "children": [], "start_byte": 12230, "end_byte": 12231, "start_point": [304, 16], "end_point": [304, 17], "text": "}"}], "start_byte": 12230, "end_byte": 12231, "start_point": [304, 16], "end_point": [304, 17], "text": "}"}, {"type": "=>", "children": [], "start_byte": 12232, "end_byte": 12234, "start_point": [304, 18], "end_point": [304, 20], "text": "  "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 12235, "end_byte": 12236, "start_point": [304, 21], "end_point": [304, 22], "text": " "}, {"type": "}", "children": [], "start_byte": 12236, "end_byte": 12237, "start_point": [304, 22], "end_point": [304, 23], "text": " "}], "start_byte": 12235, "end_byte": 12237, "start_point": [304, 21], "end_point": [304, 23], "text": "  "}], "start_byte": 12230, "end_byte": 12237, "start_point": [304, 16], "end_point": [304, 23], "text": "}\n     "}, {"type": "}", "children": [], "start_byte": 12250, "end_byte": 12251, "start_point": [305, 12], "end_point": [305, 13], "text": "E"}], "start_byte": 10562, "end_byte": 12251, "start_point": [273, 32], "end_point": [305, 13], "text": "E = true; },\n                \"--quiet\" => unsafe { NOISY = false; },\n                \"--version\" | \"--license\" => license(),\n                \"--exponential\" => unsafe { WORK_FACTOR = 1; },\n                \"--repetitive-best\" | \"--repetitive-fast\" => redundant(&name.as_bytes()),\n                \"--fast\" => unsafe { blockSize100k = 1; },\n                \"--best\" => unsafe { blockSize100k = 9; },\n                \"--verbose\" => unsafe { VERBOSITY += 1; },\n                \"--help\" => {\n                    unsafe{\n                        let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                        usage(prog_name_str);\n                    }\n                    // process::exit(0);\n                },\n                _ if name.starts_with(\"--\") => {\n                    unsafe{ \n                        eprintln!(\"\u7b2c\u4e8cmatch {}: Bad flag `{}`\", String::from_utf8_lossy(&PROG_NAME), name);\n                        let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                        usage(prog_name_str);\n                    }\n                    // process::exit(0);\n                },\n                _ => {}\n            }\n        }\n        aa = &cell.link;\n    }\n\n\n\n    // \u8bbe\u7f6everbosity\u9650\u5236\n    unsafe {\n        if VERBOSITY > 4 {\n            VERBOSITY = 4;\n        }\n        if OP_MODE == 1 && SMALL_MODE && blockSize100k > 2 {\n            unsafe {blockSize100k = 2; }\n        }\n        if OP_MODE == 3 && SRC_MODE == 2 {\n            unsafe {eprintln!(\"{}: -c and -t cannot be used together.\", String::from_utf8_lossy(&PROG_NAME));}\n            // process::exit(1);\n        }\n        if SRC_MODE"}], "start_byte": 10542, "end_byte": 12251, "start_point": [273, 12], "end_point": [305, 13], "text": "> unsafe { SMALL_MODE = true; },\n                \"--quiet\" => unsafe { NOISY = false; },\n                \"--version\" | \"--license\" => license(),\n                \"--exponential\" => unsafe { WORK_FACTOR = 1; },\n                \"--repetitive-best\" | \"--repetitive-fast\" => redundant(&name.as_bytes()),\n                \"--fast\" => unsafe { blockSize100k = 1; },\n                \"--best\" => unsafe { blockSize100k = 9; },\n                \"--verbose\" => unsafe { VERBOSITY += 1; },\n                \"--help\" => {\n                    unsafe{\n                        let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                        usage(prog_name_str);\n                    }\n                    // process::exit(0);\n                },\n                _ if name.starts_with(\"--\") => {\n                    unsafe{ \n                        eprintln!(\"\u7b2c\u4e8cmatch {}: Bad flag `{}`\", String::from_utf8_lossy(&PROG_NAME), name);\n                        let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                        usage(prog_name_str);\n                    }\n                    // process::exit(0);\n                },\n                _ => {}\n            }\n        }\n        aa = &cell.link;\n    }\n\n\n\n    // \u8bbe\u7f6everbosity\u9650\u5236\n    unsafe {\n        if VERBOSITY > 4 {\n            VERBOSITY = 4;\n        }\n        if OP_MODE == 1 && SMALL_MODE && blockSize100k > 2 {\n            unsafe {blockSize100k = 2; }\n        }\n        if OP_MODE == 3 && SRC_MODE == 2 {\n            unsafe {eprintln!(\"{}: -c and -t cannot be used together.\", String::from_utf8_lossy(&PROG_NAME));}\n            // process::exit(1);\n        }\n        if SRC_MODE"}], "start_byte": 10542, "end_byte": 12251, "start_point": [273, 12], "end_point": [305, 13], "text": "> unsafe { SMALL_MODE = true; },\n                \"--quiet\" => unsafe { NOISY = false; },\n                \"--version\" | \"--license\" => license(),\n                \"--exponential\" => unsafe { WORK_FACTOR = 1; },\n                \"--repetitive-best\" | \"--repetitive-fast\" => redundant(&name.as_bytes()),\n                \"--fast\" => unsafe { blockSize100k = 1; },\n                \"--best\" => unsafe { blockSize100k = 9; },\n                \"--verbose\" => unsafe { VERBOSITY += 1; },\n                \"--help\" => {\n                    unsafe{\n                        let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                        usage(prog_name_str);\n                    }\n                    // process::exit(0);\n                },\n                _ if name.starts_with(\"--\") => {\n                    unsafe{ \n                        eprintln!(\"\u7b2c\u4e8cmatch {}: Bad flag `{}`\", String::from_utf8_lossy(&PROG_NAME), name);\n                        let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                        usage(prog_name_str);\n                    }\n                    // process::exit(0);\n                },\n                _ => {}\n            }\n        }\n        aa = &cell.link;\n    }\n\n\n\n    // \u8bbe\u7f6everbosity\u9650\u5236\n    unsafe {\n        if VERBOSITY > 4 {\n            VERBOSITY = 4;\n        }\n        if OP_MODE == 1 && SMALL_MODE && blockSize100k > 2 {\n            unsafe {blockSize100k = 2; }\n        }\n        if OP_MODE == 3 && SRC_MODE == 2 {\n            unsafe {eprintln!(\"{}: -c and -t cannot be used together.\", String::from_utf8_lossy(&PROG_NAME));}\n            // process::exit(1);\n        }\n        if SRC_MODE"}, {"type": "}", "children": [], "start_byte": 12260, "end_byte": 12261, "start_point": [306, 8], "end_point": [306, 9], "text": "N"}], "start_byte": 10528, "end_byte": 12261, "start_point": [272, 39], "end_point": [306, 9], "text": "   \"--small\" => unsafe { SMALL_MODE = true; },\n                \"--quiet\" => unsafe { NOISY = false; },\n                \"--version\" | \"--license\" => license(),\n                \"--exponential\" => unsafe { WORK_FACTOR = 1; },\n                \"--repetitive-best\" | \"--repetitive-fast\" => redundant(&name.as_bytes()),\n                \"--fast\" => unsafe { blockSize100k = 1; },\n                \"--best\" => unsafe { blockSize100k = 9; },\n                \"--verbose\" => unsafe { VERBOSITY += 1; },\n                \"--help\" => {\n                    unsafe{\n                        let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                        usage(prog_name_str);\n                    }\n                    // process::exit(0);\n                },\n                _ if name.starts_with(\"--\") => {\n                    unsafe{ \n                        eprintln!(\"\u7b2c\u4e8cmatch {}: Bad flag `{}`\", String::from_utf8_lossy(&PROG_NAME), name);\n                        let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                        usage(prog_name_str);\n                    }\n                    // process::exit(0);\n                },\n                _ => {}\n            }\n        }\n        aa = &cell.link;\n    }\n\n\n\n    // \u8bbe\u7f6everbosity\u9650\u5236\n    unsafe {\n        if VERBOSITY > 4 {\n            VERBOSITY = 4;\n        }\n        if OP_MODE == 1 && SMALL_MODE && blockSize100k > 2 {\n            unsafe {blockSize100k = 2; }\n        }\n        if OP_MODE == 3 && SRC_MODE == 2 {\n            unsafe {eprintln!(\"{}: -c and -t cannot be used together.\", String::from_utf8_lossy(&PROG_NAME));}\n            // process::exit(1);\n        }\n        if SRC_MODE == 2 && N"}], "start_byte": 10497, "end_byte": 12261, "start_point": [272, 8], "end_point": [306, 9], "text": "_FILES = true; },\n                \"--small\" => unsafe { SMALL_MODE = true; },\n                \"--quiet\" => unsafe { NOISY = false; },\n                \"--version\" | \"--license\" => license(),\n                \"--exponential\" => unsafe { WORK_FACTOR = 1; },\n                \"--repetitive-best\" | \"--repetitive-fast\" => redundant(&name.as_bytes()),\n                \"--fast\" => unsafe { blockSize100k = 1; },\n                \"--best\" => unsafe { blockSize100k = 9; },\n                \"--verbose\" => unsafe { VERBOSITY += 1; },\n                \"--help\" => {\n                    unsafe{\n                        let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                        usage(prog_name_str);\n                    }\n                    // process::exit(0);\n                },\n                _ if name.starts_with(\"--\") => {\n                    unsafe{ \n                        eprintln!(\"\u7b2c\u4e8cmatch {}: Bad flag `{}`\", String::from_utf8_lossy(&PROG_NAME), name);\n                        let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                        usage(prog_name_str);\n                    }\n                    // process::exit(0);\n                },\n                _ => {}\n            }\n        }\n        aa = &cell.link;\n    }\n\n\n\n    // \u8bbe\u7f6everbosity\u9650\u5236\n    unsafe {\n        if VERBOSITY > 4 {\n            VERBOSITY = 4;\n        }\n        if OP_MODE == 1 && SMALL_MODE && blockSize100k > 2 {\n            unsafe {blockSize100k = 2; }\n        }\n        if OP_MODE == 3 && SRC_MODE == 2 {\n            unsafe {eprintln!(\"{}: -c and -t cannot be used together.\", String::from_utf8_lossy(&PROG_NAME));}\n            // process::exit(1);\n        }\n        if SRC_MODE == 2 && N"}], "start_byte": 10497, "end_byte": 12261, "start_point": [272, 8], "end_point": [306, 9], "text": "_FILES = true; },\n                \"--small\" => unsafe { SMALL_MODE = true; },\n                \"--quiet\" => unsafe { NOISY = false; },\n                \"--version\" | \"--license\" => license(),\n                \"--exponential\" => unsafe { WORK_FACTOR = 1; },\n                \"--repetitive-best\" | \"--repetitive-fast\" => redundant(&name.as_bytes()),\n                \"--fast\" => unsafe { blockSize100k = 1; },\n                \"--best\" => unsafe { blockSize100k = 9; },\n                \"--verbose\" => unsafe { VERBOSITY += 1; },\n                \"--help\" => {\n                    unsafe{\n                        let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                        usage(prog_name_str);\n                    }\n                    // process::exit(0);\n                },\n                _ if name.starts_with(\"--\") => {\n                    unsafe{ \n                        eprintln!(\"\u7b2c\u4e8cmatch {}: Bad flag `{}`\", String::from_utf8_lossy(&PROG_NAME), name);\n                        let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                        usage(prog_name_str);\n                    }\n                    // process::exit(0);\n                },\n                _ => {}\n            }\n        }\n        aa = &cell.link;\n    }\n\n\n\n    // \u8bbe\u7f6everbosity\u9650\u5236\n    unsafe {\n        if VERBOSITY > 4 {\n            VERBOSITY = 4;\n        }\n        if OP_MODE == 1 && SMALL_MODE && blockSize100k > 2 {\n            unsafe {blockSize100k = 2; }\n        }\n        if OP_MODE == 3 && SRC_MODE == 2 {\n            unsafe {eprintln!(\"{}: -c and -t cannot be used together.\", String::from_utf8_lossy(&PROG_NAME));}\n            // process::exit(1);\n        }\n        if SRC_MODE == 2 && N"}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 12270, "end_byte": 12272, "start_point": [307, 8], "end_point": [307, 10], "text": "AM"}, {"type": "=", "children": [], "start_byte": 12273, "end_byte": 12274, "start_point": [307, 11], "end_point": [307, 12], "text": "S"}, {"type": "reference_expression", "children": [{"type": "&", "children": [], "start_byte": 12275, "end_byte": 12276, "start_point": [307, 13], "end_point": [307, 14], "text": "="}, {"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 12276, "end_byte": 12280, "start_point": [307, 14], "end_point": [307, 18], "text": "= 0 "}, {"type": ".", "children": [], "start_byte": 12280, "end_byte": 12281, "start_point": [307, 18], "end_point": [307, 19], "text": "{"}, {"type": "field_identifier", "children": [], "start_byte": 12281, "end_byte": 12285, "start_point": [307, 19], "end_point": [307, 23], "text": "\n   "}], "start_byte": 12276, "end_byte": 12285, "start_point": [307, 14], "end_point": [307, 23], "text": "= 0 {\n   "}], "start_byte": 12275, "end_byte": 12285, "start_point": [307, 13], "end_point": [307, 23], "text": "== 0 {\n   "}], "start_byte": 12270, "end_byte": 12285, "start_point": [307, 8], "end_point": [307, 23], "text": "AMES == 0 {\n   "}, {"type": ";", "children": [], "start_byte": 12285, "end_byte": 12286, "start_point": [307, 23], "end_point": [307, 24], "text": " "}], "start_byte": 12270, "end_byte": 12286, "start_point": [307, 8], "end_point": [307, 24], "text": "AMES == 0 {\n    "}, {"type": "}", "children": [], "start_byte": 12291, "end_byte": 12292, "start_point": [308, 4], "end_point": [308, 5], "text": " "}], "start_byte": 10487, "end_byte": 12292, "start_point": [271, 30], "end_point": [308, 5], "text": "KEEP_INPUT_FILES = true; },\n                \"--small\" => unsafe { SMALL_MODE = true; },\n                \"--quiet\" => unsafe { NOISY = false; },\n                \"--version\" | \"--license\" => license(),\n                \"--exponential\" => unsafe { WORK_FACTOR = 1; },\n                \"--repetitive-best\" | \"--repetitive-fast\" => redundant(&name.as_bytes()),\n                \"--fast\" => unsafe { blockSize100k = 1; },\n                \"--best\" => unsafe { blockSize100k = 9; },\n                \"--verbose\" => unsafe { VERBOSITY += 1; },\n                \"--help\" => {\n                    unsafe{\n                        let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                        usage(prog_name_str);\n                    }\n                    // process::exit(0);\n                },\n                _ if name.starts_with(\"--\") => {\n                    unsafe{ \n                        eprintln!(\"\u7b2c\u4e8cmatch {}: Bad flag `{}`\", String::from_utf8_lossy(&PROG_NAME), name);\n                        let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                        usage(prog_name_str);\n                    }\n                    // process::exit(0);\n                },\n                _ => {}\n            }\n        }\n        aa = &cell.link;\n    }\n\n\n\n    // \u8bbe\u7f6everbosity\u9650\u5236\n    unsafe {\n        if VERBOSITY > 4 {\n            VERBOSITY = 4;\n        }\n        if OP_MODE == 1 && SMALL_MODE && blockSize100k > 2 {\n            unsafe {blockSize100k = 2; }\n        }\n        if OP_MODE == 3 && SRC_MODE == 2 {\n            unsafe {eprintln!(\"{}: -c and -t cannot be used together.\", String::from_utf8_lossy(&PROG_NAME));}\n            // process::exit(1);\n        }\n        if SRC_MODE == 2 && NUM_FILE_NAMES == 0 {\n          "}], "start_byte": 10461, "end_byte": 12292, "start_point": [271, 4], "end_point": [308, 5], "text": "     \"--keep\" => unsafe { KEEP_INPUT_FILES = true; },\n                \"--small\" => unsafe { SMALL_MODE = true; },\n                \"--quiet\" => unsafe { NOISY = false; },\n                \"--version\" | \"--license\" => license(),\n                \"--exponential\" => unsafe { WORK_FACTOR = 1; },\n                \"--repetitive-best\" | \"--repetitive-fast\" => redundant(&name.as_bytes()),\n                \"--fast\" => unsafe { blockSize100k = 1; },\n                \"--best\" => unsafe { blockSize100k = 9; },\n                \"--verbose\" => unsafe { VERBOSITY += 1; },\n                \"--help\" => {\n                    unsafe{\n                        let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                        usage(prog_name_str);\n                    }\n                    // process::exit(0);\n                },\n                _ if name.starts_with(\"--\") => {\n                    unsafe{ \n                        eprintln!(\"\u7b2c\u4e8cmatch {}: Bad flag `{}`\", String::from_utf8_lossy(&PROG_NAME), name);\n                        let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                        usage(prog_name_str);\n                    }\n                    // process::exit(0);\n                },\n                _ => {}\n            }\n        }\n        aa = &cell.link;\n    }\n\n\n\n    // \u8bbe\u7f6everbosity\u9650\u5236\n    unsafe {\n        if VERBOSITY > 4 {\n            VERBOSITY = 4;\n        }\n        if OP_MODE == 1 && SMALL_MODE && blockSize100k > 2 {\n            unsafe {blockSize100k = 2; }\n        }\n        if OP_MODE == 3 && SRC_MODE == 2 {\n            unsafe {eprintln!(\"{}: -c and -t cannot be used together.\", String::from_utf8_lossy(&PROG_NAME));}\n            // process::exit(1);\n        }\n        if SRC_MODE == 2 && NUM_FILE_NAMES == 0 {\n          "}], "start_byte": 10461, "end_byte": 12292, "start_point": [271, 4], "end_point": [308, 5], "text": "     \"--keep\" => unsafe { KEEP_INPUT_FILES = true; },\n                \"--small\" => unsafe { SMALL_MODE = true; },\n                \"--quiet\" => unsafe { NOISY = false; },\n                \"--version\" | \"--license\" => license(),\n                \"--exponential\" => unsafe { WORK_FACTOR = 1; },\n                \"--repetitive-best\" | \"--repetitive-fast\" => redundant(&name.as_bytes()),\n                \"--fast\" => unsafe { blockSize100k = 1; },\n                \"--best\" => unsafe { blockSize100k = 9; },\n                \"--verbose\" => unsafe { VERBOSITY += 1; },\n                \"--help\" => {\n                    unsafe{\n                        let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                        usage(prog_name_str);\n                    }\n                    // process::exit(0);\n                },\n                _ if name.starts_with(\"--\") => {\n                    unsafe{ \n                        eprintln!(\"\u7b2c\u4e8cmatch {}: Bad flag `{}`\", String::from_utf8_lossy(&PROG_NAME), name);\n                        let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                        usage(prog_name_str);\n                    }\n                    // process::exit(0);\n                },\n                _ => {}\n            }\n        }\n        aa = &cell.link;\n    }\n\n\n\n    // \u8bbe\u7f6everbosity\u9650\u5236\n    unsafe {\n        if VERBOSITY > 4 {\n            VERBOSITY = 4;\n        }\n        if OP_MODE == 1 && SMALL_MODE && blockSize100k > 2 {\n            unsafe {blockSize100k = 2; }\n        }\n        if OP_MODE == 3 && SRC_MODE == 2 {\n            unsafe {eprintln!(\"{}: -c and -t cannot be used together.\", String::from_utf8_lossy(&PROG_NAME));}\n            // process::exit(1);\n        }\n        if SRC_MODE == 2 && NUM_FILE_NAMES == 0 {\n          "}, {"type": "line_comment", "children": [], "start_byte": 12300, "end_byte": 12324, "start_point": [312, 4], "end_point": [312, 28], "text": "DE = 1;\n        }\n      "}, {"type": "expression_statement", "children": [{"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 12329, "end_byte": 12335, "start_point": [313, 4], "end_point": [313, 10], "text": "OP_MOD"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 12336, "end_byte": 12337, "start_point": [313, 11], "end_point": [313, 12], "text": " "}, {"type": "expression_statement", "children": [{"type": "if_expression", "children": [{"type": "if", "children": [], "start_byte": 12346, "end_byte": 12348, "start_point": [314, 8], "end_point": [314, 10], "text": "  "}, {"type": "binary_expression", "children": [{"type": "identifier", "children": [], "start_byte": 12349, "end_byte": 12358, "start_point": [314, 11], "end_point": [314, 20], "text": "       un"}, {"type": ">", "children": [], "start_byte": 12359, "end_byte": 12360, "start_point": [314, 21], "end_point": [314, 22], "text": "a"}, {"type": "integer_literal", "children": [], "start_byte": 12361, "end_byte": 12362, "start_point": [314, 23], "end_point": [314, 24], "text": "e"}], "start_byte": 12349, "end_byte": 12362, "start_point": [314, 11], "end_point": [314, 24], "text": "       unsafe"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 12363, "end_byte": 12364, "start_point": [314, 25], "end_point": [314, 26], "text": "{"}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 12377, "end_byte": 12386, "start_point": [315, 12], "end_point": [315, 21], "text": " = 0; }\n "}, {"type": "=", "children": [], "start_byte": 12387, "end_byte": 12388, "start_point": [315, 22], "end_point": [315, 23], "text": " "}, {"type": "integer_literal", "children": [], "start_byte": 12389, "end_byte": 12390, "start_point": [315, 24], "end_point": [315, 25], "text": " "}], "start_byte": 12377, "end_byte": 12390, "start_point": [315, 12], "end_point": [315, 25], "text": " = 0; }\n     "}, {"type": ";", "children": [], "start_byte": 12390, "end_byte": 12391, "start_point": [315, 25], "end_point": [315, 26], "text": " "}], "start_byte": 12377, "end_byte": 12391, "start_point": [315, 12], "end_point": [315, 26], "text": " = 0; }\n      "}, {"type": "}", "children": [], "start_byte": 12400, "end_byte": 12401, "start_point": [316, 8], "end_point": [316, 9], "text": "\n"}], "start_byte": 12363, "end_byte": 12401, "start_point": [314, 25], "end_point": [316, 9], "text": "{blockSize100k = 0; }\n        }\n    }\n"}], "start_byte": 12346, "end_byte": 12401, "start_point": [314, 8], "end_point": [316, 9], "text": "          unsafe {blockSize100k = 0; }\n        }\n    }\n"}], "start_byte": 12346, "end_byte": 12401, "start_point": [314, 8], "end_point": [316, 9], "text": "          unsafe {blockSize100k = 0; }\n        }\n    }\n"}, {"type": "expression_statement", "children": [{"type": "if_expression", "children": [{"type": "if", "children": [], "start_byte": 12410, "end_byte": 12412, "start_point": [317, 8], "end_point": [317, 10], "text": "\u64cd\u4f5c"}, {"type": "binary_expression", "children": [{"type": "binary_expression", "children": [{"type": "binary_expression", "children": [{"type": "identifier", "children": [], "start_byte": 12413, "end_byte": 12420, "start_point": [317, 11], "end_point": [317, 18], "text": "\u5f0f\u6267\u884c\u76f8\u5e94\u7684\u64cd"}, {"type": "==", "children": [], "start_byte": 12421, "end_byte": 12423, "start_point": [317, 19], "end_point": [317, 21], "text": "\n "}, {"type": "integer_literal", "children": [], "start_byte": 12424, "end_byte": 12425, "start_point": [317, 22], "end_point": [317, 23], "text": " "}], "start_byte": 12413, "end_byte": 12425, "start_point": [317, 11], "end_point": [317, 23], "text": "\u5f0f\u6267\u884c\u76f8\u5e94\u7684\u64cd\u4f5c\n   "}, {"type": "&&", "children": [], "start_byte": 12426, "end_byte": 12428, "start_point": [317, 24], "end_point": [317, 26], "text": "un"}, {"type": "identifier", "children": [], "start_byte": 12429, "end_byte": 12439, "start_point": [317, 27], "end_point": [317, 37], "text": "afe {\n    "}], "start_byte": 12413, "end_byte": 12439, "start_point": [317, 11], "end_point": [317, 37], "text": "\u5f0f\u6267\u884c\u76f8\u5e94\u7684\u64cd\u4f5c\n    unsafe {\n    "}, {"type": "&&", "children": [], "start_byte": 12440, "end_byte": 12442, "start_point": [317, 38], "end_point": [317, 40], "text": "  "}, {"type": "binary_expression", "children": [{"type": "identifier", "children": [], "start_byte": 12443, "end_byte": 12456, "start_point": [317, 41], "end_point": [317, 54], "text": "// println!(\""}, {"type": ">", "children": [], "start_byte": 12457, "end_byte": 12458, "start_point": [317, 55], "end_point": [317, 56], "text": "P"}, {"type": "integer_literal", "children": [], "start_byte": 12459, "end_byte": 12460, "start_point": [317, 57], "end_point": [317, 58], "text": "M"}], "start_byte": 12443, "end_byte": 12460, "start_point": [317, 41], "end_point": [317, 58], "text": "// println!(\"OP_M"}], "start_byte": 12413, "end_byte": 12460, "start_point": [317, 11], "end_point": [317, 58], "text": "\u5f0f\u6267\u884c\u76f8\u5e94\u7684\u64cd\u4f5c\n    unsafe {\n        // println!(\"OP_M"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 12461, "end_byte": 12462, "start_point": [317, 59], "end_point": [317, 60], "text": "D"}, {"type": "expression_statement", "children": [{"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 12475, "end_byte": 12481, "start_point": [318, 12], "end_point": [318, 18], "text": "DE);\n "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 12482, "end_byte": 12483, "start_point": [318, 19], "end_point": [318, 20], "text": " "}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 12483, "end_byte": 12496, "start_point": [318, 20], "end_point": [318, 33], "text": "     // print"}, {"type": "=", "children": [], "start_byte": 12497, "end_byte": 12498, "start_point": [318, 34], "end_point": [318, 35], "text": "n"}, {"type": "integer_literal", "children": [], "start_byte": 12499, "end_byte": 12500, "start_point": [318, 36], "end_point": [318, 37], "text": "("}], "start_byte": 12483, "end_byte": 12500, "start_point": [318, 20], "end_point": [318, 37], "text": "     // println!("}, {"type": ";", "children": [], "start_byte": 12500, "end_byte": 12501, "start_point": [318, 37], "end_point": [318, 38], "text": "\""}], "start_byte": 12483, "end_byte": 12501, "start_point": [318, 20], "end_point": [318, 38], "text": "     // println!(\""}, {"type": "}", "children": [], "start_byte": 12502, "end_byte": 12503, "start_point": [318, 39], "end_point": [318, 40], "text": "R"}], "start_byte": 12482, "end_byte": 12503, "start_point": [318, 19], "end_point": [318, 40], "text": "      // println!(\"SR"}], "start_byte": 12475, "end_byte": 12503, "start_point": [318, 12], "end_point": [318, 40], "text": "DE);\n        // println!(\"SR"}], "start_byte": 12475, "end_byte": 12503, "start_point": [318, 12], "end_point": [318, 40], "text": "DE);\n        // println!(\"SR"}, {"type": "}", "children": [], "start_byte": 12512, "end_byte": 12513, "start_point": [319, 8], "end_point": [319, 9], "text": "}"}], "start_byte": 12461, "end_byte": 12513, "start_point": [317, 59], "end_point": [319, 9], "text": "DE: {}\", OP_MODE);\n        // println!(\"SRC_MODE: {}"}], "start_byte": 12410, "end_byte": 12513, "start_point": [317, 8], "end_point": [319, 9], "text": "\u64cd\u4f5c\u6a21\u5f0f\u6267\u884c\u76f8\u5e94\u7684\u64cd\u4f5c\n    unsafe {\n        // println!(\"OP_MODE: {}\", OP_MODE);\n        // println!(\"SRC_MODE: {}"}], "start_byte": 12410, "end_byte": 12513, "start_point": [317, 8], "end_point": [319, 9], "text": "\u64cd\u4f5c\u6a21\u5f0f\u6267\u884c\u76f8\u5e94\u7684\u64cd\u4f5c\n    unsafe {\n        // println!(\"OP_MODE: {}\", OP_MODE);\n        // println!(\"SRC_MODE: {}"}, {"type": "expression_statement", "children": [{"type": "if_expression", "children": [{"type": "if", "children": [], "start_byte": 12522, "end_byte": 12524, "start_point": [320, 8], "end_point": [320, 10], "text": "DE"}, {"type": "binary_expression", "children": [{"type": "binary_expression", "children": [{"type": "identifier", "children": [], "start_byte": 12525, "end_byte": 12532, "start_point": [320, 11], "end_point": [320, 18], "text": ";\n     "}, {"type": "==", "children": [], "start_byte": 12533, "end_byte": 12535, "start_point": [320, 19], "end_point": [320, 21], "text": "  "}, {"type": "integer_literal", "children": [], "start_byte": 12536, "end_byte": 12537, "start_point": [320, 22], "end_point": [320, 23], "text": "a"}], "start_byte": 12525, "end_byte": 12537, "start_point": [320, 11], "end_point": [320, 23], "text": ";\n        ma"}, {"type": "&&", "children": [], "start_byte": 12538, "end_byte": 12540, "start_point": [320, 24], "end_point": [320, 26], "text": "ch"}, {"type": "binary_expression", "children": [{"type": "identifier", "children": [], "start_byte": 12541, "end_byte": 12549, "start_point": [320, 27], "end_point": [320, 35], "text": "OP_MODE "}, {"type": "==", "children": [], "start_byte": 12550, "end_byte": 12552, "start_point": [320, 36], "end_point": [320, 38], "text": "\n "}, {"type": "integer_literal", "children": [], "start_byte": 12553, "end_byte": 12554, "start_point": [320, 39], "end_point": [320, 40], "text": " "}], "start_byte": 12541, "end_byte": 12554, "start_point": [320, 27], "end_point": [320, 40], "text": "OP_MODE {\n   "}], "start_byte": 12525, "end_byte": 12554, "start_point": [320, 11], "end_point": [320, 40], "text": ";\n        match OP_MODE {\n   "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 12555, "end_byte": 12556, "start_point": [320, 41], "end_point": [320, 42], "text": " "}, {"type": "expression_statement", "children": [{"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 12569, "end_byte": 12575, "start_point": [321, 12], "end_point": [321, 18], "text": "\n     "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 12576, "end_byte": 12577, "start_point": [321, 19], "end_point": [321, 20], "text": " "}, {"type": "expression_statement", "children": [{"type": "macro_invocation", "children": [{"type": "identifier", "children": [], "start_byte": 12577, "end_byte": 12585, "start_point": [321, 20], "end_point": [321, 28], "text": "        "}, {"type": "!", "children": [], "start_byte": 12585, "end_byte": 12586, "start_point": [321, 28], "end_point": [321, 29], "text": " "}, {"type": "token_tree", "children": [{"type": "(", "children": [], "start_byte": 12586, "end_byte": 12587, "start_point": [321, 29], "end_point": [321, 30], "text": "i"}, {"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 12587, "end_byte": 12588, "start_point": [321, 30], "end_point": [321, 31], "text": "f"}, {"type": "\"", "children": [], "start_byte": 12626, "end_byte": 12627, "start_point": [321, 69], "end_point": [321, 70], "text": "o"}], "start_byte": 12587, "end_byte": 12627, "start_point": [321, 30], "end_point": [321, 70], "text": "f SRC_MODE == 1 {\n                    co"}, {"type": "identifier", "children": [], "start_byte": 12629, "end_byte": 12635, "start_point": [321, 72], "end_point": [321, 78], "text": "ress(N"}, {"type": "identifier", "children": [], "start_byte": 12637, "end_byte": 12652, "start_point": [321, 80], "end_point": [321, 95], "text": "e)?;\n          "}, {"type": "token_tree", "children": [{"type": "(", "children": [], "start_byte": 12652, "end_byte": 12653, "start_point": [321, 95], "end_point": [321, 96], "text": " "}, {"type": "identifier", "children": [], "start_byte": 12654, "end_byte": 12663, "start_point": [321, 97], "end_point": [321, 106], "text": "    } els"}, {"type": ")", "children": [], "start_byte": 12663, "end_byte": 12664, "start_point": [321, 106], "end_point": [321, 107], "text": "e"}], "start_byte": 12652, "end_byte": 12664, "start_point": [321, 95], "end_point": [321, 107], "text": "      } else"}, {"type": ")", "children": [], "start_byte": 12664, "end_byte": 12665, "start_point": [321, 107], "end_point": [321, 108], "text": " "}], "start_byte": 12586, "end_byte": 12665, "start_point": [321, 29], "end_point": [321, 108], "text": "if SRC_MODE == 1 {\n                    compress(None)?;\n                } else "}], "start_byte": 12577, "end_byte": 12665, "start_point": [321, 20], "end_point": [321, 108], "text": "         if SRC_MODE == 1 {\n                    compress(None)?;\n                } else "}, {"type": ";", "children": [], "start_byte": 12665, "end_byte": 12666, "start_point": [321, 108], "end_point": [321, 109], "text": "{"}], "start_byte": 12577, "end_byte": 12666, "start_point": [321, 20], "end_point": [321, 109], "text": "         if SRC_MODE == 1 {\n                    compress(None)?;\n                } else {"}, {"type": "}", "children": [], "start_byte": 12666, "end_byte": 12667, "start_point": [321, 109], "end_point": [321, 110], "text": "\n"}], "start_byte": 12576, "end_byte": 12667, "start_point": [321, 19], "end_point": [321, 110], "text": "          if SRC_MODE == 1 {\n                    compress(None)?;\n                } else {\n"}], "start_byte": 12569, "end_byte": 12667, "start_point": [321, 12], "end_point": [321, 110], "text": "\n                if SRC_MODE == 1 {\n                    compress(None)?;\n                } else {\n"}], "start_byte": 12569, "end_byte": 12667, "start_point": [321, 12], "end_point": [321, 110], "text": "\n                if SRC_MODE == 1 {\n                    compress(None)?;\n                } else {\n"}, {"type": "line_comment", "children": [], "start_byte": 12680, "end_byte": 12700, "start_point": [322, 12], "end_point": [322, 32], "text": "       decode = true"}, {"type": "}", "children": [], "start_byte": 12709, "end_byte": 12710, "start_point": [323, 8], "end_point": [323, 9], "text": " "}], "start_byte": 12555, "end_byte": 12710, "start_point": [320, 41], "end_point": [323, 9], "text": "        1 => {\n                if SRC_MODE == 1 {\n                    compress(None)?;\n                } else {\n                    decode = true;\n        "}], "start_byte": 12522, "end_byte": 12710, "start_point": [320, 8], "end_point": [323, 9], "text": "DE);\n        match OP_MODE {\n            1 => {\n                if SRC_MODE == 1 {\n                    compress(None)?;\n                } else {\n                    decode = true;\n        "}], "start_byte": 12522, "end_byte": 12710, "start_point": [320, 8], "end_point": [323, 9], "text": "DE);\n        match OP_MODE {\n            1 => {\n                if SRC_MODE == 1 {\n                    compress(None)?;\n                } else {\n                    decode = true;\n        "}, {"type": "expression_statement", "children": [{"type": "if_expression", "children": [{"type": "if", "children": [], "start_byte": 12719, "end_byte": 12721, "start_point": [324, 8], "end_point": [324, 10], "text": "  "}, {"type": "binary_expression", "children": [{"type": "binary_expression", "children": [{"type": "identifier", "children": [], "start_byte": 12722, "end_byte": 12730, "start_point": [324, 11], "end_point": [324, 19], "text": "process_"}, {"type": "==", "children": [], "start_byte": 12731, "end_byte": 12733, "start_point": [324, 20], "end_point": [324, 22], "text": "el"}, {"type": "integer_literal", "children": [], "start_byte": 12734, "end_byte": 12735, "start_point": [324, 23], "end_point": [324, 24], "text": "s"}], "start_byte": 12722, "end_byte": 12735, "start_point": [324, 11], "end_point": [324, 24], "text": "process_cells"}, {"type": "&&", "children": [], "start_byte": 12736, "end_byte": 12738, "start_point": [324, 25], "end_point": [324, 27], "text": "&a"}, {"type": "binary_expression", "children": [{"type": "identifier", "children": [], "start_byte": 12739, "end_byte": 12753, "start_point": [324, 28], "end_point": [324, 42], "text": "g_list, &mut d"}, {"type": "==", "children": [], "start_byte": 12754, "end_byte": 12756, "start_point": [324, 43], "end_point": [324, 45], "text": "co"}, {"type": "integer_literal", "children": [], "start_byte": 12757, "end_byte": 12758, "start_point": [324, 46], "end_point": [324, 47], "text": "e"}], "start_byte": 12739, "end_byte": 12758, "start_point": [324, 28], "end_point": [324, 47], "text": "g_list, &mut decode"}], "start_byte": 12722, "end_byte": 12758, "start_point": [324, 11], "end_point": [324, 47], "text": "process_cells(&arg_list, &mut decode"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 12759, "end_byte": 12760, "start_point": [324, 48], "end_point": [324, 49], "text": ";"}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 12773, "end_byte": 12781, "start_point": [325, 12], "end_point": [325, 20], "text": "    }\n  "}, {"type": "=", "children": [], "start_byte": 12782, "end_byte": 12783, "start_point": [325, 21], "end_point": [325, 22], "text": " "}, {"type": "integer_literal", "children": [], "start_byte": 12784, "end_byte": 12785, "start_point": [325, 23], "end_point": [325, 24], "text": " "}], "start_byte": 12773, "end_byte": 12785, "start_point": [325, 12], "end_point": [325, 24], "text": "    }\n      "}, {"type": ";", "children": [], "start_byte": 12785, "end_byte": 12786, "start_point": [325, 24], "end_point": [325, 25], "text": " "}], "start_byte": 12773, "end_byte": 12786, "start_point": [325, 12], "end_point": [325, 25], "text": "    }\n       "}, {"type": "}", "children": [], "start_byte": 12795, "end_byte": 12796, "start_point": [326, 8], "end_point": [326, 9], "text": " "}], "start_byte": 12759, "end_byte": 12796, "start_point": [324, 48], "end_point": [326, 9], "text": ";\n                }\n            },\n  "}], "start_byte": 12719, "end_byte": 12796, "start_point": [324, 8], "end_point": [326, 9], "text": "   process_cells(&arg_list, &mut decode);\n                }\n            },\n  "}], "start_byte": 12719, "end_byte": 12796, "start_point": [324, 8], "end_point": [326, 9], "text": "   process_cells(&arg_list, &mut decode);\n                }\n            },\n  "}, {"type": "expression_statement", "children": [{"type": "if_expression", "children": [{"type": "if", "children": [], "start_byte": 12805, "end_byte": 12807, "start_point": [327, 8], "end_point": [327, 10], "text": " 2"}, {"type": "binary_expression", "children": [{"type": "identifier", "children": [], "start_byte": 12808, "end_byte": 12815, "start_point": [327, 11], "end_point": [327, 18], "text": "=> {\n  "}, {"type": "!=", "children": [], "start_byte": 12816, "end_byte": 12818, "start_point": [327, 19], "end_point": [327, 21], "text": "  "}, {"type": "integer_literal", "children": [], "start_byte": 12819, "end_byte": 12820, "start_point": [327, 22], "end_point": [327, 23], "text": " "}], "start_byte": 12808, "end_byte": 12820, "start_point": [327, 11], "end_point": [327, 23], "text": "=> {\n       "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 12821, "end_byte": 12822, "start_point": [327, 24], "end_point": [327, 25], "text": " "}, {"type": "expression_statement", "children": [{"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 12835, "end_byte": 12841, "start_point": [328, 12], "end_point": [328, 18], "text": "ILS_EX"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 12842, "end_byte": 12843, "start_point": [328, 19], "end_point": [328, 20], "text": "S"}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 12843, "end_byte": 12856, "start_point": [328, 20], "end_point": [328, 33], "text": "T = false;\n  "}, {"type": "=", "children": [], "start_byte": 12857, "end_byte": 12858, "start_point": [328, 34], "end_point": [328, 35], "text": " "}, {"type": "integer_literal", "children": [], "start_byte": 12859, "end_byte": 12860, "start_point": [328, 36], "end_point": [328, 37], "text": " "}], "start_byte": 12843, "end_byte": 12860, "start_point": [328, 20], "end_point": [328, 37], "text": "T = false;\n      "}, {"type": ";", "children": [], "start_byte": 12860, "end_byte": 12861, "start_point": [328, 37], "end_point": [328, 38], "text": " "}], "start_byte": 12843, "end_byte": 12861, "start_point": [328, 20], "end_point": [328, 38], "text": "T = false;\n       "}, {"type": "}", "children": [], "start_byte": 12862, "end_byte": 12863, "start_point": [328, 39], "end_point": [328, 40], "text": " "}], "start_byte": 12842, "end_byte": 12863, "start_point": [328, 19], "end_point": [328, 40], "text": "ST = false;\n         "}], "start_byte": 12835, "end_byte": 12863, "start_point": [328, 12], "end_point": [328, 40], "text": "ILS_EXIST = false;\n         "}], "start_byte": 12835, "end_byte": 12863, "start_point": [328, 12], "end_point": [328, 40], "text": "ILS_EXIST = false;\n         "}, {"type": "}", "children": [], "start_byte": 12872, "end_byte": 12873, "start_point": [329, 8], "end_point": [329, 9], "text": " "}], "start_byte": 12821, "end_byte": 12873, "start_point": [327, 24], "end_point": [329, 9], "text": "        UNZ_FAILS_EXIST = false;\n                if "}], "start_byte": 12805, "end_byte": 12873, "start_point": [327, 8], "end_point": [329, 9], "text": " 2 => {\n                UNZ_FAILS_EXIST = false;\n                if "}], "start_byte": 12805, "end_byte": 12873, "start_point": [327, 8], "end_point": [329, 9], "text": " 2 => {\n                UNZ_FAILS_EXIST = false;\n                if "}, {"type": "}", "children": [], "start_byte": 12878, "end_byte": 12879, "start_point": [330, 4], "end_point": [330, 5], "text": "O"}], "start_byte": 12336, "end_byte": 12879, "start_point": [313, 11], "end_point": [330, 5], "text": " != 1 {\n            unsafe {blockSize100k = 0; }\n        }\n    }\n    // \u6839\u636e\u64cd\u4f5c\u6a21\u5f0f\u6267\u884c\u76f8\u5e94\u7684\u64cd\u4f5c\n    unsafe {\n        // println!(\"OP_MODE: {}\", OP_MODE);\n        // println!(\"SRC_MODE: {}\", SRC_MODE);\n        match OP_MODE {\n            1 => {\n                if SRC_MODE == 1 {\n                    compress(None)?;\n                } else {\n                    decode = true;\n                    process_cells(&arg_list, &mut decode);\n                }\n            },\n            2 => {\n                UNZ_FAILS_EXIST = false;\n                if SRC_MO"}], "start_byte": 12329, "end_byte": 12879, "start_point": [313, 4], "end_point": [330, 5], "text": "OP_MODE != 1 {\n            unsafe {blockSize100k = 0; }\n        }\n    }\n    // \u6839\u636e\u64cd\u4f5c\u6a21\u5f0f\u6267\u884c\u76f8\u5e94\u7684\u64cd\u4f5c\n    unsafe {\n        // println!(\"OP_MODE: {}\", OP_MODE);\n        // println!(\"SRC_MODE: {}\", SRC_MODE);\n        match OP_MODE {\n            1 => {\n                if SRC_MODE == 1 {\n                    compress(None)?;\n                } else {\n                    decode = true;\n                    process_cells(&arg_list, &mut decode);\n                }\n            },\n            2 => {\n                UNZ_FAILS_EXIST = false;\n                if SRC_MO"}], "start_byte": 12329, "end_byte": 12879, "start_point": [313, 4], "end_point": [330, 5], "text": "OP_MODE != 1 {\n            unsafe {blockSize100k = 0; }\n        }\n    }\n    // \u6839\u636e\u64cd\u4f5c\u6a21\u5f0f\u6267\u884c\u76f8\u5e94\u7684\u64cd\u4f5c\n    unsafe {\n        // println!(\"OP_MODE: {}\", OP_MODE);\n        // println!(\"SRC_MODE: {}\", SRC_MODE);\n        match OP_MODE {\n            1 => {\n                if SRC_MODE == 1 {\n                    compress(None)?;\n                } else {\n                    decode = true;\n                    process_cells(&arg_list, &mut decode);\n                }\n            },\n            2 => {\n                UNZ_FAILS_EXIST = false;\n                if SRC_MO"}, {"type": "line_comment", "children": [], "start_byte": 12884, "end_byte": 12926, "start_point": [331, 4], "end_point": [331, 46], "text": " 1 {\n                    uncompress(None);"}, {"type": "expression_statement", "children": [{"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 12931, "end_byte": 12937, "start_point": [332, 4], "end_point": [332, 10], "text": "      "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 12938, "end_byte": 12939, "start_point": [332, 11], "end_point": [332, 12], "text": " "}, {"type": "line_comment", "children": [], "start_byte": 12948, "end_byte": 12984, "start_point": [333, 8], "end_point": [333, 44], "text": "e {\n                    decode = tru"}, {"type": "line_comment", "children": [], "start_byte": 12993, "end_byte": 13031, "start_point": [334, 8], "end_point": [334, 46], "text": "              for cell in &arg_list {\n"}, {"type": "expression_statement", "children": [{"type": "match_expression", "children": [{"type": "match", "children": [], "start_byte": 13040, "end_byte": 13045, "start_point": [335, 8], "end_point": [335, 13], "text": "     "}, {"type": "identifier", "children": [], "start_byte": 13046, "end_byte": 13053, "start_point": [335, 14], "end_point": [335, 21], "text": "       "}, {"type": "match_block", "children": [{"type": "{", "children": [], "start_byte": 13054, "end_byte": 13055, "start_point": [335, 22], "end_point": [335, 23], "text": " "}, {"type": "match_arm", "children": [{"type": "match_pattern", "children": [{"type": "integer_literal", "children": [], "start_byte": 13068, "end_byte": 13069, "start_point": [336, 12], "end_point": [336, 13], "text": "a"}], "start_byte": 13068, "end_byte": 13069, "start_point": [336, 12], "end_point": [336, 13], "text": "a"}, {"type": "=>", "children": [], "start_byte": 13070, "end_byte": 13072, "start_point": [336, 14], "end_point": [336, 16], "text": "e)"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 13073, "end_byte": 13074, "start_point": [336, 17], "end_point": [336, 18], "text": "="}, {"type": "expression_statement", "children": [{"type": "if_expression", "children": [{"type": "if", "children": [], "start_byte": 13091, "end_byte": 13093, "start_point": [337, 16], "end_point": [337, 18], "text": "  "}, {"type": "binary_expression", "children": [{"type": "identifier", "children": [], "start_byte": 13094, "end_byte": 13102, "start_point": [337, 19], "end_point": [337, 27], "text": "        "}, {"type": "==", "children": [], "start_byte": 13103, "end_byte": 13105, "start_point": [337, 28], "end_point": [337, 30], "text": "  "}, {"type": "integer_literal", "children": [], "start_byte": 13106, "end_byte": 13107, "start_point": [337, 31], "end_point": [337, 32], "text": " "}], "start_byte": 13094, "end_byte": 13107, "start_point": [337, 19], "end_point": [337, 32], "text": "             "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 13108, "end_byte": 13109, "start_point": [337, 33], "end_point": [337, 34], "text": " "}, {"type": "expression_statement", "children": [{"type": "try_expression", "children": [{"type": "call_expression", "children": [{"type": "identifier", "children": [], "start_byte": 13130, "end_byte": 13138, "start_point": [338, 20], "end_point": [338, 28], "text": "() == \"-"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 13138, "end_byte": 13139, "start_point": [338, 28], "end_point": [338, 29], "text": "-"}, {"type": "identifier", "children": [], "start_byte": 13139, "end_byte": 13143, "start_point": [338, 29], "end_point": [338, 33], "text": "\"  {"}, {"type": ")", "children": [], "start_byte": 13143, "end_byte": 13144, "start_point": [338, 33], "end_point": [338, 34], "text": "\n"}], "start_byte": 13138, "end_byte": 13144, "start_point": [338, 28], "end_point": [338, 34], "text": "-\"  {\n"}], "start_byte": 13130, "end_byte": 13144, "start_point": [338, 20], "end_point": [338, 34], "text": "() == \"--\"  {\n"}, {"type": "?", "children": [], "start_byte": 13144, "end_byte": 13145, "start_point": [338, 34], "end_point": [338, 35], "text": " "}], "start_byte": 13130, "end_byte": 13145, "start_point": [338, 20], "end_point": [338, 35], "text": "() == \"--\"  {\n "}, {"type": ";", "children": [], "start_byte": 13145, "end_byte": 13146, "start_point": [338, 35], "end_point": [338, 36], "text": " "}], "start_byte": 13130, "end_byte": 13146, "start_point": [338, 20], "end_point": [338, 36], "text": "() == \"--\"  {\n  "}, {"type": "}", "children": [], "start_byte": 13163, "end_byte": 13164, "start_point": [339, 16], "end_point": [339, 17], "text": " "}], "start_byte": 13108, "end_byte": 13164, "start_point": [337, 33], "end_point": [339, 17], "text": "        if name.as_str() == \"--\"  {\n                    "}, {"type": "else_clause", "children": [{"type": "else", "children": [], "start_byte": 13165, "end_byte": 13169, "start_point": [339, 18], "end_point": [339, 22], "text": "    "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 13170, "end_byte": 13171, "start_point": [339, 23], "end_point": [339, 24], "text": " "}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 13192, "end_byte": 13198, "start_point": [340, 20], "end_point": [340, 26], "text": "      "}, {"type": "=", "children": [], "start_byte": 13199, "end_byte": 13200, "start_point": [340, 27], "end_point": [340, 28], "text": " "}, {"type": "boolean_literal", "children": [{"type": "true", "children": [], "start_byte": 13201, "end_byte": 13205, "start_point": [340, 29], "end_point": [340, 33], "text": "    "}], "start_byte": 13201, "end_byte": 13205, "start_point": [340, 29], "end_point": [340, 33], "text": "    "}], "start_byte": 13192, "end_byte": 13205, "start_point": [340, 20], "end_point": [340, 33], "text": "             "}, {"type": ";", "children": [], "start_byte": 13205, "end_byte": 13206, "start_point": [340, 33], "end_point": [340, 34], "text": " "}], "start_byte": 13192, "end_byte": 13206, "start_point": [340, 20], "end_point": [340, 34], "text": "              "}, {"type": "expression_statement", "children": [{"type": "call_expression", "children": [{"type": "identifier", "children": [], "start_byte": 13227, "end_byte": 13240, "start_point": [341, 20], "end_point": [341, 33], "text": "tinue;\n      "}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 13240, "end_byte": 13241, "start_point": [341, 33], "end_point": [341, 34], "text": " "}, {"type": "reference_expression", "children": [{"type": "&", "children": [], "start_byte": 13241, "end_byte": 13242, "start_point": [341, 34], "end_point": [341, 35], "text": " "}, {"type": "identifier", "children": [], "start_byte": 13242, "end_byte": 13250, "start_point": [341, 35], "end_point": [341, 43], "text": "        "}], "start_byte": 13241, "end_byte": 13250, "start_point": [341, 34], "end_point": [341, 43], "text": "         "}, {"type": ",", "children": [], "start_byte": 13250, "end_byte": 13251, "start_point": [341, 43], "end_point": [341, 44], "text": " "}, {"type": "reference_expression", "children": [{"type": "&", "children": [], "start_byte": 13252, "end_byte": 13253, "start_point": [341, 45], "end_point": [341, 46], "text": " "}, {"type": "mutable_specifier", "children": [], "start_byte": 13253, "end_byte": 13256, "start_point": [341, 46], "end_point": [341, 49], "text": "   "}, {"type": "identifier", "children": [], "start_byte": 13257, "end_byte": 13263, "start_point": [341, 50], "end_point": [341, 56], "text": "     }"}], "start_byte": 13252, "end_byte": 13263, "start_point": [341, 45], "end_point": [341, 56], "text": "          }"}, {"type": ")", "children": [], "start_byte": 13263, "end_byte": 13264, "start_point": [341, 56], "end_point": [341, 57], "text": "\n"}], "start_byte": 13240, "end_byte": 13264, "start_point": [341, 33], "end_point": [341, 57], "text": "                      }\n"}], "start_byte": 13227, "end_byte": 13264, "start_point": [341, 20], "end_point": [341, 57], "text": "tinue;\n                            }\n"}, {"type": ";", "children": [], "start_byte": 13264, "end_byte": 13265, "start_point": [341, 57], "end_point": [341, 58], "text": " "}], "start_byte": 13227, "end_byte": 13265, "start_point": [341, 20], "end_point": [341, 58], "text": "tinue;\n                            }\n "}, {"type": "}", "children": [], "start_byte": 13282, "end_byte": 13283, "start_point": [342, 16], "end_point": [342, 17], "text": " "}], "start_byte": 13170, "end_byte": 13283, "start_point": [339, 23], "end_point": [342, 17], "text": "      decode = false;\n                                continue;\n                            }\n                   "}], "start_byte": 13165, "end_byte": 13283, "start_point": [339, 18], "end_point": [342, 17], "text": "           decode = false;\n                                continue;\n                            }\n                   "}], "start_byte": 13091, "end_byte": 13283, "start_point": [337, 16], "end_point": [342, 17], "text": "                         if name.as_str() == \"--\"  {\n                                decode = false;\n                                continue;\n                            }\n                   "}], "start_byte": 13091, "end_byte": 13283, "start_point": [337, 16], "end_point": [342, 17], "text": "                         if name.as_str() == \"--\"  {\n                                decode = false;\n                                continue;\n                            }\n                   "}, {"type": "}", "children": [], "start_byte": 13296, "end_byte": 13297, "start_point": [343, 12], "end_point": [343, 13], "text": "a"}], "start_byte": 13073, "end_byte": 13297, "start_point": [336, 17], "end_point": [343, 13], "text": "= &cell.name {\n                            if name.as_str() == \"--\"  {\n                                decode = false;\n                                continue;\n                            }\n                            if na"}, {"type": ",", "children": [], "start_byte": 13297, "end_byte": 13298, "start_point": [343, 13], "end_point": [343, 14], "text": "m"}], "start_byte": 13068, "end_byte": 13298, "start_point": [336, 12], "end_point": [343, 14], "text": "ame) = &cell.name {\n                            if name.as_str() == \"--\"  {\n                                decode = false;\n                                continue;\n                            }\n                            if nam"}, {"type": "match_arm", "children": [{"type": "match_pattern", "children": [{"type": "integer_literal", "children": [], "start_byte": 13311, "end_byte": 13312, "start_point": [344, 12], "end_point": [344, 13], "text": "("}], "start_byte": 13311, "end_byte": 13312, "start_point": [344, 12], "end_point": [344, 13], "text": "("}, {"type": "=>", "children": [], "start_byte": 13313, "end_byte": 13315, "start_point": [344, 14], "end_point": [344, 16], "text": "-'"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 13316, "end_byte": 13317, "start_point": [344, 17], "end_point": [344, 18], "text": " "}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 13334, "end_byte": 13349, "start_point": [345, 16], "end_point": [345, 31], "text": "               "}, {"type": "=", "children": [], "start_byte": 13350, "end_byte": 13351, "start_point": [345, 32], "end_point": [345, 33], "text": " "}, {"type": "boolean_literal", "children": [{"type": "false", "children": [], "start_byte": 13352, "end_byte": 13357, "start_point": [345, 34], "end_point": [345, 39], "text": "     "}], "start_byte": 13352, "end_byte": 13357, "start_point": [345, 34], "end_point": [345, 39], "text": "     "}], "start_byte": 13334, "end_byte": 13357, "start_point": [345, 16], "end_point": [345, 39], "text": "                       "}, {"type": ";", "children": [], "start_byte": 13357, "end_byte": 13358, "start_point": [345, 39], "end_point": [345, 40], "text": " "}], "start_byte": 13334, "end_byte": 13358, "start_point": [345, 16], "end_point": [345, 40], "text": "                        "}, {"type": "expression_statement", "children": [{"type": "if_expression", "children": [{"type": "if", "children": [], "start_byte": 13375, "end_byte": 13377, "start_point": [346, 16], "end_point": [346, 18], "text": "  "}, {"type": "binary_expression", "children": [{"type": "identifier", "children": [], "start_byte": 13378, "end_byte": 13386, "start_point": [346, 19], "end_point": [346, 27], "text": "        "}, {"type": "==", "children": [], "start_byte": 13387, "end_byte": 13389, "start_point": [346, 28], "end_point": [346, 30], "text": "  "}, {"type": "integer_literal", "children": [], "start_byte": 13390, "end_byte": 13391, "start_point": [346, 31], "end_point": [346, 32], "text": " "}], "start_byte": 13378, "end_byte": 13391, "start_point": [346, 19], "end_point": [346, 32], "text": "             "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 13392, "end_byte": 13393, "start_point": [346, 33], "end_point": [346, 34], "text": " "}, {"type": "expression_statement", "children": [{"type": "call_expression", "children": [{"type": "identifier", "children": [], "start_byte": 13414, "end_byte": 13424, "start_point": [347, 20], "end_point": [347, 30], "text": "          "}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 13424, "end_byte": 13425, "start_point": [347, 30], "end_point": [347, 31], "text": " "}, {"type": "identifier", "children": [], "start_byte": 13425, "end_byte": 13429, "start_point": [347, 31], "end_point": [347, 35], "text": "    "}, {"type": ")", "children": [], "start_byte": 13429, "end_byte": 13430, "start_point": [347, 35], "end_point": [347, 36], "text": "u"}], "start_byte": 13424, "end_byte": 13430, "start_point": [347, 30], "end_point": [347, 36], "text": "     u"}], "start_byte": 13414, "end_byte": 13430, "start_point": [347, 20], "end_point": [347, 36], "text": "               u"}, {"type": ";", "children": [], "start_byte": 13430, "end_byte": 13431, "start_point": [347, 36], "end_point": [347, 37], "text": "n"}], "start_byte": 13414, "end_byte": 13431, "start_point": [347, 20], "end_point": [347, 37], "text": "               un"}, {"type": "}", "children": [], "start_byte": 13448, "end_byte": 13449, "start_point": [348, 16], "end_point": [348, 17], "text": "M"}], "start_byte": 13392, "end_byte": 13449, "start_point": [346, 33], "end_point": [348, 17], "text": "       }\n                            unsafe {NUM_FILE_NAM"}, {"type": "else_clause", "children": [{"type": "else", "children": [], "start_byte": 13450, "end_byte": 13454, "start_point": [348, 18], "end_point": [348, 22], "text": "S +="}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 13455, "end_byte": 13456, "start_point": [348, 23], "end_point": [348, 24], "text": "1"}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 13477, "end_byte": 13483, "start_point": [349, 20], "end_point": [349, 26], "text": "      "}, {"type": "=", "children": [], "start_byte": 13484, "end_byte": 13485, "start_point": [349, 27], "end_point": [349, 28], "text": " "}, {"type": "boolean_literal", "children": [{"type": "true", "children": [], "start_byte": 13486, "end_byte": 13490, "start_point": [349, 29], "end_point": [349, 33], "text": " unc"}], "start_byte": 13486, "end_byte": 13490, "start_point": [349, 29], "end_point": [349, 33], "text": " unc"}], "start_byte": 13477, "end_byte": 13490, "start_point": [349, 20], "end_point": [349, 33], "text": "          unc"}, {"type": ";", "children": [], "start_byte": 13490, "end_byte": 13491, "start_point": [349, 33], "end_point": [349, 34], "text": "o"}], "start_byte": 13477, "end_byte": 13491, "start_point": [349, 20], "end_point": [349, 34], "text": "          unco"}, {"type": "expression_statement", "children": [{"type": "for_expression", "children": [{"type": "for", "children": [], "start_byte": 13512, "end_byte": 13515, "start_point": [350, 20], "end_point": [350, 23], "text": "   "}, {"type": "identifier", "children": [], "start_byte": 13516, "end_byte": 13520, "start_point": [350, 24], "end_point": [350, 28], "text": "    "}, {"type": "in", "children": [], "start_byte": 13521, "end_byte": 13523, "start_point": [350, 29], "end_point": [350, 31], "text": "  "}, {"type": "reference_expression", "children": [{"type": "&", "children": [], "start_byte": 13524, "end_byte": 13525, "start_point": [350, 32], "end_point": [350, 33], "text": " "}, {"type": "identifier", "children": [], "start_byte": 13525, "end_byte": 13533, "start_point": [350, 33], "end_point": [350, 41], "text": "        "}], "start_byte": 13524, "end_byte": 13533, "start_point": [350, 32], "end_point": [350, 41], "text": "         "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 13534, "end_byte": 13535, "start_point": [350, 42], "end_point": [350, 43], "text": " "}, {"type": "expression_statement", "children": [{"type": "if_expression", "children": [{"type": "if", "children": [], "start_byte": 13560, "end_byte": 13562, "start_point": [351, 24], "end_point": [351, 26], "text": "  "}, {"type": "let_condition", "children": [{"type": "let", "children": [], "start_byte": 13563, "end_byte": 13566, "start_point": [351, 27], "end_point": [351, 30], "text": "   "}, {"type": "tuple_struct_pattern", "children": [{"type": "identifier", "children": [], "start_byte": 13567, "end_byte": 13571, "start_point": [351, 31], "end_point": [351, 35], "text": "    "}, {"type": "(", "children": [], "start_byte": 13571, "end_byte": 13572, "start_point": [351, 35], "end_point": [351, 36], "text": " "}, {"type": "identifier", "children": [], "start_byte": 13572, "end_byte": 13576, "start_point": [351, 36], "end_point": [351, 40], "text": "   }"}, {"type": ")", "children": [], "start_byte": 13576, "end_byte": 13577, "start_point": [351, 40], "end_point": [351, 41], "text": "\n"}], "start_byte": 13567, "end_byte": 13577, "start_point": [351, 31], "end_point": [351, 41], "text": "        }\n"}, {"type": "=", "children": [], "start_byte": 13578, "end_byte": 13579, "start_point": [351, 42], "end_point": [351, 43], "text": " "}, {"type": "reference_expression", "children": [{"type": "&", "children": [], "start_byte": 13580, "end_byte": 13581, "start_point": [351, 44], "end_point": [351, 45], "text": " "}, {"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 13581, "end_byte": 13585, "start_point": [351, 45], "end_point": [351, 49], "text": "    "}, {"type": ".", "children": [], "start_byte": 13585, "end_byte": 13586, "start_point": [351, 49], "end_point": [351, 50], "text": " "}, {"type": "field_identifier", "children": [], "start_byte": 13586, "end_byte": 13590, "start_point": [351, 50], "end_point": [351, 54], "text": "    "}], "start_byte": 13581, "end_byte": 13590, "start_point": [351, 45], "end_point": [351, 54], "text": "         "}], "start_byte": 13580, "end_byte": 13590, "start_point": [351, 44], "end_point": [351, 54], "text": "          "}], "start_byte": 13563, "end_byte": 13590, "start_point": [351, 27], "end_point": [351, 54], "text": "            }\n             "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 13591, "end_byte": 13592, "start_point": [351, 55], "end_point": [351, 56], "text": " "}, {"type": "expression_statement", "children": [{"type": "if_expression", "children": [{"type": "if", "children": [], "start_byte": 13621, "end_byte": 13623, "start_point": [352, 28], "end_point": [352, 30], "text": "  "}, {"type": "binary_expression", "children": [{"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 13624, "end_byte": 13628, "start_point": [352, 31], "end_point": [352, 35], "text": "    "}, {"type": ".", "children": [], "start_byte": 13628, "end_byte": 13629, "start_point": [352, 35], "end_point": [352, 36], "text": " "}, {"type": "field_identifier", "children": [], "start_byte": 13629, "end_byte": 13635, "start_point": [352, 36], "end_point": [352, 42], "text": "     s"}], "start_byte": 13624, "end_byte": 13635, "start_point": [352, 31], "end_point": [352, 42], "text": "          s"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 13635, "end_byte": 13636, "start_point": [352, 42], "end_point": [352, 43], "text": "e"}, {"type": ")", "children": [], "start_byte": 13636, "end_byte": 13637, "start_point": [352, 43], "end_point": [352, 44], "text": "t"}], "start_byte": 13635, "end_byte": 13637, "start_point": [352, 42], "end_point": [352, 44], "text": "et"}], "start_byte": 13624, "end_byte": 13637, "start_point": [352, 31], "end_point": [352, 44], "text": "          set"}, {"type": "==", "children": [], "start_byte": 13638, "end_byte": 13640, "start_point": [352, 45], "end_point": [352, 47], "text": "ex"}, {"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 13641, "end_byte": 13642, "start_point": [352, 48], "end_point": [352, 49], "text": "t"}, {"type": "\"", "children": [], "start_byte": 13644, "end_byte": 13645, "start_point": [352, 51], "end_point": [352, 52], "text": ")"}], "start_byte": 13641, "end_byte": 13645, "start_point": [352, 48], "end_point": [352, 52], "text": "t(2)"}], "start_byte": 13624, "end_byte": 13645, "start_point": [352, 31], "end_point": [352, 52], "text": "          set_exit(2)"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 13647, "end_byte": 13648, "start_point": [352, 54], "end_point": [352, 55], "text": " "}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "identifier", "children": [], "start_byte": 13681, "end_byte": 13687, "start_point": [353, 32], "end_point": [353, 38], "text": "it(EXI"}, {"type": "=", "children": [], "start_byte": 13688, "end_byte": 13689, "start_point": [353, 39], "end_point": [353, 40], "text": "_"}, {"type": "boolean_literal", "children": [{"type": "false", "children": [], "start_byte": 13690, "end_byte": 13695, "start_point": [353, 41], "end_point": [353, 46], "text": "ALUE)"}], "start_byte": 13690, "end_byte": 13695, "start_point": [353, 41], "end_point": [353, 46], "text": "ALUE)"}], "start_byte": 13681, "end_byte": 13695, "start_point": [353, 32], "end_point": [353, 46], "text": "it(EXIT_VALUE)"}, {"type": ";", "children": [], "start_byte": 13695, "end_byte": 13696, "start_point": [353, 46], "end_point": [353, 47], "text": ";"}], "start_byte": 13681, "end_byte": 13696, "start_point": [353, 32], "end_point": [353, 47], "text": "it(EXIT_VALUE);"}, {"type": "expression_statement", "children": [{"type": "continue_expression", "children": [{"type": "continue", "children": [], "start_byte": 13729, "end_byte": 13737, "start_point": [354, 32], "end_point": [354, 40], "text": "\n       "}], "start_byte": 13729, "end_byte": 13737, "start_point": [354, 32], "end_point": [354, 40], "text": "\n       "}, {"type": ";", "children": [], "start_byte": 13737, "end_byte": 13738, "start_point": [354, 40], "end_point": [354, 41], "text": " "}], "start_byte": 13729, "end_byte": 13738, "start_point": [354, 32], "end_point": [354, 41], "text": "\n        "}, {"type": "}", "children": [], "start_byte": 13767, "end_byte": 13768, "start_point": [355, 28], "end_point": [355, 29], "text": " "}], "start_byte": 13647, "end_byte": 13768, "start_point": [352, 54], "end_point": [355, 29], "text": "                    // process::exit(EXIT_VALUE);\n                }\n            },\n            _ => {\n                // "}], "start_byte": 13621, "end_byte": 13768, "start_point": [352, 28], "end_point": [355, 29], "text": "             set_exit(2);\n                    // process::exit(EXIT_VALUE);\n                }\n            },\n            _ => {\n                // "}], "start_byte": 13621, "end_byte": 13768, "start_point": [352, 28], "end_point": [355, 29], "text": "             set_exit(2);\n                    // process::exit(EXIT_VALUE);\n                }\n            },\n            _ => {\n                // "}, {"type": "expression_statement", "children": [{"type": "if_expression", "children": [{"type": "if", "children": [], "start_byte": 13797, "end_byte": 13799, "start_point": [356, 28], "end_point": [356, 30], "text": "\n "}, {"type": "binary_expression", "children": [{"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 13800, "end_byte": 13804, "start_point": [356, 31], "end_point": [356, 35], "text": "    "}, {"type": ".", "children": [], "start_byte": 13804, "end_byte": 13805, "start_point": [356, 35], "end_point": [356, 36], "text": " "}, {"type": "field_identifier", "children": [], "start_byte": 13805, "end_byte": 13816, "start_point": [356, 36], "end_point": [356, 47], "text": "     },\n   "}], "start_byte": 13800, "end_byte": 13816, "start_point": [356, 31], "end_point": [356, 47], "text": "          },\n   "}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 13816, "end_byte": 13817, "start_point": [356, 47], "end_point": [356, 48], "text": " "}, {"type": "char_literal", "children": [], "start_byte": 13817, "end_byte": 13820, "start_point": [356, 48], "end_point": [356, 51], "text": "   "}, {"type": ")", "children": [], "start_byte": 13820, "end_byte": 13821, "start_point": [356, 51], "end_point": [356, 52], "text": " "}], "start_byte": 13816, "end_byte": 13821, "start_point": [356, 47], "end_point": [356, 52], "text": "     "}], "start_byte": 13800, "end_byte": 13821, "start_point": [356, 31], "end_point": [356, 52], "text": "          },\n        "}, {"type": "&&", "children": [], "start_byte": 13822, "end_byte": 13824, "start_point": [356, 53], "end_point": [356, 55], "text": "\n "}, {"type": "identifier", "children": [], "start_byte": 13825, "end_byte": 13831, "start_point": [356, 56], "end_point": [356, 62], "text": "  }\n\n "}], "start_byte": 13800, "end_byte": 13831, "start_point": [356, 31], "end_point": [356, 62], "text": "          },\n        }\n    }\n\n "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 13832, "end_byte": 13833, "start_point": [356, 63], "end_point": [356, 64], "text": " "}, {"type": "expression_statement", "children": [{"type": "continue_expression", "children": [{"type": "continue", "children": [], "start_byte": 13866, "end_byte": 13874, "start_point": [357, 32], "end_point": [357, 40], "text": "\u6210\");\n   "}], "start_byte": 13866, "end_byte": 13874, "start_point": [357, 32], "end_point": [357, 40], "text": "\u6210\");\n   "}, {"type": ";", "children": [], "start_byte": 13874, "end_byte": 13875, "start_point": [357, 40], "end_point": [357, 41], "text": " "}], "start_byte": 13866, "end_byte": 13875, "start_point": [357, 32], "end_point": [357, 41], "text": "\u6210\");\n    "}, {"type": "}", "children": [], "start_byte": 13904, "end_byte": 13905, "start_point": [358, 28], "end_point": [358, 29], "text": "s"}], "start_byte": 13832, "end_byte": 13905, "start_point": [356, 63], "end_point": [358, 29], "text": "  // println!(\"121_main_\u6240\u6709\u547d\u4ee4\u884c\u53c2\u6570\u5904\u7406\u5b8c\u6210\");\n    Ok(())\n}\n\n#[cfg(test)]\nmod tes"}], "start_byte": 13797, "end_byte": 13905, "start_point": [356, 28], "end_point": [358, 29], "text": "\n            },\n        }\n    }\n\n    // println!(\"121_main_\u6240\u6709\u547d\u4ee4\u884c\u53c2\u6570\u5904\u7406\u5b8c\u6210\");\n    Ok(())\n}\n\n#[cfg(test)]\nmod tes"}], "start_byte": 13797, "end_byte": 13905, "start_point": [356, 28], "end_point": [358, 29], "text": "\n            },\n        }\n    }\n\n    // println!(\"121_main_\u6240\u6709\u547d\u4ee4\u884c\u53c2\u6570\u5904\u7406\u5b8c\u6210\");\n    Ok(())\n}\n\n#[cfg(test)]\nmod tes"}, {"type": "expression_statement", "children": [{"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 13934, "end_byte": 13940, "start_point": [359, 28], "end_point": [359, 34], "text": "[test]"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 13941, "end_byte": 13942, "start_point": [359, 35], "end_point": [359, 36], "text": " "}, {"type": "expression_statement", "children": [{"type": "compound_assignment_expr", "children": [{"type": "identifier", "children": [], "start_byte": 13942, "end_byte": 13956, "start_point": [359, 36], "end_point": [359, 50], "text": "   fn test_mai"}, {"type": "+=", "children": [], "start_byte": 13957, "end_byte": 13959, "start_point": [359, 51], "end_point": [359, 53], "text": "()"}, {"type": "integer_literal", "children": [], "start_byte": 13960, "end_byte": 13961, "start_point": [359, 54], "end_point": [359, 55], "text": "{"}], "start_byte": 13942, "end_byte": 13961, "start_point": [359, 36], "end_point": [359, 55], "text": "   fn test_main() {"}, {"type": ";", "children": [], "start_byte": 13961, "end_byte": 13962, "start_point": [359, 55], "end_point": [359, 56], "text": "\n"}], "start_byte": 13942, "end_byte": 13962, "start_point": [359, 36], "end_point": [359, 56], "text": "   fn test_main() {\n"}, {"type": "}", "children": [], "start_byte": 13962, "end_byte": 13963, "start_point": [359, 56], "end_point": [359, 57], "text": " "}], "start_byte": 13941, "end_byte": 13963, "start_point": [359, 35], "end_point": [359, 57], "text": "    fn test_main() {\n "}], "start_byte": 13934, "end_byte": 13963, "start_point": [359, 28], "end_point": [359, 57], "text": "[test]\n    fn test_main() {\n "}], "start_byte": 13934, "end_byte": 13963, "start_point": [359, 28], "end_point": [359, 57], "text": "[test]\n    fn test_main() {\n "}, {"type": "expression_statement", "children": [{"type": "call_expression", "children": [{"type": "identifier", "children": [], "start_byte": 13992, "end_byte": 14002, "start_point": [360, 28], "end_point": [360, 38], "text": " simulated"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 14002, "end_byte": 14003, "start_point": [360, 38], "end_point": [360, 39], "text": "_"}, {"type": "call_expression", "children": [{"type": "identifier", "children": [], "start_byte": 14003, "end_byte": 14007, "start_point": [360, 39], "end_point": [360, 43], "text": "args"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 14007, "end_byte": 14008, "start_point": [360, 43], "end_point": [360, 44], "text": " "}, {"type": "identifier", "children": [], "start_byte": 14008, "end_byte": 14012, "start_point": [360, 44], "end_point": [360, 48], "text": "= ve"}, {"type": ")", "children": [], "start_byte": 14012, "end_byte": 14013, "start_point": [360, 48], "end_point": [360, 49], "text": "c"}], "start_byte": 14007, "end_byte": 14013, "start_point": [360, 43], "end_point": [360, 49], "text": " = vec"}], "start_byte": 14003, "end_byte": 14013, "start_point": [360, 39], "end_point": [360, 49], "text": "args = vec"}, {"type": ")", "children": [], "start_byte": 14013, "end_byte": 14014, "start_point": [360, 49], "end_point": [360, 50], "text": "!"}], "start_byte": 14002, "end_byte": 14014, "start_point": [360, 38], "end_point": [360, 50], "text": "_args = vec!"}], "start_byte": 13992, "end_byte": 14014, "start_point": [360, 28], "end_point": [360, 50], "text": " simulated_args = vec!"}, {"type": ";", "children": [], "start_byte": 14014, "end_byte": 14015, "start_point": [360, 50], "end_point": [360, 51], "text": "["}], "start_byte": 13992, "end_byte": 14015, "start_point": [360, 28], "end_point": [360, 51], "text": " simulated_args = vec!["}, {"type": "}", "children": [], "start_byte": 14040, "end_byte": 14041, "start_point": [361, 24], "end_point": [361, 25], "text": "("}], "start_byte": 13591, "end_byte": 14041, "start_point": [351, 55], "end_point": [361, 25], "text": "  if UNZ_FAILS_EXIST {\n                    set_exit(2);\n                    // process::exit(EXIT_VALUE);\n                }\n            },\n            _ => {\n                // \u5904\u7406\u6d4b\u8bd5\u6a21\u5f0f\n                // ...\n            },\n        }\n    }\n\n    // println!(\"121_main_\u6240\u6709\u547d\u4ee4\u884c\u53c2\u6570\u5904\u7406\u5b8c\u6210\");\n    Ok(())\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_main() {\n        // \u6a21\u62df\u547d\u4ee4\u884c\u53c2\u6570\n        let simulated_args = vec![\n            String::from("}], "start_byte": 13560, "end_byte": 14041, "start_point": [351, 24], "end_point": [361, 25], "text": "               }\n                if UNZ_FAILS_EXIST {\n                    set_exit(2);\n                    // process::exit(EXIT_VALUE);\n                }\n            },\n            _ => {\n                // \u5904\u7406\u6d4b\u8bd5\u6a21\u5f0f\n                // ...\n            },\n        }\n    }\n\n    // println!(\"121_main_\u6240\u6709\u547d\u4ee4\u884c\u53c2\u6570\u5904\u7406\u5b8c\u6210\");\n    Ok(())\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_main() {\n        // \u6a21\u62df\u547d\u4ee4\u884c\u53c2\u6570\n        let simulated_args = vec![\n            String::from("}], "start_byte": 13560, "end_byte": 14041, "start_point": [351, 24], "end_point": [361, 25], "text": "               }\n                if UNZ_FAILS_EXIST {\n                    set_exit(2);\n                    // process::exit(EXIT_VALUE);\n                }\n            },\n            _ => {\n                // \u5904\u7406\u6d4b\u8bd5\u6a21\u5f0f\n                // ...\n            },\n        }\n    }\n\n    // println!(\"121_main_\u6240\u6709\u547d\u4ee4\u884c\u53c2\u6570\u5904\u7406\u5b8c\u6210\");\n    Ok(())\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_main() {\n        // \u6a21\u62df\u547d\u4ee4\u884c\u53c2\u6570\n        let simulated_args = vec![\n            String::from("}, {"type": "}", "children": [], "start_byte": 14062, "end_byte": 14063, "start_point": [362, 20], "end_point": [362, 21], "text": " "}], "start_byte": 13534, "end_byte": 14063, "start_point": [350, 42], "end_point": [362, 21], "text": " }\n                    }\n                }\n                if UNZ_FAILS_EXIST {\n                    set_exit(2);\n                    // process::exit(EXIT_VALUE);\n                }\n            },\n            _ => {\n                // \u5904\u7406\u6d4b\u8bd5\u6a21\u5f0f\n                // ...\n            },\n        }\n    }\n\n    // println!(\"121_main_\u6240\u6709\u547d\u4ee4\u884c\u53c2\u6570\u5904\u7406\u5b8c\u6210\");\n    Ok(())\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_main() {\n        // \u6a21\u62df\u547d\u4ee4\u884c\u53c2\u6570\n        let simulated_args = vec![\n            String::from(\"./bzip2\"),\n          "}], "start_byte": 13512, "end_byte": 14063, "start_point": [350, 20], "end_point": [362, 21], "text": "                       }\n                    }\n                }\n                if UNZ_FAILS_EXIST {\n                    set_exit(2);\n                    // process::exit(EXIT_VALUE);\n                }\n            },\n            _ => {\n                // \u5904\u7406\u6d4b\u8bd5\u6a21\u5f0f\n                // ...\n            },\n        }\n    }\n\n    // println!(\"121_main_\u6240\u6709\u547d\u4ee4\u884c\u53c2\u6570\u5904\u7406\u5b8c\u6210\");\n    Ok(())\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_main() {\n        // \u6a21\u62df\u547d\u4ee4\u884c\u53c2\u6570\n        let simulated_args = vec![\n            String::from(\"./bzip2\"),\n          "}], "start_byte": 13512, "end_byte": 14063, "start_point": [350, 20], "end_point": [362, 21], "text": "                       }\n                    }\n                }\n                if UNZ_FAILS_EXIST {\n                    set_exit(2);\n                    // process::exit(EXIT_VALUE);\n                }\n            },\n            _ => {\n                // \u5904\u7406\u6d4b\u8bd5\u6a21\u5f0f\n                // ...\n            },\n        }\n    }\n\n    // println!(\"121_main_\u6240\u6709\u547d\u4ee4\u884c\u53c2\u6570\u5904\u7406\u5b8c\u6210\");\n    Ok(())\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_main() {\n        // \u6a21\u62df\u547d\u4ee4\u884c\u53c2\u6570\n        let simulated_args = vec![\n            String::from(\"./bzip2\"),\n          "}, {"type": "}", "children": [], "start_byte": 14080, "end_byte": 14081, "start_point": [363, 16], "end_point": [363, 17], "text": "k"}], "start_byte": 13455, "end_byte": 14081, "start_point": [348, 23], "end_point": [363, 17], "text": "1;}\n                            uncompress(Some(name));\n                        }\n                    }\n                }\n                if UNZ_FAILS_EXIST {\n                    set_exit(2);\n                    // process::exit(EXIT_VALUE);\n                }\n            },\n            _ => {\n                // \u5904\u7406\u6d4b\u8bd5\u6a21\u5f0f\n                // ...\n            },\n        }\n    }\n\n    // println!(\"121_main_\u6240\u6709\u547d\u4ee4\u884c\u53c2\u6570\u5904\u7406\u5b8c\u6210\");\n    Ok(())\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_main() {\n        // \u6a21\u62df\u547d\u4ee4\u884c\u53c2\u6570\n        let simulated_args = vec![\n            String::from(\"./bzip2\"),\n            String::from(\"-k"}], "start_byte": 13450, "end_byte": 14081, "start_point": [348, 18], "end_point": [363, 17], "text": "S += 1;}\n                            uncompress(Some(name));\n                        }\n                    }\n                }\n                if UNZ_FAILS_EXIST {\n                    set_exit(2);\n                    // process::exit(EXIT_VALUE);\n                }\n            },\n            _ => {\n                // \u5904\u7406\u6d4b\u8bd5\u6a21\u5f0f\n                // ...\n            },\n        }\n    }\n\n    // println!(\"121_main_\u6240\u6709\u547d\u4ee4\u884c\u53c2\u6570\u5904\u7406\u5b8c\u6210\");\n    Ok(())\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_main() {\n        // \u6a21\u62df\u547d\u4ee4\u884c\u53c2\u6570\n        let simulated_args = vec![\n            String::from(\"./bzip2\"),\n            String::from(\"-k"}], "start_byte": 13375, "end_byte": 14081, "start_point": [346, 16], "end_point": [363, 17], "text": "                        }\n                            unsafe {NUM_FILE_NAMES += 1;}\n                            uncompress(Some(name));\n                        }\n                    }\n                }\n                if UNZ_FAILS_EXIST {\n                    set_exit(2);\n                    // process::exit(EXIT_VALUE);\n                }\n            },\n            _ => {\n                // \u5904\u7406\u6d4b\u8bd5\u6a21\u5f0f\n                // ...\n            },\n        }\n    }\n\n    // println!(\"121_main_\u6240\u6709\u547d\u4ee4\u884c\u53c2\u6570\u5904\u7406\u5b8c\u6210\");\n    Ok(())\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_main() {\n        // \u6a21\u62df\u547d\u4ee4\u884c\u53c2\u6570\n        let simulated_args = vec![\n            String::from(\"./bzip2\"),\n            String::from(\"-k"}], "start_byte": 13375, "end_byte": 14081, "start_point": [346, 16], "end_point": [363, 17], "text": "                        }\n                            unsafe {NUM_FILE_NAMES += 1;}\n                            uncompress(Some(name));\n                        }\n                    }\n                }\n                if UNZ_FAILS_EXIST {\n                    set_exit(2);\n                    // process::exit(EXIT_VALUE);\n                }\n            },\n            _ => {\n                // \u5904\u7406\u6d4b\u8bd5\u6a21\u5f0f\n                // ...\n            },\n        }\n    }\n\n    // println!(\"121_main_\u6240\u6709\u547d\u4ee4\u884c\u53c2\u6570\u5904\u7406\u5b8c\u6210\");\n    Ok(())\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_main() {\n        // \u6a21\u62df\u547d\u4ee4\u884c\u53c2\u6570\n        let simulated_args = vec![\n            String::from(\"./bzip2\"),\n            String::from(\"-k"}, {"type": "expression_statement", "children": [{"type": "if_expression", "children": [{"type": "if", "children": [], "start_byte": 14098, "end_byte": 14100, "start_point": [364, 16], "end_point": [364, 18], "text": "tr"}, {"type": "identifier", "children": [], "start_byte": 14101, "end_byte": 14116, "start_point": [364, 19], "end_point": [364, 34], "text": "ng::from(\"/root"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 14117, "end_byte": 14118, "start_point": [364, 35], "end_point": [364, 36], "text": "c"}, {"type": "expression_statement", "children": [{"type": "call_expression", "children": [{"type": "identifier", "children": [], "start_byte": 14139, "end_byte": 14147, "start_point": [365, 20], "end_point": [365, 28], "text": "t/11Nov."}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 14147, "end_byte": 14148, "start_point": [365, 28], "end_point": [365, 29], "text": "t"}, {"type": "integer_literal", "children": [], "start_byte": 14148, "end_byte": 14149, "start_point": [365, 29], "end_point": [365, 30], "text": "x"}, {"type": ")", "children": [], "start_byte": 14149, "end_byte": 14150, "start_point": [365, 30], "end_point": [365, 31], "text": "t"}], "start_byte": 14147, "end_byte": 14150, "start_point": [365, 28], "end_point": [365, 31], "text": "txt"}], "start_byte": 14139, "end_byte": 14150, "start_point": [365, 20], "end_point": [365, 31], "text": "t/11Nov.txt"}, {"type": ";", "children": [], "start_byte": 14150, "end_byte": 14151, "start_point": [365, 31], "end_point": [365, 32], "text": "\""}], "start_byte": 14139, "end_byte": 14151, "start_point": [365, 20], "end_point": [365, 32], "text": "t/11Nov.txt\""}, {"type": "line_comment", "children": [], "start_byte": 14172, "end_byte": 14201, "start_point": [366, 20], "end_point": [366, 49], "text": "ing::from(\"/root/crown-rust/b"}, {"type": "}", "children": [], "start_byte": 14218, "end_byte": 14219, "start_point": [367, 16], "end_point": [367, 17], "text": "e"}], "start_byte": 14117, "end_byte": 14219, "start_point": [364, 35], "end_point": [367, 17], "text": "crown-rust/bzip2_rs_gpt/11Nov.txt\"),\n            // String::from(\"/root/crown-rust/bzip2_rs_gpt/sample"}], "start_byte": 14098, "end_byte": 14219, "start_point": [364, 16], "end_point": [367, 17], "text": "tring::from(\"/root/crown-rust/bzip2_rs_gpt/11Nov.txt\"),\n            // String::from(\"/root/crown-rust/bzip2_rs_gpt/sample"}], "start_byte": 14098, "end_byte": 14219, "start_point": [364, 16], "end_point": [367, 17], "text": "tring::from(\"/root/crown-rust/bzip2_rs_gpt/11Nov.txt\"),\n            // String::from(\"/root/crown-rust/bzip2_rs_gpt/sample"}, {"type": "}", "children": [], "start_byte": 14232, "end_byte": 14233, "start_point": [368, 12], "end_point": [368, 13], "text": " "}], "start_byte": 13316, "end_byte": 14233, "start_point": [344, 17], "end_point": [368, 13], "text": " && decode {\n                                continue;\n                            }\n                            unsafe {NUM_FILE_NAMES += 1;}\n                            uncompress(Some(name));\n                        }\n                    }\n                }\n                if UNZ_FAILS_EXIST {\n                    set_exit(2);\n                    // process::exit(EXIT_VALUE);\n                }\n            },\n            _ => {\n                // \u5904\u7406\u6d4b\u8bd5\u6a21\u5f0f\n                // ...\n            },\n        }\n    }\n\n    // println!(\"121_main_\u6240\u6709\u547d\u4ee4\u884c\u53c2\u6570\u5904\u7406\u5b8c\u6210\");\n    Ok(())\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_main() {\n        // \u6a21\u62df\u547d\u4ee4\u884c\u53c2\u6570\n        let simulated_args = vec![\n            String::from(\"./bzip2\"),\n            String::from(\"-k\"),\n            String::from(\"/root/crown-rust/bzip2_rs_gpt/11Nov.txt\"),\n            // String::from(\"/root/crown-rust/bzip2_rs_gpt/sample1.ref\"),\n     "}, {"type": ",", "children": [], "start_byte": 14233, "end_byte": 14234, "start_point": [368, 13], "end_point": [368, 14], "text": " "}], "start_byte": 13311, "end_byte": 14234, "start_point": [344, 12], "end_point": [368, 14], "text": "('-') && decode {\n                                continue;\n                            }\n                            unsafe {NUM_FILE_NAMES += 1;}\n                            uncompress(Some(name));\n                        }\n                    }\n                }\n                if UNZ_FAILS_EXIST {\n                    set_exit(2);\n                    // process::exit(EXIT_VALUE);\n                }\n            },\n            _ => {\n                // \u5904\u7406\u6d4b\u8bd5\u6a21\u5f0f\n                // ...\n            },\n        }\n    }\n\n    // println!(\"121_main_\u6240\u6709\u547d\u4ee4\u884c\u53c2\u6570\u5904\u7406\u5b8c\u6210\");\n    Ok(())\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_main() {\n        // \u6a21\u62df\u547d\u4ee4\u884c\u53c2\u6570\n        let simulated_args = vec![\n            String::from(\"./bzip2\"),\n            String::from(\"-k\"),\n            String::from(\"/root/crown-rust/bzip2_rs_gpt/11Nov.txt\"),\n            // String::from(\"/root/crown-rust/bzip2_rs_gpt/sample1.ref\"),\n      "}, {"type": "match_arm", "children": [{"type": "match_pattern", "children": [{"type": "_", "children": [], "start_byte": 14247, "end_byte": 14248, "start_point": [369, 12], "end_point": [369, 13], "text": "n"}], "start_byte": 14247, "end_byte": 14248, "start_point": [369, 12], "end_point": [369, 13], "text": "n"}, {"type": "=>", "children": [], "start_byte": 14249, "end_byte": 14251, "start_point": [369, 14], "end_point": [369, 16], "text": "::"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 14252, "end_byte": 14253, "start_point": [369, 17], "end_point": [369, 18], "text": "r"}, {"type": "line_comment", "children": [], "start_byte": 14270, "end_byte": 14291, "start_point": [370, 16], "end_point": [370, 37], "text": "ust/bzip2_rs_gpt/abc."}, {"type": "line_comment", "children": [], "start_byte": 14308, "end_byte": 14314, "start_point": [371, 16], "end_point": [371, 22], "text": "\n     "}, {"type": "}", "children": [], "start_byte": 14327, "end_byte": 14328, "start_point": [372, 12], "end_point": [372, 13], "text": "i"}], "start_byte": 14252, "end_byte": 14328, "start_point": [369, 17], "end_point": [372, 13], "text": "rom(\"/root/crown-rust/bzip2_rs_gpt/abc.txt\"),\n        ];\n            // Stri"}, {"type": ",", "children": [], "start_byte": 14328, "end_byte": 14329, "start_point": [372, 13], "end_point": [372, 14], "text": "n"}], "start_byte": 14247, "end_byte": 14329, "start_point": [369, 12], "end_point": [372, 14], "text": "ng::from(\"/root/crown-rust/bzip2_rs_gpt/abc.txt\"),\n        ];\n            // Strin"}, {"type": "}", "children": [], "start_byte": 14338, "end_byte": 14339, "start_point": [373, 8], "end_point": [373, 9], "text": "-"}], "start_byte": 13054, "end_byte": 14339, "start_point": [335, 22], "end_point": [373, 9], "text": " if let Some(name) = &cell.name {\n                            if name.as_str() == \"--\"  {\n                                decode = false;\n                                continue;\n                            }\n                            if name.starts_with('-') && decode {\n                                continue;\n                            }\n                            unsafe {NUM_FILE_NAMES += 1;}\n                            uncompress(Some(name));\n                        }\n                    }\n                }\n                if UNZ_FAILS_EXIST {\n                    set_exit(2);\n                    // process::exit(EXIT_VALUE);\n                }\n            },\n            _ => {\n                // \u5904\u7406\u6d4b\u8bd5\u6a21\u5f0f\n                // ...\n            },\n        }\n    }\n\n    // println!(\"121_main_\u6240\u6709\u547d\u4ee4\u884c\u53c2\u6570\u5904\u7406\u5b8c\u6210\");\n    Ok(())\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_main() {\n        // \u6a21\u62df\u547d\u4ee4\u884c\u53c2\u6570\n        let simulated_args = vec![\n            String::from(\"./bzip2\"),\n            String::from(\"-k\"),\n            String::from(\"/root/crown-rust/bzip2_rs_gpt/11Nov.txt\"),\n            // String::from(\"/root/crown-rust/bzip2_rs_gpt/sample1.ref\"),\n            // String::from(\"/root/crown-rust/bzip2_rs_gpt/abc.txt\"),\n        ];\n            // String::from(\"-"}], "start_byte": 13040, "end_byte": 14339, "start_point": [335, 8], "end_point": [373, 9], "text": "               if let Some(name) = &cell.name {\n                            if name.as_str() == \"--\"  {\n                                decode = false;\n                                continue;\n                            }\n                            if name.starts_with('-') && decode {\n                                continue;\n                            }\n                            unsafe {NUM_FILE_NAMES += 1;}\n                            uncompress(Some(name));\n                        }\n                    }\n                }\n                if UNZ_FAILS_EXIST {\n                    set_exit(2);\n                    // process::exit(EXIT_VALUE);\n                }\n            },\n            _ => {\n                // \u5904\u7406\u6d4b\u8bd5\u6a21\u5f0f\n                // ...\n            },\n        }\n    }\n\n    // println!(\"121_main_\u6240\u6709\u547d\u4ee4\u884c\u53c2\u6570\u5904\u7406\u5b8c\u6210\");\n    Ok(())\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_main() {\n        // \u6a21\u62df\u547d\u4ee4\u884c\u53c2\u6570\n        let simulated_args = vec![\n            String::from(\"./bzip2\"),\n            String::from(\"-k\"),\n            String::from(\"/root/crown-rust/bzip2_rs_gpt/11Nov.txt\"),\n            // String::from(\"/root/crown-rust/bzip2_rs_gpt/sample1.ref\"),\n            // String::from(\"/root/crown-rust/bzip2_rs_gpt/abc.txt\"),\n        ];\n            // String::from(\"-"}], "start_byte": 13040, "end_byte": 14339, "start_point": [335, 8], "end_point": [373, 9], "text": "               if let Some(name) = &cell.name {\n                            if name.as_str() == \"--\"  {\n                                decode = false;\n                                continue;\n                            }\n                            if name.starts_with('-') && decode {\n                                continue;\n                            }\n                            unsafe {NUM_FILE_NAMES += 1;}\n                            uncompress(Some(name));\n                        }\n                    }\n                }\n                if UNZ_FAILS_EXIST {\n                    set_exit(2);\n                    // process::exit(EXIT_VALUE);\n                }\n            },\n            _ => {\n                // \u5904\u7406\u6d4b\u8bd5\u6a21\u5f0f\n                // ...\n            },\n        }\n    }\n\n    // println!(\"121_main_\u6240\u6709\u547d\u4ee4\u884c\u53c2\u6570\u5904\u7406\u5b8c\u6210\");\n    Ok(())\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_main() {\n        // \u6a21\u62df\u547d\u4ee4\u884c\u53c2\u6570\n        let simulated_args = vec![\n            String::from(\"./bzip2\"),\n            String::from(\"-k\"),\n            String::from(\"/root/crown-rust/bzip2_rs_gpt/11Nov.txt\"),\n            // String::from(\"/root/crown-rust/bzip2_rs_gpt/sample1.ref\"),\n            // String::from(\"/root/crown-rust/bzip2_rs_gpt/abc.txt\"),\n        ];\n            // String::from(\"-"}, {"type": "}", "children": [], "start_byte": 14344, "end_byte": 14345, "start_point": [374, 4], "end_point": [374, 5], "text": " "}], "start_byte": 12938, "end_byte": 14345, "start_point": [332, 11], "end_point": [374, 5], "text": "     } else {\n                    decode = true;\n                    for cell in &arg_list {\n                        if let Some(name) = &cell.name {\n                            if name.as_str() == \"--\"  {\n                                decode = false;\n                                continue;\n                            }\n                            if name.starts_with('-') && decode {\n                                continue;\n                            }\n                            unsafe {NUM_FILE_NAMES += 1;}\n                            uncompress(Some(name));\n                        }\n                    }\n                }\n                if UNZ_FAILS_EXIST {\n                    set_exit(2);\n                    // process::exit(EXIT_VALUE);\n                }\n            },\n            _ => {\n                // \u5904\u7406\u6d4b\u8bd5\u6a21\u5f0f\n                // ...\n            },\n        }\n    }\n\n    // println!(\"121_main_\u6240\u6709\u547d\u4ee4\u884c\u53c2\u6570\u5904\u7406\u5b8c\u6210\");\n    Ok(())\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_main() {\n        // \u6a21\u62df\u547d\u4ee4\u884c\u53c2\u6570\n        let simulated_args = vec![\n            String::from(\"./bzip2\"),\n            String::from(\"-k\"),\n            String::from(\"/root/crown-rust/bzip2_rs_gpt/11Nov.txt\"),\n            // String::from(\"/root/crown-rust/bzip2_rs_gpt/sample1.ref\"),\n            // String::from(\"/root/crown-rust/bzip2_rs_gpt/abc.txt\"),\n        ];\n            // String::from(\"-1\"),\n "}], "start_byte": 12931, "end_byte": 14345, "start_point": [332, 4], "end_point": [374, 5], "text": "            } else {\n                    decode = true;\n                    for cell in &arg_list {\n                        if let Some(name) = &cell.name {\n                            if name.as_str() == \"--\"  {\n                                decode = false;\n                                continue;\n                            }\n                            if name.starts_with('-') && decode {\n                                continue;\n                            }\n                            unsafe {NUM_FILE_NAMES += 1;}\n                            uncompress(Some(name));\n                        }\n                    }\n                }\n                if UNZ_FAILS_EXIST {\n                    set_exit(2);\n                    // process::exit(EXIT_VALUE);\n                }\n            },\n            _ => {\n                // \u5904\u7406\u6d4b\u8bd5\u6a21\u5f0f\n                // ...\n            },\n        }\n    }\n\n    // println!(\"121_main_\u6240\u6709\u547d\u4ee4\u884c\u53c2\u6570\u5904\u7406\u5b8c\u6210\");\n    Ok(())\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_main() {\n        // \u6a21\u62df\u547d\u4ee4\u884c\u53c2\u6570\n        let simulated_args = vec![\n            String::from(\"./bzip2\"),\n            String::from(\"-k\"),\n            String::from(\"/root/crown-rust/bzip2_rs_gpt/11Nov.txt\"),\n            // String::from(\"/root/crown-rust/bzip2_rs_gpt/sample1.ref\"),\n            // String::from(\"/root/crown-rust/bzip2_rs_gpt/abc.txt\"),\n        ];\n            // String::from(\"-1\"),\n "}], "start_byte": 12931, "end_byte": 14345, "start_point": [332, 4], "end_point": [374, 5], "text": "            } else {\n                    decode = true;\n                    for cell in &arg_list {\n                        if let Some(name) = &cell.name {\n                            if name.as_str() == \"--\"  {\n                                decode = false;\n                                continue;\n                            }\n                            if name.starts_with('-') && decode {\n                                continue;\n                            }\n                            unsafe {NUM_FILE_NAMES += 1;}\n                            uncompress(Some(name));\n                        }\n                    }\n                }\n                if UNZ_FAILS_EXIST {\n                    set_exit(2);\n                    // process::exit(EXIT_VALUE);\n                }\n            },\n            _ => {\n                // \u5904\u7406\u6d4b\u8bd5\u6a21\u5f0f\n                // ...\n            },\n        }\n    }\n\n    // println!(\"121_main_\u6240\u6709\u547d\u4ee4\u884c\u53c2\u6570\u5904\u7406\u5b8c\u6210\");\n    Ok(())\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_main() {\n        // \u6a21\u62df\u547d\u4ee4\u884c\u53c2\u6570\n        let simulated_args = vec![\n            String::from(\"./bzip2\"),\n            String::from(\"-k\"),\n            String::from(\"/root/crown-rust/bzip2_rs_gpt/11Nov.txt\"),\n            // String::from(\"/root/crown-rust/bzip2_rs_gpt/sample1.ref\"),\n            // String::from(\"/root/crown-rust/bzip2_rs_gpt/abc.txt\"),\n        ];\n            // String::from(\"-1\"),\n "}, {"type": "line_comment", "children": [], "start_byte": 14351, "end_byte": 14409, "start_point": [376, 4], "end_point": [376, 62], "text": "     // String::from(\"< sample1.ref\"),\n            // Stri"}, {"type": "call_expression", "children": [{"type": "identifier", "children": [], "start_byte": 14414, "end_byte": 14416, "start_point": [377, 4], "end_point": [377, 6], "text": "ro"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 14416, "end_byte": 14417, "start_point": [377, 6], "end_point": [377, 7], "text": "m"}, {"type": "unit_expression", "children": [{"type": "(", "children": [], "start_byte": 14417, "end_byte": 14418, "start_point": [377, 7], "end_point": [377, 8], "text": "("}, {"type": ")", "children": [], "start_byte": 14418, "end_byte": 14419, "start_point": [377, 8], "end_point": [377, 9], "text": "\""}], "start_byte": 14417, "end_byte": 14419, "start_point": [377, 7], "end_point": [377, 9], "text": "(\""}, {"type": ")", "children": [], "start_byte": 14419, "end_byte": 14420, "start_point": [377, 9], "end_point": [377, 10], "text": ">"}], "start_byte": 14416, "end_byte": 14420, "start_point": [377, 6], "end_point": [377, 10], "text": "m(\">"}], "start_byte": 14414, "end_byte": 14420, "start_point": [377, 4], "end_point": [377, 10], "text": "rom(\">"}, {"type": "}", "children": [], "start_byte": 14421, "end_byte": 14422, "start_point": [378, 0], "end_point": [378, 1], "text": "s"}], "start_byte": 4081, "end_byte": 14422, "start_point": [99, 71], "end_point": [378, 1], "text": "     SMALL_MODE = false;\n        KEEP_INPUT_FILES = false;\n        FORCE_OVERWRITE = false;\n        NOISY = true;\n        verbosity = 0;\n        blockSize100k = 9;\n        TEST_FAILS_EXIST = false;\n        UNZ_FAILS_EXIST = false;\n        NUM_FILE_NAMES = 0;\n        NUM_FILES_PROCESSED = 0;\n        workFactor = 30;\n        DELETE_OUTPUT_ON_INTERRUPT = false;\n        EXIT_VALUE = 0;\n        OP_MODE = 1;\n        LONGEST_FILE_NAME = 7;\n        \n    }\n\n    let mut i = 0;\n    let mut j = 0;\n\n    decode = true;\n\n    // let mut in_name = String::from(\"(none)\");\n    // let mut out_name = String::from(\"(none)\");\n    // let mut prog_name_really = argv[0].clone();\n    // let prog_name = &prog_name_really;\n\n    // \u786e\u4fdd\u7c7b\u578b\u5927\u5c0f\u6b63\u786e\n    // // println!(\"121_main_\u68c0\u67e5\u6570\u636e\u7c7b\u578b\u5927\u5c0f\");\n    // if std::mem::size_of::<i32>() != 4 || std::mem::size_of::<u16>() != 2 || std::mem::size_of::<char>() != 1 {\n    //     // println!(\"121_main_\u6570\u636e\u7c7b\u578b\u5927\u5c0f\u9519\u8bef\");\n    //     config_error();\n    //     return Err(io::Error::new(io::ErrorKind::Other, \"\u914d\u7f6e\u9519\u8bef\"));\n    // }\n\n\n    unsafe {\n        let prog_name_str = env::args().nth(0).unwrap_or_else(|| String::from(\"(unknown)\"));\n        PROG_NAME_REALLY = string_to_u8_array_1034(prog_name_str.clone());\n        let p_str = Path::new(&prog_name_str)\n            .file_name()\n            .unwrap()\n            .to_str()\n            .unwrap();\n        PROG_NAME = string_to_u8_array_2000(p_str.to_string());\n    }\n\n    // \u5904\u7406\u547d\u4ee4\u884c\u53c2\u6570\n    // println!(\"121_main_\u5f00\u59cb\u5904\u7406\u547d\u4ee4\u884c\u53c2\u6570\");\n    let mut arg_list = Some(Box::new(Cell::mk_cell()));\n    Cell::add_flags_from_env_var(&mut arg_list, \"BZIP2\");\n    // println!(\"121_main_\u6dfb\u52a0\u73af\u5883\u53d8\u91cf BZIP2\");\n\n    Cell::add_flags_from_env_var(&mut arg_list, \"BZIP\");\n    // println!(\"121_main_\u6dfb\u52a0\u73af\u5883\u53d8\u91cf BZIP\");\n\n    for arg in argv.iter().skip(1) {\n        // println!(\"121_main_\u5904\u7406\u53c2\u6570: {}\", arg);\n        arg_list = Some(Box::new(arg_list.take().unwrap_or_else(|| Box::new(Cell::mk_cell())).snoc_string(arg)));\n    }\n\n    // println!(\"After doing with arg_list\");\n    if let Some(ref cell) = arg_list {\n        cell.printLinkLists();\n    }\n    // \u4e0b\u9762\u8fdb\u5165arg_list\u7684\u4f7f\u7528\n\n    // let mut arg_list = Vec::new();\n    // add_flags_from_env_var(&mut arg_list, \"BZIP2\");\n    // add_flags_from_env_var(&mut arg_list, \"BZIP\");\n    // arg_list.extend(env::args().skip(1));\n    unsafe {\n        LONGEST_FILE_NAME = 7;\n        NUM_FILE_NAMES = 0;\n    }\n    decode = true;\n    // \u9012\u5f52\u904d\u5386 \ud83d\udd25\n    process_link_list(&mut arg_list, &mut decode);\n    // for aa in &arg_list {\n    //      // \u89e3\u5f15\u7528 `Box<String>` \u4ee5\u83b7\u53d6 `String` \u7684\u5f15\u7528\n    //     if let Some(ref name) = aa.name {\n    //         if name.as_str() == \"--\" {\n    //             decode = false;\n    //             continue;\n    //         }\n    //         if name.starts_with('-') && decode {\n    //             continue;\n    //         }\n    //         unsafe {\n    //             NUM_FILE_NAMES += 1;\n    //             LONGEST_FILE_NAME = LONGEST_FILE_NAME.max(name.len() as i32);\n    //         }\n    //     }\n    // }\n\n    unsafe {SRC_MODE = if NUM_FILE_NAMES == 0 { 1 } else { 3 };}\n    unsafe {OP_MODE = 1;}\n    unsafe {\n        let mut prog_name_str = u8_array_to_string(&PROG_NAME);\n        if prog_name_str.contains(\"unzip\") || prog_name_str.contains(\"UNZIP\") {\n            OP_MODE = 2;\n        }\n        if prog_name_str.contains(\"z2cat\") || prog_name_str.contains(\"Z2CAT\") || prog_name_str.contains(\"zcat\") || prog_name_str.contains(\"ZCAT\") {\n            OP_MODE = 2;\n        }\n    }\n\n\n    // \u904d\u5386arg_list\u5904\u7406\u6bcf\u4e2a\u547d\u4ee4\u884c\u53c2\u6570\n    let mut aa = &arg_list;\n    while let Some(cell) = aa {\n        if let Some(name) = &cell.name {\n            if name.as_str() == \"--\"  {\n                break;\n            }\n\n            if name.starts_with('-') && !name.starts_with(\"--\") {\n                for ch in name.chars().skip(1) {\n                    match ch {\n                        'c' => unsafe { SRC_MODE = 2; },\n                        'd' => unsafe { OP_MODE = 2; },\n                        'z' => unsafe { OP_MODE = 1; },\n                        'f' => unsafe { FORCE_OVERWRITE = true; },\n                        't' => unsafe { OP_MODE = 3; },\n                        'k' => unsafe { KEEP_INPUT_FILES = true; },\n                        's' => unsafe { SMALL_MODE = true; },\n                        'q' => unsafe { NOISY = false; },\n                        '1' => unsafe { blockSize100k = 1; },\n                        '2' => unsafe { blockSize100k = 2; },\n                        '3' => unsafe { blockSize100k = 3; },\n                        '4' => unsafe { blockSize100k = 4; },\n                        '5' => unsafe { blockSize100k = 5; },\n                        '6' => unsafe { blockSize100k = 6; },\n                        '7' => unsafe { blockSize100k = 7; },\n                        '8' => unsafe { blockSize100k = 8; },\n                        '9' => unsafe { blockSize100k = 9; },\n                        // ...\u5904\u7406\u5176\u4ed6\u5b57\u7b26...\n                        'L' => unsafe { license(); },\n                        'v' => unsafe { VERBOSITY += 1; },\n                        'h' => {\n                            unsafe{\n                                let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                                usage(prog_name_str);\n                            }\n                            // process::exit(0);\n                        },\n                        _ => {\n                            unsafe {\n                            eprintln!(\"\u7b2c\u4e00match {}: Bad flag `{}`\", String::from_utf8_lossy(&PROG_NAME), name);\n                            let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                                usage(prog_name_str);\n                            }\n                            // process::exit(1);\n                        }\n                    }\n                }\n            }\n        }\n        aa = &cell.link;\n    }\n\n\n    // \u904d\u5386arg_list\u5904\u7406\u6bcf\u4e2a\u957f\u683c\u5f0f\u547d\u4ee4\u884c\u53c2\u6570\n    let mut aa = &arg_list;\n    while let Some(cell) = aa {\n        if let Some(name) = &cell.name {\n            match name.as_str() {\n                \"--\" => break,\n                \"--stdout\" => unsafe { SRC_MODE = 2; },\n                \"--decompress\" => unsafe { OP_MODE = 2; },\n                \"--compress\" => unsafe { OP_MODE = 1; },\n                \"--force\" => unsafe { FORCE_OVERWRITE = true; },\n                \"--test\" => unsafe { OP_MODE = 3; },\n                \"--keep\" => unsafe { KEEP_INPUT_FILES = true; },\n                \"--small\" => unsafe { SMALL_MODE = true; },\n                \"--quiet\" => unsafe { NOISY = false; },\n                \"--version\" | \"--license\" => license(),\n                \"--exponential\" => unsafe { WORK_FACTOR = 1; },\n                \"--repetitive-best\" | \"--repetitive-fast\" => redundant(&name.as_bytes()),\n                \"--fast\" => unsafe { blockSize100k = 1; },\n                \"--best\" => unsafe { blockSize100k = 9; },\n                \"--verbose\" => unsafe { VERBOSITY += 1; },\n                \"--help\" => {\n                    unsafe{\n                        let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                        usage(prog_name_str);\n                    }\n                    // process::exit(0);\n                },\n                _ if name.starts_with(\"--\") => {\n                    unsafe{ \n                        eprintln!(\"\u7b2c\u4e8cmatch {}: Bad flag `{}`\", String::from_utf8_lossy(&PROG_NAME), name);\n                        let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                        usage(prog_name_str);\n                    }\n                    // process::exit(0);\n                },\n                _ => {}\n            }\n        }\n        aa = &cell.link;\n    }\n\n\n\n    // \u8bbe\u7f6everbosity\u9650\u5236\n    unsafe {\n        if VERBOSITY > 4 {\n            VERBOSITY = 4;\n        }\n        if OP_MODE == 1 && SMALL_MODE && blockSize100k > 2 {\n            unsafe {blockSize100k = 2; }\n        }\n        if OP_MODE == 3 && SRC_MODE == 2 {\n            unsafe {eprintln!(\"{}: -c and -t cannot be used together.\", String::from_utf8_lossy(&PROG_NAME));}\n            // process::exit(1);\n        }\n        if SRC_MODE == 2 && NUM_FILE_NAMES == 0 {\n            SRC_MODE = 1;\n        }\n        if OP_MODE != 1 {\n            unsafe {blockSize100k = 0; }\n        }\n    }\n    // \u6839\u636e\u64cd\u4f5c\u6a21\u5f0f\u6267\u884c\u76f8\u5e94\u7684\u64cd\u4f5c\n    unsafe {\n        // println!(\"OP_MODE: {}\", OP_MODE);\n        // println!(\"SRC_MODE: {}\", SRC_MODE);\n        match OP_MODE {\n            1 => {\n                if SRC_MODE == 1 {\n                    compress(None)?;\n                } else {\n                    decode = true;\n                    process_cells(&arg_list, &mut decode);\n                }\n            },\n            2 => {\n                UNZ_FAILS_EXIST = false;\n                if SRC_MODE == 1 {\n                    uncompress(None);\n                } else {\n                    decode = true;\n                    for cell in &arg_list {\n                        if let Some(name) = &cell.name {\n                            if name.as_str() == \"--\"  {\n                                decode = false;\n                                continue;\n                            }\n                            if name.starts_with('-') && decode {\n                                continue;\n                            }\n                            unsafe {NUM_FILE_NAMES += 1;}\n                            uncompress(Some(name));\n                        }\n                    }\n                }\n                if UNZ_FAILS_EXIST {\n                    set_exit(2);\n                    // process::exit(EXIT_VALUE);\n                }\n            },\n            _ => {\n                // \u5904\u7406\u6d4b\u8bd5\u6a21\u5f0f\n                // ...\n            },\n        }\n    }\n\n    // println!(\"121_main_\u6240\u6709\u547d\u4ee4\u884c\u53c2\u6570\u5904\u7406\u5b8c\u6210\");\n    Ok(())\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_main() {\n        // \u6a21\u62df\u547d\u4ee4\u884c\u53c2\u6570\n        let simulated_args = vec![\n            String::from(\"./bzip2\"),\n            String::from(\"-k\"),\n            String::from(\"/root/crown-rust/bzip2_rs_gpt/11Nov.txt\"),\n            // String::from(\"/root/crown-rust/bzip2_rs_gpt/sample1.ref\"),\n            // String::from(\"/root/crown-rust/bzip2_rs_gpt/abc.txt\"),\n        ];\n            // String::from(\"-1\"),\n            // String::from(\"< sample1.ref\"),\n            // String::from(\"> s"}], "start_byte": 4010, "end_byte": 14422, "start_point": [99, 0], "end_point": [378, 1], "text": "ou.len() as i32;\n    let mut decode: bool;\n    // \u521d\u59cb\u5316\u53d8\u91cf\n    unsafe{\n        SMALL_MODE = false;\n        KEEP_INPUT_FILES = false;\n        FORCE_OVERWRITE = false;\n        NOISY = true;\n        verbosity = 0;\n        blockSize100k = 9;\n        TEST_FAILS_EXIST = false;\n        UNZ_FAILS_EXIST = false;\n        NUM_FILE_NAMES = 0;\n        NUM_FILES_PROCESSED = 0;\n        workFactor = 30;\n        DELETE_OUTPUT_ON_INTERRUPT = false;\n        EXIT_VALUE = 0;\n        OP_MODE = 1;\n        LONGEST_FILE_NAME = 7;\n        \n    }\n\n    let mut i = 0;\n    let mut j = 0;\n\n    decode = true;\n\n    // let mut in_name = String::from(\"(none)\");\n    // let mut out_name = String::from(\"(none)\");\n    // let mut prog_name_really = argv[0].clone();\n    // let prog_name = &prog_name_really;\n\n    // \u786e\u4fdd\u7c7b\u578b\u5927\u5c0f\u6b63\u786e\n    // // println!(\"121_main_\u68c0\u67e5\u6570\u636e\u7c7b\u578b\u5927\u5c0f\");\n    // if std::mem::size_of::<i32>() != 4 || std::mem::size_of::<u16>() != 2 || std::mem::size_of::<char>() != 1 {\n    //     // println!(\"121_main_\u6570\u636e\u7c7b\u578b\u5927\u5c0f\u9519\u8bef\");\n    //     config_error();\n    //     return Err(io::Error::new(io::ErrorKind::Other, \"\u914d\u7f6e\u9519\u8bef\"));\n    // }\n\n\n    unsafe {\n        let prog_name_str = env::args().nth(0).unwrap_or_else(|| String::from(\"(unknown)\"));\n        PROG_NAME_REALLY = string_to_u8_array_1034(prog_name_str.clone());\n        let p_str = Path::new(&prog_name_str)\n            .file_name()\n            .unwrap()\n            .to_str()\n            .unwrap();\n        PROG_NAME = string_to_u8_array_2000(p_str.to_string());\n    }\n\n    // \u5904\u7406\u547d\u4ee4\u884c\u53c2\u6570\n    // println!(\"121_main_\u5f00\u59cb\u5904\u7406\u547d\u4ee4\u884c\u53c2\u6570\");\n    let mut arg_list = Some(Box::new(Cell::mk_cell()));\n    Cell::add_flags_from_env_var(&mut arg_list, \"BZIP2\");\n    // println!(\"121_main_\u6dfb\u52a0\u73af\u5883\u53d8\u91cf BZIP2\");\n\n    Cell::add_flags_from_env_var(&mut arg_list, \"BZIP\");\n    // println!(\"121_main_\u6dfb\u52a0\u73af\u5883\u53d8\u91cf BZIP\");\n\n    for arg in argv.iter().skip(1) {\n        // println!(\"121_main_\u5904\u7406\u53c2\u6570: {}\", arg);\n        arg_list = Some(Box::new(arg_list.take().unwrap_or_else(|| Box::new(Cell::mk_cell())).snoc_string(arg)));\n    }\n\n    // println!(\"After doing with arg_list\");\n    if let Some(ref cell) = arg_list {\n        cell.printLinkLists();\n    }\n    // \u4e0b\u9762\u8fdb\u5165arg_list\u7684\u4f7f\u7528\n\n    // let mut arg_list = Vec::new();\n    // add_flags_from_env_var(&mut arg_list, \"BZIP2\");\n    // add_flags_from_env_var(&mut arg_list, \"BZIP\");\n    // arg_list.extend(env::args().skip(1));\n    unsafe {\n        LONGEST_FILE_NAME = 7;\n        NUM_FILE_NAMES = 0;\n    }\n    decode = true;\n    // \u9012\u5f52\u904d\u5386 \ud83d\udd25\n    process_link_list(&mut arg_list, &mut decode);\n    // for aa in &arg_list {\n    //      // \u89e3\u5f15\u7528 `Box<String>` \u4ee5\u83b7\u53d6 `String` \u7684\u5f15\u7528\n    //     if let Some(ref name) = aa.name {\n    //         if name.as_str() == \"--\" {\n    //             decode = false;\n    //             continue;\n    //         }\n    //         if name.starts_with('-') && decode {\n    //             continue;\n    //         }\n    //         unsafe {\n    //             NUM_FILE_NAMES += 1;\n    //             LONGEST_FILE_NAME = LONGEST_FILE_NAME.max(name.len() as i32);\n    //         }\n    //     }\n    // }\n\n    unsafe {SRC_MODE = if NUM_FILE_NAMES == 0 { 1 } else { 3 };}\n    unsafe {OP_MODE = 1;}\n    unsafe {\n        let mut prog_name_str = u8_array_to_string(&PROG_NAME);\n        if prog_name_str.contains(\"unzip\") || prog_name_str.contains(\"UNZIP\") {\n            OP_MODE = 2;\n        }\n        if prog_name_str.contains(\"z2cat\") || prog_name_str.contains(\"Z2CAT\") || prog_name_str.contains(\"zcat\") || prog_name_str.contains(\"ZCAT\") {\n            OP_MODE = 2;\n        }\n    }\n\n\n    // \u904d\u5386arg_list\u5904\u7406\u6bcf\u4e2a\u547d\u4ee4\u884c\u53c2\u6570\n    let mut aa = &arg_list;\n    while let Some(cell) = aa {\n        if let Some(name) = &cell.name {\n            if name.as_str() == \"--\"  {\n                break;\n            }\n\n            if name.starts_with('-') && !name.starts_with(\"--\") {\n                for ch in name.chars().skip(1) {\n                    match ch {\n                        'c' => unsafe { SRC_MODE = 2; },\n                        'd' => unsafe { OP_MODE = 2; },\n                        'z' => unsafe { OP_MODE = 1; },\n                        'f' => unsafe { FORCE_OVERWRITE = true; },\n                        't' => unsafe { OP_MODE = 3; },\n                        'k' => unsafe { KEEP_INPUT_FILES = true; },\n                        's' => unsafe { SMALL_MODE = true; },\n                        'q' => unsafe { NOISY = false; },\n                        '1' => unsafe { blockSize100k = 1; },\n                        '2' => unsafe { blockSize100k = 2; },\n                        '3' => unsafe { blockSize100k = 3; },\n                        '4' => unsafe { blockSize100k = 4; },\n                        '5' => unsafe { blockSize100k = 5; },\n                        '6' => unsafe { blockSize100k = 6; },\n                        '7' => unsafe { blockSize100k = 7; },\n                        '8' => unsafe { blockSize100k = 8; },\n                        '9' => unsafe { blockSize100k = 9; },\n                        // ...\u5904\u7406\u5176\u4ed6\u5b57\u7b26...\n                        'L' => unsafe { license(); },\n                        'v' => unsafe { VERBOSITY += 1; },\n                        'h' => {\n                            unsafe{\n                                let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                                usage(prog_name_str);\n                            }\n                            // process::exit(0);\n                        },\n                        _ => {\n                            unsafe {\n                            eprintln!(\"\u7b2c\u4e00match {}: Bad flag `{}`\", String::from_utf8_lossy(&PROG_NAME), name);\n                            let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                                usage(prog_name_str);\n                            }\n                            // process::exit(1);\n                        }\n                    }\n                }\n            }\n        }\n        aa = &cell.link;\n    }\n\n\n    // \u904d\u5386arg_list\u5904\u7406\u6bcf\u4e2a\u957f\u683c\u5f0f\u547d\u4ee4\u884c\u53c2\u6570\n    let mut aa = &arg_list;\n    while let Some(cell) = aa {\n        if let Some(name) = &cell.name {\n            match name.as_str() {\n                \"--\" => break,\n                \"--stdout\" => unsafe { SRC_MODE = 2; },\n                \"--decompress\" => unsafe { OP_MODE = 2; },\n                \"--compress\" => unsafe { OP_MODE = 1; },\n                \"--force\" => unsafe { FORCE_OVERWRITE = true; },\n                \"--test\" => unsafe { OP_MODE = 3; },\n                \"--keep\" => unsafe { KEEP_INPUT_FILES = true; },\n                \"--small\" => unsafe { SMALL_MODE = true; },\n                \"--quiet\" => unsafe { NOISY = false; },\n                \"--version\" | \"--license\" => license(),\n                \"--exponential\" => unsafe { WORK_FACTOR = 1; },\n                \"--repetitive-best\" | \"--repetitive-fast\" => redundant(&name.as_bytes()),\n                \"--fast\" => unsafe { blockSize100k = 1; },\n                \"--best\" => unsafe { blockSize100k = 9; },\n                \"--verbose\" => unsafe { VERBOSITY += 1; },\n                \"--help\" => {\n                    unsafe{\n                        let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                        usage(prog_name_str);\n                    }\n                    // process::exit(0);\n                },\n                _ if name.starts_with(\"--\") => {\n                    unsafe{ \n                        eprintln!(\"\u7b2c\u4e8cmatch {}: Bad flag `{}`\", String::from_utf8_lossy(&PROG_NAME), name);\n                        let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                        usage(prog_name_str);\n                    }\n                    // process::exit(0);\n                },\n                _ => {}\n            }\n        }\n        aa = &cell.link;\n    }\n\n\n\n    // \u8bbe\u7f6everbosity\u9650\u5236\n    unsafe {\n        if VERBOSITY > 4 {\n            VERBOSITY = 4;\n        }\n        if OP_MODE == 1 && SMALL_MODE && blockSize100k > 2 {\n            unsafe {blockSize100k = 2; }\n        }\n        if OP_MODE == 3 && SRC_MODE == 2 {\n            unsafe {eprintln!(\"{}: -c and -t cannot be used together.\", String::from_utf8_lossy(&PROG_NAME));}\n            // process::exit(1);\n        }\n        if SRC_MODE == 2 && NUM_FILE_NAMES == 0 {\n            SRC_MODE = 1;\n        }\n        if OP_MODE != 1 {\n            unsafe {blockSize100k = 0; }\n        }\n    }\n    // \u6839\u636e\u64cd\u4f5c\u6a21\u5f0f\u6267\u884c\u76f8\u5e94\u7684\u64cd\u4f5c\n    unsafe {\n        // println!(\"OP_MODE: {}\", OP_MODE);\n        // println!(\"SRC_MODE: {}\", SRC_MODE);\n        match OP_MODE {\n            1 => {\n                if SRC_MODE == 1 {\n                    compress(None)?;\n                } else {\n                    decode = true;\n                    process_cells(&arg_list, &mut decode);\n                }\n            },\n            2 => {\n                UNZ_FAILS_EXIST = false;\n                if SRC_MODE == 1 {\n                    uncompress(None);\n                } else {\n                    decode = true;\n                    for cell in &arg_list {\n                        if let Some(name) = &cell.name {\n                            if name.as_str() == \"--\"  {\n                                decode = false;\n                                continue;\n                            }\n                            if name.starts_with('-') && decode {\n                                continue;\n                            }\n                            unsafe {NUM_FILE_NAMES += 1;}\n                            uncompress(Some(name));\n                        }\n                    }\n                }\n                if UNZ_FAILS_EXIST {\n                    set_exit(2);\n                    // process::exit(EXIT_VALUE);\n                }\n            },\n            _ => {\n                // \u5904\u7406\u6d4b\u8bd5\u6a21\u5f0f\n                // ...\n            },\n        }\n    }\n\n    // println!(\"121_main_\u6240\u6709\u547d\u4ee4\u884c\u53c2\u6570\u5904\u7406\u5b8c\u6210\");\n    Ok(())\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_main() {\n        // \u6a21\u62df\u547d\u4ee4\u884c\u53c2\u6570\n        let simulated_args = vec![\n            String::from(\"./bzip2\"),\n            String::from(\"-k\"),\n            String::from(\"/root/crown-rust/bzip2_rs_gpt/11Nov.txt\"),\n            // String::from(\"/root/crown-rust/bzip2_rs_gpt/sample1.ref\"),\n            // String::from(\"/root/crown-rust/bzip2_rs_gpt/abc.txt\"),\n        ];\n            // String::from(\"-1\"),\n            // String::from(\"< sample1.ref\"),\n            // String::from(\"> s"}, {"type": "attribute_item", "children": [{"type": "#", "children": [], "start_byte": 14424, "end_byte": 14425, "start_point": [380, 0], "end_point": [380, 1], "text": "p"}, {"type": "[", "children": [], "start_byte": 14425, "end_byte": 14426, "start_point": [380, 1], "end_point": [380, 2], "text": "l"}, {"type": "attribute", "children": [{"type": "identifier", "children": [], "start_byte": 14426, "end_byte": 14429, "start_point": [380, 2], "end_point": [380, 5], "text": "e1m"}, {"type": "token_tree", "children": [{"type": "(", "children": [], "start_byte": 14429, "end_byte": 14430, "start_point": [380, 5], "end_point": [380, 6], "text": "a"}, {"type": "identifier", "children": [], "start_byte": 14430, "end_byte": 14434, "start_point": [380, 6], "end_point": [380, 10], "text": "o.rb"}, {"type": ")", "children": [], "start_byte": 14434, "end_byte": 14435, "start_point": [380, 10], "end_point": [380, 11], "text": "2"}], "start_byte": 14429, "end_byte": 14435, "start_point": [380, 5], "end_point": [380, 11], "text": "ao.rb2"}], "start_byte": 14426, "end_byte": 14435, "start_point": [380, 2], "end_point": [380, 11], "text": "e1mao.rb2"}, {"type": "]", "children": [], "start_byte": 14435, "end_byte": 14436, "start_point": [380, 11], "end_point": [380, 12], "text": "\""}], "start_byte": 14424, "end_byte": 14436, "start_point": [380, 0], "end_point": [380, 12], "text": "ple1mao.rb2\""}, {"type": "mod_item", "children": [{"type": "mod", "children": [], "start_byte": 14437, "end_byte": 14440, "start_point": [381, 0], "end_point": [381, 3], "text": ",\n "}, {"type": "identifier", "children": [], "start_byte": 14441, "end_byte": 14446, "start_point": [381, 4], "end_point": [381, 9], "text": " \n\n  "}, {"type": "declaration_list", "children": [{"type": "{", "children": [], "start_byte": 14447, "end_byte": 14448, "start_point": [381, 10], "end_point": [381, 11], "text": " "}, {"type": "use_declaration", "children": [{"type": "use", "children": [], "start_byte": 14453, "end_byte": 14456, "start_point": [382, 4], "end_point": [382, 7], "text": "/ \u8c03"}, {"type": "use_wildcard", "children": [{"type": "super", "children": [], "start_byte": 14457, "end_byte": 14462, "start_point": [382, 8], "end_point": [382, 13], "text": " main"}, {"type": "::", "children": [], "start_byte": 14462, "end_byte": 14464, "start_point": [382, 13], "end_point": [382, 15], "text": " \u51fd"}, {"type": "*", "children": [], "start_byte": 14464, "end_byte": 14465, "start_point": [382, 15], "end_point": [382, 16], "text": "\u6570"}], "start_byte": 14457, "end_byte": 14465, "start_point": [382, 8], "end_point": [382, 16], "text": " main \u51fd\u6570"}, {"type": ";", "children": [], "start_byte": 14465, "end_byte": 14466, "start_point": [382, 16], "end_point": [382, 17], "text": "\n"}], "start_byte": 14453, "end_byte": 14466, "start_point": [382, 4], "end_point": [382, 17], "text": "/ \u8c03\u7528 main \u51fd\u6570\n"}, {"type": "attribute_item", "children": [{"type": "#", "children": [], "start_byte": 14472, "end_byte": 14473, "start_point": [384, 4], "end_point": [384, 5], "text": " "}, {"type": "[", "children": [], "start_byte": 14473, "end_byte": 14474, "start_point": [384, 5], "end_point": [384, 6], "text": " "}, {"type": "attribute", "children": [{"type": "identifier", "children": [], "start_byte": 14474, "end_byte": 14478, "start_point": [384, 6], "end_point": [384, 10], "text": "let "}], "start_byte": 14474, "end_byte": 14478, "start_point": [384, 6], "end_point": [384, 10], "text": "let "}, {"type": "]", "children": [], "start_byte": 14478, "end_byte": 14479, "start_point": [384, 10], "end_point": [384, 11], "text": "r"}], "start_byte": 14472, "end_byte": 14479, "start_point": [384, 4], "end_point": [384, 11], "text": "  let r"}, {"type": "function_item", "children": [{"type": "fn", "children": [], "start_byte": 14484, "end_byte": 14486, "start_point": [385, 4], "end_point": [385, 6], "text": " ="}, {"type": "identifier", "children": [], "start_byte": 14487, "end_byte": 14496, "start_point": [385, 7], "end_point": [385, 16], "text": "main(&sim"}, {"type": "parameters", "children": [{"type": "(", "children": [], "start_byte": 14496, "end_byte": 14497, "start_point": [385, 16], "end_point": [385, 17], "text": "u"}, {"type": ")", "children": [], "start_byte": 14497, "end_byte": 14498, "start_point": [385, 17], "end_point": [385, 18], "text": "l"}], "start_byte": 14496, "end_byte": 14498, "start_point": [385, 16], "end_point": [385, 18], "text": "ul"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 14499, "end_byte": 14500, "start_point": [385, 19], "end_point": [385, 20], "text": "t"}, {"type": "line_comment", "children": [], "start_byte": 14509, "end_byte": 14533, "start_point": [386, 8], "end_point": [386, 32], "text": "simulated_args.clone());"}, {"type": "let_declaration", "children": [{"type": "let", "children": [], "start_byte": 14542, "end_byte": 14545, "start_point": [387, 8], "end_point": [387, 11], "text": "// "}, {"type": "identifier", "children": [], "start_byte": 14546, "end_byte": 14560, "start_point": [387, 12], "end_point": [387, 26], "text": "ssert!(result."}, {"type": "=", "children": [], "start_byte": 14561, "end_byte": 14562, "start_point": [387, 27], "end_point": [387, 28], "text": "s"}, {"type": "macro_invocation", "children": [{"type": "identifier", "children": [], "start_byte": 14563, "end_byte": 14566, "start_point": [387, 29], "end_point": [387, 32], "text": "ok("}, {"type": "!", "children": [], "start_byte": 14566, "end_byte": 14567, "start_point": [387, 32], "end_point": [387, 33], "text": ")"}, {"type": "token_tree", "children": [{"type": "[", "children": [], "start_byte": 14567, "end_byte": 14568, "start_point": [387, 33], "end_point": [387, 34], "text": ")"}, {"type": "identifier", "children": [], "start_byte": 14581, "end_byte": 14587, "start_point": [388, 12], "end_point": [388, 18], "text": ""}, {"type": "identifier", "children": [], "start_byte": 14589, "end_byte": 14593, "start_point": [388, 20], "end_point": [388, 24], "text": ""}, {"type": "token_tree", "children": [{"type": "(", "children": [], "start_byte": 14593, "end_byte": 14594, "start_point": [388, 24], "end_point": [388, 25], "text": ""}, {"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 14594, "end_byte": 14595, "start_point": [388, 25], "end_point": [388, 26], "text": ""}, {"type": "\"", "children": [], "start_byte": 14602, "end_byte": 14603, "start_point": [388, 33], "end_point": [388, 34], "text": ""}], "start_byte": 14594, "end_byte": 14603, "start_point": [388, 25], "end_point": [388, 34], "text": ""}, {"type": ")", "children": [], "start_byte": 14603, "end_byte": 14604, "start_point": [388, 34], "end_point": [388, 35], "text": ""}], "start_byte": 14593, "end_byte": 14604, "start_point": [388, 24], "end_point": [388, 35], "text": ""}, {"type": "identifier", "children": [], "start_byte": 14618, "end_byte": 14624, "start_point": [389, 12], "end_point": [389, 18], "text": ""}, {"type": "identifier", "children": [], "start_byte": 14626, "end_byte": 14630, "start_point": [389, 20], "end_point": [389, 24], "text": ""}, {"type": "token_tree", "children": [{"type": "(", "children": [], "start_byte": 14630, "end_byte": 14631, "start_point": [389, 24], "end_point": [389, 25], "text": ""}, {"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 14631, "end_byte": 14632, "start_point": [389, 25], "end_point": [389, 26], "text": ""}, {"type": "\"", "children": [], "start_byte": 14634, "end_byte": 14635, "start_point": [389, 28], "end_point": [389, 29], "text": ""}], "start_byte": 14631, "end_byte": 14635, "start_point": [389, 25], "end_point": [389, 29], "text": ""}, {"type": ")", "children": [], "start_byte": 14635, "end_byte": 14636, "start_point": [389, 29], "end_point": [389, 30], "text": ""}], "start_byte": 14630, "end_byte": 14636, "start_point": [389, 24], "end_point": [389, 30], "text": ""}, {"type": "identifier", "children": [], "start_byte": 14650, "end_byte": 14656, "start_point": [390, 12], "end_point": [390, 18], "text": ""}, {"type": "identifier", "children": [], "start_byte": 14658, "end_byte": 14662, "start_point": [390, 20], "end_point": [390, 24], "text": ""}, {"type": "token_tree", "children": [{"type": "(", "children": [], "start_byte": 14662, "end_byte": 14663, "start_point": [390, 24], "end_point": [390, 25], "text": ""}, {"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 14663, "end_byte": 14664, "start_point": [390, 25], "end_point": [390, 26], "text": ""}, {"type": "\"", "children": [], "start_byte": 14703, "end_byte": 14704, "start_point": [390, 65], "end_point": [390, 66], "text": ""}], "start_byte": 14663, "end_byte": 14704, "start_point": [390, 25], "end_point": [390, 66], "text": ""}, {"type": ")", "children": [], "start_byte": 14704, "end_byte": 14705, "start_point": [390, 66], "end_point": [390, 67], "text": ""}], "start_byte": 14662, "end_byte": 14705, "start_point": [390, 24], "end_point": [390, 67], "text": ""}, {"type": "line_comment", "children": [], "start_byte": 14719, "end_byte": 14780, "start_point": [391, 12], "end_point": [391, 73], "text": ""}, {"type": "line_comment", "children": [], "start_byte": 14793, "end_byte": 14850, "start_point": [392, 12], "end_point": [392, 69], "text": ""}, {"type": "]", "children": [], "start_byte": 14859, "end_byte": 14860, "start_point": [393, 8], "end_point": [393, 9], "text": ""}], "start_byte": 14567, "end_byte": 14860, "start_point": [387, 33], "end_point": [393, 9], "text": ");\n    }\n}"}], "start_byte": 14563, "end_byte": 14860, "start_point": [387, 29], "end_point": [393, 9], "text": "ok());\n    }\n}"}, {"type": ";", "children": [], "start_byte": 14860, "end_byte": 14861, "start_point": [393, 9], "end_point": [393, 10], "text": ""}], "start_byte": 14542, "end_byte": 14861, "start_point": [387, 8], "end_point": [393, 10], "text": "// assert!(result.is_ok());\n    }\n}"}, {"type": "line_comment", "children": [], "start_byte": 14874, "end_byte": 14896, "start_point": [394, 12], "end_point": [394, 34], "text": ""}, {"type": "line_comment", "children": [], "start_byte": 14909, "end_byte": 14942, "start_point": [395, 12], "end_point": [395, 45], "text": ""}, {"type": "line_comment", "children": [], "start_byte": 14955, "end_byte": 14991, "start_point": [396, 12], "end_point": [396, 48], "text": ""}, {"type": "line_comment", "children": [], "start_byte": 15005, "end_byte": 15026, "start_point": [399, 8], "end_point": [399, 29], "text": ""}, {"type": "let_declaration", "children": [{"type": "let", "children": [], "start_byte": 15035, "end_byte": 15038, "start_point": [400, 8], "end_point": [400, 11], "text": ""}, {"type": "identifier", "children": [], "start_byte": 15039, "end_byte": 15045, "start_point": [400, 12], "end_point": [400, 18], "text": ""}, {"type": "=", "children": [], "start_byte": 15046, "end_byte": 15047, "start_point": [400, 19], "end_point": [400, 20], "text": ""}, {"type": "call_expression", "children": [{"type": "identifier", "children": [], "start_byte": 15048, "end_byte": 15052, "start_point": [400, 21], "end_point": [400, 25], "text": ""}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 15052, "end_byte": 15053, "start_point": [400, 25], "end_point": [400, 26], "text": ""}, {"type": "reference_expression", "children": [{"type": "&", "children": [], "start_byte": 15053, "end_byte": 15054, "start_point": [400, 26], "end_point": [400, 27], "text": ""}, {"type": "identifier", "children": [], "start_byte": 15054, "end_byte": 15068, "start_point": [400, 27], "end_point": [400, 41], "text": ""}], "start_byte": 15053, "end_byte": 15068, "start_point": [400, 26], "end_point": [400, 41], "text": ""}, {"type": ",", "children": [], "start_byte": 15068, "end_byte": 15069, "start_point": [400, 41], "end_point": [400, 42], "text": ""}, {"type": "reference_expression", "children": [{"type": "&", "children": [], "start_byte": 15069, "end_byte": 15070, "start_point": [400, 42], "end_point": [400, 43], "text": ""}, {"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 15070, "end_byte": 15084, "start_point": [400, 43], "end_point": [400, 57], "text": ""}, {"type": ".", "children": [], "start_byte": 15084, "end_byte": 15085, "start_point": [400, 57], "end_point": [400, 58], "text": ""}, {"type": "field_identifier", "children": [], "start_byte": 15085, "end_byte": 15090, "start_point": [400, 58], "end_point": [400, 63], "text": ""}], "start_byte": 15070, "end_byte": 15090, "start_point": [400, 43], "end_point": [400, 63], "text": ""}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 15090, "end_byte": 15091, "start_point": [400, 63], "end_point": [400, 64], "text": ""}, {"type": ")", "children": [], "start_byte": 15091, "end_byte": 15092, "start_point": [400, 64], "end_point": [400, 65], "text": ""}], "start_byte": 15090, "end_byte": 15092, "start_point": [400, 63], "end_point": [400, 65], "text": ""}], "start_byte": 15070, "end_byte": 15092, "start_point": [400, 43], "end_point": [400, 65], "text": ""}], "start_byte": 15069, "end_byte": 15092, "start_point": [400, 42], "end_point": [400, 65], "text": ""}, {"type": ")", "children": [], "start_byte": 15092, "end_byte": 15093, "start_point": [400, 65], "end_point": [400, 66], "text": ""}], "start_byte": 15052, "end_byte": 15093, "start_point": [400, 25], "end_point": [400, 66], "text": ""}], "start_byte": 15048, "end_byte": 15093, "start_point": [400, 21], "end_point": [400, 66], "text": ""}, {"type": ";", "children": [], "start_byte": 15093, "end_byte": 15094, "start_point": [400, 66], "end_point": [400, 67], "text": ""}], "start_byte": 15035, "end_byte": 15094, "start_point": [400, 8], "end_point": [400, 67], "text": ""}, {"type": "line_comment", "children": [], "start_byte": 15103, "end_byte": 15130, "start_point": [401, 8], "end_point": [401, 35], "text": ""}, {"type": "}", "children": [], "start_byte": 15135, "end_byte": 15136, "start_point": [402, 4], "end_point": [402, 5], "text": ""}], "start_byte": 14499, "end_byte": 15136, "start_point": [385, 19], "end_point": [402, 5], "text": "ted_args,&simulated_args.clone());\n        // assert!(result.is_ok());\n    }\n}"}], "start_byte": 14484, "end_byte": 15136, "start_point": [385, 4], "end_point": [402, 5], "text": " = main(&simulated_args,&simulated_args.clone());\n        // assert!(result.is_ok());\n    }\n}"}, {"type": "}", "children": [], "start_byte": 15137, "end_byte": 15138, "start_point": [403, 0], "end_point": [403, 1], "text": ""}], "start_byte": 14447, "end_byte": 15138, "start_point": [381, 10], "end_point": [403, 1], "text": "     // \u8c03\u7528 main \u51fd\u6570\n        let result = main(&simulated_args,&simulated_args.clone());\n        // assert!(result.is_ok());\n    }\n}"}], "start_byte": 14437, "end_byte": 15138, "start_point": [381, 0], "end_point": [403, 1], "text": ",\n   \n\n        // \u8c03\u7528 main \u51fd\u6570\n        let result = main(&simulated_args,&simulated_args.clone());\n        // assert!(result.is_ok());\n    }\n}"}], "start_byte": 0, "end_byte": 15138, "start_point": [0, 0], "end_point": [403, 1], "text": "use crate::bzip2::scc_119_compress::SRC_MODE;\nuse crate::global_vars::bzip2_c5::OP_MODE;\nuse crate::bzip2::scc_78_usage::*;\nuse crate::bzip2::scc_118_uncompress::*;\n// use crate::bzip2::scc_120_root_57_signal::*;\n// use crate::bzip2::scc_105_copyFileName::*;\n// use crate::bzip2recover::scc_115_root_56_strcmp::*;\n// use crate::bzip2recover::scc_114_root_55_strstr::*;\n// use crate::bzip2::scc_79_license::*;\n// use crate::bzip2::scc_78_usage::*;\n// use crate::bzip2::scc_113_root_54_redundant::*;\n// use crate::bzip2recover::scc_112_root_53_strncmp::*;\n// use crate::bzip2recover::scc_121_main::*;\n// use crate::bzip2::scc_110_compressStream::*;\n// use crate::bzip2::scc_109_uncompressStream::*;\n// use crate::bzlib::scc_86_root_49_fopen::*;\n// use crate::bzip2recover::scc_8_bsOpenReadStream::*;\n// use crate::bzip2recover::scc_5_bsGetBit::*;\n// use crate::bzip2recover::scc_85_root_48_tooManyBlocks::*;\n// use crate::bzip2recover::scc_2_bsPutBit::*;\n// use crate::bzip2recover::scc_84_root_47_strrchr::*;\n// use crate::bzip2recover::scc_82_root_45_strcat::*;\n// use crate::bzip2recover::scc_81_root_44_endsInBz2::*;\n// use crate::bzip2::scc_103_addFlagsFromEnvVar::*;\n// use crate::bzip2::scc_116_hasSuffix::*;\n// use crate::bzip2::scc_90_root_52_setExit::*;\n// use crate::bzip2recover::scc_89_root_51_strncpy::*;\n// use crate::compress::scc_73_BZ2_compressBlock::*;\n// use crate::bzip2recover::scc_35_bsPutUChar::*;\n// use crate::bzip2recover::scc_34_bsPutUInt32::*;\n// use crate::bzip2::scc_108_testStream::*;\n// use crate::bzip2::scc_106_mySIGSEGVorSIGBUScatcher::*;\n// use crate::bzip2recover::scc_83_root_46_sprintf::*;\n// use crate::bzip2::scc_87_fileExists::*;\n// use crate::bzip2::scc_91_cleanUpAndFail::*;\n// use crate::global_vars::bzip2_c2::{bEnd, bStart, inFileName, outFileName, progName, rbEnd, rbStart, FILE, BitStream};\nuse crate::global_vars::bzip2_c1::*;\nuse crate::global_vars::bzip2_c2::*;\nuse crate::global_vars::bzip2_c5::*;\nuse std::{env, process, io};\nuse crate::bzip2::scc_101_mkCell_102_snoc_string_103_add_flags_from_env_var::*;\nuse crate::bzip2::scc_113_root_54_redundant::*;\nuse crate::bzip2::scc_79_license::*;\nuse crate::bzip2::scc_119_compress::*;\nuse crate::bzip2::scc_90_root_52_setExit::*;\nuse crate::global_vars::conversion::*;\nuse std::path::Path;\n\nfn process_link_list(cell_option: &mut Option<Box<Cell>>, decode: &mut bool) {\n    if let Some(cell) = cell_option {\n        if let Some(ref name) = cell.name {\n            if name.as_str() == \"--\" {\n                *decode = false;\n                return;\n            } else if name.starts_with('-') && *decode {\n                // \u5982\u679c\u53c2\u6570\u4ee5 '-' \u5f00\u5934\uff0c\u5e76\u4e14 continue_evaluation \u4e3a true\n                // \u5219\u8df3\u8fc7\u6b64\u8282\u70b9\u7684\u5904\u7406\n                // println!(\"\u8df3\u8fc7\u53c2\u6570: {}\", name);  // \u793a\u4f8b: \u6253\u5370\u4fe1\u606f\n                // ... \u5176\u4ed6\u8df3\u8fc7\u8282\u70b9\u65f6\u7684\u5904\u7406\u903b\u8f91 ...\n            } else {\n                unsafe {\n                    NUM_FILE_NAMES += 1;\n                    LONGEST_FILE_NAME = LONGEST_FILE_NAME.max(name.len() as i32);\n                }\n            }\n        }\n\n        // \u9012\u5f52\u8c03\u7528\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9\n        if cell.link.is_some() {\n            process_link_list(&mut cell.link, decode);\n        }\n    }\n}\n\nfn process_cells(cell: &Option<Box<Cell>>, decode: &mut bool) {\n    if let Some(cell) = cell {\n        if let Some(name) = &cell.name {\n            if name.as_str() == \"--\" {\n                *decode = false;\n                return;\n            }\n            if name.starts_with('-') && *decode {\n                // \u9012\u5f52\u8c03\u7528\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9\n                process_cells(&cell.link, decode);\n                return;\n            }\n            unsafe { NUM_FILES_PROCESSED += 1; }\n            // println!(\"cell.name: {}\", name);\n            if let Err(e) = compress(Some(name)) {\n                eprintln!(\"\u538b\u7f29\u8fc7\u7a0b\u4e2d\u51fa\u9519: {}\", e);\n            }\n        }\n        // \u9012\u5f52\u8c03\u7528\u5904\u7406\u4e0b\u4e00\u4e2a\u8282\u70b9\n        process_cells(&cell.link, decode);\n    }\n}\n\n\n\npub fn main(argv: &[String], gou: &[String])  -> Result<(), io::Error> {\n    // let argv: Vec<String> = env::args().collect();\n    let argv = argv;\n    let argc = gou.len() as i32;\n    let mut decode: bool;\n    // \u521d\u59cb\u5316\u53d8\u91cf\n    unsafe{\n        SMALL_MODE = false;\n        KEEP_INPUT_FILES = false;\n        FORCE_OVERWRITE = false;\n        NOISY = true;\n        verbosity = 0;\n        blockSize100k = 9;\n        TEST_FAILS_EXIST = false;\n        UNZ_FAILS_EXIST = false;\n        NUM_FILE_NAMES = 0;\n        NUM_FILES_PROCESSED = 0;\n        workFactor = 30;\n        DELETE_OUTPUT_ON_INTERRUPT = false;\n        EXIT_VALUE = 0;\n        OP_MODE = 1;\n        LONGEST_FILE_NAME = 7;\n        \n    }\n\n    let mut i = 0;\n    let mut j = 0;\n\n    decode = true;\n\n    // let mut in_name = String::from(\"(none)\");\n    // let mut out_name = String::from(\"(none)\");\n    // let mut prog_name_really = argv[0].clone();\n    // let prog_name = &prog_name_really;\n\n    // \u786e\u4fdd\u7c7b\u578b\u5927\u5c0f\u6b63\u786e\n    // // println!(\"121_main_\u68c0\u67e5\u6570\u636e\u7c7b\u578b\u5927\u5c0f\");\n    // if std::mem::size_of::<i32>() != 4 || std::mem::size_of::<u16>() != 2 || std::mem::size_of::<char>() != 1 {\n    //     // println!(\"121_main_\u6570\u636e\u7c7b\u578b\u5927\u5c0f\u9519\u8bef\");\n    //     config_error();\n    //     return Err(io::Error::new(io::ErrorKind::Other, \"\u914d\u7f6e\u9519\u8bef\"));\n    // }\n\n\n    unsafe {\n        let prog_name_str = env::args().nth(0).unwrap_or_else(|| String::from(\"(unknown)\"));\n        PROG_NAME_REALLY = string_to_u8_array_1034(prog_name_str.clone());\n        let p_str = Path::new(&prog_name_str)\n            .file_name()\n            .unwrap()\n            .to_str()\n            .unwrap();\n        PROG_NAME = string_to_u8_array_2000(p_str.to_string());\n    }\n\n    // \u5904\u7406\u547d\u4ee4\u884c\u53c2\u6570\n    // println!(\"121_main_\u5f00\u59cb\u5904\u7406\u547d\u4ee4\u884c\u53c2\u6570\");\n    let mut arg_list = Some(Box::new(Cell::mk_cell()));\n    Cell::add_flags_from_env_var(&mut arg_list, \"BZIP2\");\n    // println!(\"121_main_\u6dfb\u52a0\u73af\u5883\u53d8\u91cf BZIP2\");\n\n    Cell::add_flags_from_env_var(&mut arg_list, \"BZIP\");\n    // println!(\"121_main_\u6dfb\u52a0\u73af\u5883\u53d8\u91cf BZIP\");\n\n    for arg in argv.iter().skip(1) {\n        // println!(\"121_main_\u5904\u7406\u53c2\u6570: {}\", arg);\n        arg_list = Some(Box::new(arg_list.take().unwrap_or_else(|| Box::new(Cell::mk_cell())).snoc_string(arg)));\n    }\n\n    // println!(\"After doing with arg_list\");\n    if let Some(ref cell) = arg_list {\n        cell.printLinkLists();\n    }\n    // \u4e0b\u9762\u8fdb\u5165arg_list\u7684\u4f7f\u7528\n\n    // let mut arg_list = Vec::new();\n    // add_flags_from_env_var(&mut arg_list, \"BZIP2\");\n    // add_flags_from_env_var(&mut arg_list, \"BZIP\");\n    // arg_list.extend(env::args().skip(1));\n    unsafe {\n        LONGEST_FILE_NAME = 7;\n        NUM_FILE_NAMES = 0;\n    }\n    decode = true;\n    // \u9012\u5f52\u904d\u5386 \ud83d\udd25\n    process_link_list(&mut arg_list, &mut decode);\n    // for aa in &arg_list {\n    //      // \u89e3\u5f15\u7528 `Box<String>` \u4ee5\u83b7\u53d6 `String` \u7684\u5f15\u7528\n    //     if let Some(ref name) = aa.name {\n    //         if name.as_str() == \"--\" {\n    //             decode = false;\n    //             continue;\n    //         }\n    //         if name.starts_with('-') && decode {\n    //             continue;\n    //         }\n    //         unsafe {\n    //             NUM_FILE_NAMES += 1;\n    //             LONGEST_FILE_NAME = LONGEST_FILE_NAME.max(name.len() as i32);\n    //         }\n    //     }\n    // }\n\n    unsafe {SRC_MODE = if NUM_FILE_NAMES == 0 { 1 } else { 3 };}\n    unsafe {OP_MODE = 1;}\n    unsafe {\n        let mut prog_name_str = u8_array_to_string(&PROG_NAME);\n        if prog_name_str.contains(\"unzip\") || prog_name_str.contains(\"UNZIP\") {\n            OP_MODE = 2;\n        }\n        if prog_name_str.contains(\"z2cat\") || prog_name_str.contains(\"Z2CAT\") || prog_name_str.contains(\"zcat\") || prog_name_str.contains(\"ZCAT\") {\n            OP_MODE = 2;\n        }\n    }\n\n\n    // \u904d\u5386arg_list\u5904\u7406\u6bcf\u4e2a\u547d\u4ee4\u884c\u53c2\u6570\n    let mut aa = &arg_list;\n    while let Some(cell) = aa {\n        if let Some(name) = &cell.name {\n            if name.as_str() == \"--\"  {\n                break;\n            }\n\n            if name.starts_with('-') && !name.starts_with(\"--\") {\n                for ch in name.chars().skip(1) {\n                    match ch {\n                        'c' => unsafe { SRC_MODE = 2; },\n                        'd' => unsafe { OP_MODE = 2; },\n                        'z' => unsafe { OP_MODE = 1; },\n                        'f' => unsafe { FORCE_OVERWRITE = true; },\n                        't' => unsafe { OP_MODE = 3; },\n                        'k' => unsafe { KEEP_INPUT_FILES = true; },\n                        's' => unsafe { SMALL_MODE = true; },\n                        'q' => unsafe { NOISY = false; },\n                        '1' => unsafe { blockSize100k = 1; },\n                        '2' => unsafe { blockSize100k = 2; },\n                        '3' => unsafe { blockSize100k = 3; },\n                        '4' => unsafe { blockSize100k = 4; },\n                        '5' => unsafe { blockSize100k = 5; },\n                        '6' => unsafe { blockSize100k = 6; },\n                        '7' => unsafe { blockSize100k = 7; },\n                        '8' => unsafe { blockSize100k = 8; },\n                        '9' => unsafe { blockSize100k = 9; },\n                        // ...\u5904\u7406\u5176\u4ed6\u5b57\u7b26...\n                        'L' => unsafe { license(); },\n                        'v' => unsafe { VERBOSITY += 1; },\n                        'h' => {\n                            unsafe{\n                                let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                                usage(prog_name_str);\n                            }\n                            // process::exit(0);\n                        },\n                        _ => {\n                            unsafe {\n                            eprintln!(\"\u7b2c\u4e00match {}: Bad flag `{}`\", String::from_utf8_lossy(&PROG_NAME), name);\n                            let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                                usage(prog_name_str);\n                            }\n                            // process::exit(1);\n                        }\n                    }\n                }\n            }\n        }\n        aa = &cell.link;\n    }\n\n\n    // \u904d\u5386arg_list\u5904\u7406\u6bcf\u4e2a\u957f\u683c\u5f0f\u547d\u4ee4\u884c\u53c2\u6570\n    let mut aa = &arg_list;\n    while let Some(cell) = aa {\n        if let Some(name) = &cell.name {\n            match name.as_str() {\n                \"--\" => break,\n                \"--stdout\" => unsafe { SRC_MODE = 2; },\n                \"--decompress\" => unsafe { OP_MODE = 2; },\n                \"--compress\" => unsafe { OP_MODE = 1; },\n                \"--force\" => unsafe { FORCE_OVERWRITE = true; },\n                \"--test\" => unsafe { OP_MODE = 3; },\n                \"--keep\" => unsafe { KEEP_INPUT_FILES = true; },\n                \"--small\" => unsafe { SMALL_MODE = true; },\n                \"--quiet\" => unsafe { NOISY = false; },\n                \"--version\" | \"--license\" => license(),\n                \"--exponential\" => unsafe { WORK_FACTOR = 1; },\n                \"--repetitive-best\" | \"--repetitive-fast\" => redundant(&name.as_bytes()),\n                \"--fast\" => unsafe { blockSize100k = 1; },\n                \"--best\" => unsafe { blockSize100k = 9; },\n                \"--verbose\" => unsafe { VERBOSITY += 1; },\n                \"--help\" => {\n                    unsafe{\n                        let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                        usage(prog_name_str);\n                    }\n                    // process::exit(0);\n                },\n                _ if name.starts_with(\"--\") => {\n                    unsafe{ \n                        eprintln!(\"\u7b2c\u4e8cmatch {}: Bad flag `{}`\", String::from_utf8_lossy(&PROG_NAME), name);\n                        let prog_name_str = std::str::from_utf8(&PROG_NAME).expect(\"PROG_NAME \u4e0d\u662f\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u4e32\");\n                        usage(prog_name_str);\n                    }\n                    // process::exit(0);\n                },\n                _ => {}\n            }\n        }\n        aa = &cell.link;\n    }\n\n\n\n    // \u8bbe\u7f6everbosity\u9650\u5236\n    unsafe {\n        if VERBOSITY > 4 {\n            VERBOSITY = 4;\n        }\n        if OP_MODE == 1 && SMALL_MODE && blockSize100k > 2 {\n            unsafe {blockSize100k = 2; }\n        }\n        if OP_MODE == 3 && SRC_MODE == 2 {\n            unsafe {eprintln!(\"{}: -c and -t cannot be used together.\", String::from_utf8_lossy(&PROG_NAME));}\n            // process::exit(1);\n        }\n        if SRC_MODE == 2 && NUM_FILE_NAMES == 0 {\n            SRC_MODE = 1;\n        }\n        if OP_MODE != 1 {\n            unsafe {blockSize100k = 0; }\n        }\n    }\n    // \u6839\u636e\u64cd\u4f5c\u6a21\u5f0f\u6267\u884c\u76f8\u5e94\u7684\u64cd\u4f5c\n    unsafe {\n        // println!(\"OP_MODE: {}\", OP_MODE);\n        // println!(\"SRC_MODE: {}\", SRC_MODE);\n        match OP_MODE {\n            1 => {\n                if SRC_MODE == 1 {\n                    compress(None)?;\n                } else {\n                    decode = true;\n                    process_cells(&arg_list, &mut decode);\n                }\n            },\n            2 => {\n                UNZ_FAILS_EXIST = false;\n                if SRC_MODE == 1 {\n                    uncompress(None);\n                } else {\n                    decode = true;\n                    for cell in &arg_list {\n                        if let Some(name) = &cell.name {\n                            if name.as_str() == \"--\"  {\n                                decode = false;\n                                continue;\n                            }\n                            if name.starts_with('-') && decode {\n                                continue;\n                            }\n                            unsafe {NUM_FILE_NAMES += 1;}\n                            uncompress(Some(name));\n                        }\n                    }\n                }\n                if UNZ_FAILS_EXIST {\n                    set_exit(2);\n                    // process::exit(EXIT_VALUE);\n                }\n            },\n            _ => {\n                // \u5904\u7406\u6d4b\u8bd5\u6a21\u5f0f\n                // ...\n            },\n        }\n    }\n\n    // println!(\"121_main_\u6240\u6709\u547d\u4ee4\u884c\u53c2\u6570\u5904\u7406\u5b8c\u6210\");\n    Ok(())\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_main() {\n        // \u6a21\u62df\u547d\u4ee4\u884c\u53c2\u6570\n        let simulated_args = vec![\n            String::from(\"./bzip2\"),\n            String::from(\"-k\"),\n            String::from(\"/root/crown-rust/bzip2_rs_gpt/11Nov.txt\"),\n            // String::from(\"/root/crown-rust/bzip2_rs_gpt/sample1.ref\"),\n            // String::from(\"/root/crown-rust/bzip2_rs_gpt/abc.txt\"),\n        ];\n            // String::from(\"-1\"),\n            // String::from(\"< sample1.ref\"),\n            // String::from(\"> sample1mao.rb2\"),\n   \n\n        // \u8c03\u7528 main \u51fd\u6570\n        let result = main(&simulated_args,&simulated_args.clone());\n        // assert!(result.is_ok());\n    }\n}"}