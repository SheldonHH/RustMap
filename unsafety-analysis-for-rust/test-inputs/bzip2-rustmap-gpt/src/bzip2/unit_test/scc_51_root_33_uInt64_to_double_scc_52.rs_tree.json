{"type": "source_file", "children": [{"type": "use_declaration", "children": [{"type": "use", "children": [], "start_byte": 0, "end_byte": 3, "start_point": [0, 0], "end_point": [0, 3], "text": "use"}, {"type": "use_wildcard", "children": [{"type": "scoped_identifier", "children": [{"type": "scoped_identifier", "children": [{"type": "crate", "children": [], "start_byte": 4, "end_byte": 9, "start_point": [0, 4], "end_point": [0, 9], "text": "crate"}, {"type": "::", "children": [], "start_byte": 9, "end_byte": 11, "start_point": [0, 9], "end_point": [0, 11], "text": "::"}, {"type": "identifier", "children": [], "start_byte": 11, "end_byte": 22, "start_point": [0, 11], "end_point": [0, 22], "text": "global_vars"}], "start_byte": 4, "end_byte": 22, "start_point": [0, 4], "end_point": [0, 22], "text": "crate::global_vars"}, {"type": "::", "children": [], "start_byte": 22, "end_byte": 24, "start_point": [0, 22], "end_point": [0, 24], "text": "::"}, {"type": "identifier", "children": [], "start_byte": 24, "end_byte": 32, "start_point": [0, 24], "end_point": [0, 32], "text": "bzip2_c1"}], "start_byte": 4, "end_byte": 32, "start_point": [0, 4], "end_point": [0, 32], "text": "crate::global_vars::bzip2_c1"}, {"type": "::", "children": [], "start_byte": 32, "end_byte": 34, "start_point": [0, 32], "end_point": [0, 34], "text": "::"}, {"type": "*", "children": [], "start_byte": 34, "end_byte": 35, "start_point": [0, 34], "end_point": [0, 35], "text": "*"}], "start_byte": 4, "end_byte": 35, "start_point": [0, 4], "end_point": [0, 35], "text": "crate::global_vars::bzip2_c1::*"}, {"type": ";", "children": [], "start_byte": 35, "end_byte": 36, "start_point": [0, 35], "end_point": [0, 36], "text": ";"}], "start_byte": 0, "end_byte": 36, "start_point": [0, 0], "end_point": [0, 36], "text": "use crate::global_vars::bzip2_c1::*;"}, {"type": "attribute_item", "children": [{"type": "#", "children": [], "start_byte": 38, "end_byte": 39, "start_point": [2, 0], "end_point": [2, 1], "text": "#"}, {"type": "[", "children": [], "start_byte": 39, "end_byte": 40, "start_point": [2, 1], "end_point": [2, 2], "text": "["}, {"type": "attribute", "children": [{"type": "identifier", "children": [], "start_byte": 40, "end_byte": 43, "start_point": [2, 2], "end_point": [2, 5], "text": "cfg"}, {"type": "token_tree", "children": [{"type": "(", "children": [], "start_byte": 43, "end_byte": 44, "start_point": [2, 5], "end_point": [2, 6], "text": "("}, {"type": "identifier", "children": [], "start_byte": 44, "end_byte": 48, "start_point": [2, 6], "end_point": [2, 10], "text": "test"}, {"type": ")", "children": [], "start_byte": 48, "end_byte": 49, "start_point": [2, 10], "end_point": [2, 11], "text": ")"}], "start_byte": 43, "end_byte": 49, "start_point": [2, 5], "end_point": [2, 11], "text": "(test)"}], "start_byte": 40, "end_byte": 49, "start_point": [2, 2], "end_point": [2, 11], "text": "cfg(test)"}, {"type": "]", "children": [], "start_byte": 49, "end_byte": 50, "start_point": [2, 11], "end_point": [2, 12], "text": "]"}], "start_byte": 38, "end_byte": 50, "start_point": [2, 0], "end_point": [2, 12], "text": "#[cfg(test)]"}, {"type": "mod_item", "children": [{"type": "mod", "children": [], "start_byte": 51, "end_byte": 54, "start_point": [3, 0], "end_point": [3, 3], "text": "mod"}, {"type": "identifier", "children": [], "start_byte": 55, "end_byte": 60, "start_point": [3, 4], "end_point": [3, 9], "text": "tests"}, {"type": "declaration_list", "children": [{"type": "{", "children": [], "start_byte": 61, "end_byte": 62, "start_point": [3, 10], "end_point": [3, 11], "text": "{"}, {"type": "use_declaration", "children": [{"type": "use", "children": [], "start_byte": 67, "end_byte": 70, "start_point": [4, 4], "end_point": [4, 7], "text": "use"}, {"type": "use_wildcard", "children": [{"type": "super", "children": [], "start_byte": 71, "end_byte": 76, "start_point": [4, 8], "end_point": [4, 13], "text": "super"}, {"type": "::", "children": [], "start_byte": 76, "end_byte": 78, "start_point": [4, 13], "end_point": [4, 15], "text": "::"}, {"type": "*", "children": [], "start_byte": 78, "end_byte": 79, "start_point": [4, 15], "end_point": [4, 16], "text": "*"}], "start_byte": 71, "end_byte": 79, "start_point": [4, 8], "end_point": [4, 16], "text": "super::*"}, {"type": ";", "children": [], "start_byte": 79, "end_byte": 80, "start_point": [4, 16], "end_point": [4, 17], "text": ";"}], "start_byte": 67, "end_byte": 80, "start_point": [4, 4], "end_point": [4, 17], "text": "use super::*;"}, {"type": "attribute_item", "children": [{"type": "#", "children": [], "start_byte": 86, "end_byte": 87, "start_point": [6, 4], "end_point": [6, 5], "text": "#"}, {"type": "[", "children": [], "start_byte": 87, "end_byte": 88, "start_point": [6, 5], "end_point": [6, 6], "text": "["}, {"type": "attribute", "children": [{"type": "identifier", "children": [], "start_byte": 88, "end_byte": 92, "start_point": [6, 6], "end_point": [6, 10], "text": "test"}], "start_byte": 88, "end_byte": 92, "start_point": [6, 6], "end_point": [6, 10], "text": "test"}, {"type": "]", "children": [], "start_byte": 92, "end_byte": 93, "start_point": [6, 10], "end_point": [6, 11], "text": "]"}], "start_byte": 86, "end_byte": 93, "start_point": [6, 4], "end_point": [6, 11], "text": "#[test]"}, {"type": "function_item", "children": [{"type": "fn", "children": [], "start_byte": 98, "end_byte": 100, "start_point": [7, 4], "end_point": [7, 6], "text": "fn"}, {"type": "identifier", "children": [], "start_byte": 101, "end_byte": 122, "start_point": [7, 7], "end_point": [7, 28], "text": "test_uInt64_to_double"}, {"type": "parameters", "children": [{"type": "(", "children": [], "start_byte": 122, "end_byte": 123, "start_point": [7, 28], "end_point": [7, 29], "text": "("}, {"type": ")", "children": [], "start_byte": 123, "end_byte": 124, "start_point": [7, 29], "end_point": [7, 30], "text": ")"}], "start_byte": 122, "end_byte": 124, "start_point": [7, 28], "end_point": [7, 30], "text": "()"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 125, "end_byte": 126, "start_point": [7, 31], "end_point": [7, 32], "text": "{"}, {"type": "let_declaration", "children": [{"type": "let", "children": [], "start_byte": 135, "end_byte": 138, "start_point": [8, 8], "end_point": [8, 11], "text": "let"}, {"type": "mutable_specifier", "children": [], "start_byte": 139, "end_byte": 142, "start_point": [8, 12], "end_point": [8, 15], "text": "mut"}, {"type": "identifier", "children": [], "start_byte": 143, "end_byte": 149, "start_point": [8, 16], "end_point": [8, 22], "text": "number"}, {"type": "=", "children": [], "start_byte": 150, "end_byte": 151, "start_point": [8, 23], "end_point": [8, 24], "text": "="}, {"type": "struct_expression", "children": [{"type": "type_identifier", "children": [], "start_byte": 152, "end_byte": 158, "start_point": [8, 25], "end_point": [8, 31], "text": "UInt64"}, {"type": "field_initializer_list", "children": [{"type": "{", "children": [], "start_byte": 159, "end_byte": 160, "start_point": [8, 32], "end_point": [8, 33], "text": "{"}, {"type": "field_initializer", "children": [{"type": "field_identifier", "children": [], "start_byte": 161, "end_byte": 162, "start_point": [8, 34], "end_point": [8, 35], "text": "b"}, {"type": ":", "children": [], "start_byte": 162, "end_byte": 163, "start_point": [8, 35], "end_point": [8, 36], "text": ":"}, {"type": "array_expression", "children": [{"type": "[", "children": [], "start_byte": 164, "end_byte": 165, "start_point": [8, 37], "end_point": [8, 38], "text": "["}, {"type": "integer_literal", "children": [], "start_byte": 165, "end_byte": 166, "start_point": [8, 38], "end_point": [8, 39], "text": "0"}, {"type": ";", "children": [], "start_byte": 166, "end_byte": 167, "start_point": [8, 39], "end_point": [8, 40], "text": ";"}, {"type": "integer_literal", "children": [], "start_byte": 168, "end_byte": 169, "start_point": [8, 41], "end_point": [8, 42], "text": "8"}, {"type": "]", "children": [], "start_byte": 169, "end_byte": 170, "start_point": [8, 42], "end_point": [8, 43], "text": "]"}], "start_byte": 164, "end_byte": 170, "start_point": [8, 37], "end_point": [8, 43], "text": "[0; 8]"}], "start_byte": 161, "end_byte": 170, "start_point": [8, 34], "end_point": [8, 43], "text": "b: [0; 8]"}, {"type": "}", "children": [], "start_byte": 171, "end_byte": 172, "start_point": [8, 44], "end_point": [8, 45], "text": "}"}], "start_byte": 159, "end_byte": 172, "start_point": [8, 32], "end_point": [8, 45], "text": "{ b: [0; 8] }"}], "start_byte": 152, "end_byte": 172, "start_point": [8, 25], "end_point": [8, 45], "text": "UInt64 { b: [0; 8] }"}, {"type": ";", "children": [], "start_byte": 172, "end_byte": 173, "start_point": [8, 45], "end_point": [8, 46], "text": ";"}], "start_byte": 135, "end_byte": 173, "start_point": [8, 8], "end_point": [8, 46], "text": "let mut number = UInt64 { b: [0; 8] };"}, {"type": "line_comment", "children": [], "start_byte": 191, "end_byte": 222, "start_point": [10, 8], "end_point": [10, 39], "text": "// Test case 1: All bytes are 0"}, {"type": "expression_statement", "children": [{"type": "macro_invocation", "children": [{"type": "identifier", "children": [], "start_byte": 231, "end_byte": 237, "start_point": [11, 8], "end_point": [11, 14], "text": "assert"}, {"type": "!", "children": [], "start_byte": 237, "end_byte": 238, "start_point": [11, 14], "end_point": [11, 15], "text": "!"}, {"type": "token_tree", "children": [{"type": "(", "children": [], "start_byte": 238, "end_byte": 239, "start_point": [11, 15], "end_point": [11, 16], "text": "("}, {"type": "token_tree", "children": [{"type": "(", "children": [], "start_byte": 239, "end_byte": 240, "start_point": [11, 16], "end_point": [11, 17], "text": "("}, {"type": "identifier", "children": [], "start_byte": 240, "end_byte": 246, "start_point": [11, 17], "end_point": [11, 23], "text": "number"}, {"type": "identifier", "children": [], "start_byte": 247, "end_byte": 256, "start_point": [11, 24], "end_point": [11, 33], "text": "to_double"}, {"type": "token_tree", "children": [{"type": "(", "children": [], "start_byte": 256, "end_byte": 257, "start_point": [11, 33], "end_point": [11, 34], "text": "("}, {"type": ")", "children": [], "start_byte": 257, "end_byte": 258, "start_point": [11, 34], "end_point": [11, 35], "text": ")"}], "start_byte": 256, "end_byte": 258, "start_point": [11, 33], "end_point": [11, 35], "text": "()"}, {"type": "float_literal", "children": [], "start_byte": 261, "end_byte": 264, "start_point": [11, 38], "end_point": [11, 41], "text": "0.0"}, {"type": ")", "children": [], "start_byte": 264, "end_byte": 265, "start_point": [11, 41], "end_point": [11, 42], "text": ")"}], "start_byte": 239, "end_byte": 265, "start_point": [11, 16], "end_point": [11, 42], "text": "(number.to_double() - 0.0)"}, {"type": "identifier", "children": [], "start_byte": 266, "end_byte": 269, "start_point": [11, 43], "end_point": [11, 46], "text": "abs"}, {"type": "token_tree", "children": [{"type": "(", "children": [], "start_byte": 269, "end_byte": 270, "start_point": [11, 46], "end_point": [11, 47], "text": "("}, {"type": ")", "children": [], "start_byte": 270, "end_byte": 271, "start_point": [11, 47], "end_point": [11, 48], "text": ")"}], "start_byte": 269, "end_byte": 271, "start_point": [11, 46], "end_point": [11, 48], "text": "()"}, {"type": "float_literal", "children": [], "start_byte": 274, "end_byte": 282, "start_point": [11, 51], "end_point": [11, 59], "text": "0.000001"}, {"type": ")", "children": [], "start_byte": 282, "end_byte": 283, "start_point": [11, 59], "end_point": [11, 60], "text": ")"}], "start_byte": 238, "end_byte": 283, "start_point": [11, 15], "end_point": [11, 60], "text": "((number.to_double() - 0.0).abs() < 0.000001)"}], "start_byte": 231, "end_byte": 283, "start_point": [11, 8], "end_point": [11, 60], "text": "assert!((number.to_double() - 0.0).abs() < 0.000001)"}, {"type": ";", "children": [], "start_byte": 283, "end_byte": 284, "start_point": [11, 60], "end_point": [11, 61], "text": ";"}], "start_byte": 231, "end_byte": 284, "start_point": [11, 8], "end_point": [11, 61], "text": "assert!((number.to_double() - 0.0).abs() < 0.000001);"}, {"type": "line_comment", "children": [], "start_byte": 294, "end_byte": 355, "start_point": [13, 8], "end_point": [13, 69], "text": "// Test case 2: The least significant byte is 1, others are 0"}, {"type": "expression_statement", "children": [{"type": "assignment_expression", "children": [{"type": "index_expression", "children": [{"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 364, "end_byte": 370, "start_point": [14, 8], "end_point": [14, 14], "text": "number"}, {"type": ".", "children": [], "start_byte": 370, "end_byte": 371, "start_point": [14, 14], "end_point": [14, 15], "text": "."}, {"type": "field_identifier", "children": [], "start_byte": 371, "end_byte": 372, "start_point": [14, 15], "end_point": [14, 16], "text": "b"}], "start_byte": 364, "end_byte": 372, "start_point": [14, 8], "end_point": [14, 16], "text": "number.b"}, {"type": "[", "children": [], "start_byte": 372, "end_byte": 373, "start_point": [14, 16], "end_point": [14, 17], "text": "["}, {"type": "integer_literal", "children": [], "start_byte": 373, "end_byte": 374, "start_point": [14, 17], "end_point": [14, 18], "text": "0"}, {"type": "]", "children": [], "start_byte": 374, "end_byte": 375, "start_point": [14, 18], "end_point": [14, 19], "text": "]"}], "start_byte": 364, "end_byte": 375, "start_point": [14, 8], "end_point": [14, 19], "text": "number.b[0]"}, {"type": "=", "children": [], "start_byte": 376, "end_byte": 377, "start_point": [14, 20], "end_point": [14, 21], "text": "="}, {"type": "integer_literal", "children": [], "start_byte": 378, "end_byte": 379, "start_point": [14, 22], "end_point": [14, 23], "text": "1"}], "start_byte": 364, "end_byte": 379, "start_point": [14, 8], "end_point": [14, 23], "text": "number.b[0] = 1"}, {"type": ";", "children": [], "start_byte": 379, "end_byte": 380, "start_point": [14, 23], "end_point": [14, 24], "text": ";"}], "start_byte": 364, "end_byte": 380, "start_point": [14, 8], "end_point": [14, 24], "text": "number.b[0] = 1;"}, {"type": "expression_statement", "children": [{"type": "macro_invocation", "children": [{"type": "identifier", "children": [], "start_byte": 389, "end_byte": 395, "start_point": [15, 8], "end_point": [15, 14], "text": "assert"}, {"type": "!", "children": [], "start_byte": 395, "end_byte": 396, "start_point": [15, 14], "end_point": [15, 15], "text": "!"}, {"type": "token_tree", "children": [{"type": "(", "children": [], "start_byte": 396, "end_byte": 397, "start_point": [15, 15], "end_point": [15, 16], "text": "("}, {"type": "token_tree", "children": [{"type": "(", "children": [], "start_byte": 397, "end_byte": 398, "start_point": [15, 16], "end_point": [15, 17], "text": "("}, {"type": "identifier", "children": [], "start_byte": 398, "end_byte": 404, "start_point": [15, 17], "end_point": [15, 23], "text": "number"}, {"type": "identifier", "children": [], "start_byte": 405, "end_byte": 414, "start_point": [15, 24], "end_point": [15, 33], "text": "to_double"}, {"type": "token_tree", "children": [{"type": "(", "children": [], "start_byte": 414, "end_byte": 415, "start_point": [15, 33], "end_point": [15, 34], "text": "("}, {"type": ")", "children": [], "start_byte": 415, "end_byte": 416, "start_point": [15, 34], "end_point": [15, 35], "text": ")"}], "start_byte": 414, "end_byte": 416, "start_point": [15, 33], "end_point": [15, 35], "text": "()"}, {"type": "float_literal", "children": [], "start_byte": 419, "end_byte": 422, "start_point": [15, 38], "end_point": [15, 41], "text": "1.0"}, {"type": ")", "children": [], "start_byte": 422, "end_byte": 423, "start_point": [15, 41], "end_point": [15, 42], "text": ")"}], "start_byte": 397, "end_byte": 423, "start_point": [15, 16], "end_point": [15, 42], "text": "(number.to_double() - 1.0)"}, {"type": "identifier", "children": [], "start_byte": 424, "end_byte": 427, "start_point": [15, 43], "end_point": [15, 46], "text": "abs"}, {"type": "token_tree", "children": [{"type": "(", "children": [], "start_byte": 427, "end_byte": 428, "start_point": [15, 46], "end_point": [15, 47], "text": "("}, {"type": ")", "children": [], "start_byte": 428, "end_byte": 429, "start_point": [15, 47], "end_point": [15, 48], "text": ")"}], "start_byte": 427, "end_byte": 429, "start_point": [15, 46], "end_point": [15, 48], "text": "()"}, {"type": "float_literal", "children": [], "start_byte": 432, "end_byte": 440, "start_point": [15, 51], "end_point": [15, 59], "text": "0.000001"}, {"type": ")", "children": [], "start_byte": 440, "end_byte": 441, "start_point": [15, 59], "end_point": [15, 60], "text": ")"}], "start_byte": 396, "end_byte": 441, "start_point": [15, 15], "end_point": [15, 60], "text": "((number.to_double() - 1.0).abs() < 0.000001)"}], "start_byte": 389, "end_byte": 441, "start_point": [15, 8], "end_point": [15, 60], "text": "assert!((number.to_double() - 1.0).abs() < 0.000001)"}, {"type": ";", "children": [], "start_byte": 441, "end_byte": 442, "start_point": [15, 60], "end_point": [15, 61], "text": ";"}], "start_byte": 389, "end_byte": 442, "start_point": [15, 8], "end_point": [15, 61], "text": "assert!((number.to_double() - 1.0).abs() < 0.000001);"}, {"type": "line_comment", "children": [], "start_byte": 452, "end_byte": 485, "start_point": [17, 8], "end_point": [17, 41], "text": "// You can add more test cases..."}, {"type": "}", "children": [], "start_byte": 490, "end_byte": 491, "start_point": [18, 4], "end_point": [18, 5], "text": "}"}], "start_byte": 125, "end_byte": 491, "start_point": [7, 31], "end_point": [18, 5], "text": "{\n        let mut number = UInt64 { b: [0; 8] };\n        \n        // Test case 1: All bytes are 0\n        assert!((number.to_double() - 0.0).abs() < 0.000001);\n\n        // Test case 2: The least significant byte is 1, others are 0\n        number.b[0] = 1;\n        assert!((number.to_double() - 1.0).abs() < 0.000001);\n\n        // You can add more test cases...\n    }"}], "start_byte": 98, "end_byte": 491, "start_point": [7, 4], "end_point": [18, 5], "text": "fn test_uInt64_to_double() {\n        let mut number = UInt64 { b: [0; 8] };\n        \n        // Test case 1: All bytes are 0\n        assert!((number.to_double() - 0.0).abs() < 0.000001);\n\n        // Test case 2: The least significant byte is 1, others are 0\n        number.b[0] = 1;\n        assert!((number.to_double() - 1.0).abs() < 0.000001);\n\n        // You can add more test cases...\n    }"}, {"type": "attribute_item", "children": [{"type": "#", "children": [], "start_byte": 497, "end_byte": 498, "start_point": [20, 4], "end_point": [20, 5], "text": "#"}, {"type": "[", "children": [], "start_byte": 498, "end_byte": 499, "start_point": [20, 5], "end_point": [20, 6], "text": "["}, {"type": "attribute", "children": [{"type": "identifier", "children": [], "start_byte": 499, "end_byte": 503, "start_point": [20, 6], "end_point": [20, 10], "text": "test"}], "start_byte": 499, "end_byte": 503, "start_point": [20, 6], "end_point": [20, 10], "text": "test"}, {"type": "]", "children": [], "start_byte": 503, "end_byte": 504, "start_point": [20, 10], "end_point": [20, 11], "text": "]"}], "start_byte": 497, "end_byte": 504, "start_point": [20, 4], "end_point": [20, 11], "text": "#[test]"}, {"type": "function_item", "children": [{"type": "fn", "children": [], "start_byte": 509, "end_byte": 511, "start_point": [21, 4], "end_point": [21, 6], "text": "fn"}, {"type": "identifier", "children": [], "start_byte": 512, "end_byte": 536, "start_point": [21, 7], "end_point": [21, 31], "text": "test_uInt64_from_UInt32s"}, {"type": "parameters", "children": [{"type": "(", "children": [], "start_byte": 536, "end_byte": 537, "start_point": [21, 31], "end_point": [21, 32], "text": "("}, {"type": ")", "children": [], "start_byte": 537, "end_byte": 538, "start_point": [21, 32], "end_point": [21, 33], "text": ")"}], "start_byte": 536, "end_byte": 538, "start_point": [21, 31], "end_point": [21, 33], "text": "()"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 539, "end_byte": 540, "start_point": [21, 34], "end_point": [21, 35], "text": "{"}, {"type": "let_declaration", "children": [{"type": "let", "children": [], "start_byte": 549, "end_byte": 552, "start_point": [22, 8], "end_point": [22, 11], "text": "let"}, {"type": "mutable_specifier", "children": [], "start_byte": 553, "end_byte": 556, "start_point": [22, 12], "end_point": [22, 15], "text": "mut"}, {"type": "identifier", "children": [], "start_byte": 557, "end_byte": 563, "start_point": [22, 16], "end_point": [22, 22], "text": "number"}, {"type": "=", "children": [], "start_byte": 564, "end_byte": 565, "start_point": [22, 23], "end_point": [22, 24], "text": "="}, {"type": "struct_expression", "children": [{"type": "type_identifier", "children": [], "start_byte": 566, "end_byte": 572, "start_point": [22, 25], "end_point": [22, 31], "text": "UInt64"}, {"type": "field_initializer_list", "children": [{"type": "{", "children": [], "start_byte": 573, "end_byte": 574, "start_point": [22, 32], "end_point": [22, 33], "text": "{"}, {"type": "field_initializer", "children": [{"type": "field_identifier", "children": [], "start_byte": 575, "end_byte": 576, "start_point": [22, 34], "end_point": [22, 35], "text": "b"}, {"type": ":", "children": [], "start_byte": 576, "end_byte": 577, "start_point": [22, 35], "end_point": [22, 36], "text": ":"}, {"type": "array_expression", "children": [{"type": "[", "children": [], "start_byte": 578, "end_byte": 579, "start_point": [22, 37], "end_point": [22, 38], "text": "["}, {"type": "integer_literal", "children": [], "start_byte": 579, "end_byte": 580, "start_point": [22, 38], "end_point": [22, 39], "text": "0"}, {"type": ";", "children": [], "start_byte": 580, "end_byte": 581, "start_point": [22, 39], "end_point": [22, 40], "text": ";"}, {"type": "integer_literal", "children": [], "start_byte": 582, "end_byte": 583, "start_point": [22, 41], "end_point": [22, 42], "text": "8"}, {"type": "]", "children": [], "start_byte": 583, "end_byte": 584, "start_point": [22, 42], "end_point": [22, 43], "text": "]"}], "start_byte": 578, "end_byte": 584, "start_point": [22, 37], "end_point": [22, 43], "text": "[0; 8]"}], "start_byte": 575, "end_byte": 584, "start_point": [22, 34], "end_point": [22, 43], "text": "b: [0; 8]"}, {"type": "}", "children": [], "start_byte": 585, "end_byte": 586, "start_point": [22, 44], "end_point": [22, 45], "text": "}"}], "start_byte": 573, "end_byte": 586, "start_point": [22, 32], "end_point": [22, 45], "text": "{ b: [0; 8] }"}], "start_byte": 566, "end_byte": 586, "start_point": [22, 25], "end_point": [22, 45], "text": "UInt64 { b: [0; 8] }"}, {"type": ";", "children": [], "start_byte": 586, "end_byte": 587, "start_point": [22, 45], "end_point": [22, 46], "text": ";"}], "start_byte": 549, "end_byte": 587, "start_point": [22, 8], "end_point": [22, 46], "text": "let mut number = UInt64 { b: [0; 8] };"}, {"type": "line_comment", "children": [], "start_byte": 597, "end_byte": 611, "start_point": [24, 8], "end_point": [24, 22], "text": "// Test case 1"}, {"type": "expression_statement", "children": [{"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 620, "end_byte": 626, "start_point": [25, 8], "end_point": [25, 14], "text": "number"}, {"type": ".", "children": [], "start_byte": 626, "end_byte": 627, "start_point": [25, 14], "end_point": [25, 15], "text": "."}, {"type": "field_identifier", "children": [], "start_byte": 627, "end_byte": 636, "start_point": [25, 15], "end_point": [25, 24], "text": "from_u32s"}], "start_byte": 620, "end_byte": 636, "start_point": [25, 8], "end_point": [25, 24], "text": "number.from_u32s"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 636, "end_byte": 637, "start_point": [25, 24], "end_point": [25, 25], "text": "("}, {"type": "integer_literal", "children": [], "start_byte": 637, "end_byte": 647, "start_point": [25, 25], "end_point": [25, 35], "text": "0xFFFFFFFF"}, {"type": ",", "children": [], "start_byte": 647, "end_byte": 648, "start_point": [25, 35], "end_point": [25, 36], "text": ","}, {"type": "integer_literal", "children": [], "start_byte": 649, "end_byte": 659, "start_point": [25, 37], "end_point": [25, 47], "text": "0xFFFFFFFF"}, {"type": ")", "children": [], "start_byte": 659, "end_byte": 660, "start_point": [25, 47], "end_point": [25, 48], "text": ")"}], "start_byte": 636, "end_byte": 660, "start_point": [25, 24], "end_point": [25, 48], "text": "(0xFFFFFFFF, 0xFFFFFFFF)"}], "start_byte": 620, "end_byte": 660, "start_point": [25, 8], "end_point": [25, 48], "text": "number.from_u32s(0xFFFFFFFF, 0xFFFFFFFF)"}, {"type": ";", "children": [], "start_byte": 660, "end_byte": 661, "start_point": [25, 48], "end_point": [25, 49], "text": ";"}], "start_byte": 620, "end_byte": 661, "start_point": [25, 8], "end_point": [25, 49], "text": "number.from_u32s(0xFFFFFFFF, 0xFFFFFFFF);"}, {"type": "expression_statement", "children": [{"type": "macro_invocation", "children": [{"type": "identifier", "children": [], "start_byte": 670, "end_byte": 679, "start_point": [26, 8], "end_point": [26, 17], "text": "assert_eq"}, {"type": "!", "children": [], "start_byte": 679, "end_byte": 680, "start_point": [26, 17], "end_point": [26, 18], "text": "!"}, {"type": "token_tree", "children": [{"type": "(", "children": [], "start_byte": 680, "end_byte": 681, "start_point": [26, 18], "end_point": [26, 19], "text": "("}, {"type": "identifier", "children": [], "start_byte": 681, "end_byte": 687, "start_point": [26, 19], "end_point": [26, 25], "text": "number"}, {"type": "identifier", "children": [], "start_byte": 688, "end_byte": 689, "start_point": [26, 26], "end_point": [26, 27], "text": "b"}, {"type": "token_tree", "children": [{"type": "[", "children": [], "start_byte": 691, "end_byte": 692, "start_point": [26, 29], "end_point": [26, 30], "text": "["}, {"type": "integer_literal", "children": [], "start_byte": 692, "end_byte": 696, "start_point": [26, 30], "end_point": [26, 34], "text": "0xFF"}, {"type": "integer_literal", "children": [], "start_byte": 698, "end_byte": 699, "start_point": [26, 36], "end_point": [26, 37], "text": "8"}, {"type": "]", "children": [], "start_byte": 699, "end_byte": 700, "start_point": [26, 37], "end_point": [26, 38], "text": "]"}], "start_byte": 691, "end_byte": 700, "start_point": [26, 29], "end_point": [26, 38], "text": "[0xFF; 8]"}, {"type": ")", "children": [], "start_byte": 700, "end_byte": 701, "start_point": [26, 38], "end_point": [26, 39], "text": ")"}], "start_byte": 680, "end_byte": 701, "start_point": [26, 18], "end_point": [26, 39], "text": "(number.b, [0xFF; 8])"}], "start_byte": 670, "end_byte": 701, "start_point": [26, 8], "end_point": [26, 39], "text": "assert_eq!(number.b, [0xFF; 8])"}, {"type": ";", "children": [], "start_byte": 701, "end_byte": 702, "start_point": [26, 39], "end_point": [26, 40], "text": ";"}], "start_byte": 670, "end_byte": 702, "start_point": [26, 8], "end_point": [26, 40], "text": "assert_eq!(number.b, [0xFF; 8]);"}, {"type": "line_comment", "children": [], "start_byte": 712, "end_byte": 726, "start_point": [28, 8], "end_point": [28, 22], "text": "// Test case 2"}, {"type": "expression_statement", "children": [{"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 735, "end_byte": 741, "start_point": [29, 8], "end_point": [29, 14], "text": "number"}, {"type": ".", "children": [], "start_byte": 741, "end_byte": 742, "start_point": [29, 14], "end_point": [29, 15], "text": "."}, {"type": "field_identifier", "children": [], "start_byte": 742, "end_byte": 751, "start_point": [29, 15], "end_point": [29, 24], "text": "from_u32s"}], "start_byte": 735, "end_byte": 751, "start_point": [29, 8], "end_point": [29, 24], "text": "number.from_u32s"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 751, "end_byte": 752, "start_point": [29, 24], "end_point": [29, 25], "text": "("}, {"type": "integer_literal", "children": [], "start_byte": 752, "end_byte": 762, "start_point": [29, 25], "end_point": [29, 35], "text": "0x12345678"}, {"type": ",", "children": [], "start_byte": 762, "end_byte": 763, "start_point": [29, 35], "end_point": [29, 36], "text": ","}, {"type": "integer_literal", "children": [], "start_byte": 764, "end_byte": 774, "start_point": [29, 37], "end_point": [29, 47], "text": "0x90ABCDEF"}, {"type": ")", "children": [], "start_byte": 774, "end_byte": 775, "start_point": [29, 47], "end_point": [29, 48], "text": ")"}], "start_byte": 751, "end_byte": 775, "start_point": [29, 24], "end_point": [29, 48], "text": "(0x12345678, 0x90ABCDEF)"}], "start_byte": 735, "end_byte": 775, "start_point": [29, 8], "end_point": [29, 48], "text": "number.from_u32s(0x12345678, 0x90ABCDEF)"}, {"type": ";", "children": [], "start_byte": 775, "end_byte": 776, "start_point": [29, 48], "end_point": [29, 49], "text": ";"}], "start_byte": 735, "end_byte": 776, "start_point": [29, 8], "end_point": [29, 49], "text": "number.from_u32s(0x12345678, 0x90ABCDEF);"}, {"type": "expression_statement", "children": [{"type": "macro_invocation", "children": [{"type": "identifier", "children": [], "start_byte": 785, "end_byte": 794, "start_point": [30, 8], "end_point": [30, 17], "text": "assert_eq"}, {"type": "!", "children": [], "start_byte": 794, "end_byte": 795, "start_point": [30, 17], "end_point": [30, 18], "text": "!"}, {"type": "token_tree", "children": [{"type": "(", "children": [], "start_byte": 795, "end_byte": 796, "start_point": [30, 18], "end_point": [30, 19], "text": "("}, {"type": "identifier", "children": [], "start_byte": 796, "end_byte": 802, "start_point": [30, 19], "end_point": [30, 25], "text": "number"}, {"type": "identifier", "children": [], "start_byte": 803, "end_byte": 804, "start_point": [30, 26], "end_point": [30, 27], "text": "b"}, {"type": "token_tree", "children": [{"type": "[", "children": [], "start_byte": 806, "end_byte": 807, "start_point": [30, 29], "end_point": [30, 30], "text": "["}, {"type": "integer_literal", "children": [], "start_byte": 807, "end_byte": 811, "start_point": [30, 30], "end_point": [30, 34], "text": "0x78"}, {"type": "integer_literal", "children": [], "start_byte": 813, "end_byte": 817, "start_point": [30, 36], "end_point": [30, 40], "text": "0x56"}, {"type": "integer_literal", "children": [], "start_byte": 819, "end_byte": 823, "start_point": [30, 42], "end_point": [30, 46], "text": "0x34"}, {"type": "integer_literal", "children": [], "start_byte": 825, "end_byte": 829, "start_point": [30, 48], "end_point": [30, 52], "text": "0x12"}, {"type": "integer_literal", "children": [], "start_byte": 831, "end_byte": 835, "start_point": [30, 54], "end_point": [30, 58], "text": "0xEF"}, {"type": "integer_literal", "children": [], "start_byte": 837, "end_byte": 841, "start_point": [30, 60], "end_point": [30, 64], "text": "0xCD"}, {"type": "integer_literal", "children": [], "start_byte": 843, "end_byte": 847, "start_point": [30, 66], "end_point": [30, 70], "text": "0xAB"}, {"type": "integer_literal", "children": [], "start_byte": 849, "end_byte": 853, "start_point": [30, 72], "end_point": [30, 76], "text": "0x90"}, {"type": "]", "children": [], "start_byte": 853, "end_byte": 854, "start_point": [30, 76], "end_point": [30, 77], "text": "]"}], "start_byte": 806, "end_byte": 854, "start_point": [30, 29], "end_point": [30, 77], "text": "[0x78, 0x56, 0x34, 0x12, 0xEF, 0xCD, 0xAB, 0x90]"}, {"type": ")", "children": [], "start_byte": 854, "end_byte": 855, "start_point": [30, 77], "end_point": [30, 78], "text": ")"}], "start_byte": 795, "end_byte": 855, "start_point": [30, 18], "end_point": [30, 78], "text": "(number.b, [0x78, 0x56, 0x34, 0x12, 0xEF, 0xCD, 0xAB, 0x90])"}], "start_byte": 785, "end_byte": 855, "start_point": [30, 8], "end_point": [30, 78], "text": "assert_eq!(number.b, [0x78, 0x56, 0x34, 0x12, 0xEF, 0xCD, 0xAB, 0x90])"}, {"type": ";", "children": [], "start_byte": 855, "end_byte": 856, "start_point": [30, 78], "end_point": [30, 79], "text": ";"}], "start_byte": 785, "end_byte": 856, "start_point": [30, 8], "end_point": [30, 79], "text": "assert_eq!(number.b, [0x78, 0x56, 0x34, 0x12, 0xEF, 0xCD, 0xAB, 0x90]);"}, {"type": "line_comment", "children": [], "start_byte": 866, "end_byte": 899, "start_point": [32, 8], "end_point": [32, 41], "text": "// You can add more test cases..."}, {"type": "}", "children": [], "start_byte": 904, "end_byte": 905, "start_point": [33, 4], "end_point": [33, 5], "text": "}"}], "start_byte": 539, "end_byte": 905, "start_point": [21, 34], "end_point": [33, 5], "text": "{\n        let mut number = UInt64 { b: [0; 8] };\n\n        // Test case 1\n        number.from_u32s(0xFFFFFFFF, 0xFFFFFFFF);\n        assert_eq!(number.b, [0xFF; 8]);\n\n        // Test case 2\n        number.from_u32s(0x12345678, 0x90ABCDEF);\n        assert_eq!(number.b, [0x78, 0x56, 0x34, 0x12, 0xEF, 0xCD, 0xAB, 0x90]);\n\n        // You can add more test cases...\n    }"}], "start_byte": 509, "end_byte": 905, "start_point": [21, 4], "end_point": [33, 5], "text": "fn test_uInt64_from_UInt32s() {\n        let mut number = UInt64 { b: [0; 8] };\n\n        // Test case 1\n        number.from_u32s(0xFFFFFFFF, 0xFFFFFFFF);\n        assert_eq!(number.b, [0xFF; 8]);\n\n        // Test case 2\n        number.from_u32s(0x12345678, 0x90ABCDEF);\n        assert_eq!(number.b, [0x78, 0x56, 0x34, 0x12, 0xEF, 0xCD, 0xAB, 0x90]);\n\n        // You can add more test cases...\n    }"}, {"type": "}", "children": [], "start_byte": 906, "end_byte": 907, "start_point": [34, 0], "end_point": [34, 1], "text": "}"}], "start_byte": 61, "end_byte": 907, "start_point": [3, 10], "end_point": [34, 1], "text": "{\n    use super::*;\n\n    #[test]\n    fn test_uInt64_to_double() {\n        let mut number = UInt64 { b: [0; 8] };\n        \n        // Test case 1: All bytes are 0\n        assert!((number.to_double() - 0.0).abs() < 0.000001);\n\n        // Test case 2: The least significant byte is 1, others are 0\n        number.b[0] = 1;\n        assert!((number.to_double() - 1.0).abs() < 0.000001);\n\n        // You can add more test cases...\n    }\n\n    #[test]\n    fn test_uInt64_from_UInt32s() {\n        let mut number = UInt64 { b: [0; 8] };\n\n        // Test case 1\n        number.from_u32s(0xFFFFFFFF, 0xFFFFFFFF);\n        assert_eq!(number.b, [0xFF; 8]);\n\n        // Test case 2\n        number.from_u32s(0x12345678, 0x90ABCDEF);\n        assert_eq!(number.b, [0x78, 0x56, 0x34, 0x12, 0xEF, 0xCD, 0xAB, 0x90]);\n\n        // You can add more test cases...\n    }\n}"}], "start_byte": 51, "end_byte": 907, "start_point": [3, 0], "end_point": [34, 1], "text": "mod tests {\n    use super::*;\n\n    #[test]\n    fn test_uInt64_to_double() {\n        let mut number = UInt64 { b: [0; 8] };\n        \n        // Test case 1: All bytes are 0\n        assert!((number.to_double() - 0.0).abs() < 0.000001);\n\n        // Test case 2: The least significant byte is 1, others are 0\n        number.b[0] = 1;\n        assert!((number.to_double() - 1.0).abs() < 0.000001);\n\n        // You can add more test cases...\n    }\n\n    #[test]\n    fn test_uInt64_from_UInt32s() {\n        let mut number = UInt64 { b: [0; 8] };\n\n        // Test case 1\n        number.from_u32s(0xFFFFFFFF, 0xFFFFFFFF);\n        assert_eq!(number.b, [0xFF; 8]);\n\n        // Test case 2\n        number.from_u32s(0x12345678, 0x90ABCDEF);\n        assert_eq!(number.b, [0x78, 0x56, 0x34, 0x12, 0xEF, 0xCD, 0xAB, 0x90]);\n\n        // You can add more test cases...\n    }\n}"}], "start_byte": 0, "end_byte": 908, "start_point": [0, 0], "end_point": [35, 0], "text": "use crate::global_vars::bzip2_c1::*;\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_uInt64_to_double() {\n        let mut number = UInt64 { b: [0; 8] };\n        \n        // Test case 1: All bytes are 0\n        assert!((number.to_double() - 0.0).abs() < 0.000001);\n\n        // Test case 2: The least significant byte is 1, others are 0\n        number.b[0] = 1;\n        assert!((number.to_double() - 1.0).abs() < 0.000001);\n\n        // You can add more test cases...\n    }\n\n    #[test]\n    fn test_uInt64_from_UInt32s() {\n        let mut number = UInt64 { b: [0; 8] };\n\n        // Test case 1\n        number.from_u32s(0xFFFFFFFF, 0xFFFFFFFF);\n        assert_eq!(number.b, [0xFF; 8]);\n\n        // Test case 2\n        number.from_u32s(0x12345678, 0x90ABCDEF);\n        assert_eq!(number.b, [0x78, 0x56, 0x34, 0x12, 0xEF, 0xCD, 0xAB, 0x90]);\n\n        // You can add more test cases...\n    }\n}\n"}