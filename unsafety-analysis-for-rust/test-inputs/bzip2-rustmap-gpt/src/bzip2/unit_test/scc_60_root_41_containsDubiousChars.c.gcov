        -:    0:Source:/root/rustmap/bzip2_rs_gpt/src/bzip2/scc_60_root_41_containsDubiousChars.c
        -:    0:Graph:scc_60_root_41_containsDubiousChars.gcno
        -:    0:Data:scc_60_root_41_containsDubiousChars.gcda
        -:    0:Runs:1
        -:    1:#include "../typedef.h"
        -:    2:// 检查给定名称是否包含可疑字符。
        -:    3:// 目前的实现总是返回False，表示不包含任何可疑字符。
        -:    4:static
        2:    5:Bool containsDubiousChars ( Char* name )
        -:    6:{
        -:    7:   // 目前直接返回False
        2:    8:   return ((Bool)0);
        -:    9:}
        -:   10:
        -:   11:#include <CUnit/Basic.h>
        1:   12:void test_containsDubiousChars(void) {
        -:   13:    // 因为函数总是返回False，所以任何输入都应该返回False
        1:   14:    CU_ASSERT_EQUAL(containsDubiousChars("someName"), 0);
        1:   15:    CU_ASSERT_EQUAL(containsDubiousChars("anotherName"), 0);
        1:   16:}
        -:   17:
        1:   18:int main() {
        1:   19:    CU_pSuite pSuite = NULL;
        -:   20:
        -:   21:    /* 初始化CUnit库 */
        1:   22:    if (CUE_SUCCESS != CU_initialize_registry())
    #####:   23:        return CU_get_error();
        -:   24:
        -:   25:    /* 添加一个Suite到测试注册表 */
        1:   26:    pSuite = CU_add_suite("containsDubiousChars_test_suite", NULL, NULL);
        1:   27:    if (NULL == pSuite) {
    #####:   28:        CU_cleanup_registry();
    #####:   29:        return CU_get_error();
        -:   30:    }
        -:   31:
        -:   32:    /* 在Suite中添加测试用例 */
        1:   33:    if ((NULL == CU_add_test(pSuite, "test_containsDubiousChars", test_containsDubiousChars))) {
    #####:   34:        CU_cleanup_registry();
    #####:   35:        return CU_get_error();
        -:   36:    }
        -:   37:
        -:   38:    /* 运行所有测试用CUnit Basic接口 */
        1:   39:    CU_basic_set_mode(CU_BRM_VERBOSE);
        1:   40:    CU_basic_run_tests();
        1:   41:    CU_cleanup_registry();
        1:   42:    return CU_get_error();
        -:   43:}
