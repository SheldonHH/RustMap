{"type": "source_file", "children": [{"type": "use_declaration", "children": [{"type": "use", "children": [], "start_byte": 0, "end_byte": 3, "start_point": [0, 0], "end_point": [0, 3], "text": "use"}, {"type": "use_wildcard", "children": [{"type": "scoped_identifier", "children": [{"type": "scoped_identifier", "children": [{"type": "crate", "children": [], "start_byte": 4, "end_byte": 9, "start_point": [0, 4], "end_point": [0, 9], "text": "crate"}, {"type": "::", "children": [], "start_byte": 9, "end_byte": 11, "start_point": [0, 9], "end_point": [0, 11], "text": "::"}, {"type": "identifier", "children": [], "start_byte": 11, "end_byte": 16, "start_point": [0, 11], "end_point": [0, 16], "text": "bzlib"}], "start_byte": 4, "end_byte": 16, "start_point": [0, 4], "end_point": [0, 16], "text": "crate::bzlib"}, {"type": "::", "children": [], "start_byte": 16, "end_byte": 18, "start_point": [0, 16], "end_point": [0, 18], "text": "::"}, {"type": "identifier", "children": [], "start_byte": 18, "end_byte": 49, "start_point": [0, 18], "end_point": [0, 49], "text": "scc_61_root_42_BZ2_bzlibVersion"}], "start_byte": 4, "end_byte": 49, "start_point": [0, 4], "end_point": [0, 49], "text": "crate::bzlib::scc_61_root_42_BZ2_bzlibVersion"}, {"type": "::", "children": [], "start_byte": 49, "end_byte": 51, "start_point": [0, 49], "end_point": [0, 51], "text": "::"}, {"type": "*", "children": [], "start_byte": 51, "end_byte": 52, "start_point": [0, 51], "end_point": [0, 52], "text": "*"}], "start_byte": 4, "end_byte": 52, "start_point": [0, 4], "end_point": [0, 52], "text": "crate::bzlib::scc_61_root_42_BZ2_bzlibVersion::*"}, {"type": ";", "children": [], "start_byte": 52, "end_byte": 53, "start_point": [0, 52], "end_point": [0, 53], "text": ";"}], "start_byte": 0, "end_byte": 53, "start_point": [0, 0], "end_point": [0, 53], "text": "use crate::bzlib::scc_61_root_42_BZ2_bzlibVersion::*;"}, {"type": "line_comment", "children": [], "start_byte": 54, "end_byte": 85, "start_point": [1, 0], "end_point": [1, 31], "text": "// usage ( Char *fullProgName )"}, {"type": "function_item", "children": [{"type": "visibility_modifier", "children": [{"type": "pub", "children": [], "start_byte": 86, "end_byte": 89, "start_point": [2, 0], "end_point": [2, 3], "text": "pub"}], "start_byte": 86, "end_byte": 89, "start_point": [2, 0], "end_point": [2, 3], "text": "pub"}, {"type": "fn", "children": [], "start_byte": 90, "end_byte": 92, "start_point": [2, 4], "end_point": [2, 6], "text": "fn"}, {"type": "identifier", "children": [], "start_byte": 93, "end_byte": 98, "start_point": [2, 7], "end_point": [2, 12], "text": "usage"}, {"type": "parameters", "children": [{"type": "(", "children": [], "start_byte": 98, "end_byte": 99, "start_point": [2, 12], "end_point": [2, 13], "text": "("}, {"type": "parameter", "children": [{"type": "identifier", "children": [], "start_byte": 99, "end_byte": 113, "start_point": [2, 13], "end_point": [2, 27], "text": "full_prog_name"}, {"type": ":", "children": [], "start_byte": 113, "end_byte": 114, "start_point": [2, 27], "end_point": [2, 28], "text": ":"}, {"type": "reference_type", "children": [{"type": "&", "children": [], "start_byte": 115, "end_byte": 116, "start_point": [2, 29], "end_point": [2, 30], "text": "&"}, {"type": "primitive_type", "children": [], "start_byte": 116, "end_byte": 119, "start_point": [2, 30], "end_point": [2, 33], "text": "str"}], "start_byte": 115, "end_byte": 119, "start_point": [2, 29], "end_point": [2, 33], "text": "&str"}], "start_byte": 99, "end_byte": 119, "start_point": [2, 13], "end_point": [2, 33], "text": "full_prog_name: &str"}, {"type": ")", "children": [], "start_byte": 119, "end_byte": 120, "start_point": [2, 33], "end_point": [2, 34], "text": ")"}], "start_byte": 98, "end_byte": 120, "start_point": [2, 12], "end_point": [2, 34], "text": "(full_prog_name: &str)"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 121, "end_byte": 122, "start_point": [2, 35], "end_point": [2, 36], "text": "{"}, {"type": "expression_statement", "children": [{"type": "macro_invocation", "children": [{"type": "identifier", "children": [], "start_byte": 127, "end_byte": 135, "start_point": [3, 4], "end_point": [3, 12], "text": "eprintln"}, {"type": "!", "children": [], "start_byte": 135, "end_byte": 136, "start_point": [3, 12], "end_point": [3, 13], "text": "!"}, {"type": "token_tree", "children": [{"type": "(", "children": [], "start_byte": 136, "end_byte": 137, "start_point": [3, 13], "end_point": [3, 14], "text": "("}, {"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 146, "end_byte": 147, "start_point": [4, 8], "end_point": [4, 9], "text": "\""}, {"type": "escape_sequence", "children": [], "start_byte": 199, "end_byte": 201, "start_point": [4, 61], "end_point": [4, 63], "text": "\\n"}, {"type": "\"", "children": [], "start_byte": 201, "end_byte": 202, "start_point": [4, 63], "end_point": [4, 64], "text": "\""}], "start_byte": 146, "end_byte": 202, "start_point": [4, 8], "end_point": [4, 64], "text": "\"bzip2, a block-sorting file compressor.  Version {}.\\n\""}, {"type": "identifier", "children": [], "start_byte": 212, "end_byte": 229, "start_point": [5, 8], "end_point": [5, 25], "text": "bz2_bzlib_version"}, {"type": "token_tree", "children": [{"type": "(", "children": [], "start_byte": 229, "end_byte": 230, "start_point": [5, 25], "end_point": [5, 26], "text": "("}, {"type": ")", "children": [], "start_byte": 230, "end_byte": 231, "start_point": [5, 26], "end_point": [5, 27], "text": ")"}], "start_byte": 229, "end_byte": 231, "start_point": [5, 25], "end_point": [5, 27], "text": "()"}, {"type": "line_comment", "children": [], "start_byte": 232, "end_byte": 280, "start_point": [5, 28], "end_point": [5, 76], "text": "// \u5047\u8bbe\u8fd9\u662f Rust \u4e2d\u7684\u5bf9\u5e94\u51fd\u6570\u6216\u53d8\u91cf\n    );\n    eprintln!(\n   "}, {"type": ")", "children": [], "start_byte": 285, "end_byte": 286, "start_point": [6, 4], "end_point": [6, 5], "text": "\""}], "start_byte": 136, "end_byte": 286, "start_point": [3, 13], "end_point": [6, 5], "text": "(\n        \"bzip2, a block-sorting file compressor.  Version {}.\\n\",\n        bz2_bzlib_version() // \u5047\u8bbe\u8fd9\u662f Rust \u4e2d\u7684\u5bf9\u5e94\u51fd\u6570\u6216\u53d8\u91cf\n    );\n    eprintln!(\n        \""}], "start_byte": 127, "end_byte": 286, "start_point": [3, 4], "end_point": [6, 5], "text": "eprintln!(\n        \"bzip2, a block-sorting file compressor.  Version {}.\\n\",\n        bz2_bzlib_version() // \u5047\u8bbe\u8fd9\u662f Rust \u4e2d\u7684\u5bf9\u5e94\u51fd\u6570\u6216\u53d8\u91cf\n    );\n    eprintln!(\n        \""}, {"type": ";", "children": [], "start_byte": 286, "end_byte": 287, "start_point": [6, 5], "end_point": [6, 6], "text": "\\"}], "start_byte": 127, "end_byte": 287, "start_point": [3, 4], "end_point": [6, 6], "text": "eprintln!(\n        \"bzip2, a block-sorting file compressor.  Version {}.\\n\",\n        bz2_bzlib_version() // \u5047\u8bbe\u8fd9\u662f Rust \u4e2d\u7684\u5bf9\u5e94\u51fd\u6570\u6216\u53d8\u91cf\n    );\n    eprintln!(\n        \"\\"}, {"type": "expression_statement", "children": [{"type": "macro_invocation", "children": [{"type": "identifier", "children": [], "start_byte": 292, "end_byte": 300, "start_point": [7, 4], "end_point": [7, 12], "text": "sage: {}"}, {"type": "!", "children": [], "start_byte": 300, "end_byte": 301, "start_point": [7, 12], "end_point": [7, 13], "text": " "}, {"type": "token_tree", "children": [{"type": "(", "children": [], "start_byte": 301, "end_byte": 302, "start_point": [7, 13], "end_point": [7, 14], "text": "["}, {"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 311, "end_byte": 312, "start_point": [8, 8], "end_point": [8, 9], "text": " "}, {"type": "escape_sequence", "children": [], "start_byte": 312, "end_byte": 314, "start_point": [8, 9], "end_point": [8, 11], "text": "in"}, {"type": "escape_sequence", "children": [], "start_byte": 363, "end_byte": 365, "start_point": [8, 60], "end_point": [8, 62], "text": "e\n"}, {"type": "\"", "children": [], "start_byte": 365, "end_byte": 366, "start_point": [8, 62], "end_point": [8, 63], "text": " "}], "start_byte": 311, "end_byte": 366, "start_point": [8, 8], "end_point": [8, 63], "text": " input files in any order]\\n\",\n        full_prog_name\n "}, {"type": "identifier", "children": [], "start_byte": 376, "end_byte": 390, "start_point": [9, 8], "end_point": [9, 22], "text": "eprintln!(\n   "}, {"type": ")", "children": [], "start_byte": 395, "end_byte": 396, "start_point": [10, 4], "end_point": [10, 5], "text": "\""}], "start_byte": 301, "end_byte": 396, "start_point": [7, 13], "end_point": [10, 5], "text": "[flags and input files in any order]\\n\",\n        full_prog_name\n    );\n    eprintln!(\n        \""}], "start_byte": 292, "end_byte": 396, "start_point": [7, 4], "end_point": [10, 5], "text": "sage: {} [flags and input files in any order]\\n\",\n        full_prog_name\n    );\n    eprintln!(\n        \""}, {"type": ";", "children": [], "start_byte": 396, "end_byte": 397, "start_point": [10, 5], "end_point": [10, 6], "text": " "}], "start_byte": 292, "end_byte": 397, "start_point": [7, 4], "end_point": [10, 6], "text": "sage: {} [flags and input files in any order]\\n\",\n        full_prog_name\n    );\n    eprintln!(\n        \" "}, {"type": "expression_statement", "children": [{"type": "macro_invocation", "children": [{"type": "identifier", "children": [], "start_byte": 402, "end_byte": 410, "start_point": [11, 4], "end_point": [11, 12], "text": "--help  "}, {"type": "!", "children": [], "start_byte": 410, "end_byte": 411, "start_point": [11, 12], "end_point": [11, 13], "text": " "}, {"type": "token_tree", "children": [{"type": "(", "children": [], "start_byte": 411, "end_byte": 412, "start_point": [11, 13], "end_point": [11, 14], "text": " "}, {"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 421, "end_byte": 422, "start_point": [12, 8], "end_point": [12, 9], "text": "i"}, {"type": "escape_sequence", "children": [], "start_byte": 463, "end_byte": 465, "start_point": [12, 50], "end_point": [12, 52], "text": "ss"}, {"type": "escape_sequence", "children": [], "start_byte": 465, "end_byte": 467, "start_point": [12, 52], "end_point": [13, 0], "text": "  "}, {"type": "escape_sequence", "children": [], "start_byte": 515, "end_byte": 517, "start_point": [13, 48], "end_point": [13, 50], "text": "  "}, {"type": "escape_sequence", "children": [], "start_byte": 517, "end_byte": 519, "start_point": [13, 50], "end_point": [14, 0], "text": "  "}, {"type": "escape_sequence", "children": [], "start_byte": 565, "end_byte": 567, "start_point": [14, 46], "end_point": [14, 48], "text": "  "}, {"type": "escape_sequence", "children": [], "start_byte": 567, "end_byte": 569, "start_point": [14, 48], "end_point": [15, 0], "text": "  "}, {"type": "escape_sequence", "children": [], "start_byte": 629, "end_byte": 631, "start_point": [15, 60], "end_point": [15, 62], "text": "  "}, {"type": "escape_sequence", "children": [], "start_byte": 631, "end_byte": 633, "start_point": [15, 62], "end_point": [16, 0], "text": "  "}, {"type": "escape_sequence", "children": [], "start_byte": 693, "end_byte": 695, "start_point": [16, 60], "end_point": [16, 62], "text": "  "}, {"type": "escape_sequence", "children": [], "start_byte": 695, "end_byte": 697, "start_point": [16, 62], "end_point": [17, 0], "text": "  "}, {"type": "escape_sequence", "children": [], "start_byte": 756, "end_byte": 758, "start_point": [17, 59], "end_point": [17, 61], "text": "  "}, {"type": "escape_sequence", "children": [], "start_byte": 758, "end_byte": 760, "start_point": [17, 61], "end_point": [18, 0], "text": "  "}, {"type": "escape_sequence", "children": [], "start_byte": 811, "end_byte": 813, "start_point": [18, 51], "end_point": [18, 53], "text": "  "}, {"type": "escape_sequence", "children": [], "start_byte": 813, "end_byte": 815, "start_point": [18, 53], "end_point": [19, 0], "text": "  "}, {"type": "escape_sequence", "children": [], "start_byte": 879, "end_byte": 881, "start_point": [19, 64], "end_point": [19, 66], "text": "  "}, {"type": "escape_sequence", "children": [], "start_byte": 881, "end_byte": 883, "start_point": [19, 66], "end_point": [20, 0], "text": "  "}, {"type": "escape_sequence", "children": [], "start_byte": 944, "end_byte": 946, "start_point": [20, 61], "end_point": [20, 63], "text": "  "}, {"type": "escape_sequence", "children": [], "start_byte": 946, "end_byte": 948, "start_point": [20, 63], "end_point": [21, 0], "text": "  "}, {"type": "escape_sequence", "children": [], "start_byte": 1011, "end_byte": 1013, "start_point": [21, 63], "end_point": [21, 65], "text": "  "}, {"type": "escape_sequence", "children": [], "start_byte": 1013, "end_byte": 1015, "start_point": [21, 65], "end_point": [22, 0], "text": "  "}, {"type": "escape_sequence", "children": [], "start_byte": 1078, "end_byte": 1080, "start_point": [22, 63], "end_point": [22, 65], "text": "  "}, {"type": "escape_sequence", "children": [], "start_byte": 1080, "end_byte": 1082, "start_point": [22, 65], "end_point": [23, 0], "text": "  "}, {"type": "escape_sequence", "children": [], "start_byte": 1142, "end_byte": 1144, "start_point": [23, 60], "end_point": [23, 62], "text": "  "}, {"type": "escape_sequence", "children": [], "start_byte": 1144, "end_byte": 1146, "start_point": [23, 62], "end_point": [24, 0], "text": "  "}, {"type": "escape_sequence", "children": [], "start_byte": 1205, "end_byte": 1207, "start_point": [24, 59], "end_point": [24, 61], "text": "  "}, {"type": "escape_sequence", "children": [], "start_byte": 1207, "end_byte": 1209, "start_point": [24, 61], "end_point": [25, 0], "text": "  "}, {"type": "escape_sequence", "children": [], "start_byte": 1250, "end_byte": 1252, "start_point": [25, 41], "end_point": [25, 43], "text": "  "}, {"type": "escape_sequence", "children": [], "start_byte": 1252, "end_byte": 1254, "start_point": [25, 43], "end_point": [26, 0], "text": "  "}, {"type": "escape_sequence", "children": [], "start_byte": 1295, "end_byte": 1297, "start_point": [26, 41], "end_point": [26, 43], "text": "If"}, {"type": "escape_sequence", "children": [], "start_byte": 1297, "end_byte": 1299, "start_point": [26, 43], "end_point": [27, 0], "text": " i"}, {"type": "escape_sequence", "children": [], "start_byte": 1308, "end_byte": 1310, "start_point": [27, 9], "end_point": [27, 11], "text": " `"}, {"type": "escape_sequence", "children": [], "start_byte": 1310, "end_byte": 1312, "start_point": [27, 11], "end_point": [28, 0], "text": "bz"}, {"type": "escape_sequence", "children": [], "start_byte": 1374, "end_byte": 1376, "start_point": [28, 62], "end_point": [28, 64], "text": "  "}, {"type": "escape_sequence", "children": [], "start_byte": 1376, "end_byte": 1378, "start_point": [28, 64], "end_point": [29, 0], "text": "de"}, {"type": "escape_sequence", "children": [], "start_byte": 1434, "end_byte": 1436, "start_point": [29, 56], "end_point": [29, 58], "text": "ef"}, {"type": "escape_sequence", "children": [], "start_byte": 1436, "end_byte": 1438, "start_point": [29, 58], "end_point": [30, 0], "text": "au"}, {"type": "escape_sequence", "children": [], "start_byte": 1501, "end_byte": 1503, "start_point": [30, 63], "end_point": [30, 65], "text": "If"}, {"type": "escape_sequence", "children": [], "start_byte": 1503, "end_byte": 1505, "start_point": [30, 65], "end_point": [31, 0], "text": " n"}, {"type": "escape_sequence", "children": [], "start_byte": 1514, "end_byte": 1516, "start_point": [31, 9], "end_point": [31, 11], "text": "me"}, {"type": "escape_sequence", "children": [], "start_byte": 1516, "end_byte": 1518, "start_point": [31, 11], "end_point": [32, 0], "text": "s "}, {"type": "escape_sequence", "children": [], "start_byte": 1587, "end_byte": 1589, "start_point": [32, 69], "end_point": [32, 71], "text": " i"}, {"type": "escape_sequence", "children": [], "start_byte": 1589, "end_byte": 1591, "start_point": [32, 71], "end_point": [33, 0], "text": "np"}, {"type": "escape_sequence", "children": [], "start_byte": 1656, "end_byte": 1658, "start_point": [33, 65], "end_point": [33, 67], "text": "so"}, {"type": "escape_sequence", "children": [], "start_byte": 1658, "end_byte": 1660, "start_point": [33, 67], "end_point": [34, 0], "text": " `"}, {"type": "escape_sequence", "children": [], "start_byte": 1726, "end_byte": 1728, "start_point": [34, 66], "end_point": [34, 68], "text": "NI"}, {"type": "\"", "children": [], "start_byte": 1728, "end_byte": 1729, "start_point": [34, 68], "end_point": [34, 69], "text": "X"}], "start_byte": 421, "end_byte": 1729, "start_point": [12, 8], "end_point": [34, 69], "text": "int this message\\n\\\n         -d --decompress     force decompression\\n\\\n         -z --compress       force compression\\n\\\n         -k --keep           keep (don't delete) input files\\n\\\n         -f --force          overwrite existing output files\\n\\\n         -t --test           test compressed file integrity\\n\\\n         -c --stdout         output to standard out\\n\\\n         -q --quiet          suppress noncritical error messages\\n\\\n         -v --verbose        be verbose (a 2nd -v gives more)\\n\\\n         -L --license        display software version & license\\n\\\n         -V --version        display software version & license\\n\\\n         -s --small          use less memory (at most 2500k)\\n\\\n         -1 .. -9            set block size to 100k .. 900k\\n\\\n         --fast              alias for -1\\n\\\n         --best              alias for -9\\n\\\n         \\n\\\n         If invoked as `bzip2', default action is to compress.\\n\\\n         as `bunzip2',  default action is to decompress.\\n\\\n         as `bzcat', default action is to decompress to stdout.\\n\\\n         \\n\\\n         If no file names are given, bzip2 compresses or decompresses\\n\\\n         from standard input to standard output.  You can combine\\n\\\n         short flags, so `-v -4' means the same as -v4 or -4v, &c.\\n\"\n    );\n\n    // \u5982\u679c\u6709\u9488\u5bf9 UNIX"}, {"type": ")", "children": [], "start_byte": 1734, "end_byte": 1735, "start_point": [35, 4], "end_point": [35, 5], "text": "\u5206"}], "start_byte": 411, "end_byte": 1735, "start_point": [11, 13], "end_point": [35, 5], "text": "        print this message\\n\\\n         -d --decompress     force decompression\\n\\\n         -z --compress       force compression\\n\\\n         -k --keep           keep (don't delete) input files\\n\\\n         -f --force          overwrite existing output files\\n\\\n         -t --test           test compressed file integrity\\n\\\n         -c --stdout         output to standard out\\n\\\n         -q --quiet          suppress noncritical error messages\\n\\\n         -v --verbose        be verbose (a 2nd -v gives more)\\n\\\n         -L --license        display software version & license\\n\\\n         -V --version        display software version & license\\n\\\n         -s --small          use less memory (at most 2500k)\\n\\\n         -1 .. -9            set block size to 100k .. 900k\\n\\\n         --fast              alias for -1\\n\\\n         --best              alias for -9\\n\\\n         \\n\\\n         If invoked as `bzip2', default action is to compress.\\n\\\n         as `bunzip2',  default action is to decompress.\\n\\\n         as `bzcat', default action is to decompress to stdout.\\n\\\n         \\n\\\n         If no file names are given, bzip2 compresses or decompresses\\n\\\n         from standard input to standard output.  You can combine\\n\\\n         short flags, so `-v -4' means the same as -v4 or -4v, &c.\\n\"\n    );\n\n    // \u5982\u679c\u6709\u9488\u5bf9 UNIX \u7684\u7279\u5b9a\u90e8\u5206"}], "start_byte": 402, "end_byte": 1735, "start_point": [11, 4], "end_point": [35, 5], "text": "--help           print this message\\n\\\n         -d --decompress     force decompression\\n\\\n         -z --compress       force compression\\n\\\n         -k --keep           keep (don't delete) input files\\n\\\n         -f --force          overwrite existing output files\\n\\\n         -t --test           test compressed file integrity\\n\\\n         -c --stdout         output to standard out\\n\\\n         -q --quiet          suppress noncritical error messages\\n\\\n         -v --verbose        be verbose (a 2nd -v gives more)\\n\\\n         -L --license        display software version & license\\n\\\n         -V --version        display software version & license\\n\\\n         -s --small          use less memory (at most 2500k)\\n\\\n         -1 .. -9            set block size to 100k .. 900k\\n\\\n         --fast              alias for -1\\n\\\n         --best              alias for -9\\n\\\n         \\n\\\n         If invoked as `bzip2', default action is to compress.\\n\\\n         as `bunzip2',  default action is to decompress.\\n\\\n         as `bzcat', default action is to decompress to stdout.\\n\\\n         \\n\\\n         If no file names are given, bzip2 compresses or decompresses\\n\\\n         from standard input to standard output.  You can combine\\n\\\n         short flags, so `-v -4' means the same as -v4 or -4v, &c.\\n\"\n    );\n\n    // \u5982\u679c\u6709\u9488\u5bf9 UNIX \u7684\u7279\u5b9a\u90e8\u5206"}, {"type": ";", "children": [], "start_byte": 1735, "end_byte": 1736, "start_point": [35, 5], "end_point": [35, 6], "text": "\n"}], "start_byte": 402, "end_byte": 1736, "start_point": [11, 4], "end_point": [35, 6], "text": "--help           print this message\\n\\\n         -d --decompress     force decompression\\n\\\n         -z --compress       force compression\\n\\\n         -k --keep           keep (don't delete) input files\\n\\\n         -f --force          overwrite existing output files\\n\\\n         -t --test           test compressed file integrity\\n\\\n         -c --stdout         output to standard out\\n\\\n         -q --quiet          suppress noncritical error messages\\n\\\n         -v --verbose        be verbose (a 2nd -v gives more)\\n\\\n         -L --license        display software version & license\\n\\\n         -V --version        display software version & license\\n\\\n         -s --small          use less memory (at most 2500k)\\n\\\n         -1 .. -9            set block size to 100k .. 900k\\n\\\n         --fast              alias for -1\\n\\\n         --best              alias for -9\\n\\\n         \\n\\\n         If invoked as `bzip2', default action is to compress.\\n\\\n         as `bunzip2',  default action is to decompress.\\n\\\n         as `bzcat', default action is to decompress to stdout.\\n\\\n         \\n\\\n         If no file names are given, bzip2 compresses or decompresses\\n\\\n         from standard input to standard output.  You can combine\\n\\\n         short flags, so `-v -4' means the same as -v4 or -4v, &c.\\n\"\n    );\n\n    // \u5982\u679c\u6709\u9488\u5bf9 UNIX \u7684\u7279\u5b9a\u90e8\u5206\n"}, {"type": "line_comment", "children": [], "start_byte": 1742, "end_byte": 1781, "start_point": [37, 4], "end_point": [37, 43], "text": "cfg(unix)]\n    eprintln!(\"\\n\");\n}\n\n\n#[c"}, {"type": "attribute_item", "children": [{"type": "#", "children": [], "start_byte": 1786, "end_byte": 1787, "start_point": [38, 4], "end_point": [38, 5], "text": "s"}, {"type": "[", "children": [], "start_byte": 1787, "end_byte": 1788, "start_point": [38, 5], "end_point": [38, 6], "text": "t"}, {"type": "attribute", "children": [{"type": "identifier", "children": [], "start_byte": 1788, "end_byte": 1791, "start_point": [38, 6], "end_point": [38, 9], "text": ")]\n"}, {"type": "token_tree", "children": [{"type": "(", "children": [], "start_byte": 1791, "end_byte": 1792, "start_point": [38, 9], "end_point": [38, 10], "text": "m"}, {"type": "identifier", "children": [], "start_byte": 1792, "end_byte": 1796, "start_point": [38, 10], "end_point": [38, 14], "text": "od t"}, {"type": ")", "children": [], "start_byte": 1796, "end_byte": 1797, "start_point": [38, 14], "end_point": [38, 15], "text": "e"}], "start_byte": 1791, "end_byte": 1797, "start_point": [38, 9], "end_point": [38, 15], "text": "mod te"}], "start_byte": 1788, "end_byte": 1797, "start_point": [38, 6], "end_point": [38, 15], "text": ")]\nmod te"}, {"type": "]", "children": [], "start_byte": 1797, "end_byte": 1798, "start_point": [38, 15], "end_point": [38, 16], "text": "s"}], "start_byte": 1786, "end_byte": 1798, "start_point": [38, 4], "end_point": [38, 16], "text": "st)]\nmod tes"}, {"type": "expression_statement", "children": [{"type": "macro_invocation", "children": [{"type": "identifier", "children": [], "start_byte": 1803, "end_byte": 1811, "start_point": [39, 4], "end_point": [39, 12], "text": "    use "}, {"type": "!", "children": [], "start_byte": 1811, "end_byte": 1812, "start_point": [39, 12], "end_point": [39, 13], "text": "s"}, {"type": "token_tree", "children": [{"type": "(", "children": [], "start_byte": 1812, "end_byte": 1813, "start_point": [39, 13], "end_point": [39, 14], "text": "u"}, {"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 1813, "end_byte": 1814, "start_point": [39, 14], "end_point": [39, 15], "text": "p"}, {"type": "escape_sequence", "children": [], "start_byte": 1814, "end_byte": 1816, "start_point": [39, 15], "end_point": [39, 17], "text": "er"}, {"type": "\"", "children": [], "start_byte": 1816, "end_byte": 1817, "start_point": [39, 17], "end_point": [39, 18], "text": ":"}], "start_byte": 1813, "end_byte": 1817, "start_point": [39, 14], "end_point": [39, 18], "text": "per:"}, {"type": ")", "children": [], "start_byte": 1817, "end_byte": 1818, "start_point": [39, 18], "end_point": [39, 19], "text": ":"}], "start_byte": 1812, "end_byte": 1818, "start_point": [39, 13], "end_point": [39, 19], "text": "uper::"}], "start_byte": 1803, "end_byte": 1818, "start_point": [39, 4], "end_point": [39, 19], "text": "    use super::"}, {"type": ";", "children": [], "start_byte": 1818, "end_byte": 1819, "start_point": [39, 19], "end_point": [39, 20], "text": "*"}], "start_byte": 1803, "end_byte": 1819, "start_point": [39, 4], "end_point": [39, 20], "text": "    use super::*"}, {"type": "}", "children": [], "start_byte": 1820, "end_byte": 1821, "start_point": [40, 0], "end_point": [40, 1], "text": "\n"}], "start_byte": 121, "end_byte": 1821, "start_point": [2, 35], "end_point": [40, 1], "text": "{\n    eprintln!(\n        \"bzip2, a block-sorting file compressor.  Version {}.\\n\",\n        bz2_bzlib_version() // \u5047\u8bbe\u8fd9\u662f Rust \u4e2d\u7684\u5bf9\u5e94\u51fd\u6570\u6216\u53d8\u91cf\n    );\n    eprintln!(\n        \"\\n   usage: {} [flags and input files in any order]\\n\",\n        full_prog_name\n    );\n    eprintln!(\n        \"   -h --help           print this message\\n\\\n         -d --decompress     force decompression\\n\\\n         -z --compress       force compression\\n\\\n         -k --keep           keep (don't delete) input files\\n\\\n         -f --force          overwrite existing output files\\n\\\n         -t --test           test compressed file integrity\\n\\\n         -c --stdout         output to standard out\\n\\\n         -q --quiet          suppress noncritical error messages\\n\\\n         -v --verbose        be verbose (a 2nd -v gives more)\\n\\\n         -L --license        display software version & license\\n\\\n         -V --version        display software version & license\\n\\\n         -s --small          use less memory (at most 2500k)\\n\\\n         -1 .. -9            set block size to 100k .. 900k\\n\\\n         --fast              alias for -1\\n\\\n         --best              alias for -9\\n\\\n         \\n\\\n         If invoked as `bzip2', default action is to compress.\\n\\\n         as `bunzip2',  default action is to decompress.\\n\\\n         as `bzcat', default action is to decompress to stdout.\\n\\\n         \\n\\\n         If no file names are given, bzip2 compresses or decompresses\\n\\\n         from standard input to standard output.  You can combine\\n\\\n         short flags, so `-v -4' means the same as -v4 or -4v, &c.\\n\"\n    );\n\n    // \u5982\u679c\u6709\u9488\u5bf9 UNIX \u7684\u7279\u5b9a\u90e8\u5206\n    #[cfg(unix)]\n    eprintln!(\"\\n\");\n}\n\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n"}], "start_byte": 86, "end_byte": 1821, "start_point": [2, 0], "end_point": [40, 1], "text": "pub fn usage(full_prog_name: &str) {\n    eprintln!(\n        \"bzip2, a block-sorting file compressor.  Version {}.\\n\",\n        bz2_bzlib_version() // \u5047\u8bbe\u8fd9\u662f Rust \u4e2d\u7684\u5bf9\u5e94\u51fd\u6570\u6216\u53d8\u91cf\n    );\n    eprintln!(\n        \"\\n   usage: {} [flags and input files in any order]\\n\",\n        full_prog_name\n    );\n    eprintln!(\n        \"   -h --help           print this message\\n\\\n         -d --decompress     force decompression\\n\\\n         -z --compress       force compression\\n\\\n         -k --keep           keep (don't delete) input files\\n\\\n         -f --force          overwrite existing output files\\n\\\n         -t --test           test compressed file integrity\\n\\\n         -c --stdout         output to standard out\\n\\\n         -q --quiet          suppress noncritical error messages\\n\\\n         -v --verbose        be verbose (a 2nd -v gives more)\\n\\\n         -L --license        display software version & license\\n\\\n         -V --version        display software version & license\\n\\\n         -s --small          use less memory (at most 2500k)\\n\\\n         -1 .. -9            set block size to 100k .. 900k\\n\\\n         --fast              alias for -1\\n\\\n         --best              alias for -9\\n\\\n         \\n\\\n         If invoked as `bzip2', default action is to compress.\\n\\\n         as `bunzip2',  default action is to decompress.\\n\\\n         as `bzcat', default action is to decompress to stdout.\\n\\\n         \\n\\\n         If no file names are given, bzip2 compresses or decompresses\\n\\\n         from standard input to standard output.  You can combine\\n\\\n         short flags, so `-v -4' means the same as -v4 or -4v, &c.\\n\"\n    );\n\n    // \u5982\u679c\u6709\u9488\u5bf9 UNIX \u7684\u7279\u5b9a\u90e8\u5206\n    #[cfg(unix)]\n    eprintln!(\"\\n\");\n}\n\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n"}, {"type": "attribute_item", "children": [{"type": "#", "children": [], "start_byte": 1824, "end_byte": 1825, "start_point": [43, 0], "end_point": [43, 1], "text": " "}, {"type": "[", "children": [], "start_byte": 1825, "end_byte": 1826, "start_point": [43, 1], "end_point": [43, 2], "text": "u"}, {"type": "attribute", "children": [{"type": "identifier", "children": [], "start_byte": 1826, "end_byte": 1829, "start_point": [43, 2], "end_point": [43, 5], "text": "se "}, {"type": "token_tree", "children": [{"type": "(", "children": [], "start_byte": 1829, "end_byte": 1830, "start_point": [43, 5], "end_point": [43, 6], "text": "s"}, {"type": "identifier", "children": [], "start_byte": 1830, "end_byte": 1834, "start_point": [43, 6], "end_point": [43, 10], "text": "td::"}, {"type": ")", "children": [], "start_byte": 1834, "end_byte": 1835, "start_point": [43, 10], "end_point": [43, 11], "text": "f"}], "start_byte": 1829, "end_byte": 1835, "start_point": [43, 5], "end_point": [43, 11], "text": "std::f"}], "start_byte": 1826, "end_byte": 1835, "start_point": [43, 2], "end_point": [43, 11], "text": "se std::f"}, {"type": "]", "children": [], "start_byte": 1835, "end_byte": 1836, "start_point": [43, 11], "end_point": [43, 12], "text": "s"}], "start_byte": 1824, "end_byte": 1836, "start_point": [43, 0], "end_point": [43, 12], "text": " use std::fs"}, {"type": "mod_item", "children": [{"type": "mod", "children": [], "start_byte": 1837, "end_byte": 1840, "start_point": [44, 0], "end_point": [44, 3], "text": ":Fi"}, {"type": "identifier", "children": [], "start_byte": 1841, "end_byte": 1846, "start_point": [44, 4], "end_point": [44, 9], "text": "e;\n  "}, {"type": "declaration_list", "children": [{"type": "{", "children": [], "start_byte": 1847, "end_byte": 1848, "start_point": [44, 10], "end_point": [44, 11], "text": " "}, {"type": "use_declaration", "children": [{"type": "use", "children": [], "start_byte": 1853, "end_byte": 1856, "start_point": [45, 4], "end_point": [45, 7], "text": "td:"}, {"type": "use_wildcard", "children": [{"type": "super", "children": [], "start_byte": 1857, "end_byte": 1862, "start_point": [45, 8], "end_point": [45, 13], "text": "io::R"}, {"type": "::", "children": [], "start_byte": 1862, "end_byte": 1864, "start_point": [45, 13], "end_point": [45, 15], "text": "ea"}, {"type": "*", "children": [], "start_byte": 1864, "end_byte": 1865, "start_point": [45, 15], "end_point": [45, 16], "text": "d"}], "start_byte": 1857, "end_byte": 1865, "start_point": [45, 8], "end_point": [45, 16], "text": "io::Read"}, {"type": ";", "children": [], "start_byte": 1865, "end_byte": 1866, "start_point": [45, 16], "end_point": [45, 17], "text": ";"}], "start_byte": 1853, "end_byte": 1866, "start_point": [45, 4], "end_point": [45, 17], "text": "td::io::Read;"}, {"type": "use_declaration", "children": [{"type": "use", "children": [], "start_byte": 1871, "end_byte": 1874, "start_point": [46, 4], "end_point": [46, 7], "text": "use"}, {"type": "scoped_identifier", "children": [{"type": "scoped_identifier", "children": [{"type": "identifier", "children": [], "start_byte": 1875, "end_byte": 1878, "start_point": [46, 8], "end_point": [46, 11], "text": "std"}, {"type": "::", "children": [], "start_byte": 1878, "end_byte": 1880, "start_point": [46, 11], "end_point": [46, 13], "text": "::"}, {"type": "identifier", "children": [], "start_byte": 1880, "end_byte": 1882, "start_point": [46, 13], "end_point": [46, 15], "text": "io"}], "start_byte": 1875, "end_byte": 1882, "start_point": [46, 8], "end_point": [46, 15], "text": "std::io"}, {"type": "::", "children": [], "start_byte": 1882, "end_byte": 1884, "start_point": [46, 15], "end_point": [46, 17], "text": "::"}, {"type": "identifier", "children": [], "start_byte": 1884, "end_byte": 1888, "start_point": [46, 17], "end_point": [46, 21], "text": "stde"}], "start_byte": 1875, "end_byte": 1888, "start_point": [46, 8], "end_point": [46, 21], "text": "std::io::stde"}, {"type": ";", "children": [], "start_byte": 1888, "end_byte": 1889, "start_point": [46, 21], "end_point": [46, 22], "text": "r"}], "start_byte": 1871, "end_byte": 1889, "start_point": [46, 4], "end_point": [46, 22], "text": "use std::io::stder"}, {"type": "use_declaration", "children": [{"type": "use", "children": [], "start_byte": 1894, "end_byte": 1897, "start_point": [47, 4], "end_point": [47, 7], "text": "  u"}, {"type": "scoped_identifier", "children": [{"type": "scoped_identifier", "children": [{"type": "identifier", "children": [], "start_byte": 1898, "end_byte": 1901, "start_point": [47, 8], "end_point": [47, 11], "text": "e s"}, {"type": "::", "children": [], "start_byte": 1901, "end_byte": 1903, "start_point": [47, 11], "end_point": [47, 13], "text": "td"}, {"type": "identifier", "children": [], "start_byte": 1903, "end_byte": 1905, "start_point": [47, 13], "end_point": [47, 15], "text": "::"}], "start_byte": 1898, "end_byte": 1905, "start_point": [47, 8], "end_point": [47, 15], "text": "e std::"}, {"type": "::", "children": [], "start_byte": 1905, "end_byte": 1907, "start_point": [47, 15], "end_point": [47, 17], "text": "io"}, {"type": "identifier", "children": [], "start_byte": 1907, "end_byte": 1911, "start_point": [47, 17], "end_point": [47, 21], "text": "::Wr"}], "start_byte": 1898, "end_byte": 1911, "start_point": [47, 8], "end_point": [47, 21], "text": "e std::io::Wr"}, {"type": ";", "children": [], "start_byte": 1911, "end_byte": 1912, "start_point": [47, 21], "end_point": [47, 22], "text": "i"}], "start_byte": 1894, "end_byte": 1912, "start_point": [47, 4], "end_point": [47, 22], "text": "  use std::io::Wri"}, {"type": "use_declaration", "children": [{"type": "use", "children": [], "start_byte": 1917, "end_byte": 1920, "start_point": [48, 4], "end_point": [48, 7], "text": "   "}, {"type": "scoped_identifier", "children": [{"type": "scoped_identifier", "children": [{"type": "identifier", "children": [], "start_byte": 1921, "end_byte": 1924, "start_point": [48, 8], "end_point": [48, 11], "text": "#[t"}, {"type": "::", "children": [], "start_byte": 1924, "end_byte": 1926, "start_point": [48, 11], "end_point": [48, 13], "text": "es"}, {"type": "identifier", "children": [], "start_byte": 1926, "end_byte": 1928, "start_point": [48, 13], "end_point": [48, 15], "text": "t]"}], "start_byte": 1921, "end_byte": 1928, "start_point": [48, 8], "end_point": [48, 15], "text": "#[test]"}, {"type": "::", "children": [], "start_byte": 1928, "end_byte": 1930, "start_point": [48, 15], "end_point": [48, 17], "text": "\n "}, {"type": "identifier", "children": [], "start_byte": 1930, "end_byte": 1936, "start_point": [48, 17], "end_point": [48, 23], "text": "   fn "}], "start_byte": 1921, "end_byte": 1936, "start_point": [48, 8], "end_point": [48, 23], "text": "#[test]\n    fn "}, {"type": ";", "children": [], "start_byte": 1936, "end_byte": 1937, "start_point": [48, 23], "end_point": [48, 24], "text": "t"}], "start_byte": 1917, "end_byte": 1937, "start_point": [48, 4], "end_point": [48, 24], "text": "    #[test]\n    fn t"}, {"type": "use_declaration", "children": [{"type": "use", "children": [], "start_byte": 1942, "end_byte": 1945, "start_point": [49, 4], "end_point": [49, 7], "text": "sag"}, {"type": "scoped_identifier", "children": [{"type": "scoped_identifier", "children": [{"type": "identifier", "children": [], "start_byte": 1946, "end_byte": 1949, "start_point": [49, 8], "end_point": [49, 11], "text": "_ou"}, {"type": "::", "children": [], "start_byte": 1949, "end_byte": 1951, "start_point": [49, 11], "end_point": [49, 13], "text": "tp"}, {"type": "identifier", "children": [], "start_byte": 1951, "end_byte": 1953, "start_point": [49, 13], "end_point": [49, 15], "text": "ut"}], "start_byte": 1946, "end_byte": 1953, "start_point": [49, 8], "end_point": [49, 15], "text": "_output"}, {"type": "::", "children": [], "start_byte": 1953, "end_byte": 1955, "start_point": [49, 15], "end_point": [49, 17], "text": "()"}, {"type": "identifier", "children": [], "start_byte": 1955, "end_byte": 1960, "start_point": [49, 17], "end_point": [49, 22], "text": " {\n  "}], "start_byte": 1946, "end_byte": 1960, "start_point": [49, 8], "end_point": [49, 22], "text": "_output() {\n  "}, {"type": ";", "children": [], "start_byte": 1960, "end_byte": 1961, "start_point": [49, 22], "end_point": [49, 23], "text": " "}], "start_byte": 1942, "end_byte": 1961, "start_point": [49, 4], "end_point": [49, 23], "text": "sage_output() {\n   "}, {"type": "attribute_item", "children": [{"type": "#", "children": [], "start_byte": 1967, "end_byte": 1968, "start_point": [51, 4], "end_point": [51, 5], "text": "e"}, {"type": "[", "children": [], "start_byte": 1968, "end_byte": 1969, "start_point": [51, 5], "end_point": [51, 6], "text": "t"}, {"type": "attribute", "children": [{"type": "identifier", "children": [], "start_byte": 1969, "end_byte": 1973, "start_point": [51, 6], "end_point": [51, 10], "text": " tes"}], "start_byte": 1969, "end_byte": 1973, "start_point": [51, 6], "end_point": [51, 10], "text": " tes"}, {"type": "]", "children": [], "start_byte": 1973, "end_byte": 1974, "start_point": [51, 10], "end_point": [51, 11], "text": "t"}], "start_byte": 1967, "end_byte": 1974, "start_point": [51, 4], "end_point": [51, 11], "text": "et test"}, {"type": "function_item", "children": [{"type": "fn", "children": [], "start_byte": 1979, "end_byte": 1981, "start_point": [52, 4], "end_point": [52, 6], "text": "_n"}, {"type": "identifier", "children": [], "start_byte": 1982, "end_byte": 1999, "start_point": [52, 7], "end_point": [52, 24], "text": "me = \"bzip2test\";"}, {"type": "parameters", "children": [{"type": "(", "children": [], "start_byte": 1999, "end_byte": 2000, "start_point": [52, 24], "end_point": [52, 25], "text": "\n"}, {"type": ")", "children": [], "start_byte": 2000, "end_byte": 2001, "start_point": [52, 25], "end_point": [52, 26], "text": "\n"}], "start_byte": 1999, "end_byte": 2001, "start_point": [52, 24], "end_point": [52, 26], "text": "\n\n"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 2002, "end_byte": 2003, "start_point": [52, 27], "end_point": [52, 28], "text": " "}, {"type": "let_declaration", "children": [{"type": "let", "children": [], "start_byte": 2012, "end_byte": 2015, "start_point": [53, 8], "end_point": [53, 11], "text": "   "}, {"type": "identifier", "children": [], "start_byte": 2016, "end_byte": 2030, "start_point": [53, 12], "end_point": [53, 26], "text": "       // \u7528Fil"}, {"type": "=", "children": [], "start_byte": 2031, "end_byte": 2032, "start_point": [53, 27], "end_point": [53, 28], "text": "\u8986"}, {"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 2033, "end_byte": 2034, "start_point": [53, 29], "end_point": [53, 30], "text": "s"}, {"type": "\"", "children": [], "start_byte": 2043, "end_byte": 2044, "start_point": [53, 39], "end_point": [53, 40], "text": " "}], "start_byte": 2033, "end_byte": 2044, "start_point": [53, 29], "end_point": [53, 40], "text": "stderr\n    "}, {"type": ";", "children": [], "start_byte": 2044, "end_byte": 2045, "start_point": [53, 40], "end_point": [53, 41], "text": " "}], "start_byte": 2012, "end_byte": 2045, "start_point": [53, 8], "end_point": [53, 41], "text": "           // \u7528File\u8986\u76d6stderr\n     "}, {"type": "expression_statement", "children": [{"type": "block", "children": [{"type": "{", "children": [], "start_byte": 2055, "end_byte": 2056, "start_point": [55, 8], "end_point": [55, 9], "text": " "}, {"type": "line_comment", "children": [], "start_byte": 2069, "end_byte": 2091, "start_point": [56, 12], "end_point": [56, 34], "text": "stderr();\n            "}, {"type": "let_declaration", "children": [{"type": "let", "children": [], "start_byte": 2104, "end_byte": 2107, "start_point": [57, 12], "end_point": [57, 15], "text": "= F"}, {"type": "mutable_specifier", "children": [], "start_byte": 2108, "end_byte": 2111, "start_point": [57, 16], "end_point": [57, 19], "text": "le:"}, {"type": "identifier", "children": [], "start_byte": 2112, "end_byte": 2118, "start_point": [57, 20], "end_point": [57, 26], "text": "create"}, {"type": "=", "children": [], "start_byte": 2119, "end_byte": 2120, "start_point": [57, 27], "end_point": [57, 28], "text": "\""}, {"type": "call_expression", "children": [{"type": "identifier", "children": [], "start_byte": 2121, "end_byte": 2127, "start_point": [57, 29], "end_point": [57, 35], "text": "tmp/te"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 2127, "end_byte": 2128, "start_point": [57, 35], "end_point": [57, 36], "text": "s"}, {"type": ")", "children": [], "start_byte": 2128, "end_byte": 2129, "start_point": [57, 36], "end_point": [57, 37], "text": "t"}], "start_byte": 2127, "end_byte": 2129, "start_point": [57, 35], "end_point": [57, 37], "text": "st"}], "start_byte": 2121, "end_byte": 2129, "start_point": [57, 29], "end_point": [57, 37], "text": "tmp/test"}, {"type": ";", "children": [], "start_byte": 2129, "end_byte": 2130, "start_point": [57, 37], "end_point": [57, 38], "text": "_"}], "start_byte": 2104, "end_byte": 2130, "start_point": [57, 12], "end_point": [57, 38], "text": "= File::create(\"/tmp/test_"}, {"type": "let_declaration", "children": [{"type": "let", "children": [], "start_byte": 2143, "end_byte": 2146, "start_point": [58, 12], "end_point": [58, 15], "text": "unw"}, {"type": "mutable_specifier", "children": [], "start_byte": 2147, "end_byte": 2150, "start_point": [58, 16], "end_point": [58, 19], "text": "ap("}, {"type": "identifier", "children": [], "start_byte": 2151, "end_byte": 2155, "start_point": [58, 20], "end_point": [58, 24], "text": ";\n  "}, {"type": "=", "children": [], "start_byte": 2156, "end_byte": 2157, "start_point": [58, 25], "end_point": [58, 26], "text": " "}, {"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "call_expression", "children": [{"type": "scoped_identifier", "children": [{"type": "identifier", "children": [], "start_byte": 2158, "end_byte": 2162, "start_point": [58, 27], "end_point": [58, 31], "text": "    "}, {"type": "::", "children": [], "start_byte": 2162, "end_byte": 2164, "start_point": [58, 31], "end_point": [58, 33], "text": "  "}, {"type": "identifier", "children": [], "start_byte": 2164, "end_byte": 2170, "start_point": [58, 33], "end_point": [58, 39], "text": " let _"}], "start_byte": 2158, "end_byte": 2170, "start_point": [58, 27], "end_point": [58, 39], "text": "       let _"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 2170, "end_byte": 2171, "start_point": [58, 39], "end_point": [58, 40], "text": "g"}, {"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 2171, "end_byte": 2172, "start_point": [58, 40], "end_point": [58, 41], "text": "u"}, {"type": "\"", "children": [], "start_byte": 2192, "end_byte": 2193, "start_point": [58, 61], "end_point": [58, 62], "text": "\n"}], "start_byte": 2171, "end_byte": 2193, "start_point": [58, 40], "end_point": [58, 62], "text": "uard = stderr.lock();\n"}, {"type": ")", "children": [], "start_byte": 2193, "end_byte": 2194, "start_point": [58, 62], "end_point": [58, 63], "text": "\n"}], "start_byte": 2170, "end_byte": 2194, "start_point": [58, 39], "end_point": [58, 63], "text": "guard = stderr.lock();\n\n"}], "start_byte": 2158, "end_byte": 2194, "start_point": [58, 27], "end_point": [58, 63], "text": "       let _guard = stderr.lock();\n\n"}, {"type": ".", "children": [], "start_byte": 2194, "end_byte": 2195, "start_point": [58, 63], "end_point": [58, 64], "text": " "}, {"type": "field_identifier", "children": [], "start_byte": 2195, "end_byte": 2201, "start_point": [58, 64], "end_point": [58, 70], "text": "      "}], "start_byte": 2158, "end_byte": 2201, "start_point": [58, 27], "end_point": [58, 70], "text": "       let _guard = stderr.lock();\n\n       "}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 2201, "end_byte": 2202, "start_point": [58, 70], "end_point": [58, 71], "text": " "}, {"type": ")", "children": [], "start_byte": 2202, "end_byte": 2203, "start_point": [58, 71], "end_point": [58, 72], "text": " "}], "start_byte": 2201, "end_byte": 2203, "start_point": [58, 70], "end_point": [58, 72], "text": "  "}], "start_byte": 2158, "end_byte": 2203, "start_point": [58, 27], "end_point": [58, 72], "text": "       let _guard = stderr.lock();\n\n         "}, {"type": ";", "children": [], "start_byte": 2203, "end_byte": 2204, "start_point": [58, 72], "end_point": [58, 73], "text": " "}], "start_byte": 2143, "end_byte": 2204, "start_point": [58, 12], "end_point": [58, 73], "text": "unwrap();\n            let _guard = stderr.lock();\n\n          "}, {"type": "let_declaration", "children": [{"type": "let", "children": [], "start_byte": 2217, "end_byte": 2220, "start_point": [59, 12], "end_point": [59, 15], "text": ", \""}, {"type": "identifier", "children": [], "start_byte": 2221, "end_byte": 2227, "start_point": [59, 16], "end_point": [59, 22], "text": "}\", te"}, {"type": "=", "children": [], "start_byte": 2228, "end_byte": 2229, "start_point": [59, 23], "end_point": [59, 24], "text": "t"}, {"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 2230, "end_byte": 2236, "start_point": [59, 25], "end_point": [59, 31], "text": "prog_n"}, {"type": ".", "children": [], "start_byte": 2236, "end_byte": 2237, "start_point": [59, 31], "end_point": [59, 32], "text": "a"}, {"type": "field_identifier", "children": [], "start_byte": 2237, "end_byte": 2241, "start_point": [59, 32], "end_point": [59, 36], "text": "me)."}], "start_byte": 2230, "end_byte": 2241, "start_point": [59, 25], "end_point": [59, 36], "text": "prog_name)."}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 2241, "end_byte": 2242, "start_point": [59, 36], "end_point": [59, 37], "text": "u"}, {"type": ")", "children": [], "start_byte": 2242, "end_byte": 2243, "start_point": [59, 37], "end_point": [59, 38], "text": "n"}], "start_byte": 2241, "end_byte": 2243, "start_point": [59, 36], "end_point": [59, 38], "text": "un"}], "start_byte": 2230, "end_byte": 2243, "start_point": [59, 25], "end_point": [59, 38], "text": "prog_name).un"}, {"type": ";", "children": [], "start_byte": 2243, "end_byte": 2244, "start_point": [59, 38], "end_point": [59, 39], "text": "w"}], "start_byte": 2217, "end_byte": 2244, "start_point": [59, 12], "end_point": [59, 39], "text": ", \"{}\", test_prog_name).unw"}, {"type": "expression_statement", "children": [{"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "macro_invocation", "children": [{"type": "identifier", "children": [], "start_byte": 2258, "end_byte": 2263, "start_point": [61, 12], "end_point": [61, 17], "text": "     "}, {"type": "!", "children": [], "start_byte": 2263, "end_byte": 2264, "start_point": [61, 17], "end_point": [61, 18], "text": "u"}, {"type": "token_tree", "children": [{"type": "(", "children": [], "start_byte": 2264, "end_byte": 2265, "start_point": [61, 18], "end_point": [61, 19], "text": "s"}, {"type": "identifier", "children": [], "start_byte": 2265, "end_byte": 2269, "start_point": [61, 19], "end_point": [61, 23], "text": "age("}, {"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 2271, "end_byte": 2272, "start_point": [61, 25], "end_point": [61, 26], "text": "s"}, {"type": "\"", "children": [], "start_byte": 2274, "end_byte": 2275, "start_point": [61, 28], "end_point": [61, 29], "text": "p"}], "start_byte": 2271, "end_byte": 2275, "start_point": [61, 25], "end_point": [61, 29], "text": "st_p"}, {"type": "identifier", "children": [], "start_byte": 2277, "end_byte": 2291, "start_point": [61, 31], "end_point": [61, 45], "text": "g_name);\n     "}, {"type": ")", "children": [], "start_byte": 2291, "end_byte": 2292, "start_point": [61, 45], "end_point": [61, 46], "text": " "}], "start_byte": 2264, "end_byte": 2292, "start_point": [61, 18], "end_point": [61, 46], "text": "sage(test_prog_name);\n      "}], "start_byte": 2258, "end_byte": 2292, "start_point": [61, 12], "end_point": [61, 46], "text": "     usage(test_prog_name);\n      "}, {"type": ".", "children": [], "start_byte": 2292, "end_byte": 2293, "start_point": [61, 46], "end_point": [61, 47], "text": " "}, {"type": "field_identifier", "children": [], "start_byte": 2293, "end_byte": 2299, "start_point": [61, 47], "end_point": [61, 53], "text": " }\n\n  "}], "start_byte": 2258, "end_byte": 2299, "start_point": [61, 12], "end_point": [61, 53], "text": "     usage(test_prog_name);\n        }\n\n  "}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 2299, "end_byte": 2300, "start_point": [61, 53], "end_point": [61, 54], "text": " "}, {"type": ")", "children": [], "start_byte": 2300, "end_byte": 2301, "start_point": [61, 54], "end_point": [61, 55], "text": " "}], "start_byte": 2299, "end_byte": 2301, "start_point": [61, 53], "end_point": [61, 55], "text": "  "}], "start_byte": 2258, "end_byte": 2301, "start_point": [61, 12], "end_point": [61, 55], "text": "     usage(test_prog_name);\n        }\n\n    "}, {"type": ";", "children": [], "start_byte": 2301, "end_byte": 2302, "start_point": [61, 55], "end_point": [61, 56], "text": " "}], "start_byte": 2258, "end_byte": 2302, "start_point": [61, 12], "end_point": [61, 56], "text": "     usage(test_prog_name);\n        }\n\n     "}, {"type": "expression_statement", "children": [{"type": "call_expression", "children": [{"type": "identifier", "children": [], "start_byte": 2315, "end_byte": 2320, "start_point": [62, 12], "end_point": [62, 17], "text": "ffer "}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 2320, "end_byte": 2321, "start_point": [62, 17], "end_point": [62, 18], "text": "="}, {"type": "identifier", "children": [], "start_byte": 2321, "end_byte": 2335, "start_point": [62, 18], "end_point": [62, 32], "text": " String::new()"}, {"type": ")", "children": [], "start_byte": 2335, "end_byte": 2336, "start_point": [62, 32], "end_point": [62, 33], "text": ";"}], "start_byte": 2320, "end_byte": 2336, "start_point": [62, 17], "end_point": [62, 33], "text": "= String::new();"}], "start_byte": 2315, "end_byte": 2336, "start_point": [62, 12], "end_point": [62, 33], "text": "ffer = String::new();"}, {"type": ";", "children": [], "start_byte": 2336, "end_byte": 2337, "start_point": [62, 33], "end_point": [62, 34], "text": "\n"}], "start_byte": 2315, "end_byte": 2337, "start_point": [62, 12], "end_point": [62, 34], "text": "ffer = String::new();\n"}, {"type": "}", "children": [], "start_byte": 2346, "end_byte": 2347, "start_point": [63, 8], "end_point": [63, 9], "text": "i"}], "start_byte": 2055, "end_byte": 2347, "start_point": [55, 8], "end_point": [63, 9], "text": " mut stderr = stderr();\n            let mut file = File::create(\"/tmp/test_output.txt\").unwrap();\n            let _guard = stderr.lock();\n\n            write!(file, \"{}\", test_prog_name).unwrap();\n            usage(test_prog_name);\n        }\n\n        let mut buffer = String::new();\n        Fi"}], "start_byte": 2055, "end_byte": 2347, "start_point": [55, 8], "end_point": [63, 9], "text": " mut stderr = stderr();\n            let mut file = File::create(\"/tmp/test_output.txt\").unwrap();\n            let _guard = stderr.lock();\n\n            write!(file, \"{}\", test_prog_name).unwrap();\n            usage(test_prog_name);\n        }\n\n        let mut buffer = String::new();\n        Fi"}, {"type": "let_declaration", "children": [{"type": "let", "children": [], "start_byte": 2357, "end_byte": 2360, "start_point": [65, 8], "end_point": [65, 11], "text": "/tm"}, {"type": "mutable_specifier", "children": [], "start_byte": 2361, "end_byte": 2364, "start_point": [65, 12], "end_point": [65, 15], "text": "/te"}, {"type": "identifier", "children": [], "start_byte": 2365, "end_byte": 2371, "start_point": [65, 16], "end_point": [65, 22], "text": "t_outp"}, {"type": "=", "children": [], "start_byte": 2372, "end_byte": 2373, "start_point": [65, 23], "end_point": [65, 24], "text": "t"}, {"type": "call_expression", "children": [{"type": "scoped_identifier", "children": [{"type": "identifier", "children": [], "start_byte": 2374, "end_byte": 2380, "start_point": [65, 25], "end_point": [65, 31], "text": "txt\")."}, {"type": "::", "children": [], "start_byte": 2380, "end_byte": 2382, "start_point": [65, 31], "end_point": [65, 33], "text": "un"}, {"type": "identifier", "children": [], "start_byte": 2382, "end_byte": 2385, "start_point": [65, 33], "end_point": [65, 36], "text": "wra"}], "start_byte": 2374, "end_byte": 2385, "start_point": [65, 25], "end_point": [65, 36], "text": "txt\").unwra"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 2385, "end_byte": 2386, "start_point": [65, 36], "end_point": [65, 37], "text": "p"}, {"type": ")", "children": [], "start_byte": 2386, "end_byte": 2387, "start_point": [65, 37], "end_point": [65, 38], "text": "("}], "start_byte": 2385, "end_byte": 2387, "start_point": [65, 36], "end_point": [65, 38], "text": "p("}], "start_byte": 2374, "end_byte": 2387, "start_point": [65, 25], "end_point": [65, 38], "text": "txt\").unwrap("}, {"type": ";", "children": [], "start_byte": 2387, "end_byte": 2388, "start_point": [65, 38], "end_point": [65, 39], "text": ")"}], "start_byte": 2357, "end_byte": 2388, "start_point": [65, 8], "end_point": [65, 39], "text": "/tmp/test_output.txt\").unwrap()"}, {"type": "expression_statement", "children": [{"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "call_expression", "children": [{"type": "scoped_identifier", "children": [{"type": "identifier", "children": [], "start_byte": 2397, "end_byte": 2401, "start_point": [66, 8], "end_point": [66, 12], "text": "stri"}, {"type": "::", "children": [], "start_byte": 2401, "end_byte": 2403, "start_point": [66, 12], "end_point": [66, 14], "text": "ng"}, {"type": "identifier", "children": [], "start_byte": 2403, "end_byte": 2407, "start_point": [66, 14], "end_point": [66, 18], "text": "(&mu"}], "start_byte": 2397, "end_byte": 2407, "start_point": [66, 8], "end_point": [66, 18], "text": "string(&mu"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 2407, "end_byte": 2408, "start_point": [66, 18], "end_point": [66, 19], "text": "t"}, {"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 2408, "end_byte": 2409, "start_point": [66, 19], "end_point": [66, 20], "text": " "}, {"type": "\"", "children": [], "start_byte": 2429, "end_byte": 2430, "start_point": [66, 40], "end_point": [66, 41], "text": " "}], "start_byte": 2408, "end_byte": 2430, "start_point": [66, 19], "end_point": [66, 41], "text": " buffer).unwrap();\n   "}, {"type": ")", "children": [], "start_byte": 2430, "end_byte": 2431, "start_point": [66, 41], "end_point": [66, 42], "text": " "}], "start_byte": 2407, "end_byte": 2431, "start_point": [66, 18], "end_point": [66, 42], "text": "t buffer).unwrap();\n    "}], "start_byte": 2397, "end_byte": 2431, "start_point": [66, 8], "end_point": [66, 42], "text": "string(&mut buffer).unwrap();\n    "}, {"type": ".", "children": [], "start_byte": 2431, "end_byte": 2432, "start_point": [66, 42], "end_point": [66, 43], "text": " "}, {"type": "field_identifier", "children": [], "start_byte": 2432, "end_byte": 2438, "start_point": [66, 43], "end_point": [66, 49], "text": "   ass"}], "start_byte": 2397, "end_byte": 2438, "start_point": [66, 8], "end_point": [66, 49], "text": "string(&mut buffer).unwrap();\n        ass"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 2438, "end_byte": 2439, "start_point": [66, 49], "end_point": [66, 50], "text": "e"}, {"type": ")", "children": [], "start_byte": 2439, "end_byte": 2440, "start_point": [66, 50], "end_point": [66, 51], "text": "r"}], "start_byte": 2438, "end_byte": 2440, "start_point": [66, 49], "end_point": [66, 51], "text": "er"}], "start_byte": 2397, "end_byte": 2440, "start_point": [66, 8], "end_point": [66, 51], "text": "string(&mut buffer).unwrap();\n        asser"}, {"type": ".", "children": [], "start_byte": 2440, "end_byte": 2441, "start_point": [66, 51], "end_point": [66, 52], "text": "t"}, {"type": "field_identifier", "children": [], "start_byte": 2441, "end_byte": 2455, "start_point": [66, 52], "end_point": [66, 66], "text": "!(buffer.conta"}], "start_byte": 2397, "end_byte": 2455, "start_point": [66, 8], "end_point": [66, 66], "text": "string(&mut buffer).unwrap();\n        assert!(buffer.conta"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 2455, "end_byte": 2456, "start_point": [66, 66], "end_point": [66, 67], "text": "i"}, {"type": "reference_expression", "children": [{"type": "&", "children": [], "start_byte": 2456, "end_byte": 2457, "start_point": [66, 67], "end_point": [66, 68], "text": "n"}, {"type": "mutable_specifier", "children": [], "start_byte": 2457, "end_byte": 2460, "start_point": [66, 68], "end_point": [66, 71], "text": "s(t"}, {"type": "identifier", "children": [], "start_byte": 2461, "end_byte": 2467, "start_point": [66, 72], "end_point": [66, 78], "text": "st_pro"}], "start_byte": 2456, "end_byte": 2467, "start_point": [66, 67], "end_point": [66, 78], "text": "ns(test_pro"}, {"type": ")", "children": [], "start_byte": 2467, "end_byte": 2468, "start_point": [66, 78], "end_point": [66, 79], "text": "g"}], "start_byte": 2455, "end_byte": 2468, "start_point": [66, 66], "end_point": [66, 79], "text": "ins(test_prog"}], "start_byte": 2397, "end_byte": 2468, "start_point": [66, 8], "end_point": [66, 79], "text": "string(&mut buffer).unwrap();\n        assert!(buffer.contains(test_prog"}, {"type": ".", "children": [], "start_byte": 2468, "end_byte": 2469, "start_point": [66, 79], "end_point": [66, 80], "text": "_"}, {"type": "field_identifier", "children": [], "start_byte": 2469, "end_byte": 2475, "start_point": [66, 80], "end_point": [66, 86], "text": "name))"}], "start_byte": 2397, "end_byte": 2475, "start_point": [66, 8], "end_point": [66, 86], "text": "string(&mut buffer).unwrap();\n        assert!(buffer.contains(test_prog_name))"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 2475, "end_byte": 2476, "start_point": [66, 86], "end_point": [66, 87], "text": ";"}, {"type": ")", "children": [], "start_byte": 2476, "end_byte": 2477, "start_point": [66, 87], "end_point": [66, 88], "text": "\n"}], "start_byte": 2475, "end_byte": 2477, "start_point": [66, 86], "end_point": [66, 88], "text": ";\n"}], "start_byte": 2397, "end_byte": 2477, "start_point": [66, 8], "end_point": [66, 88], "text": "string(&mut buffer).unwrap();\n        assert!(buffer.contains(test_prog_name));\n"}, {"type": ";", "children": [], "start_byte": 2477, "end_byte": 2478, "start_point": [66, 88], "end_point": [66, 89], "text": " "}], "start_byte": 2397, "end_byte": 2478, "start_point": [66, 8], "end_point": [66, 89], "text": "string(&mut buffer).unwrap();\n        assert!(buffer.contains(test_prog_name));\n "}, {"type": "expression_statement", "children": [{"type": "macro_invocation", "children": [{"type": "identifier", "children": [], "start_byte": 2487, "end_byte": 2493, "start_point": [67, 8], "end_point": [67, 14], "text": ""}, {"type": "!", "children": [], "start_byte": 2493, "end_byte": 2494, "start_point": [67, 14], "end_point": [67, 15], "text": ""}, {"type": "token_tree", "children": [{"type": "(", "children": [], "start_byte": 2494, "end_byte": 2495, "start_point": [67, 15], "end_point": [67, 16], "text": ""}, {"type": "identifier", "children": [], "start_byte": 2495, "end_byte": 2501, "start_point": [67, 16], "end_point": [67, 22], "text": ""}, {"type": "identifier", "children": [], "start_byte": 2502, "end_byte": 2510, "start_point": [67, 23], "end_point": [67, 31], "text": ""}, {"type": "token_tree", "children": [{"type": "(", "children": [], "start_byte": 2510, "end_byte": 2511, "start_point": [67, 31], "end_point": [67, 32], "text": ""}, {"type": "identifier", "children": [], "start_byte": 2511, "end_byte": 2525, "start_point": [67, 32], "end_point": [67, 46], "text": ""}, {"type": ")", "children": [], "start_byte": 2525, "end_byte": 2526, "start_point": [67, 46], "end_point": [67, 47], "text": ""}], "start_byte": 2510, "end_byte": 2526, "start_point": [67, 31], "end_point": [67, 47], "text": ""}, {"type": ")", "children": [], "start_byte": 2526, "end_byte": 2527, "start_point": [67, 47], "end_point": [67, 48], "text": ""}], "start_byte": 2494, "end_byte": 2527, "start_point": [67, 15], "end_point": [67, 48], "text": ""}], "start_byte": 2487, "end_byte": 2527, "start_point": [67, 8], "end_point": [67, 48], "text": ""}, {"type": ";", "children": [], "start_byte": 2527, "end_byte": 2528, "start_point": [67, 48], "end_point": [67, 49], "text": ""}], "start_byte": 2487, "end_byte": 2528, "start_point": [67, 8], "end_point": [67, 49], "text": ""}, {"type": "}", "children": [], "start_byte": 2533, "end_byte": 2534, "start_point": [68, 4], "end_point": [68, 5], "text": ""}], "start_byte": 2002, "end_byte": 2534, "start_point": [52, 27], "end_point": [68, 5], "text": "       {\n            // \u7528File\u8986\u76d6stderr\n            let mut stderr = stderr();\n            let mut file = File::create(\"/tmp/test_output.txt\").unwrap();\n            let _guard = stderr.lock();\n\n            write!(file, \"{}\", test_prog_name).unwrap();\n            usage(test_prog_name);\n        }\n\n        let mut buffer = String::new();\n        File::open(\"/tmp/test_output.txt\").unwrap().read_to_string(&mut buffer).unwrap();\n        assert!(buffer.contains(test_prog_name));\n    }\n}"}], "start_byte": 1979, "end_byte": 2534, "start_point": [52, 4], "end_point": [68, 5], "text": "_name = \"bzip2test\";\n\n        {\n            // \u7528File\u8986\u76d6stderr\n            let mut stderr = stderr();\n            let mut file = File::create(\"/tmp/test_output.txt\").unwrap();\n            let _guard = stderr.lock();\n\n            write!(file, \"{}\", test_prog_name).unwrap();\n            usage(test_prog_name);\n        }\n\n        let mut buffer = String::new();\n        File::open(\"/tmp/test_output.txt\").unwrap().read_to_string(&mut buffer).unwrap();\n        assert!(buffer.contains(test_prog_name));\n    }\n}"}, {"type": "}", "children": [], "start_byte": 2535, "end_byte": 2536, "start_point": [69, 0], "end_point": [69, 1], "text": ""}], "start_byte": 1847, "end_byte": 2536, "start_point": [44, 10], "end_point": [69, 1], "text": " use std::io::Read;\n    use std::io::stderr;\n    use std::io::Write;\n\n    #[test]\n    fn test_usage_output() {\n        let test_prog_name = \"bzip2test\";\n\n        {\n            // \u7528File\u8986\u76d6stderr\n            let mut stderr = stderr();\n            let mut file = File::create(\"/tmp/test_output.txt\").unwrap();\n            let _guard = stderr.lock();\n\n            write!(file, \"{}\", test_prog_name).unwrap();\n            usage(test_prog_name);\n        }\n\n        let mut buffer = String::new();\n        File::open(\"/tmp/test_output.txt\").unwrap().read_to_string(&mut buffer).unwrap();\n        assert!(buffer.contains(test_prog_name));\n    }\n}"}], "start_byte": 1837, "end_byte": 2536, "start_point": [44, 0], "end_point": [69, 1], "text": ":File;\n    use std::io::Read;\n    use std::io::stderr;\n    use std::io::Write;\n\n    #[test]\n    fn test_usage_output() {\n        let test_prog_name = \"bzip2test\";\n\n        {\n            // \u7528File\u8986\u76d6stderr\n            let mut stderr = stderr();\n            let mut file = File::create(\"/tmp/test_output.txt\").unwrap();\n            let _guard = stderr.lock();\n\n            write!(file, \"{}\", test_prog_name).unwrap();\n            usage(test_prog_name);\n        }\n\n        let mut buffer = String::new();\n        File::open(\"/tmp/test_output.txt\").unwrap().read_to_string(&mut buffer).unwrap();\n        assert!(buffer.contains(test_prog_name));\n    }\n}"}], "start_byte": 0, "end_byte": 2536, "start_point": [0, 0], "end_point": [69, 1], "text": "use crate::bzlib::scc_61_root_42_BZ2_bzlibVersion::*;\n// usage ( Char *fullProgName )\npub fn usage(full_prog_name: &str) {\n    eprintln!(\n        \"bzip2, a block-sorting file compressor.  Version {}.\\n\",\n        bz2_bzlib_version() // \u5047\u8bbe\u8fd9\u662f Rust \u4e2d\u7684\u5bf9\u5e94\u51fd\u6570\u6216\u53d8\u91cf\n    );\n    eprintln!(\n        \"\\n   usage: {} [flags and input files in any order]\\n\",\n        full_prog_name\n    );\n    eprintln!(\n        \"   -h --help           print this message\\n\\\n         -d --decompress     force decompression\\n\\\n         -z --compress       force compression\\n\\\n         -k --keep           keep (don't delete) input files\\n\\\n         -f --force          overwrite existing output files\\n\\\n         -t --test           test compressed file integrity\\n\\\n         -c --stdout         output to standard out\\n\\\n         -q --quiet          suppress noncritical error messages\\n\\\n         -v --verbose        be verbose (a 2nd -v gives more)\\n\\\n         -L --license        display software version & license\\n\\\n         -V --version        display software version & license\\n\\\n         -s --small          use less memory (at most 2500k)\\n\\\n         -1 .. -9            set block size to 100k .. 900k\\n\\\n         --fast              alias for -1\\n\\\n         --best              alias for -9\\n\\\n         \\n\\\n         If invoked as `bzip2', default action is to compress.\\n\\\n         as `bunzip2',  default action is to decompress.\\n\\\n         as `bzcat', default action is to decompress to stdout.\\n\\\n         \\n\\\n         If no file names are given, bzip2 compresses or decompresses\\n\\\n         from standard input to standard output.  You can combine\\n\\\n         short flags, so `-v -4' means the same as -v4 or -4v, &c.\\n\"\n    );\n\n    // \u5982\u679c\u6709\u9488\u5bf9 UNIX \u7684\u7279\u5b9a\u90e8\u5206\n    #[cfg(unix)]\n    eprintln!(\"\\n\");\n}\n\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n    use std::fs::File;\n    use std::io::Read;\n    use std::io::stderr;\n    use std::io::Write;\n\n    #[test]\n    fn test_usage_output() {\n        let test_prog_name = \"bzip2test\";\n\n        {\n            // \u7528File\u8986\u76d6stderr\n            let mut stderr = stderr();\n            let mut file = File::create(\"/tmp/test_output.txt\").unwrap();\n            let _guard = stderr.lock();\n\n            write!(file, \"{}\", test_prog_name).unwrap();\n            usage(test_prog_name);\n        }\n\n        let mut buffer = String::new();\n        File::open(\"/tmp/test_output.txt\").unwrap().read_to_string(&mut buffer).unwrap();\n        assert!(buffer.contains(test_prog_name));\n    }\n}"}