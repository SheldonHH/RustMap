{"type": "source_file", "children": [{"type": "line_comment", "children": [], "start_byte": 0, "end_byte": 25, "start_point": [0, 0], "end_point": [0, 25], "text": "// use std::ffi::CString;"}, {"type": "line_comment", "children": [], "start_byte": 26, "end_byte": 41, "start_point": [1, 0], "end_point": [1, 15], "text": "// use std::fs;"}, {"type": "line_comment", "children": [], "start_byte": 42, "end_byte": 63, "start_point": [2, 0], "end_point": [2, 21], "text": "// use libc::fprintf;"}, {"type": "line_comment", "children": [], "start_byte": 64, "end_byte": 116, "start_point": [3, 0], "end_point": [3, 52], "text": "// use libc::__stderrp;  // \u4f7f\u7528 libc::__stderrp()\n// "}, {"type": "line_comment", "children": [], "start_byte": 117, "end_byte": 163, "start_point": [4, 0], "end_point": [4, 46], "text": "se crate::bzip2::scc_91_cleanUpAndFail::*;\n// "}, {"type": "line_comment", "children": [], "start_byte": 164, "end_byte": 217, "start_point": [5, 0], "end_point": [5, 53], "text": "se crate::bzip2::scc_80_root_43_showFileNames::*;\n\n//"}, {"type": "line_comment", "children": [], "start_byte": 219, "end_byte": 245, "start_point": [7, 0], "end_point": [7, 26], "text": "ub fn panic(s: &str) {\n// "}, {"type": "line_comment", "children": [], "start_byte": 246, "end_byte": 415, "start_point": [8, 0], "end_point": [8, 169], "text": "   let panic_msg = CString::new(\"\\n%s: PANIC -- internal consistency error:\\n\\t%s\\n\\tThis is a BUG.  Please report it to:\\n\\tbzip2-devel@sourceware.org\\n\").unwrap();\n// "}, {"type": "line_comment", "children": [], "start_byte": 416, "end_byte": 458, "start_point": [9, 0], "end_point": [9, 42], "text": "   let msg = CString::new(s).unwrap();\n// "}, {"type": "line_comment", "children": [], "start_byte": 459, "end_byte": 474, "start_point": [10, 0], "end_point": [10, 15], "text": "   unsafe {\n// "}, {"type": "line_comment", "children": [], "start_byte": 475, "end_byte": 593, "start_point": [11, 0], "end_point": [11, 118], "text": "       fprintf(__stderrp(), panic_msg.as_ptr(), \"UNKNOWN_PROGNAME\".as_ptr(), msg.as_ptr());  // \u4f7f\u7528 __stderrp()\n//     "}, {"type": "line_comment", "children": [], "start_byte": 594, "end_byte": 602, "start_point": [12, 0], "end_point": [12, 8], "text": "\n//     "}, {"type": "line_comment", "children": [], "start_byte": 603, "end_byte": 628, "start_point": [13, 0], "end_point": [13, 25], "text": "how_file_names();\n//     "}, {"type": "line_comment", "children": [], "start_byte": 629, "end_byte": 719, "start_point": [14, 0], "end_point": [14, 90], "text": "lean_up_and_fail(\"UNKNOWN_IN_NAME\", \"UNKNOWN_OUT_NAME\", \"UNKNOWN_PROGNAME\", None);\n// }\n\n/"}, {"type": "line_comment", "children": [], "start_byte": 720, "end_byte": 724, "start_point": [15, 0], "end_point": [15, 4], "text": " #[c"}, {"type": "line_comment", "children": [], "start_byte": 726, "end_byte": 741, "start_point": [17, 0], "end_point": [17, 15], "text": "(test)]\n// mod "}, {"type": "line_comment", "children": [], "start_byte": 742, "end_byte": 756, "start_point": [18, 0], "end_point": [18, 14], "text": "ests {\n//     "}, {"type": "line_comment", "children": [], "start_byte": 757, "end_byte": 777, "start_point": [19, 0], "end_point": [19, 20], "text": "se super::*;\n\n//    "}, {"type": "line_comment", "children": [], "start_byte": 779, "end_byte": 793, "start_point": [21, 0], "end_point": [21, 14], "text": "[test]\n//     "}, {"type": "line_comment", "children": [], "start_byte": 794, "end_byte": 818, "start_point": [22, 0], "end_point": [22, 24], "text": "n test_panic() {\n//     "}, {"type": "line_comment", "children": [], "start_byte": 819, "end_byte": 962, "start_point": [23, 0], "end_point": [23, 143], "text": "   // \u8fd9\u53ea\u662f\u4e00\u4e2a\u6a21\u62df\u7684\u573a\u666f\uff0c\u5b9e\u9645\u4e0a\u8fd9\u4e2a\u51fd\u6570\u4f1a\u5bfc\u81f4\u7a0b\u5e8f\u9000\u51fa\uff0c\u6240\u4ee5\u5728\u5b9e\u9645\u6d4b\u8bd5\u4e2d\u5e94\u907f\u514d\u76f4\u63a5\u8c03\u7528\u5b83\u3002\n//         // \u4e00\u4e2a\u53ef\u80fd\u7684\u505a\u6cd5\u662f\u4f7f\u7528mocking\u6280\u672f\u6765\u62e6\u622a\u5e76\u9a8c\u8bc1\u5176\u8f93\u51fa\u6216\u884c\u4e3a\uff0c\u6216\u4f7f\u7528\u5b50\u8fdb\u7a0b\u6267\u884c\u5b83\u5e76\u68c0\u67e5\u8fd4\u56de\u503c\u3002\n//         // \u8fd9\u91cc\u53ea\u63d0\u4f9b\u4e00\u4e2a\u7b80\u5355\u7684\u793a\u4f8b\u3002\n//"}, {"type": "line_comment", "children": [], "start_byte": 963, "end_byte": 1107, "start_point": [24, 0], "end_point": [24, 144], "text": "        assert!(false, \"This test is just a placeholder and shouldn't be executed directly.\");\n//     }\n// }\n"}, {"type": "line_comment", "children": [], "start_byte": 1108, "end_byte": 1161, "start_point": [25, 0], "end_point": [25, 53], "text": ""}, {"type": "line_comment", "children": [], "start_byte": 1162, "end_byte": 1259, "start_point": [26, 0], "end_point": [26, 97], "text": ""}, {"type": "line_comment", "children": [], "start_byte": 1260, "end_byte": 1268, "start_point": [27, 0], "end_point": [27, 8], "text": ""}, {"type": "line_comment", "children": [], "start_byte": 1269, "end_byte": 1273, "start_point": [28, 0], "end_point": [28, 4], "text": ""}], "start_byte": 0, "end_byte": 1274, "start_point": [0, 0], "end_point": [29, 0], "text": "// use std::ffi::CString;\n// use std::fs;\n// use libc::fprintf;\n// use libc::__stderrp;  // \u4f7f\u7528 libc::__stderrp()\n// use crate::bzip2::scc_91_cleanUpAndFail::*;\n// use crate::bzip2::scc_80_root_43_showFileNames::*;\n\n// pub fn panic(s: &str) {\n//     let panic_msg = CString::new(\"\\n%s: PANIC -- internal consistency error:\\n\\t%s\\n\\tThis is a BUG.  Please report it to:\\n\\tbzip2-devel@sourceware.org\\n\").unwrap();\n//     let msg = CString::new(s).unwrap();\n//     unsafe {\n//         fprintf(__stderrp(), panic_msg.as_ptr(), \"UNKNOWN_PROGNAME\".as_ptr(), msg.as_ptr());  // \u4f7f\u7528 __stderrp()\n//     }\n//     show_file_names();\n//     clean_up_and_fail(\"UNKNOWN_IN_NAME\", \"UNKNOWN_OUT_NAME\", \"UNKNOWN_PROGNAME\", None);\n// }\n\n// #[cfg(test)]\n// mod tests {\n//     use super::*;\n\n//     #[test]\n//     fn test_panic() {\n//         // \u8fd9\u53ea\u662f\u4e00\u4e2a\u6a21\u62df\u7684\u573a\u666f\uff0c\u5b9e\u9645\u4e0a\u8fd9\u4e2a\u51fd\u6570\u4f1a\u5bfc\u81f4\u7a0b\u5e8f\u9000\u51fa\uff0c\u6240\u4ee5\u5728\u5b9e\u9645\u6d4b\u8bd5\u4e2d\u5e94\u907f\u514d\u76f4\u63a5\u8c03\u7528\u5b83\u3002\n//         // \u4e00\u4e2a\u53ef\u80fd\u7684\u505a\u6cd5\u662f\u4f7f\u7528mocking\u6280\u672f\u6765\u62e6\u622a\u5e76\u9a8c\u8bc1\u5176\u8f93\u51fa\u6216\u884c\u4e3a\uff0c\u6216\u4f7f\u7528\u5b50\u8fdb\u7a0b\u6267\u884c\u5b83\u5e76\u68c0\u67e5\u8fd4\u56de\u503c\u3002\n//         // \u8fd9\u91cc\u53ea\u63d0\u4f9b\u4e00\u4e2a\u7b80\u5355\u7684\u793a\u4f8b\u3002\n//         assert!(false, \"This test is just a placeholder and shouldn't be executed directly.\");\n//     }\n// }\n"}