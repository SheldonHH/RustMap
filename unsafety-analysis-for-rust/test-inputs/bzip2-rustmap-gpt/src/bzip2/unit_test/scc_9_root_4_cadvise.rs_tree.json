{"type": "source_file", "children": [{"type": "line_comment", "children": [], "start_byte": 0, "end_byte": 45, "start_point": [0, 0], "end_point": [0, 45], "text": "// use crate::global_vars::bzip2_c5::{noisy};"}, {"type": "line_comment", "children": [], "start_byte": 48, "end_byte": 67, "start_point": [3, 0], "end_point": [3, 19], "text": "// cadvise ( void )"}, {"type": "line_comment", "children": [], "start_byte": 69, "end_byte": 110, "start_point": [5, 0], "end_point": [5, 41], "text": "// \u5047\u8bbe Int32 \u548c Bool \u7684\u5b9a\u4e49\u5982\u4e0b:\ntype Int32 = i3"}, {"type": "type_item", "children": [{"type": "type", "children": [], "start_byte": 111, "end_byte": 115, "start_point": [6, 0], "end_point": [6, 4], "text": ";\nty"}, {"type": "type_identifier", "children": [], "start_byte": 116, "end_byte": 121, "start_point": [6, 5], "end_point": [6, 10], "text": "e Boo"}, {"type": "=", "children": [], "start_byte": 122, "end_byte": 123, "start_point": [6, 11], "end_point": [6, 12], "text": " "}, {"type": "primitive_type", "children": [], "start_byte": 124, "end_byte": 127, "start_point": [6, 13], "end_point": [6, 16], "text": " bo"}, {"type": ";", "children": [], "start_byte": 127, "end_byte": 128, "start_point": [6, 16], "end_point": [6, 17], "text": "o"}], "start_byte": 111, "end_byte": 128, "start_point": [6, 0], "end_point": [6, 17], "text": ";\ntype Bool = boo"}, {"type": "type_item", "children": [{"type": "type", "children": [], "start_byte": 129, "end_byte": 133, "start_point": [7, 0], "end_point": [7, 4], "text": ";\nty"}, {"type": "type_identifier", "children": [], "start_byte": 134, "end_byte": 138, "start_point": [7, 5], "end_point": [7, 9], "text": "e Ch"}, {"type": "=", "children": [], "start_byte": 139, "end_byte": 140, "start_point": [7, 10], "end_point": [7, 11], "text": "r"}, {"type": "primitive_type", "children": [], "start_byte": 141, "end_byte": 145, "start_point": [7, 12], "end_point": [7, 16], "text": "= ch"}, {"type": ";", "children": [], "start_byte": 145, "end_byte": 146, "start_point": [7, 16], "end_point": [7, 17], "text": "a"}], "start_byte": 129, "end_byte": 146, "start_point": [7, 0], "end_point": [7, 17], "text": ";\ntype Char = cha"}, {"type": "type_item", "children": [{"type": "type", "children": [], "start_byte": 147, "end_byte": 151, "start_point": [8, 0], "end_point": [8, 4], "text": "; //"}, {"type": "type_identifier", "children": [], "start_byte": 152, "end_byte": 156, "start_point": [8, 5], "end_point": [8, 9], "text": "\u5047\u8bbe C"}, {"type": "=", "children": [], "start_byte": 157, "end_byte": 158, "start_point": [8, 10], "end_point": [8, 11], "text": "a"}, {"type": "primitive_type", "children": [], "start_byte": 159, "end_byte": 163, "start_point": [8, 12], "end_point": [8, 16], "text": " \u662f c"}, {"type": ";", "children": [], "start_byte": 163, "end_byte": 164, "start_point": [8, 16], "end_point": [8, 17], "text": "h"}], "start_byte": 147, "end_byte": 164, "start_point": [8, 0], "end_point": [8, 17], "text": "; // \u5047\u8bbe Char \u662f ch"}, {"type": "line_comment", "children": [], "start_byte": 165, "end_byte": 236, "start_point": [8, 18], "end_point": [8, 89], "text": "r\uff0c\u4f46\u53ef\u80fd\u9700\u8981\u6839\u636e\u4e0a\u4e0b\u6587\u8fdb\u4e00\u6b65\u786e\u8ba4\nuse crate::global_vars::bzip2_c5::*;\nuse crate::globa"}, {"type": "use_declaration", "children": [{"type": "use", "children": [], "start_byte": 237, "end_byte": 240, "start_point": [9, 0], "end_point": [9, 3], "text": "_va"}, {"type": "use_wildcard", "children": [{"type": "scoped_identifier", "children": [{"type": "scoped_identifier", "children": [{"type": "crate", "children": [], "start_byte": 241, "end_byte": 246, "start_point": [9, 4], "end_point": [9, 9], "text": "s::bz"}, {"type": "::", "children": [], "start_byte": 246, "end_byte": 248, "start_point": [9, 9], "end_point": [9, 11], "text": "ip"}, {"type": "identifier", "children": [], "start_byte": 248, "end_byte": 259, "start_point": [9, 11], "end_point": [9, 22], "text": "2_c1::*;\n//"}], "start_byte": 241, "end_byte": 259, "start_point": [9, 4], "end_point": [9, 22], "text": "s::bzip2_c1::*;\n//"}, {"type": "::", "children": [], "start_byte": 259, "end_byte": 261, "start_point": [9, 22], "end_point": [9, 24], "text": " \u5168"}, {"type": "identifier", "children": [], "start_byte": 261, "end_byte": 269, "start_point": [9, 24], "end_point": [9, 32], "text": "\u5c40\u53d8\u91cf\n// s"}], "start_byte": 241, "end_byte": 269, "start_point": [9, 4], "end_point": [9, 32], "text": "s::bzip2_c1::*;\n// \u5168\u5c40\u53d8\u91cf\n// s"}, {"type": "::", "children": [], "start_byte": 269, "end_byte": 271, "start_point": [9, 32], "end_point": [9, 34], "text": "ta"}, {"type": "*", "children": [], "start_byte": 271, "end_byte": 272, "start_point": [9, 34], "end_point": [9, 35], "text": "t"}], "start_byte": 241, "end_byte": 272, "start_point": [9, 4], "end_point": [9, 35], "text": "s::bzip2_c1::*;\n// \u5168\u5c40\u53d8\u91cf\n// stat"}, {"type": ";", "children": [], "start_byte": 272, "end_byte": 273, "start_point": [9, 35], "end_point": [9, 36], "text": "i"}], "start_byte": 237, "end_byte": 273, "start_point": [9, 0], "end_point": [9, 36], "text": "_vars::bzip2_c1::*;\n// \u5168\u5c40\u53d8\u91cf\n// stati"}, {"type": "use_declaration", "children": [{"type": "use", "children": [], "start_byte": 274, "end_byte": 277, "start_point": [10, 0], "end_point": [10, 3], "text": " mu"}, {"type": "use_wildcard", "children": [{"type": "scoped_identifier", "children": [{"type": "scoped_identifier", "children": [{"type": "crate", "children": [], "start_byte": 278, "end_byte": 283, "start_point": [10, 4], "end_point": [10, 9], "text": " VERB"}, {"type": "::", "children": [], "start_byte": 283, "end_byte": 285, "start_point": [10, 9], "end_point": [10, 11], "text": "OS"}, {"type": "identifier", "children": [], "start_byte": 285, "end_byte": 296, "start_point": [10, 11], "end_point": [10, 22], "text": "ITY: Int32 "}], "start_byte": 278, "end_byte": 296, "start_point": [10, 4], "end_point": [10, 22], "text": " VERBOSITY: Int32 "}, {"type": "::", "children": [], "start_byte": 296, "end_byte": 298, "start_point": [10, 22], "end_point": [10, 24], "text": "= "}, {"type": "identifier", "children": [], "start_byte": 298, "end_byte": 306, "start_point": [10, 24], "end_point": [10, 32], "text": "0;\n// st"}], "start_byte": 278, "end_byte": 306, "start_point": [10, 4], "end_point": [10, 32], "text": " VERBOSITY: Int32 = 0;\n// st"}, {"type": "::", "children": [], "start_byte": 306, "end_byte": 308, "start_point": [10, 32], "end_point": [10, 34], "text": "at"}, {"type": "*", "children": [], "start_byte": 308, "end_byte": 309, "start_point": [10, 34], "end_point": [10, 35], "text": "i"}], "start_byte": 278, "end_byte": 309, "start_point": [10, 4], "end_point": [10, 35], "text": " VERBOSITY: Int32 = 0;\n// stati"}, {"type": ";", "children": [], "start_byte": 309, "end_byte": 310, "start_point": [10, 35], "end_point": [10, 36], "text": "c"}], "start_byte": 274, "end_byte": 310, "start_point": [10, 0], "end_point": [10, 36], "text": " mut VERBOSITY: Int32 = 0;\n// static"}, {"type": "line_comment", "children": [], "start_byte": 311, "end_byte": 326, "start_point": [11, 0], "end_point": [11, 15], "text": "mut KEEP_INPUT_"}, {"type": "line_comment", "children": [], "start_byte": 327, "end_byte": 362, "start_point": [12, 0], "end_point": [12, 35], "text": "ILES: Bool = false;\n// static mut S"}, {"type": "line_comment", "children": [], "start_byte": 363, "end_byte": 408, "start_point": [13, 0], "end_point": [13, 45], "text": "ALL_MODE: Bool = false;\n// static mut DELETE_"}, {"type": "line_comment", "children": [], "start_byte": 409, "end_byte": 448, "start_point": [14, 0], "end_point": [14, 39], "text": "UTPUT_ON_INTERRUPT: Bool = false;\n// st"}, {"type": "line_comment", "children": [], "start_byte": 449, "end_byte": 504, "start_point": [15, 0], "end_point": [15, 55], "text": "tic mut FORCE_OVERWRITE: Bool = false;\n// static mut TE"}, {"type": "line_comment", "children": [], "start_byte": 505, "end_byte": 549, "start_point": [16, 0], "end_point": [16, 44], "text": "T_FAILS_EXIST: Bool = false;\n// static mut U"}, {"type": "line_comment", "children": [], "start_byte": 550, "end_byte": 595, "start_point": [17, 0], "end_point": [17, 45], "text": "Z_FAILS_EXIST: Bool = false;\n// static mut NO"}, {"type": "line_comment", "children": [], "start_byte": 596, "end_byte": 640, "start_point": [18, 0], "end_point": [18, 44], "text": "SY: Bool = false;\n// static mut NUM_FILES_PR"}, {"type": "line_comment", "children": [], "start_byte": 641, "end_byte": 675, "start_point": [19, 0], "end_point": [19, 34], "text": "CESSED: Int32 = 0;\n// static mut B"}, {"type": "line_comment", "children": [], "start_byte": 676, "end_byte": 721, "start_point": [20, 0], "end_point": [20, 45], "text": "OCK_SIZE_100K: Int32 = 0;\n// static mut EXIT_"}, {"type": "line_comment", "children": [], "start_byte": 722, "end_byte": 763, "start_point": [21, 0], "end_point": [21, 41], "text": "ALUE: Int32 = 0;\n// static mut OP_MODE: I"}, {"type": "line_comment", "children": [], "start_byte": 764, "end_byte": 800, "start_point": [22, 0], "end_point": [22, 36], "text": "t32 = 0;\n// static mut SRC_MODE: Int"}, {"type": "line_comment", "children": [], "start_byte": 801, "end_byte": 834, "start_point": [23, 0], "end_point": [23, 33], "text": "2 = 0;\n\n// static mut IN_NAME: [C"}, {"type": "line_comment", "children": [], "start_byte": 835, "end_byte": 869, "start_point": [24, 0], "end_point": [24, 34], "text": "ar; 1034] = ['\\0'; 1034]; \n// stat"}, {"type": "line_comment", "children": [], "start_byte": 871, "end_byte": 923, "start_point": [26, 0], "end_point": [26, 52], "text": " mut OUT_NAME: [Char; 1034] = ['\\0'; 1034]; \n\npub fn"}, {"type": "line_comment", "children": [], "start_byte": 924, "end_byte": 977, "start_point": [27, 0], "end_point": [27, 53], "text": "cadvise() {\n    unsafe {\n        if NOISY {\n         "}, {"type": "function_item", "children": [{"type": "visibility_modifier", "children": [{"type": "pub", "children": [], "start_byte": 979, "end_byte": 982, "start_point": [29, 0], "end_point": [29, 3], "text": " ep"}], "start_byte": 979, "end_byte": 982, "start_point": [29, 0], "end_point": [29, 3], "text": " ep"}, {"type": "fn", "children": [], "start_byte": 983, "end_byte": 985, "start_point": [29, 4], "end_point": [29, 6], "text": "in"}, {"type": "identifier", "children": [], "start_byte": 986, "end_byte": 993, "start_point": [29, 7], "end_point": [29, 14], "text": "ln!(\"\\n"}, {"type": "parameters", "children": [{"type": "(", "children": [], "start_byte": 993, "end_byte": 994, "start_point": [29, 14], "end_point": [29, 15], "text": "I"}, {"type": ")", "children": [], "start_byte": 994, "end_byte": 995, "start_point": [29, 15], "end_point": [29, 16], "text": "t"}], "start_byte": 993, "end_byte": 995, "start_point": [29, 14], "end_point": [29, 16], "text": "It"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 996, "end_byte": 997, "start_point": [29, 17], "end_point": [29, 18], "text": "i"}, {"type": "expression_statement", "children": [{"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 1002, "end_byte": 1008, "start_point": [30, 4], "end_point": [30, 10], "text": "sible "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 1009, "end_byte": 1010, "start_point": [30, 11], "end_point": [30, 12], "text": "h"}, {"type": "expression_statement", "children": [{"type": "if_expression", "children": [{"type": "if", "children": [], "start_byte": 1019, "end_byte": 1021, "start_point": [31, 8], "end_point": [31, 10], "text": "mp"}, {"type": "identifier", "children": [], "start_byte": 1022, "end_byte": 1027, "start_point": [31, 11], "end_point": [31, 16], "text": "essed"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 1028, "end_byte": 1029, "start_point": [31, 17], "end_point": [31, 18], "text": "f"}, {"type": "expression_statement", "children": [{"type": "macro_invocation", "children": [{"type": "identifier", "children": [], "start_byte": 1042, "end_byte": 1050, "start_point": [32, 12], "end_point": [32, 20], "text": "ecome co"}, {"type": "!", "children": [], "start_byte": 1050, "end_byte": 1051, "start_point": [32, 20], "end_point": [32, 21], "text": "r"}, {"type": "token_tree", "children": [{"type": "(", "children": [], "start_byte": 1051, "end_byte": 1052, "start_point": [32, 21], "end_point": [32, 22], "text": "r"}, {"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 1052, "end_byte": 1053, "start_point": [32, 22], "end_point": [32, 23], "text": "u"}, {"type": "escape_sequence", "children": [], "start_byte": 1053, "end_byte": 1055, "start_point": [32, 23], "end_point": [32, 25], "text": "pt"}, {"type": "escape_sequence", "children": [], "start_byte": 1120, "end_byte": 1122, "start_point": [32, 90], "end_point": [32, 92], "text": "\\n"}, {"type": "escape_sequence", "children": [], "start_byte": 1182, "end_byte": 1184, "start_point": [32, 152], "end_point": [32, 154], "text": "er"}, {"type": "escape_sequence", "children": [], "start_byte": 1184, "end_byte": 1186, "start_point": [32, 154], "end_point": [32, 156], "text": "\\n"}, {"type": "escape_sequence", "children": [], "start_byte": 1246, "end_byte": 1248, "start_point": [32, 216], "end_point": [32, 218], "text": "  "}, {"type": "escape_sequence", "children": [], "start_byte": 1296, "end_byte": 1298, "start_point": [32, 266], "end_point": [32, 268], "text": "fe"}, {"type": "escape_sequence", "children": [], "start_byte": 1298, "end_byte": 1300, "start_point": [32, 268], "end_point": [32, 270], "text": " {"}, {"type": "\"", "children": [], "start_byte": 1300, "end_byte": 1301, "start_point": [32, 270], "end_point": [32, 271], "text": "\n"}], "start_byte": 1052, "end_byte": 1301, "start_point": [32, 22], "end_point": [32, 271], "text": "upted.\\nYou can use the -tvv option to test integrity of such files.\\n\\nYou can use the `bzip2recover' program to attempt to recover\\ndata from undamaged sections of corrupted files.\\n\\n\");\n        }\n    }\n}\n\npub fn show_file_names() {\n    unsafe {\n"}, {"type": ")", "children": [], "start_byte": 1301, "end_byte": 1302, "start_point": [32, 271], "end_point": [32, 272], "text": " "}], "start_byte": 1051, "end_byte": 1302, "start_point": [32, 21], "end_point": [32, 272], "text": "rupted.\\nYou can use the -tvv option to test integrity of such files.\\n\\nYou can use the `bzip2recover' program to attempt to recover\\ndata from undamaged sections of corrupted files.\\n\\n\");\n        }\n    }\n}\n\npub fn show_file_names() {\n    unsafe {\n "}], "start_byte": 1042, "end_byte": 1302, "start_point": [32, 12], "end_point": [32, 272], "text": "ecome corrupted.\\nYou can use the -tvv option to test integrity of such files.\\n\\nYou can use the `bzip2recover' program to attempt to recover\\ndata from undamaged sections of corrupted files.\\n\\n\");\n        }\n    }\n}\n\npub fn show_file_names() {\n    unsafe {\n "}, {"type": ";", "children": [], "start_byte": 1302, "end_byte": 1303, "start_point": [32, 272], "end_point": [32, 273], "text": " "}], "start_byte": 1042, "end_byte": 1303, "start_point": [32, 12], "end_point": [32, 273], "text": "ecome corrupted.\\nYou can use the -tvv option to test integrity of such files.\\n\\nYou can use the `bzip2recover' program to attempt to recover\\ndata from undamaged sections of corrupted files.\\n\\n\");\n        }\n    }\n}\n\npub fn show_file_names() {\n    unsafe {\n  "}, {"type": "}", "children": [], "start_byte": 1312, "end_byte": 1313, "start_point": [33, 8], "end_point": [33, 9], "text": "N"}], "start_byte": 1028, "end_byte": 1313, "start_point": [31, 17], "end_point": [33, 9], "text": "file(s) have become corrupted.\\nYou can use the -tvv option to test integrity of such files.\\n\\nYou can use the `bzip2recover' program to attempt to recover\\ndata from undamaged sections of corrupted files.\\n\\n\");\n        }\n    }\n}\n\npub fn show_file_names() {\n    unsafe {\n        if N"}], "start_byte": 1019, "end_byte": 1313, "start_point": [31, 8], "end_point": [33, 9], "text": "mpressed file(s) have become corrupted.\\nYou can use the -tvv option to test integrity of such files.\\n\\nYou can use the `bzip2recover' program to attempt to recover\\ndata from undamaged sections of corrupted files.\\n\\n\");\n        }\n    }\n}\n\npub fn show_file_names() {\n    unsafe {\n        if N"}], "start_byte": 1019, "end_byte": 1313, "start_point": [31, 8], "end_point": [33, 9], "text": "mpressed file(s) have become corrupted.\\nYou can use the -tvv option to test integrity of such files.\\n\\nYou can use the `bzip2recover' program to attempt to recover\\ndata from undamaged sections of corrupted files.\\n\\n\");\n        }\n    }\n}\n\npub fn show_file_names() {\n    unsafe {\n        if N"}, {"type": "}", "children": [], "start_byte": 1318, "end_byte": 1319, "start_point": [34, 4], "end_point": [34, 5], "text": "{"}], "start_byte": 1009, "end_byte": 1319, "start_point": [30, 11], "end_point": [34, 5], "text": "hat the compressed file(s) have become corrupted.\\nYou can use the -tvv option to test integrity of such files.\\n\\nYou can use the `bzip2recover' program to attempt to recover\\ndata from undamaged sections of corrupted files.\\n\\n\");\n        }\n    }\n}\n\npub fn show_file_names() {\n    unsafe {\n        if NOISY {"}], "start_byte": 1002, "end_byte": 1319, "start_point": [30, 4], "end_point": [34, 5], "text": "sible that the compressed file(s) have become corrupted.\\nYou can use the -tvv option to test integrity of such files.\\n\\nYou can use the `bzip2recover' program to attempt to recover\\ndata from undamaged sections of corrupted files.\\n\\n\");\n        }\n    }\n}\n\npub fn show_file_names() {\n    unsafe {\n        if NOISY {"}], "start_byte": 1002, "end_byte": 1319, "start_point": [30, 4], "end_point": [34, 5], "text": "sible that the compressed file(s) have become corrupted.\\nYou can use the -tvv option to test integrity of such files.\\n\\nYou can use the `bzip2recover' program to attempt to recover\\ndata from undamaged sections of corrupted files.\\n\\n\");\n        }\n    }\n}\n\npub fn show_file_names() {\n    unsafe {\n        if NOISY {"}, {"type": "}", "children": [], "start_byte": 1320, "end_byte": 1321, "start_point": [35, 0], "end_point": [35, 1], "text": " "}], "start_byte": 996, "end_byte": 1321, "start_point": [29, 17], "end_point": [35, 1], "text": "is possible that the compressed file(s) have become corrupted.\\nYou can use the -tvv option to test integrity of such files.\\n\\nYou can use the `bzip2recover' program to attempt to recover\\ndata from undamaged sections of corrupted files.\\n\\n\");\n        }\n    }\n}\n\npub fn show_file_names() {\n    unsafe {\n        if NOISY {\n "}], "start_byte": 979, "end_byte": 1321, "start_point": [29, 0], "end_point": [35, 1], "text": " eprintln!(\"\\nIt is possible that the compressed file(s) have become corrupted.\\nYou can use the -tvv option to test integrity of such files.\\n\\nYou can use the `bzip2recover' program to attempt to recover\\ndata from undamaged sections of corrupted files.\\n\\n\");\n        }\n    }\n}\n\npub fn show_file_names() {\n    unsafe {\n        if NOISY {\n "}, {"type": "function_item", "children": [{"type": "visibility_modifier", "children": [{"type": "pub", "children": [], "start_byte": 1323, "end_byte": 1326, "start_point": [37, 0], "end_point": [37, 3], "text": "   "}], "start_byte": 1323, "end_byte": 1326, "start_point": [37, 0], "end_point": [37, 3], "text": "   "}, {"type": "fn", "children": [], "start_byte": 1327, "end_byte": 1329, "start_point": [37, 4], "end_point": [37, 6], "text": "  "}, {"type": "identifier", "children": [], "start_byte": 1330, "end_byte": 1345, "start_point": [37, 7], "end_point": [37, 22], "text": "  eprintln!(\"\\t"}, {"type": "parameters", "children": [{"type": "(", "children": [], "start_byte": 1345, "end_byte": 1346, "start_point": [37, 22], "end_point": [37, 23], "text": "I"}, {"type": ")", "children": [], "start_byte": 1346, "end_byte": 1347, "start_point": [37, 23], "end_point": [37, 24], "text": "n"}], "start_byte": 1345, "end_byte": 1347, "start_point": [37, 22], "end_point": [37, 24], "text": "In"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 1348, "end_byte": 1349, "start_point": [37, 25], "end_point": [37, 26], "text": "u"}, {"type": "expression_statement", "children": [{"type": "unsafe_block", "children": [{"type": "unsafe", "children": [], "start_byte": 1354, "end_byte": 1360, "start_point": [38, 4], "end_point": [38, 10], "text": "e = {:"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 1361, "end_byte": 1362, "start_point": [38, 11], "end_point": [38, 12], "text": "}"}, {"type": "expression_statement", "children": [{"type": "if_expression", "children": [{"type": "if", "children": [], "start_byte": 1371, "end_byte": 1373, "start_point": [39, 8], "end_point": [39, 10], "text": "fi"}, {"type": "identifier", "children": [], "start_byte": 1374, "end_byte": 1379, "start_point": [39, 11], "end_point": [39, 16], "text": "e = {"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 1380, "end_byte": 1381, "start_point": [39, 17], "end_point": [39, 18], "text": "?"}, {"type": "expression_statement", "children": [{"type": "macro_invocation", "children": [{"type": "identifier", "children": [], "start_byte": 1394, "end_byte": 1402, "start_point": [40, 12], "end_point": [40, 20], "text": "        "}, {"type": "!", "children": [], "start_byte": 1402, "end_byte": 1403, "start_point": [40, 20], "end_point": [40, 21], "text": " "}, {"type": "token_tree", "children": [{"type": "(", "children": [], "start_byte": 1403, "end_byte": 1404, "start_point": [40, 21], "end_point": [40, 22], "text": " "}, {"type": "string_literal", "children": [{"type": "\"", "children": [], "start_byte": 1404, "end_byte": 1405, "start_point": [40, 22], "end_point": [40, 23], "text": " "}, {"type": "escape_sequence", "children": [], "start_byte": 1405, "end_byte": 1407, "start_point": [40, 23], "end_point": [40, 25], "text": "  "}, {"type": "\"", "children": [], "start_byte": 1444, "end_byte": 1445, "start_point": [40, 62], "end_point": [40, 63], "text": " "}], "start_byte": 1404, "end_byte": 1445, "start_point": [40, 22], "end_point": [40, 63], "text": "    u8_array_to_string(&IN_NAME), \n      "}, {"type": "identifier", "children": [], "start_byte": 1470, "end_byte": 1488, "start_point": [41, 22], "end_point": [41, 40], "text": "to_string(&OUT_NAM"}, {"type": "token_tree", "children": [{"type": "(", "children": [], "start_byte": 1488, "end_byte": 1489, "start_point": [41, 40], "end_point": [41, 41], "text": "E"}, {"type": "identifier", "children": [], "start_byte": 1490, "end_byte": 1497, "start_point": [41, 42], "end_point": [41, 49], "text": ");\n    "}, {"type": ")", "children": [], "start_byte": 1497, "end_byte": 1498, "start_point": [41, 49], "end_point": [41, 50], "text": " "}], "start_byte": 1488, "end_byte": 1498, "start_point": [41, 40], "end_point": [41, 50], "text": "E));\n     "}, {"type": "identifier", "children": [], "start_byte": 1523, "end_byte": 1541, "start_point": [42, 22], "end_point": [42, 40], "text": "rray_to_string(arr"}, {"type": "token_tree", "children": [{"type": "(", "children": [], "start_byte": 1541, "end_byte": 1542, "start_point": [42, 40], "end_point": [42, 41], "text": ":"}, {"type": "identifier", "children": [], "start_byte": 1543, "end_byte": 1551, "start_point": [42, 42], "end_point": [42, 50], "text": "&[u8; 10"}, {"type": ")", "children": [], "start_byte": 1551, "end_byte": 1552, "start_point": [42, 50], "end_point": [42, 51], "text": "3"}], "start_byte": 1541, "end_byte": 1552, "start_point": [42, 40], "end_point": [42, 51], "text": ": &[u8; 103"}, {"type": ")", "children": [], "start_byte": 1552, "end_byte": 1553, "start_point": [42, 51], "end_point": [42, 52], "text": "4"}], "start_byte": 1403, "end_byte": 1553, "start_point": [40, 21], "end_point": [42, 52], "text": "     u8_array_to_string(&IN_NAME), \n                      u8_array_to_string(&OUT_NAME));\n        }\n    }\n}\n\npub fn u8_array_to_string(arr: &[u8; 1034"}], "start_byte": 1394, "end_byte": 1553, "start_point": [40, 12], "end_point": [42, 52], "text": "              u8_array_to_string(&IN_NAME), \n                      u8_array_to_string(&OUT_NAME));\n        }\n    }\n}\n\npub fn u8_array_to_string(arr: &[u8; 1034"}, {"type": ";", "children": [], "start_byte": 1553, "end_byte": 1554, "start_point": [42, 52], "end_point": [42, 53], "text": "]"}], "start_byte": 1394, "end_byte": 1554, "start_point": [40, 12], "end_point": [42, 53], "text": "              u8_array_to_string(&IN_NAME), \n                      u8_array_to_string(&OUT_NAME));\n        }\n    }\n}\n\npub fn u8_array_to_string(arr: &[u8; 1034]"}, {"type": "}", "children": [], "start_byte": 1563, "end_byte": 1564, "start_point": [43, 8], "end_point": [43, 9], "text": "n"}], "start_byte": 1380, "end_byte": 1564, "start_point": [39, 17], "end_point": [43, 9], "text": "?}\", \n                      u8_array_to_string(&IN_NAME), \n                      u8_array_to_string(&OUT_NAME));\n        }\n    }\n}\n\npub fn u8_array_to_string(arr: &[u8; 1034]) -> Strin"}], "start_byte": 1371, "end_byte": 1564, "start_point": [39, 8], "end_point": [43, 9], "text": "file = {:?}\", \n                      u8_array_to_string(&IN_NAME), \n                      u8_array_to_string(&OUT_NAME));\n        }\n    }\n}\n\npub fn u8_array_to_string(arr: &[u8; 1034]) -> Strin"}], "start_byte": 1371, "end_byte": 1564, "start_point": [39, 8], "end_point": [43, 9], "text": "file = {:?}\", \n                      u8_array_to_string(&IN_NAME), \n                      u8_array_to_string(&OUT_NAME));\n        }\n    }\n}\n\npub fn u8_array_to_string(arr: &[u8; 1034]) -> Strin"}, {"type": "}", "children": [], "start_byte": 1569, "end_byte": 1570, "start_point": [44, 4], "end_point": [44, 5], "text": " "}], "start_byte": 1361, "end_byte": 1570, "start_point": [38, 11], "end_point": [44, 5], "text": "}, output file = {:?}\", \n                      u8_array_to_string(&IN_NAME), \n                      u8_array_to_string(&OUT_NAME));\n        }\n    }\n}\n\npub fn u8_array_to_string(arr: &[u8; 1034]) -> String {\n  "}], "start_byte": 1354, "end_byte": 1570, "start_point": [38, 4], "end_point": [44, 5], "text": "e = {:?}, output file = {:?}\", \n                      u8_array_to_string(&IN_NAME), \n                      u8_array_to_string(&OUT_NAME));\n        }\n    }\n}\n\npub fn u8_array_to_string(arr: &[u8; 1034]) -> String {\n  "}], "start_byte": 1354, "end_byte": 1570, "start_point": [38, 4], "end_point": [44, 5], "text": "e = {:?}, output file = {:?}\", \n                      u8_array_to_string(&IN_NAME), \n                      u8_array_to_string(&OUT_NAME));\n        }\n    }\n}\n\npub fn u8_array_to_string(arr: &[u8; 1034]) -> String {\n  "}, {"type": "}", "children": [], "start_byte": 1571, "end_byte": 1572, "start_point": [45, 0], "end_point": [45, 1], "text": " "}], "start_byte": 1348, "end_byte": 1572, "start_point": [37, 25], "end_point": [45, 1], "text": "ut file = {:?}, output file = {:?}\", \n                      u8_array_to_string(&IN_NAME), \n                      u8_array_to_string(&OUT_NAME));\n        }\n    }\n}\n\npub fn u8_array_to_string(arr: &[u8; 1034]) -> String {\n    "}], "start_byte": 1323, "end_byte": 1572, "start_point": [37, 0], "end_point": [45, 1], "text": "         eprintln!(\"\\tInput file = {:?}, output file = {:?}\", \n                      u8_array_to_string(&IN_NAME), \n                      u8_array_to_string(&OUT_NAME));\n        }\n    }\n}\n\npub fn u8_array_to_string(arr: &[u8; 1034]) -> String {\n    "}, {"type": "function_item", "children": [{"type": "visibility_modifier", "children": [{"type": "pub", "children": [], "start_byte": 1574, "end_byte": 1577, "start_point": [47, 0], "end_point": [47, 3], "text": "rin"}], "start_byte": 1574, "end_byte": 1577, "start_point": [47, 0], "end_point": [47, 3], "text": "rin"}, {"type": "fn", "children": [], "start_byte": 1578, "end_byte": 1580, "start_point": [47, 4], "end_point": [47, 6], "text": "::"}, {"type": "identifier", "children": [], "start_byte": 1581, "end_byte": 1599, "start_point": [47, 7], "end_point": [47, 25], "text": "rom_utf8_lossy(arr"}, {"type": "parameters", "children": [{"type": "(", "children": [], "start_byte": 1599, "end_byte": 1600, "start_point": [47, 25], "end_point": [47, 26], "text": ")"}, {"type": "parameter", "children": [{"type": "identifier", "children": [], "start_byte": 1600, "end_byte": 1603, "start_point": [47, 26], "end_point": [47, 29], "text": ".in"}, {"type": ":", "children": [], "start_byte": 1603, "end_byte": 1604, "start_point": [47, 29], "end_point": [47, 30], "text": "t"}, {"type": "reference_type", "children": [{"type": "&", "children": [], "start_byte": 1605, "end_byte": 1606, "start_point": [47, 31], "end_point": [47, 32], "text": "_"}, {"type": "array_type", "children": [{"type": "[", "children": [], "start_byte": 1606, "end_byte": 1607, "start_point": [47, 32], "end_point": [47, 33], "text": "o"}, {"type": "primitive_type", "children": [], "start_byte": 1607, "end_byte": 1609, "start_point": [47, 33], "end_point": [47, 35], "text": "wn"}, {"type": ";", "children": [], "start_byte": 1609, "end_byte": 1610, "start_point": [47, 35], "end_point": [47, 36], "text": "e"}, {"type": "integer_literal", "children": [], "start_byte": 1611, "end_byte": 1615, "start_point": [47, 37], "end_point": [47, 41], "text": "()\n}"}, {"type": "]", "children": [], "start_byte": 1615, "end_byte": 1616, "start_point": [47, 41], "end_point": [47, 42], "text": "\n"}], "start_byte": 1606, "end_byte": 1616, "start_point": [47, 32], "end_point": [47, 42], "text": "owned()\n}\n"}], "start_byte": 1605, "end_byte": 1616, "start_point": [47, 31], "end_point": [47, 42], "text": "_owned()\n}\n"}], "start_byte": 1600, "end_byte": 1616, "start_point": [47, 26], "end_point": [47, 42], "text": ".into_owned()\n}\n"}, {"type": ")", "children": [], "start_byte": 1616, "end_byte": 1617, "start_point": [47, 42], "end_point": [47, 43], "text": "\n"}], "start_byte": 1599, "end_byte": 1617, "start_point": [47, 25], "end_point": [47, 43], "text": ").into_owned()\n}\n\n"}, {"type": "->", "children": [], "start_byte": 1618, "end_byte": 1620, "start_point": [47, 44], "end_point": [47, 46], "text": "pu"}, {"type": "type_identifier", "children": [], "start_byte": 1621, "end_byte": 1627, "start_point": [47, 47], "end_point": [47, 53], "text": " fn ch"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 1628, "end_byte": 1629, "start_point": [47, 54], "end_point": [47, 55], "text": "r"}, {"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "call_expression", "children": [{"type": "scoped_identifier", "children": [{"type": "identifier", "children": [], "start_byte": 1634, "end_byte": 1640, "start_point": [48, 4], "end_point": [48, 10], "text": "y_to_s"}, {"type": "::", "children": [], "start_byte": 1640, "end_byte": 1642, "start_point": [48, 10], "end_point": [48, 12], "text": "tr"}, {"type": "identifier", "children": [], "start_byte": 1642, "end_byte": 1657, "start_point": [48, 12], "end_point": [48, 27], "text": "ing(arr: &[Char"}], "start_byte": 1634, "end_byte": 1657, "start_point": [48, 4], "end_point": [48, 27], "text": "y_to_string(arr: &[Char"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 1657, "end_byte": 1658, "start_point": [48, 27], "end_point": [48, 28], "text": ";"}, {"type": "identifier", "children": [], "start_byte": 1658, "end_byte": 1661, "start_point": [48, 28], "end_point": [48, 31], "text": " 10"}, {"type": ")", "children": [], "start_byte": 1661, "end_byte": 1662, "start_point": [48, 31], "end_point": [48, 32], "text": "3"}], "start_byte": 1657, "end_byte": 1662, "start_point": [48, 27], "end_point": [48, 32], "text": "; 103"}], "start_byte": 1634, "end_byte": 1662, "start_point": [48, 4], "end_point": [48, 32], "text": "y_to_string(arr: &[Char; 103"}, {"type": ".", "children": [], "start_byte": 1662, "end_byte": 1663, "start_point": [48, 32], "end_point": [48, 33], "text": "4"}, {"type": "field_identifier", "children": [], "start_byte": 1663, "end_byte": 1673, "start_point": [48, 33], "end_point": [48, 43], "text": "]) -> Stri"}], "start_byte": 1634, "end_byte": 1673, "start_point": [48, 4], "end_point": [48, 43], "text": "y_to_string(arr: &[Char; 1034]) -> Stri"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 1673, "end_byte": 1674, "start_point": [48, 43], "end_point": [48, 44], "text": "n"}, {"type": ")", "children": [], "start_byte": 1674, "end_byte": 1675, "start_point": [48, 44], "end_point": [48, 45], "text": "g"}], "start_byte": 1673, "end_byte": 1675, "start_point": [48, 43], "end_point": [48, 45], "text": "ng"}], "start_byte": 1634, "end_byte": 1675, "start_point": [48, 4], "end_point": [48, 45], "text": "y_to_string(arr: &[Char; 1034]) -> String"}, {"type": "}", "children": [], "start_byte": 1676, "end_byte": 1677, "start_point": [49, 0], "end_point": [49, 1], "text": "{"}], "start_byte": 1628, "end_byte": 1677, "start_point": [47, 54], "end_point": [49, 1], "text": "r_array_to_string(arr: &[Char; 1034]) -> String {"}], "start_byte": 1574, "end_byte": 1677, "start_point": [47, 0], "end_point": [49, 1], "text": "ring::from_utf8_lossy(arr).into_owned()\n}\n\n\npub fn char_array_to_string(arr: &[Char; 1034]) -> String {"}, {"type": "function_item", "children": [{"type": "visibility_modifier", "children": [{"type": "pub", "children": [], "start_byte": 1680, "end_byte": 1683, "start_point": [52, 0], "end_point": [52, 3], "text": "  l"}], "start_byte": 1680, "end_byte": 1683, "start_point": [52, 0], "end_point": [52, 3], "text": "  l"}, {"type": "fn", "children": [], "start_byte": 1684, "end_byte": 1686, "start_point": [52, 4], "end_point": [52, 6], "text": "t "}, {"type": "identifier", "children": [], "start_byte": 1687, "end_byte": 1707, "start_point": [52, 7], "end_point": [52, 27], "text": "yte_slice: Vec<u8> ="}, {"type": "parameters", "children": [{"type": "(", "children": [], "start_byte": 1707, "end_byte": 1708, "start_point": [52, 27], "end_point": [52, 28], "text": " "}, {"type": "parameter", "children": [{"type": "identifier", "children": [], "start_byte": 1708, "end_byte": 1711, "start_point": [52, 28], "end_point": [52, 31], "text": "arr"}, {"type": ":", "children": [], "start_byte": 1711, "end_byte": 1712, "start_point": [52, 31], "end_point": [52, 32], "text": "."}, {"type": "reference_type", "children": [{"type": "&", "children": [], "start_byte": 1713, "end_byte": 1714, "start_point": [52, 33], "end_point": [52, 34], "text": "t"}, {"type": "array_type", "children": [{"type": "[", "children": [], "start_byte": 1714, "end_byte": 1715, "start_point": [52, 34], "end_point": [52, 35], "text": "e"}, {"type": "type_identifier", "children": [], "start_byte": 1715, "end_byte": 1719, "start_point": [52, 35], "end_point": [52, 39], "text": "r()."}, {"type": ";", "children": [], "start_byte": 1719, "end_byte": 1720, "start_point": [52, 39], "end_point": [52, 40], "text": "f"}, {"type": "integer_literal", "children": [], "start_byte": 1721, "end_byte": 1725, "start_point": [52, 41], "end_point": [52, 45], "text": "lter"}, {"type": "]", "children": [], "start_byte": 1725, "end_byte": 1726, "start_point": [52, 45], "end_point": [52, 46], "text": "_"}], "start_byte": 1714, "end_byte": 1726, "start_point": [52, 34], "end_point": [52, 46], "text": "er().filter_"}], "start_byte": 1713, "end_byte": 1726, "start_point": [52, 33], "end_point": [52, 46], "text": "ter().filter_"}], "start_byte": 1708, "end_byte": 1726, "start_point": [52, 28], "end_point": [52, 46], "text": "arr.iter().filter_"}, {"type": ")", "children": [], "start_byte": 1726, "end_byte": 1727, "start_point": [52, 46], "end_point": [52, 47], "text": "m"}], "start_byte": 1707, "end_byte": 1727, "start_point": [52, 27], "end_point": [52, 47], "text": " arr.iter().filter_m"}, {"type": "->", "children": [], "start_byte": 1728, "end_byte": 1730, "start_point": [52, 48], "end_point": [52, 50], "text": "p("}, {"type": "type_identifier", "children": [], "start_byte": 1731, "end_byte": 1737, "start_point": [52, 51], "end_point": [52, 57], "text": "&c| {\n"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 1738, "end_byte": 1739, "start_point": [52, 58], "end_point": [52, 59], "text": " "}, {"type": "let_declaration", "children": [{"type": "let", "children": [], "start_byte": 1744, "end_byte": 1747, "start_point": [53, 4], "end_point": [53, 7], "text": " if"}, {"type": "identifier", "children": [], "start_byte": 1748, "end_byte": 1758, "start_point": [53, 8], "end_point": [53, 18], "text": "c as u32 <"}, {"type": ":", "children": [], "start_byte": 1758, "end_byte": 1759, "start_point": [53, 18], "end_point": [53, 19], "text": "="}, {"type": "generic_type", "children": [{"type": "type_identifier", "children": [], "start_byte": 1760, "end_byte": 1763, "start_point": [53, 20], "end_point": [53, 23], "text": "0x7"}, {"type": "type_arguments", "children": [{"type": "<", "children": [], "start_byte": 1763, "end_byte": 1764, "start_point": [53, 23], "end_point": [53, 24], "text": "F"}, {"type": "primitive_type", "children": [], "start_byte": 1764, "end_byte": 1766, "start_point": [53, 24], "end_point": [53, 26], "text": " {"}, {"type": ">", "children": [], "start_byte": 1766, "end_byte": 1767, "start_point": [53, 26], "end_point": [53, 27], "text": "\n"}], "start_byte": 1763, "end_byte": 1767, "start_point": [53, 23], "end_point": [53, 27], "text": "F {\n"}], "start_byte": 1760, "end_byte": 1767, "start_point": [53, 20], "end_point": [53, 27], "text": "0x7F {\n"}, {"type": "=", "children": [], "start_byte": 1768, "end_byte": 1769, "start_point": [53, 28], "end_point": [53, 29], "text": " "}, {"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "identifier", "children": [], "start_byte": 1770, "end_byte": 1773, "start_point": [53, 30], "end_point": [53, 33], "text": "   "}, {"type": ".", "children": [], "start_byte": 1773, "end_byte": 1774, "start_point": [53, 33], "end_point": [53, 34], "text": " "}, {"type": "field_identifier", "children": [], "start_byte": 1774, "end_byte": 1778, "start_point": [53, 34], "end_point": [53, 38], "text": "    "}], "start_byte": 1770, "end_byte": 1778, "start_point": [53, 30], "end_point": [53, 38], "text": "        "}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 1778, "end_byte": 1779, "start_point": [53, 38], "end_point": [53, 39], "text": " "}, {"type": ")", "children": [], "start_byte": 1779, "end_byte": 1780, "start_point": [53, 39], "end_point": [53, 40], "text": "S"}], "start_byte": 1778, "end_byte": 1780, "start_point": [53, 38], "end_point": [53, 40], "text": " S"}], "start_byte": 1770, "end_byte": 1780, "start_point": [53, 30], "end_point": [53, 40], "text": "         S"}, {"type": ".", "children": [], "start_byte": 1780, "end_byte": 1781, "start_point": [53, 40], "end_point": [53, 41], "text": "o"}, {"type": "field_identifier", "children": [], "start_byte": 1781, "end_byte": 1791, "start_point": [53, 41], "end_point": [53, 51], "text": "me(c as u8"}], "start_byte": 1770, "end_byte": 1791, "start_point": [53, 30], "end_point": [53, 51], "text": "         Some(c as u8"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 1791, "end_byte": 1792, "start_point": [53, 51], "end_point": [53, 52], "text": ")"}, {"type": "closure_expression", "children": [{"type": "closure_parameters", "children": [{"type": "|", "children": [], "start_byte": 1792, "end_byte": 1793, "start_point": [53, 52], "end_point": [53, 53], "text": "\n"}, {"type": "reference_pattern", "children": [{"type": "&", "children": [], "start_byte": 1793, "end_byte": 1794, "start_point": [53, 53], "end_point": [53, 54], "text": " "}, {"type": "identifier", "children": [], "start_byte": 1794, "end_byte": 1795, "start_point": [53, 54], "end_point": [53, 55], "text": " "}], "start_byte": 1793, "end_byte": 1795, "start_point": [53, 53], "end_point": [53, 55], "text": "  "}, {"type": "|", "children": [], "start_byte": 1795, "end_byte": 1796, "start_point": [53, 55], "end_point": [53, 56], "text": " "}], "start_byte": 1792, "end_byte": 1796, "start_point": [53, 52], "end_point": [53, 56], "text": "\n   "}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 1797, "end_byte": 1798, "start_point": [53, 57], "end_point": [53, 58], "text": " "}, {"type": "expression_statement", "children": [{"type": "if_expression", "children": [{"type": "if", "children": [], "start_byte": 1807, "end_byte": 1809, "start_point": [54, 8], "end_point": [54, 10], "text": " {"}, {"type": "binary_expression", "children": [{"type": "type_cast_expression", "children": [{"type": "identifier", "children": [], "start_byte": 1810, "end_byte": 1811, "start_point": [54, 11], "end_point": [54, 12], "text": " "}, {"type": "as", "children": [], "start_byte": 1812, "end_byte": 1814, "start_point": [54, 13], "end_point": [54, 15], "text": "  "}, {"type": "primitive_type", "children": [], "start_byte": 1815, "end_byte": 1818, "start_point": [54, 16], "end_point": [54, 19], "text": "   "}], "start_byte": 1810, "end_byte": 1818, "start_point": [54, 11], "end_point": [54, 19], "text": "        "}, {"type": "<=", "children": [], "start_byte": 1819, "end_byte": 1821, "start_point": [54, 20], "end_point": [54, 22], "text": "  "}, {"type": "integer_literal", "children": [], "start_byte": 1822, "end_byte": 1826, "start_point": [54, 23], "end_point": [54, 27], "text": "None"}], "start_byte": 1810, "end_byte": 1826, "start_point": [54, 11], "end_point": [54, 27], "text": "            None"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 1827, "end_byte": 1828, "start_point": [54, 28], "end_point": [54, 29], "text": " "}, {"type": "call_expression", "children": [{"type": "identifier", "children": [], "start_byte": 1841, "end_byte": 1845, "start_point": [55, 12], "end_point": [55, 16], "text": "}).c"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 1845, "end_byte": 1846, "start_point": [55, 16], "end_point": [55, 17], "text": "o"}, {"type": "type_cast_expression", "children": [{"type": "identifier", "children": [], "start_byte": 1846, "end_byte": 1847, "start_point": [55, 17], "end_point": [55, 18], "text": "l"}, {"type": "as", "children": [], "start_byte": 1848, "end_byte": 1850, "start_point": [55, 19], "end_point": [55, 21], "text": "ec"}, {"type": "primitive_type", "children": [], "start_byte": 1851, "end_byte": 1853, "start_point": [55, 22], "end_point": [55, 24], "text": "()"}], "start_byte": 1846, "end_byte": 1853, "start_point": [55, 17], "end_point": [55, 24], "text": "llect()"}, {"type": ")", "children": [], "start_byte": 1853, "end_byte": 1854, "start_point": [55, 24], "end_point": [55, 25], "text": ";"}], "start_byte": 1845, "end_byte": 1854, "start_point": [55, 16], "end_point": [55, 25], "text": "ollect();"}], "start_byte": 1841, "end_byte": 1854, "start_point": [55, 12], "end_point": [55, 25], "text": "}).collect();"}, {"type": "}", "children": [], "start_byte": 1863, "end_byte": 1864, "start_point": [56, 8], "end_point": [56, 9], "text": "n"}], "start_byte": 1827, "end_byte": 1864, "start_point": [54, 28], "end_point": [56, 9], "text": "        }\n    }).collect();\n    Strin"}, {"type": "else_clause", "children": [{"type": "else", "children": [], "start_byte": 1865, "end_byte": 1869, "start_point": [56, 10], "end_point": [56, 14], "text": "::fr"}, {"type": "block", "children": [{"type": "{", "children": [], "start_byte": 1870, "end_byte": 1871, "start_point": [56, 15], "end_point": [56, 16], "text": "m"}, {"type": "identifier", "children": [], "start_byte": 1884, "end_byte": 1888, "start_point": [57, 12], "end_point": [57, 16], "text": "byte"}, {"type": "}", "children": [], "start_byte": 1897, "end_byte": 1898, "start_point": [58, 8], "end_point": [58, 9], "text": "n"}], "start_byte": 1870, "end_byte": 1898, "start_point": [56, 15], "end_point": [58, 9], "text": "m_utf8_lossy(&byte_slice).in"}], "start_byte": 1865, "end_byte": 1898, "start_point": [56, 10], "end_point": [58, 9], "text": "::from_utf8_lossy(&byte_slice).in"}], "start_byte": 1807, "end_byte": 1898, "start_point": [54, 8], "end_point": [58, 9], "text": " {\n            None\n        }\n    }).collect();\n    String::from_utf8_lossy(&byte_slice).in"}], "start_byte": 1807, "end_byte": 1898, "start_point": [54, 8], "end_point": [58, 9], "text": " {\n            None\n        }\n    }).collect();\n    String::from_utf8_lossy(&byte_slice).in"}, {"type": "}", "children": [], "start_byte": 1903, "end_byte": 1904, "start_point": [59, 4], "end_point": [59, 5], "text": "n"}], "start_byte": 1797, "end_byte": 1904, "start_point": [53, 57], "end_point": [59, 5], "text": "    } else {\n            None\n        }\n    }).collect();\n    String::from_utf8_lossy(&byte_slice).into_own"}], "start_byte": 1792, "end_byte": 1904, "start_point": [53, 52], "end_point": [59, 5], "text": "\n        } else {\n            None\n        }\n    }).collect();\n    String::from_utf8_lossy(&byte_slice).into_own"}, {"type": ")", "children": [], "start_byte": 1904, "end_byte": 1905, "start_point": [59, 5], "end_point": [59, 6], "text": "e"}], "start_byte": 1791, "end_byte": 1905, "start_point": [53, 51], "end_point": [59, 6], "text": ")\n        } else {\n            None\n        }\n    }).collect();\n    String::from_utf8_lossy(&byte_slice).into_owne"}], "start_byte": 1770, "end_byte": 1905, "start_point": [53, 30], "end_point": [59, 6], "text": "         Some(c as u8)\n        } else {\n            None\n        }\n    }).collect();\n    String::from_utf8_lossy(&byte_slice).into_owne"}, {"type": ".", "children": [], "start_byte": 1905, "end_byte": 1906, "start_point": [59, 6], "end_point": [59, 7], "text": "d"}, {"type": "field_identifier", "children": [], "start_byte": 1906, "end_byte": 1913, "start_point": [59, 7], "end_point": [59, 14], "text": "()\n}\n"}], "start_byte": 1770, "end_byte": 1913, "start_point": [53, 30], "end_point": [59, 14], "text": "         Some(c as u8)\n        } else {\n            None\n        }\n    }).collect();\n    String::from_utf8_lossy(&byte_slice).into_owned()\n}\n"}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 1913, "end_byte": 1914, "start_point": [59, 14], "end_point": [59, 15], "text": ""}, {"type": ")", "children": [], "start_byte": 1914, "end_byte": 1915, "start_point": [59, 15], "end_point": [59, 16], "text": ""}], "start_byte": 1913, "end_byte": 1915, "start_point": [59, 14], "end_point": [59, 16], "text": ""}], "start_byte": 1770, "end_byte": 1915, "start_point": [53, 30], "end_point": [59, 16], "text": "         Some(c as u8)\n        } else {\n            None\n        }\n    }).collect();\n    String::from_utf8_lossy(&byte_slice).into_owned()\n}\n"}, {"type": ";", "children": [], "start_byte": 1915, "end_byte": 1916, "start_point": [59, 16], "end_point": [59, 17], "text": ""}], "start_byte": 1744, "end_byte": 1916, "start_point": [53, 4], "end_point": [59, 17], "text": " if c as u32 <= 0x7F {\n            Some(c as u8)\n        } else {\n            None\n        }\n    }).collect();\n    String::from_utf8_lossy(&byte_slice).into_owned()\n}\n"}, {"type": "call_expression", "children": [{"type": "field_expression", "children": [{"type": "call_expression", "children": [{"type": "scoped_identifier", "children": [{"type": "identifier", "children": [], "start_byte": 1921, "end_byte": 1927, "start_point": [60, 4], "end_point": [60, 10], "text": ""}, {"type": "::", "children": [], "start_byte": 1927, "end_byte": 1929, "start_point": [60, 10], "end_point": [60, 12], "text": ""}, {"type": "identifier", "children": [], "start_byte": 1929, "end_byte": 1944, "start_point": [60, 12], "end_point": [60, 27], "text": ""}], "start_byte": 1921, "end_byte": 1944, "start_point": [60, 4], "end_point": [60, 27], "text": ""}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 1944, "end_byte": 1945, "start_point": [60, 27], "end_point": [60, 28], "text": ""}, {"type": "reference_expression", "children": [{"type": "&", "children": [], "start_byte": 1945, "end_byte": 1946, "start_point": [60, 28], "end_point": [60, 29], "text": ""}, {"type": "identifier", "children": [], "start_byte": 1946, "end_byte": 1956, "start_point": [60, 29], "end_point": [60, 39], "text": ""}], "start_byte": 1945, "end_byte": 1956, "start_point": [60, 28], "end_point": [60, 39], "text": ""}, {"type": ")", "children": [], "start_byte": 1956, "end_byte": 1957, "start_point": [60, 39], "end_point": [60, 40], "text": ""}], "start_byte": 1944, "end_byte": 1957, "start_point": [60, 27], "end_point": [60, 40], "text": ""}], "start_byte": 1921, "end_byte": 1957, "start_point": [60, 4], "end_point": [60, 40], "text": ""}, {"type": ".", "children": [], "start_byte": 1957, "end_byte": 1958, "start_point": [60, 40], "end_point": [60, 41], "text": ""}, {"type": "field_identifier", "children": [], "start_byte": 1958, "end_byte": 1968, "start_point": [60, 41], "end_point": [60, 51], "text": ""}], "start_byte": 1921, "end_byte": 1968, "start_point": [60, 4], "end_point": [60, 51], "text": ""}, {"type": "arguments", "children": [{"type": "(", "children": [], "start_byte": 1968, "end_byte": 1969, "start_point": [60, 51], "end_point": [60, 52], "text": ""}, {"type": ")", "children": [], "start_byte": 1969, "end_byte": 1970, "start_point": [60, 52], "end_point": [60, 53], "text": ""}], "start_byte": 1968, "end_byte": 1970, "start_point": [60, 51], "end_point": [60, 53], "text": ""}], "start_byte": 1921, "end_byte": 1970, "start_point": [60, 4], "end_point": [60, 53], "text": ""}, {"type": "}", "children": [], "start_byte": 1971, "end_byte": 1972, "start_point": [61, 0], "end_point": [61, 1], "text": ""}], "start_byte": 1738, "end_byte": 1972, "start_point": [52, 58], "end_point": [61, 1], "text": "       if c as u32 <= 0x7F {\n            Some(c as u8)\n        } else {\n            None\n        }\n    }).collect();\n    String::from_utf8_lossy(&byte_slice).into_owned()\n}\n"}], "start_byte": 1680, "end_byte": 1972, "start_point": [52, 0], "end_point": [61, 1], "text": "  let byte_slice: Vec<u8> = arr.iter().filter_map(|&c| {\n        if c as u32 <= 0x7F {\n            Some(c as u8)\n        } else {\n            None\n        }\n    }).collect();\n    String::from_utf8_lossy(&byte_slice).into_owned()\n}\n"}], "start_byte": 0, "end_byte": 1973, "start_point": [0, 0], "end_point": [62, 0], "text": "// use crate::global_vars::bzip2_c5::{noisy};\n\n\n// cadvise ( void )\n\n// \u5047\u8bbe Int32 \u548c Bool \u7684\u5b9a\u4e49\u5982\u4e0b:\ntype Int32 = i32;\ntype Bool = bool;\ntype Char = char; // \u5047\u8bbe Char \u662f char\uff0c\u4f46\u53ef\u80fd\u9700\u8981\u6839\u636e\u4e0a\u4e0b\u6587\u8fdb\u4e00\u6b65\u786e\u8ba4\nuse crate::global_vars::bzip2_c5::*;\nuse crate::global_vars::bzip2_c1::*;\n// \u5168\u5c40\u53d8\u91cf\n// static mut VERBOSITY: Int32 = 0;\n// static mut KEEP_INPUT_FILES: Bool = false;\n// static mut SMALL_MODE: Bool = false;\n// static mut DELETE_OUTPUT_ON_INTERRUPT: Bool = false;\n// static mut FORCE_OVERWRITE: Bool = false;\n// static mut TEST_FAILS_EXIST: Bool = false;\n// static mut UNZ_FAILS_EXIST: Bool = false;\n// static mut NOISY: Bool = false;\n// static mut NUM_FILES_PROCESSED: Int32 = 0;\n// static mut BLOCK_SIZE_100K: Int32 = 0;\n// static mut EXIT_VALUE: Int32 = 0;\n// static mut OP_MODE: Int32 = 0;\n// static mut SRC_MODE: Int32 = 0;\n\n// static mut IN_NAME: [Char; 1034] = ['\\0'; 1034]; \n// static mut OUT_NAME: [Char; 1034] = ['\\0'; 1034]; \n\npub fn cadvise() {\n    unsafe {\n        if NOISY {\n            eprintln!(\"\\nIt is possible that the compressed file(s) have become corrupted.\\nYou can use the -tvv option to test integrity of such files.\\n\\nYou can use the `bzip2recover' program to attempt to recover\\ndata from undamaged sections of corrupted files.\\n\\n\");\n        }\n    }\n}\n\npub fn show_file_names() {\n    unsafe {\n        if NOISY {\n            eprintln!(\"\\tInput file = {:?}, output file = {:?}\", \n                      u8_array_to_string(&IN_NAME), \n                      u8_array_to_string(&OUT_NAME));\n        }\n    }\n}\n\npub fn u8_array_to_string(arr: &[u8; 1034]) -> String {\n    String::from_utf8_lossy(arr).into_owned()\n}\n\n\npub fn char_array_to_string(arr: &[Char; 1034]) -> String {\n    let byte_slice: Vec<u8> = arr.iter().filter_map(|&c| {\n        if c as u32 <= 0x7F {\n            Some(c as u8)\n        } else {\n            None\n        }\n    }).collect();\n    String::from_utf8_lossy(&byte_slice).into_owned()\n}\n"}